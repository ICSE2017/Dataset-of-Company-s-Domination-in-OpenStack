-- MySQL dump 10.13  Distrib 5.7.12, for osx10.9 (x86_64)
--
-- Host: 127.0.0.1    Database: swift
-- ------------------------------------------------------
-- Server version	5.7.12

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `scmlog`
--

DROP TABLE IF EXISTS `scmlog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `scmlog` (
  `id` int(11) NOT NULL,
  `committer_id` int(11) DEFAULT NULL,
  `author_id` int(11) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `author_date` datetime DEFAULT NULL,
  `message` longtext CHARACTER SET utf8 NOT NULL,
  `added` int(11) DEFAULT NULL,
  `removed` int(11) DEFAULT NULL,
  `company` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `scmlog`
--

LOCK TABLES `scmlog` WRITE;
/*!40000 ALTER TABLE `scmlog` DISABLE KEYS */;
INSERT INTO `scmlog` VALUES (271338,4533,4533,'2010-07-12 17:03:45','2010-07-12 17:03:45','    Initial commit of Swift code\n',30061,0,'Rackspace'),(271339,198,198,'2010-07-12 17:35:06','2010-07-12 17:35:06','    fixed comma in setup.py\n',1,1,'Rackspace'),(271340,198,198,'2010-07-13 10:00:49','2010-07-13 10:00:49','    clarified IRC info in AUTHORS file\n',1,1,'Rackspace'),(271341,206,206,'2010-07-13 14:23:39','2010-07-13 14:23:39','    Make unit tests not require /etc/swift/*.ring.gz files\n',16,16,'Rackspace'),(271342,206,206,'2010-07-13 15:04:12','2010-07-13 15:04:12','    Make xfs-based tests optional\n',82,24,'Rackspace'),(271343,4533,4533,'2010-07-13 22:24:47','2010-07-13 22:24:47','    Updated Swift All in One\n',29,11,'Rackspace'),(271344,206,206,'2010-07-14 08:11:57','2010-07-14 08:11:57','    Bug fixes in docs; howto build docs in docs\n',8,2,'Rackspace'),(271345,206,206,'2010-07-14 08:16:00','2010-07-14 08:16:00','    Fix typo\n',1,1,'Rackspace'),(271346,1,1,'2010-07-12 18:48:07','2010-07-12 18:48:07','    Changed to an upstream/packaging setup instead of a native package setup.\n',1,1,'Rackspace'),(271347,1,1,'2010-07-12 18:48:53','2010-07-12 18:48:53','    Removed debian dir from the tree so we can re-add it using import-dsc.\n',0,603,'Rackspace'),(271348,1,197,'2010-07-08 01:37:44','2010-07-08 01:37:44','    Import upstream version 1.0.0\n',9069,0,'Rackspace'),(271350,1,1,'2010-07-12 18:51:34','2010-07-12 18:51:34','    Re-added files import-dsc didn\'t know about.\n',2,0,'Rackspace'),(271352,1,1,'2010-07-13 16:11:42','2010-07-13 16:11:42','    Updated to debhelper 7 and better depends.\n',49,45,'Rackspace'),(271353,1,1,'2010-07-13 16:11:54','2010-07-13 16:11:54','    Put in (and then comment out) hooks to run unittests via setup.py.\n',5,2,'Rackspace'),(271356,1,1,'2010-07-14 09:46:14','2010-07-14 09:46:14','    Added support for building docs from setup.py.\n',14,2,'Rackspace'),(271357,1,1,'2010-07-14 11:40:32','2010-07-14 11:40:32','    Removed PKG-INFO from the tree.\n',0,15,'Rackspace'),(271359,4533,4533,'2010-07-14 14:13:45','2010-07-14 14:13:45','    Adding Monty Taylor to AUTHORS\n',1,0,'Rackspace'),(271360,1,1,'2010-07-14 09:58:38','2010-07-14 09:58:38','    Renamed bin files in the tree so that setup.py install does the same thing\n    as a deb install.\n',4683,4683,'Rackspace'),(271361,1,1,'2010-07-14 10:09:51','2010-07-14 10:09:51','    Moved things to use .install files.\n',35,93,'Rackspace'),(271362,1,1,'2010-07-14 10:15:25','2010-07-14 10:15:25','    Moved sample conf file install into docs rather than directly into etc.\n',11,11,'Rackspace'),(271363,1,1,'2010-07-14 10:37:56','2010-07-14 10:37:56','    Added sphinx documentation to a sphinx-doc package.\n',22,0,'Rackspace'),(271364,1,1,'2010-07-14 10:41:38','2010-07-14 10:41:38','    Added docs to doc system.\n',5,1,'Rackspace'),(271366,206,206,'2010-07-14 12:59:31','2010-07-14 12:59:31','    SAIO doc update for the bin/*.py->bin/* change\n',1,1,'Rackspace'),(271367,206,206,'2010-07-14 15:11:08','2010-07-14 15:11:08','    Allow specifying the proxy\'s auth class.\n',17,6,'Rackspace'),(271368,4533,4533,'2010-07-14 16:56:03','2010-07-14 16:56:03','    Updated saio to reflect setup.py changes\n',1,7,'Rackspace'),(271369,4533,4533,'2010-07-14 17:05:50','2010-07-14 17:05:50','    User login doesn\'t really need to be the same as the lp id in the SAIO\n',1,2,'Rackspace'),(271371,4533,4533,'2010-07-15 10:09:47','2010-07-15 10:09:47','    Changed README to build docs via setup.py and changed saio to run setup.py\n    with sudo.\n',2,2,'Rackspace'),(271372,197,197,'2010-07-15 14:44:45','2010-07-15 14:44:45','    Make swift-init pay attention to $PATH\n',2,2,'Rackspace'),(271374,4533,4533,'2010-07-15 10:27:19','2010-07-15 10:27:19','    Updated SAIO to init the repo before branching the code\n',4,3,'Rackspace'),(271375,1,1,'2010-07-14 14:37:17','2010-07-14 14:37:17','    Add reference to using PPA to get depends.\n',3,5,'Rackspace'),(271377,1,1,'2010-07-16 00:47:58','2010-07-16 00:47:58','    Fixed the doc- build-dep swift doesn\'t _quite_ work yet. We\'ll get there\n    though.\n',4,1,'Rackspace'),(271379,4533,4533,'2010-07-16 09:24:56','2010-07-16 09:24:56','    Update SAIO doc to point to lp:swift\n',1,1,'Rackspace'),(271380,4533,4533,'2010-07-16 09:30:50','2010-07-16 09:30:50','    Update .bzrignore to ignore the docs/build directory\n',1,0,'Rackspace'),(271382,198,198,'2010-07-18 18:19:48','2010-07-18 18:19:48','    fixed a few typos in the saio docs\n',7,7,'Rackspace'),(271384,1,1,'2010-07-18 23:44:19','2010-07-18 23:44:19','    Bumped version number post 1.0.0 release.\n',2,2,'Rackspace'),(271386,4533,4533,'2010-07-19 03:00:28','2010-07-19 03:00:28','    Modified probe tests to work with setup.py develop installs\n    Updated SAIO instructions to note that probe tests will reset your environment\n    Added the swift.egg-info directory to .bzrignore\n',31,30,'Rackspace'),(271387,4533,4533,'2010-07-19 01:21:43','2010-07-19 01:21:43','    Updated setup.py so that the test directory would be correctly ignored when installing\n',1,1,'Rackspace'),(271389,1,1,'2010-07-19 08:43:09','2010-07-19 08:43:09','    Includes a manifest file which knows how to bring along doc and etc.\n',4,0,'Rackspace'),(271391,197,197,'2010-07-19 11:54:11','2010-07-19 11:54:11','    proxy return 500 on unhandled exceptions\n',19,3,'Rackspace'),(271393,1,1,'2010-07-19 11:22:40','2010-07-19 11:22:40','    Import upstream version 1.0.1\n',21993,4598,'Rackspace'),(271395,1,1,'2010-07-19 11:50:32','2010-07-19 11:50:32','    Bump tree version post-release.\n',3,3,'Rackspace'),(271397,1,1,'2010-07-19 14:46:05','2010-07-19 14:46:05','    Added support for Quilt source format.\n',1,0,'Rackspace'),(271398,1,1,'2010-07-19 14:56:54','2010-07-19 14:56:54','    Add files which were not in the tarball.\n',15,2,'Rackspace'),(271399,1,1,'2010-07-19 14:59:47','2010-07-19 14:59:47','    Added debian/watch file.\n',3,0,'Rackspace'),(271400,1,1,'2010-07-19 15:07:16','2010-07-19 15:07:16','    Added python-sphinx to build-deps so that ppa builder doesn\'t die.\n',2,1,'Rackspace'),(271402,197,197,'2010-07-19 21:19:37','2010-07-19 21:19:37','    fix for response code for unhandled exception unit test\n',1,1,'Rackspace'),(271404,5563,5563,'2010-07-19 09:37:07','2010-07-19 09:37:07','    updated install_requires in setup.py\n',6,0,'Rackspace'),(271405,5563,5563,'2010-07-19 10:21:00','2010-07-19 10:21:00','    updated install_requires with version info\n',4,4,'Rackspace'),(271407,5563,5563,'2010-07-19 12:31:54','2010-07-19 12:31:54','    changed version of eventlet in install requires to match python-eventlet\n',1,1,'Rackspace'),(271408,5563,5563,'2010-07-19 15:40:57','2010-07-19 15:40:57','    refactored swift-init.do_start to handle missing config files\n',40,31,'Rackspace'),(271411,5564,5564,'2010-07-19 16:17:15','2010-07-19 16:17:15','    debian packaging updates\n',30,228,'independent'),(271413,5563,5563,'2010-07-19 17:17:03','2010-07-19 17:17:03','    removed isntall_requires from setup.py\n',1,6,'Rackspace'),(271415,5563,5563,'2010-07-19 17:28:24','2010-07-19 17:28:24','    fixed typo in swift-init\n',1,1,'Rackspace'),(271418,4533,4533,'2010-07-20 11:05:10','2010-07-20 11:05:10','    Added getting started documentation and architectural overview\n',186,0,'Rackspace'),(271419,4533,4533,'2010-07-20 11:08:06','2010-07-20 11:08:06','    Fixed typo\n',1,1,'Rackspace'),(271420,4533,4533,'2010-07-20 11:17:36','2010-07-20 11:17:36','    another typo\n',1,1,'Rackspace'),(271422,198,198,'2010-07-21 12:55:16','2010-07-21 12:55:16','    fixed typo in architecture docs\n',1,1,'Rackspace'),(271424,1,1,'2010-07-22 07:02:38','2010-07-22 07:02:38','    Added last missing file to MANFEST.in.\n',1,1,'Rackspace'),(271425,1,1,'2010-07-22 07:08:50','2010-07-22 07:08:50','    Fixed egg-info for PyPI\n',3,1,'Rackspace'),(271427,4533,4533,'2010-07-22 10:04:02','2010-07-22 10:04:02','    Removed tests for behavior that doesn\'t exist any more\n',0,9,'Rackspace'),(271429,1,1,'2010-07-22 10:29:04','2010-07-22 10:29:04','    Removed all of the tarball and debian stuff from the tree.\n',0,564,'Rackspace'),(271431,5565,5565,'2010-07-22 08:33:58','2010-07-22 08:33:58','    Clarifying docs for The Ring, and add link to more detailed ring docs.\n',22,11,'independent'),(271432,5565,5565,'2010-07-23 10:51:24','2010-07-23 10:51:24','    Moved proxy server section to top, and encompassed suggested changes from cthier\n',35,29,'independent'),(271433,5565,5565,'2010-07-23 11:47:13','2010-07-23 11:47:13','    Removed links that jumped from overview straight to module source docs.\n',2,10,'independent'),(271434,5565,5565,'2010-07-23 12:05:14','2010-07-23 12:05:14','    Made spacing after period consistent throughout, removed a couple of spurious commas\n',24,24,'independent'),(271436,4533,4533,'2010-07-23 17:15:29','2010-07-23 17:15:29','    Added first cut of the deployment guide, and updated auth overview to better\n    represent the current code\n',484,23,'Rackspace'),(271438,1,1,'2010-07-24 18:03:56','2010-07-24 18:03:56','    Updated sphinx config to match the config from Nova.\n',20,119,'Rackspace'),(271440,1,1,'2010-07-25 09:15:40','2010-07-25 09:15:40','    Fixed all of the PEP8 warnings.\n',102,56,'Rackspace'),(271442,1,1,'2010-07-26 08:18:32','2010-07-26 08:18:32','    Removed needless continuation markers.\n',4,4,'Rackspace'),(271445,1,1,'2010-07-28 14:17:22','2010-07-28 14:17:22','    Added code to generate a ChangeLog file from bzr on sdist.\n',19,0,'Rackspace'),(271446,1,1,'2010-07-28 14:25:25','2010-07-28 14:25:25','    Added ChangeLog to .bzrignore.\n',1,0,'Rackspace'),(271447,1,1,'2010-07-28 16:02:51','2010-07-28 16:02:51','    Fixed pep8 issues.\n',10,9,'Rackspace'),(271449,197,197,'2010-07-28 23:32:40','2010-07-28 23:32:40','    No-op fallocate and fadvise when they aren\'t available.\n',10,2,'Rackspace'),(271450,197,197,'2010-07-29 00:44:21','2010-07-29 00:44:21','    Improved fallocate and posix_fadvise no-ops when unavailable.\n',32,15,'Rackspace'),(271451,197,197,'2010-07-29 01:40:13','2010-07-29 01:40:13','    Change prints to logging.warn()s\n',4,2,'Rackspace'),(271454,5246,5246,'2010-07-29 13:30:16','2010-07-29 13:30:16','    moved LIMIT_LISTING const to swift.common.constraints, added test.unit.MockTrue, 100% test coverage on swift.common.constraints\n',62,11,'Rackspace'),(271455,5246,5246,'2010-07-29 13:31:27','2010-07-29 13:31:27','    typo\n',1,1,'Rackspace'),(271456,206,206,'2010-07-29 08:16:45','2010-07-29 08:16:45','    Updated docs for client.py\n',24,18,'Rackspace'),(271459,5246,5246,'2010-07-29 15:06:01','2010-07-29 15:06:01','    removed extra assignment\n',2,4,'Rackspace'),(271461,4533,4533,'2010-07-30 14:57:20','2010-07-30 14:57:20','    Added initial admin guide, and added more to the deployment guide, plus\n    cleaned up some of the doc string warning\n',261,14,'Rackspace'),(271462,4533,4533,'2010-07-30 15:05:06','2010-07-30 15:05:06','    Fixed conflict with .bzrignore\n',2,0,'Rackspace'),(271464,4533,4533,'2010-07-30 16:47:12','2010-07-30 16:47:12','    fixed typo\n',1,1,'Rackspace'),(271466,5566,5566,'2010-07-30 08:20:07','2010-07-30 08:20:07','    pyflakes cleanups, unused modules, and variables\n',28,60,'independent'),(271468,206,206,'2010-08-09 13:10:05','2010-08-09 13:10:05','    Fix how bytes transferred are logged\n',159,32,'Rackspace'),(271470,206,206,'2010-08-10 12:18:15','2010-08-10 12:18:15','    Added metadata to account and container servers\n',718,62,'Rackspace'),(271471,206,206,'2010-08-11 13:35:30','2010-08-11 13:35:30','    Reduce transactions where possible with reclamations\n',39,22,'Rackspace'),(271473,4652,4652,'2010-08-13 11:19:43','2010-08-13 11:19:43','    Fixed a few typos in the deployment guide (s/ring_builder/ring-builder/g)\n',16,16,'Rackspace'),(271475,206,206,'2010-08-14 09:46:32','2010-08-14 09:46:32','    Cyberduck Support and How To\n',177,12,'Rackspace'),(271476,206,206,'2010-08-14 09:54:31','2010-08-14 09:54:31','    Fixed typo\n',1,1,'Rackspace'),(271478,206,206,'2010-08-16 15:30:27','2010-08-16 15:30:27','    Expose account/container metadata facility to external API\n',399,31,'Rackspace'),(271480,206,206,'2010-08-16 19:06:28','2010-08-16 19:06:28','    Func tests for account/container metadata\n',1,0,'Rackspace'),(271482,206,206,'2010-08-16 19:11:19','2010-08-16 19:11:19','    Argh. Forgot the tests themselves!\n',532,0,'Rackspace'),(271484,206,206,'2010-08-17 12:36:49','2010-08-17 12:36:49','    Cluster health monitoring docs\n',94,2,'Rackspace'),(271486,5567,5567,'2010-08-18 19:18:31','2010-08-18 19:18:31','    Added howto doc about Debian packaging\n',144,0,'independent'),(271488,193,193,'2010-08-19 22:01:44','2010-08-19 22:01:44','    Make swift-init support force-reload (required by Debian Policy)\n',1,1,'Cisco Systems'),(271490,5568,5568,'2010-08-20 20:02:58','2010-08-20 20:02:58','    Added ubuntu mirrors and server iso to SAIO\n',6,2,'Cloudscaling'),(271492,5246,5246,'2010-08-19 11:54:55','2010-08-19 11:54:55','    make it easier for subclasses of swift.common.client.Connection to override the behavior of reauthorization (get_auth)\n',4,3,'Rackspace'),(271493,5246,5246,'2010-08-19 14:27:10','2010-08-19 14:27:10','    added some tests for swift.common.client, coverage from 11% => ~66%\n',255,5,'Rackspace'),(271494,5246,5246,'2010-08-19 17:09:20','2010-08-19 17:09:20','    found a error condition in swift.common.client where the resp would not be consumed, added tests and fixed\n',71,0,'Rackspace'),(271497,5569,5569,'2010-08-20 21:29:12','2010-08-20 21:29:12','    We can still do a write_ring even if nothing is present.  Better than crashing anyway.\n',6,3,'independent'),(271498,5569,5569,'2010-08-21 18:21:59','2010-08-21 18:21:59','    Remove the exception from the unit test, since we don\'t bomb out anymore.  Also, add a warning to swift-ring-builder if you\'re building an empty ring, or do a write_ring and you aren\'t rebalanced\n',8,3,'independent'),(271500,197,197,'2010-08-22 22:17:57','2010-08-22 22:17:57','    remove object replicator hard-coded replica count\n',3,4,'Rackspace'),(271502,4533,4533,'2010-08-20 00:42:38','2010-08-20 00:42:38','    Initial commit of middleware refactor\n',815,783,'Rackspace'),(271504,4533,4533,'2010-08-20 02:19:50','2010-08-20 02:19:50','    Updated docs (including SAIO) to refelct the paste.deploy config changes\n',233,43,'Rackspace'),(271505,4533,4533,'2010-08-20 15:28:02','2010-08-20 15:28:02','    Fixed a couple of typos, and some config things I missed in the object-replicator\n',5,5,'Rackspace'),(271506,4533,4533,'2010-08-19 21:28:24','2010-08-19 21:28:24','    Fixed a couple of doc typos\n',4,4,'Rackspace'),(271508,4533,4533,'2010-08-24 13:41:58','2010-08-24 13:41:58','    Refactored logging configuration so that it has sane defaults\n',254,304,'Rackspace'),(271509,4533,4533,'2010-08-24 13:51:36','2010-08-24 13:51:36','    Fixed doc typos and pep 8 cleanup on setup.py\n',13,13,'Rackspace'),(271510,4533,4533,'2010-08-24 13:58:32','2010-08-24 13:58:32','    Renamed the cache middleware to memcache middleware\n',80,80,'Rackspace'),(271511,4533,4533,'2010-08-24 14:04:44','2010-08-24 14:04:44','    Changed default port of proxy and auth to be 8080, and cleaned up exits\n',7,7,'Rackspace'),(271512,4533,4533,'2010-08-24 14:08:16','2010-08-24 14:08:16','    Changed default cluster url to point to new default proxy port of 8080,\n    and set auth default port back to 11000\n',3,4,'Rackspace'),(271513,4533,4533,'2010-08-24 14:10:36','2010-08-24 14:10:36','    Added vm_test_mode to the sample configs\n',3,0,'Rackspace'),(271514,4533,4533,'2010-08-24 14:23:49','2010-08-24 14:23:49','    Updated SAIO to be in line with the logging refactor\n',0,50,'Rackspace'),(271515,4533,4533,'2010-08-24 14:38:36','2010-08-24 14:38:36','    Fixed proxy server config for saio\n',2,2,'Rackspace'),(271516,4533,4533,'2010-08-24 14:40:36','2010-08-24 14:40:36','    Fixed memcache middleware config for proxy\n',1,1,'Rackspace'),(271517,4533,4533,'2010-08-24 14:55:20','2010-08-24 14:55:20','    Fixed container-updater to correctly load conf\n',1,1,'Rackspace'),(271519,4533,4533,'2010-08-24 18:48:00','2010-08-24 18:48:00','    Cleaned up a couple of doc strings in proxy.server\n',2,2,'Rackspace'),(271521,206,206,'2010-08-26 09:03:08','2010-08-26 09:03:08','    Fixed threading bug in test\n',19,7,'Rackspace'),(271523,5246,5246,'2010-08-30 09:04:39','2010-08-30 09:04:39','    added python-pastedeploy required for the middleware refactor\n',1,1,'Rackspace'),(271525,4533,4533,'2010-08-31 23:12:59','2010-08-31 23:12:59','    refactored bins to by more DRY\n',228,307,'Rackspace'),(271526,4533,4533,'2010-09-01 15:56:37','2010-09-01 15:56:37','    oops\n',5,5,'Rackspace'),(271528,198,198,'2010-09-02 09:58:30','2010-09-02 09:58:30','    pass through the timeout for calls to lock_parent_directory\n',1,1,'Rackspace'),(271530,206,206,'2010-09-02 21:50:16','2010-09-02 21:50:16','    Refactored auth and adding ACLs using repoze.what\n',1089,371,'Rackspace'),(271531,5570,5570,'2010-09-01 21:42:24','2010-09-01 21:42:24','    fix some typos in the docs\n',7,7,'independent'),(271535,5246,5246,'2010-09-03 10:17:55','2010-09-03 10:17:55','    updated skipped tests in test.unit.obj.test_server to raise nose.SkipTest\n',26,19,'Rackspace'),(271539,206,206,'2010-09-03 17:54:30','2010-09-03 17:54:30','    Removed nosetests from setup.cfg as it causes coverage to be done with functtests and probetests, where it doesn\'t make much sense\n',0,5,'Rackspace'),(271540,206,206,'2010-09-03 20:47:43','2010-09-03 20:47:43','    Simply auth middleware and document how to make your own\n',726,287,'Rackspace'),(271541,206,206,'2010-09-03 21:39:44','2010-09-03 21:39:44','    Updated tools and client.py to work with ACLs\n',610,288,'Rackspace'),(271542,206,206,'2010-09-03 22:33:41','2010-09-03 22:33:41','    Documentation of the new auth and acls middleware modules and bugfixes\n',124,22,'Rackspace'),(271543,206,206,'2010-09-05 19:21:08','2010-09-05 19:21:08','    Per Chuck\'s suggestion, changed noaccess to admin access, where admin access is not the default. Also, changed swift-auth-create-account to swift-auth-add-user with changes to use optparse\n',110,108,'Rackspace'),(271544,206,206,'2010-09-05 19:53:08','2010-09-05 19:53:08','    Fixed typos; bug fix in auth db upgrade; renamed a couple things to better reflect their new usage; updated docs\n',86,89,'Rackspace'),(271545,206,206,'2010-09-05 20:30:09','2010-09-05 20:30:09','    Doc fixes and updates\n',28,19,'Rackspace'),(271546,206,206,'2010-09-05 21:06:16','2010-09-05 21:06:16','    Updated direct_client to match the changes in client\n',55,55,'Rackspace'),(271547,206,206,'2010-09-06 13:26:31','2010-09-06 13:26:31','    Referrers now support user:pass part of URLs; rest of tests for what has changed\n',466,89,'Rackspace'),(271548,206,206,'2010-09-08 22:37:27','2010-09-08 22:37:27','    For ACL strings: Shortened .ref to just .r, though .ref, .referer, and .referrer are all accepted. Updated \'Creating Your Own Auth Middleware\' to describe how the DevAuth server works and suggestions for creating one\'s own. Added reseller_prefix (optional) implementation. Used urlparse in referrer_allowed. Fixed bug where group names would get lowercased by clean_acl. Changed .r:any to .r:*. Allowed .r:*.example.com to mean .r:.example.com. Made proxy log just the first authenticated group (the user) alongside the token. Moved proxy callback to clean_acl before the length check of the metadata. Cleaned up redundant logic in first proxy swift.authorize callback. Bit better docs. More and updated tests.\n',209,134,'Rackspace'),(271549,206,206,'2010-09-09 10:24:25','2010-09-09 10:24:25','    Got rid of inter-reseller ACLs. Enforce ACLs to only work within a reseller space. Updated docs and tests. We can expand to inter-reseller in the future with ACLs like .x:RESELLER_group\n',71,72,'Rackspace'),(271550,206,206,'2010-09-09 10:28:50','2010-09-09 10:28:50','    Updated included client.py in st\n',2,10,'Rackspace'),(271551,206,206,'2010-09-09 10:42:41','2010-09-09 10:42:41','    Fix bug on auto-container create during upload.\n',7,0,'Rackspace'),(271552,206,206,'2010-09-10 07:52:10','2010-09-10 07:52:10','    Proof that test \"coverage\" != no obvious bugs\n',5,4,'Rackspace'),(271554,5567,5567,'2010-09-14 06:51:20','2010-09-14 06:51:20','    Adds HandOff locations to the various displays\n',64,13,'independent'),(271556,206,206,'2010-09-10 13:40:43','2010-09-10 13:40:43','    DevAuth support for reseller admins and an initial super admin. DevAuth server no longer needs the account ring or direct account server access. Proxy server supports account PUTs.\n',284,168,'Rackspace'),(271557,206,206,'2010-09-11 17:03:09','2010-09-11 17:03:09','    Bugfixes. Rest of tests.\n',502,72,'Rackspace'),(271558,206,206,'2010-09-11 17:23:24','2010-09-11 17:23:24','    Updated docs.\n',37,13,'Rackspace'),(271560,206,206,'2010-09-15 13:11:06','2010-09-15 13:11:06','    auth-server: Change 400 to 409 when trying to add an existing user\n',8,3,'Rackspace'),(271562,206,206,'2010-09-15 18:44:54','2010-09-15 18:44:54','    Notify if reseller_prefix does not match what is in auth.db\n',94,2,'Rackspace'),(271563,206,206,'2010-09-15 19:07:35','2010-09-15 19:07:35','    Made auth.db upgrade message a bit more clear.\n',10,8,'Rackspace'),(271565,206,206,'2010-09-15 20:52:54','2010-09-15 20:52:54','    Just a bit of PEP8ing\n',28,15,'Rackspace'),(271567,5567,5567,'2010-09-15 19:28:57','2010-09-15 19:28:57','    Clean up code that was requested\n',51,100,'independent'),(271568,5567,5567,'2010-09-16 13:54:17','2010-09-16 13:54:17','    Fixed pep8 errors, dir error in the listing, made dryer\n',47,42,'independent'),(271570,5567,5567,'2010-09-17 15:54:05','2010-09-17 15:54:05','    corrected dir order and spelling errors in ls section\n',5,5,'independent'),(271572,206,206,'2010-09-15 14:26:53','2010-09-15 14:26:53','    devauth-middleware will not set its authorize func unless the token or account starts with the reseller prefix; if its not going to use its authorize func, it will set a deny-by-default func if one is not set already\n',62,20,'Rackspace'),(271574,206,206,'2010-09-16 11:14:09','2010-09-16 11:14:09','    Update to better support no-reseller-prefix and multiple auth middleware\n',61,4,'Rackspace'),(271575,5246,5246,'2010-09-16 16:44:44','2010-09-16 16:44:44','    trying to make sense of auth middleware and reseller prefix\n',70,53,'Rackspace'),(271576,5246,5246,'2010-09-17 11:03:07','2010-09-17 11:03:07','    after I was sure all cases were covered, I rearranged code to be more like greg\'s; added comments, and tests\n',91,54,'Rackspace'),(271578,206,206,'2010-09-17 11:26:30','2010-09-17 11:26:30','    More doc updates, little refactoring too\n',53,41,'Rackspace'),(271580,2394,2394,'2010-09-21 10:56:41','2010-09-21 10:56:41','    Corrects a typo in the Getting Started page\n',1,1,'Rackspace'),(271582,197,197,'2010-09-22 19:34:52','2010-09-22 19:34:52','    Make check_xml_encodable to only validate utf-8 correctness\n',14,13,'Rackspace'),(271583,197,197,'2010-09-22 19:53:38','2010-09-22 19:53:38','    unused code\n',0,5,'Rackspace'),(271585,206,206,'2010-09-22 13:07:15','2010-09-22 13:07:15','    Fixed bug where the object auditor hadn\'t been calling invalidate_hash\n',2,0,'Rackspace'),(271587,4533,4533,'2010-09-21 20:31:14','2010-09-21 20:31:14','    Updated object updater to keep track of successes so it doesn\'t retry updating nodes that it has already updated\n',21,8,'Rackspace'),(271588,4533,4533,'2010-09-23 16:09:30','2010-09-23 16:09:30','    Refactored to correctly write the pickle to disk\n',59,14,'Rackspace'),(271590,198,198,'2010-09-24 09:51:00','2010-09-24 09:51:00','    fixed COPY bug and adds tests so it won\'t happend again\n',144,3,'Rackspace'),(271592,4533,4533,'2010-09-30 10:35:10','2010-09-30 10:35:10','    Updated saio with instructions for using a loopback device\n',21,4,'Rackspace'),(271593,4533,4533,'2010-09-30 10:47:57','2010-09-30 10:47:57','    Changed rsync on saio to only listen on localhost\n',1,1,'Rackspace'),(271594,4533,4533,'2010-09-30 11:18:37','2010-09-30 11:18:37','    Updated to be a bit more generic about the VM\n',4,18,'Rackspace'),(271595,4533,4533,'2010-09-30 11:23:39','2010-09-30 11:23:39','    Moved the message about adding an extra device to the step when creating the VM\n',3,2,'Rackspace'),(271596,4533,4533,'2010-09-30 12:41:49','2010-09-30 12:41:49','    Updated loopback instructions per redbo\n',5,6,'Rackspace'),(271597,4533,4533,'2010-09-30 12:45:54','2010-09-30 12:45:54','    updated the note for the resetswift script to be in line with the new loopback device\n',1,1,'Rackspace'),(271599,2394,2394,'2010-09-30 15:50:20','2010-09-30 15:50:20','    Minor spelling and typo fixes with added words to intro the Proxy Server config.\n',26,21,'Rackspace'),(271601,4533,4533,'2010-09-27 23:10:09','2010-09-27 23:10:09','    Initial checkin of benchmark code\n',383,3,'Rackspace'),(271603,4533,4533,'2010-09-28 15:00:59','2010-09-28 15:00:59','    Removed some code that was no longer used\n',2,5,'Rackspace'),(271604,4533,4533,'2010-09-28 15:05:08','2010-09-28 15:05:08','    Missed a rename\n',1,1,'Rackspace'),(271605,4533,4533,'2010-09-28 16:06:35','2010-09-28 16:06:35','    Now uses TRUE_VALUES from utils.py\n',3,2,'Rackspace'),(271606,4533,4533,'2010-10-01 19:46:35','2010-10-01 19:46:35','    Refactored swift-bench to reuse client.py and direct_client.py\n',125,118,'Rackspace'),(271607,4533,4533,'2010-10-01 19:50:34','2010-10-01 19:50:34','    added apache license to the new files\n',28,0,'Rackspace'),(271608,4533,4533,'2010-10-01 19:55:08','2010-10-01 19:55:08','    Copy paste fail\n',18,15,'Rackspace'),(271609,4533,4533,'2010-10-04 15:09:53','2010-10-04 15:09:53','    Updated to print usage by default if no args are passed, and added --saio to run with saio defaults\n',18,5,'Rackspace'),(271611,5246,5246,'2010-10-06 16:10:04','2010-10-06 16:10:04','    confirmed pending patch with webob 1.0; resolved only known issue with webob trunk, some pep8 cleanup\n',10,2,'Rackspace'),(271613,5246,5246,'2010-10-07 11:28:59','2010-10-07 11:28:59','    added -v option to st, ties into -q option, for higher levels of verbosity - currently on the stat command does anything with options.verbose > 1 - it will give you the storage url and token in case you need to drop into curl\n',9,2,'Rackspace'),(271615,206,206,'2010-10-07 08:23:17','2010-10-07 08:23:17','    Added some missing test stubs so we can better see coverage (and get a little syntax-level \"testing\").\n',128,2,'Rackspace'),(271617,197,197,'2010-10-08 15:00:30','2010-10-08 15:00:30','    Make wsgi listen queue configurable, with a bigger default\n',1,1,'Rackspace'),(271619,198,198,'2010-08-05 13:57:26','2010-08-05 13:57:26','    initial stats system commit. includes the log uploader\n',490,0,'Rackspace'),(271621,198,198,'2010-08-05 23:09:53','2010-08-05 23:09:53','    added account stats logger to stats system\n',152,1,'Rackspace'),(271622,198,198,'2010-08-12 14:26:34','2010-08-12 14:26:34','    added log_processor and a stats plugin\n',283,2,'Rackspace'),(271624,198,198,'2010-08-14 13:37:21','2010-08-14 13:37:21','    added access log processing plugin\n',169,1,'Rackspace'),(271631,198,198,'2010-09-01 09:35:54','2010-09-01 09:35:54','    initial tests for the stats system\n',278,104,'Rackspace'),(271632,198,198,'2010-09-01 15:02:54','2010-09-01 15:02:54','    first test working\n',25,12,'Rackspace'),(271634,198,198,'2010-09-01 16:33:44','2010-09-01 16:33:44','    access log parsing tests pass\n',43,20,'Rackspace'),(271635,198,198,'2010-09-01 17:06:01','2010-09-01 17:06:01','    added (working) stats tests\n',16,50,'Rackspace'),(271637,198,198,'2010-09-07 09:53:26','2010-09-07 09:53:26','    updated stats binaries to be DRY compliant\n',47,120,'Rackspace'),(271639,198,198,'2010-09-10 15:08:06','2010-09-10 15:08:06','    set up log-stats-collector as a daemon process to create csv files\n',264,58,'Rackspace'),(271642,198,198,'2010-09-13 11:11:12','2010-09-13 11:11:12','    updated config file loading to work with paste.deploy configs\n',15,9,'Rackspace'),(271643,198,198,'2010-09-13 13:35:19','2010-09-13 13:35:19','    fixed typos\n',6,3,'Rackspace'),(271644,198,198,'2010-09-14 16:53:57','2010-09-14 16:53:57','    fixed internal proxy loading\n',11,2,'Rackspace'),(271645,198,198,'2010-09-14 17:24:48','2010-09-14 17:24:48','    made a memcache stub for the internal proxy server\n',11,11,'Rackspace'),(271646,198,198,'2010-09-15 01:01:06','2010-09-15 01:01:06','    fixed internal proxy put_container reference\n',5,3,'Rackspace'),(271647,198,198,'2010-09-15 01:10:51','2010-09-15 01:10:51','    fixed some log uploading glob patterns\n',6,6,'Rackspace'),(271648,198,198,'2010-09-15 01:21:24','2010-09-15 01:21:24','    fixed bug in calculating offsets for filename patterns\n',6,4,'Rackspace'),(271649,198,198,'2010-09-15 01:36:02','2010-09-15 01:36:02','    fixed typos in log processor\n',12,9,'Rackspace'),(271650,198,198,'2010-09-15 01:42:23','2010-09-15 01:42:23','    fixed get_data_list in log_processor\n',6,6,'Rackspace'),(271651,198,198,'2010-09-15 01:55:51','2010-09-15 01:55:51','    added some debug output\n',7,2,'Rackspace'),(271652,198,198,'2010-09-15 02:34:10','2010-09-15 02:34:10','    fixed logging and log uploading\n',5,2,'Rackspace'),(271653,198,198,'2010-09-15 02:49:09','2010-09-15 02:49:09','    fixed copy/paste errors and missing imports\n',51,48,'Rackspace'),(271654,198,198,'2010-09-15 02:53:06','2010-09-15 02:53:06','    added error handling and missing return statement\n',3,0,'Rackspace'),(271655,198,198,'2010-09-15 03:17:56','2010-09-15 03:17:56','    handled some typos and better handling of missing data in internal proxy\n',26,16,'Rackspace'),(271656,198,198,'2010-09-15 03:32:47','2010-09-15 03:32:47','    fixed tests, typos, and added error handling\n',9,10,'Rackspace'),(271657,198,198,'2010-09-15 13:40:47','2010-09-15 13:40:47','    fixed bug in account stats log processing\n',3,5,'Rackspace'),(271658,198,198,'2010-09-15 14:01:17','2010-09-15 14:01:17','    fixed listing filter in log processing\n',12,7,'Rackspace'),(271659,198,198,'2010-09-15 14:11:10','2010-09-15 14:11:10','    fixed stdout capturing for generating csv files\n',6,3,'Rackspace'),(271660,198,198,'2010-09-15 14:23:45','2010-09-15 14:23:45','    fixed replica count reporting error\n',1,1,'Rackspace'),(271661,198,198,'2010-09-15 15:07:53','2010-09-15 15:07:53','    fixed lookback in log processor\n',2,2,'Rackspace'),(271664,198,198,'2010-09-20 13:26:00','2010-09-20 13:26:00','    fixed tests to account for changed key name\n',1,1,'Rackspace'),(271665,198,198,'2010-09-20 13:28:52','2010-09-20 13:28:52','    fixed test bug\n',1,1,'Rackspace'),(271666,5246,5246,'2010-09-20 17:52:58','2010-09-20 17:52:58','    pep8 issues, refactored log_processor a tiny bit for testing (lazy load internal proxy), added a few comments\n',89,59,'Rackspace'),(271669,198,198,'2010-09-22 09:43:33','2010-09-22 09:43:33','    added stats overview\n',79,0,'Rackspace'),(271671,198,198,'2010-09-29 15:22:04','2010-09-29 15:22:04','    added additional docs\n',85,3,'Rackspace'),(271672,198,198,'2010-09-30 15:48:56','2010-09-30 15:48:56','    documentation clarification and pep8 fixes\n',44,23,'Rackspace'),(271673,198,198,'2010-09-30 15:56:39','2010-09-30 15:56:39','    added overview stats to the doc index\n',1,0,'Rackspace'),(271674,198,198,'2010-09-30 16:02:45','2010-09-30 16:02:45','    made long lines wrap (grr pep8)\n',16,8,'Rackspace'),(271678,198,198,'2010-10-04 15:48:57','2010-10-04 15:48:57','    fixed stats docs\n',8,8,'Rackspace'),(271679,198,198,'2010-10-04 16:12:43','2010-10-04 16:12:43','    added a bad lines check to the access log parser\n',12,2,'Rackspace'),(271680,198,198,'2010-10-04 16:40:06','2010-10-04 16:40:06','    added tests for compressing file reader\n',33,0,'Rackspace'),(271681,198,198,'2010-10-04 16:41:59','2010-10-04 16:41:59','    fixed compressing file reader test\n',1,0,'Rackspace'),(271682,198,198,'2010-10-04 16:43:03','2010-10-04 16:43:03','    fixed compressing file reader test\n',1,1,'Rackspace'),(271683,198,198,'2010-10-04 16:55:08','2010-10-04 16:55:08','    improved compressing file reader test\n',3,4,'Rackspace'),(271684,198,198,'2010-10-04 16:59:10','2010-10-04 16:59:10','    fixed compressing file reader test\n',3,2,'Rackspace'),(271685,198,198,'2010-10-05 09:02:45','2010-10-05 09:02:45','    made try/except much less inclusive in access log processor\n',60,60,'Rackspace'),(271686,198,198,'2010-10-05 09:30:25','2010-10-05 09:30:25','    added keylist mapping tests and fixed other tests\n',24,3,'Rackspace'),(271687,198,198,'2010-10-06 10:13:51','2010-10-06 10:13:51','    updated stats system tests\n',49,19,'Rackspace'),(271688,206,206,'2010-10-07 08:08:42','2010-10-07 08:08:42','    Adding test stubs for missing test areas\n',145,0,'Rackspace'),(271690,198,198,'2010-10-07 15:50:56','2010-10-07 15:50:56','    updated SAIO instructions for the stats system\n',27,14,'Rackspace'),(271691,198,198,'2010-10-07 16:12:55','2010-10-07 16:12:55','    fixed stats system saio docs\n',5,1,'Rackspace'),(271692,198,198,'2010-10-07 16:16:55','2010-10-07 16:16:55','    fixed stats system saio docs\n',1,1,'Rackspace'),(271693,198,198,'2010-10-07 20:36:51','2010-10-07 20:36:51','    added openstack copyright/license to test_log_processor.py\n',15,0,'Rackspace'),(271694,198,198,'2010-10-07 20:56:31','2010-10-07 20:56:31','    improved logging in log processors\n',20,4,'Rackspace'),(271696,198,198,'2010-10-08 13:31:17','2010-10-08 13:31:17','    fixed missing working directory bug in account stats\n',1,0,'Rackspace'),(271697,198,198,'2010-10-08 13:40:51','2010-10-08 13:40:51','    fixed readconf parameter that was broken with a previous merge\n',1,1,'Rackspace'),(271698,198,198,'2010-10-08 13:50:21','2010-10-08 13:50:21','    updated setup.py and saio docs for syats system\n',9,0,'Rackspace'),(271699,198,198,'2010-10-08 14:14:08','2010-10-08 14:14:08','    added readconf unit test\n',27,0,'Rackspace'),(271700,198,198,'2010-10-08 14:23:20','2010-10-08 14:23:20','    updated stats saio docs to create logs with the appropriate permissions\n',3,3,'Rackspace'),(271701,198,198,'2010-10-08 14:25:45','2010-10-08 14:25:45','    fixed bug in log processor internal proxy lazy load code\n',2,0,'Rackspace'),(271702,198,198,'2010-10-08 14:29:24','2010-10-08 14:29:24','    updated readconf test\n',5,6,'Rackspace'),(271703,198,198,'2010-10-08 14:47:40','2010-10-08 14:47:40','    updated readconf test\n',11,8,'Rackspace'),(271704,198,198,'2010-10-08 14:55:43','2010-10-08 14:55:43','    updated readconf test\n',5,6,'Rackspace'),(271705,198,198,'2010-10-08 15:23:23','2010-10-08 15:23:23','    fixed internal proxy references in log processor\n',12,19,'Rackspace'),(271706,198,198,'2010-10-08 16:22:23','2010-10-08 16:22:23','    fixed account stats filename creation\n',11,1,'Rackspace'),(271707,198,198,'2010-10-08 16:31:55','2010-10-08 16:31:55','    pep8 tomfoolery\n',2,1,'Rackspace'),(271708,198,198,'2010-10-08 16:34:27','2010-10-08 16:34:27','    moved paren\n',1,2,'Rackspace'),(271709,198,198,'2010-10-08 17:20:43','2010-10-08 17:20:43','    added lazy load of internal proxy to log processor (you were right clay)\n',20,13,'Rackspace'),(271711,4533,4533,'2010-10-07 21:36:39','2010-10-07 21:36:39','    Somehow I missed the commit to print the whole help, not just usage\n',1,1,'Rackspace'),(271713,203,203,'2010-10-13 11:28:27','2010-10-13 11:28:27','    Spell check for .rst files\n',9,9,'Rackspace'),(271714,203,203,'2010-10-14 13:11:21','2010-10-14 13:11:21','    Modified for edits.\n    \n    \n    -------------This line and the following will be ignored --------------\n    \n    \n    modified:\n      doc/source/development_auth.rst\n      doc/source/getting_started.rst\n',4,4,'Rackspace'),(271715,203,203,'2010-10-14 13:38:38','2010-10-14 13:38:38','    Deleted pesky extra space.\n',1,1,'Rackspace'),(271717,5571,5571,'2010-10-04 14:11:48','2010-10-04 14:11:48','    adding ratelimiting middleware and unit tests\n',648,98,'Rackspace'),(271718,5571,5571,'2010-10-06 13:11:58','2010-10-06 13:11:58','    minor bug fixes- pre ratelimit caching of container size\n',24,14,'Rackspace'),(271719,5571,5571,'2010-10-08 11:00:22','2010-10-08 11:00:22','    fixing ratelimitable requests and speeding up unit tests\n',71,61,'Rackspace'),(271720,5571,5571,'2010-10-11 08:55:44','2010-10-11 08:55:44','    some code cleanup\n',14,84,'Rackspace'),(271721,5571,5571,'2010-10-11 12:39:29','2010-10-11 12:39:29','    pep8 compliance\n',82,58,'Rackspace'),(271722,5571,5571,'2010-10-11 12:47:46','2010-10-11 12:47:46','    bad doc\n',0,2,'Rackspace'),(271723,5571,5571,'2010-10-11 12:52:33','2010-10-11 12:52:33','    bad doc\n',2,2,'Rackspace'),(271724,5571,5571,'2010-10-12 08:16:39','2010-10-12 08:16:39','    fixing container info memcache in container GETorHEAD\n',18,19,'Rackspace'),(271725,5571,5571,'2010-10-12 08:20:44','2010-10-12 08:20:44','    getting rid of a comment\n',0,3,'Rackspace'),(271726,5571,5571,'2010-10-12 08:29:25','2010-10-12 08:29:25','    getting rid uneeded imports\n',0,5,'Rackspace'),(271727,5571,5571,'2010-10-12 08:55:26','2010-10-12 08:55:26','    getting rid ws\n',0,2,'Rackspace'),(271728,5571,5571,'2010-10-12 09:15:36','2010-10-12 09:15:36','    getting rid account ratelimiting default\n',2,2,'Rackspace'),(271729,5571,5571,'2010-10-12 16:07:27','2010-10-12 16:07:27','    adding documentation\n',140,35,'Rackspace'),(271730,206,206,'2010-10-12 13:36:19','2010-10-12 13:36:19','    Fix to unit test (that has been broken for a while I guess)\n',5,3,'Rackspace'),(271732,5571,5571,'2010-10-13 08:43:37','2010-10-13 08:43:37','    adding source docs\n',8,0,'Rackspace'),(271733,5571,5571,'2010-10-13 08:50:11','2010-10-13 08:50:11','    changing source docs\n',2,2,'Rackspace'),(271735,5571,5571,'2010-10-13 12:30:28','2010-10-13 12:30:28','    using eventlet sleep\n',2,1,'Rackspace'),(271736,5571,5571,'2010-10-13 12:49:31','2010-10-13 12:49:31','    changing memcache stuff\n',6,15,'Rackspace'),(271737,5571,5571,'2010-10-13 13:51:11','2010-10-13 13:51:11','    changing all rate_limit to ratelimit\n',97,112,'Rackspace'),(271738,5571,5571,'2010-10-13 14:30:00','2010-10-13 14:30:00','    making unit tests work a little better\n',6,7,'Rackspace'),(271740,5567,5567,'2010-10-12 19:46:01','2010-10-12 19:46:01','    add default backlog setting to sample configs\n',4,0,'independent'),(271741,5567,5567,'2010-10-13 21:24:30','2010-10-13 21:24:30','    Moved backlog setting into the [Default] section of the sample-conf files\n',4,4,'independent'),(271743,5246,5246,'2010-10-11 17:33:11','2010-10-11 17:33:11','    created failing test for write timeout 422 error, added tests for better coverage of ObjectController.PUT, pep8\n',251,72,'Rackspace'),(271744,5246,5246,'2010-10-12 12:49:20','2010-10-12 12:49:20','    fixed write timeout bug, better coverage of proxy PUT method, pep8\n',43,14,'Rackspace'),(271746,5571,5571,'2010-10-14 15:58:44','2010-10-14 15:58:44','    Refactor SWIFT_HASH_PATH_SUFFIX to be in a config file\n',21,2,'Rackspace'),(271747,5571,5571,'2010-10-15 12:28:38','2010-10-15 12:28:38','    making the server starter fail if SWIFT_HASH_PATH_SUFFIX is not there\n',10,5,'Rackspace'),(271749,197,197,'2010-10-13 21:26:43','2010-10-13 21:26:43','    Change chunks_per_sync config to mb_per_sync\n',7,9,'Rackspace'),(271750,197,197,'2010-10-13 21:29:58','2010-10-13 21:29:58','    sample conf update\n',2,1,'Rackspace'),(271751,197,197,'2010-10-15 19:15:43','2010-10-15 19:15:43','    move a paren\n',1,1,'Rackspace'),(271753,197,197,'2010-10-14 19:23:26','2010-10-14 19:23:26','    object replicator only handoff for unmounted drives\n',5,3,'Rackspace'),(271754,197,197,'2010-10-17 01:20:22','2010-10-17 01:20:22','    clarify code by separating accumulator into two counters\n',6,5,'Rackspace'),(271755,206,206,'2010-10-18 08:49:33','2010-10-18 08:49:33','    Changed logic to attempts_left; added comment for uncommon iterator usage.\n',9,6,'Rackspace'),(271757,206,206,'2010-10-18 11:58:12','2010-10-18 11:58:12','    Oopsy on the number of attempts to make with obj replicator\n',1,1,'Rackspace'),(271759,198,198,'2010-10-12 10:47:56','2010-10-12 10:47:56','    updated container auditor to only do local work and updated auditor configs\n',64,222,'Rackspace'),(271761,198,198,'2010-10-12 11:51:14','2010-10-12 11:51:14','    updated account auditor\n',66,133,'Rackspace'),(271762,198,198,'2010-10-12 14:48:08','2010-10-12 14:48:08','    updated object auditor\n',48,135,'Rackspace'),(271763,198,198,'2010-10-12 14:53:27','2010-10-12 14:53:27','    fixed typo in account auditor\n',1,1,'Rackspace'),(271764,198,198,'2010-10-12 14:55:13','2010-10-12 14:55:13','    fixed typo in account and container auditors\n',4,3,'Rackspace'),(271765,198,198,'2010-10-12 14:58:20','2010-10-12 14:58:20','    fixed typo in object auditor\n',1,1,'Rackspace'),(271766,198,198,'2010-10-12 15:03:26','2010-10-12 15:03:26','    refactored run forever loop in auditors to remove an unneeded call\n',16,19,'Rackspace'),(271767,198,198,'2010-10-13 16:32:42','2010-10-13 16:32:42','    readded interval for the auditor. deleted too much earlier\n',1,0,'Rackspace'),(271768,198,198,'2010-10-13 16:34:56','2010-10-13 16:34:56','    fixed pep8 error\n',2,2,'Rackspace'),(271769,198,198,'2010-10-13 16:48:26','2010-10-13 16:48:26','    updated auditor docstrings\n',7,3,'Rackspace'),(271770,198,198,'2010-10-14 15:22:29','2010-10-14 15:22:29','    fixed variable names for error reporting in account auditor\n',2,2,'Rackspace'),(271771,198,198,'2010-10-14 15:23:54','2010-10-14 15:23:54','    removed random.choice import\n',2,2,'Rackspace'),(271772,198,198,'2010-10-14 15:26:23','2010-10-14 15:26:23','    removed unneeded imports in the auditors\n',0,14,'Rackspace'),(271773,198,198,'2010-10-14 15:31:14','2010-10-14 15:31:14','    fixed edge case in auditors that is bad when nothing is found to audit\n',9,9,'Rackspace'),(271774,198,198,'2010-10-14 15:57:22','2010-10-14 15:57:22','    removed bare excepts in the auditors\n',3,3,'Rackspace'),(271776,198,198,'2010-10-14 20:47:20','2010-10-14 20:47:20','    DiskFile_generator now also yields the current device. this is used if the file needs to be quarantined\n',7,5,'Rackspace'),(271777,198,198,'2010-10-15 11:10:04','2010-10-15 11:10:04','    refactored auditors to have much repeated code and can now handle corrupted dbs\n',61,65,'Rackspace'),(271778,198,198,'2010-10-15 11:12:40','2010-10-15 11:12:40','    fixed typo\n',3,3,'Rackspace'),(271779,198,198,'2010-10-15 11:17:54','2010-10-15 11:17:54','    auditors now handle special case in once mode when there is nothing to audit\n',19,6,'Rackspace'),(271780,198,198,'2010-10-15 14:08:24','2010-10-15 14:08:24','    better once mode for auditors\n',13,7,'Rackspace'),(271781,198,198,'2010-10-15 14:11:44','2010-10-15 14:11:44','    fixed bug in error handling of object auditor\n',4,4,'Rackspace'),(271782,198,198,'2010-10-15 14:16:53','2010-10-15 14:16:53','    auditor generator now also yields the partition\n',13,12,'Rackspace'),(271783,198,198,'2010-10-15 14:20:24','2010-10-15 14:20:24','    dumb ommission from the last commit\n',1,1,'Rackspace'),(271784,198,198,'2010-10-15 14:40:52','2010-10-15 14:40:52','    moved common auditor code to swift.common.utils\n',69,98,'Rackspace'),(271785,198,198,'2010-10-15 14:42:54','2010-10-15 14:42:54','    fixed missing import\n',1,1,'Rackspace'),(271786,198,198,'2010-10-15 14:50:16','2010-10-15 14:50:16','    replaced comment deleted by overzealous use of the delete key\n',1,0,'Rackspace'),(271788,198,198,'2010-10-18 14:40:39','2010-10-18 14:40:39','    better error handling in auditors\n',6,3,'Rackspace'),(271789,198,198,'2010-10-18 16:52:58','2010-10-18 16:52:58','    fixed bad variable reference\n',2,2,'Rackspace'),(271790,198,198,'2010-10-18 17:10:26','2010-10-18 17:10:26','    changed auditor once mode\n',45,36,'Rackspace'),(271791,198,198,'2010-10-18 17:13:48','2010-10-18 17:13:48','    oops\n',3,3,'Rackspace'),(271792,198,198,'2010-10-18 17:30:26','2010-10-18 17:30:26','    fixed target quarrantine path\n',3,2,'Rackspace'),(271794,4533,4533,'2010-10-18 15:34:21','2010-10-18 15:34:21','    Bumped versioning to 1.1.0, and updated AUTHORS\n',16,4,'Rackspace'),(271795,4533,4533,'2010-10-18 15:58:03','2010-10-18 15:58:03','    Updated debian build instructions to include bzr-builddeb\n',1,4,'Rackspace'),(271797,197,197,'2010-10-19 01:05:54','2010-10-19 01:05:54','    Make obj/replicator timeouts configurable\n',48,28,'Rackspace'),(271799,198,198,'2010-10-19 17:13:23','2010-10-19 17:13:23','    added check for non-zero byte bodies in copy requests\n',6,0,'Rackspace'),(271800,4533,4533,'2010-10-19 22:22:11','2010-10-19 22:22:11','    When processing the storage url, make sure the port is set to 80 if not defined in the url\n',5,1,'Rackspace'),(271801,4533,4533,'2010-10-19 22:35:18','2010-10-19 22:35:18','    Updated to take into account ssl\n',1,1,'Rackspace'),(271803,203,203,'2010-10-20 10:32:03','2010-10-20 10:32:03','    Split out the SAIO doc and fixed a typo in the README\n',57,20,'Rackspace'),(271804,203,203,'2010-10-20 14:29:21','2010-10-20 14:29:21','    Updated organization and fixed section headings.\n',49,38,'Rackspace'),(271805,203,203,'2010-10-20 15:24:59','2010-10-20 15:24:59','    Fixed single quote to be a backtick\n',1,1,'Rackspace'),(271807,4533,4533,'2010-10-20 22:04:03','2010-10-20 22:04:03','    Updated swift-bench to put to several containers (20 by default) instead of just 1\n',16,12,'Rackspace'),(271809,5571,5571,'2010-10-20 10:31:50','2010-10-20 10:31:50','    Fixing bug with incrementing memcache with a negative number\n',27,1,'Rackspace'),(271810,5571,5571,'2010-10-20 11:05:38','2010-10-20 11:05:38','    adding decr to unit test\n',10,0,'Rackspace'),(271812,198,198,'2010-10-21 13:32:10','2010-10-21 13:32:10','    fixed error where tombstone files cause the object auditor to error\n',6,3,'Rackspace'),(271813,198,198,'2010-10-21 13:59:43','2010-10-21 13:59:43','    removed description of unused auditor config vars\n',0,8,'Rackspace'),(271815,5571,5571,'2010-10-22 11:43:39','2010-10-22 11:43:39','    adding rate limit sleep log\n',12,1,'Rackspace'),(271816,5571,5571,'2010-10-22 12:42:32','2010-10-22 12:42:32','    pep8 ratelimit sleep log\n',6,3,'Rackspace'),(271818,5571,5571,'2010-10-22 15:25:22','2010-10-22 15:25:22','    memcache race condition and combining incr and decr\n',43,43,'Rackspace'),(271819,5571,5571,'2010-10-25 08:45:05','2010-10-25 08:45:05','    changing order of int op\n',1,1,'Rackspace'),(271820,5571,5571,'2010-10-25 12:52:25','2010-10-25 12:52:25','    adding back in the decr\n',30,1,'Rackspace'),(271823,198,198,'2010-10-26 10:13:14','2010-10-26 10:13:14','    made length check on copy PUTs simpler\n',1,4,'Rackspace'),(271824,198,198,'2010-10-26 10:23:43','2010-10-26 10:23:43','    removed X-Copy-From header from new request in copy PUT\n',2,1,'Rackspace'),(271825,198,198,'2010-10-26 14:48:27','2010-10-26 14:48:27','    fixed to ensure x-copied-from header is included\n',3,3,'Rackspace'),(271826,198,198,'2010-10-26 14:51:22','2010-10-26 14:51:22','    fixed to ensure x-copied-from header is included correctly\n',1,1,'Rackspace'),(271827,198,198,'2010-10-26 14:55:12','2010-10-26 14:55:12','    added test for non-zero body in copy put\n',6,0,'Rackspace'),(271828,198,198,'2010-10-26 14:58:13','2010-10-26 14:58:13','    fixed test for non-zero body in copy put\n',3,0,'Rackspace'),(271829,198,198,'2010-10-26 15:00:17','2010-10-26 15:00:17','    fixed test for non-zero body in copy put\n',11,8,'Rackspace'),(271830,198,198,'2010-10-26 15:01:34','2010-10-26 15:01:34','    fixed test for non-zero body in copy put\n',1,2,'Rackspace'),(271831,198,198,'2010-10-27 10:52:00','2010-10-27 10:52:00','    added quoting to X-Copied-From header\n',26,1,'Rackspace'),(271832,198,198,'2010-10-27 10:53:52','2010-10-27 10:53:52','    fixed x-copied-from test\n',2,14,'Rackspace'),(271834,198,198,'2010-10-31 14:40:18','2010-10-31 14:40:18','    initial cname lookup work stubbed out\n',104,0,'Rackspace'),(271835,198,198,'2010-10-31 15:21:54','2010-10-31 15:21:54','    WIP while I go to enjoy a nice day outside\n',26,2,'Rackspace'),(271836,198,198,'2010-10-31 21:57:42','2010-10-31 21:57:42','    basic untested functionality\n',17,36,'Rackspace'),(271837,198,198,'2010-11-01 10:30:32','2010-11-01 10:30:32','    added tests for cname lookup middleware\n',127,2,'Rackspace'),(271838,203,203,'2010-10-28 17:01:50','2010-10-28 17:01:50','    Updated SAIO to point to RHEL instructions on wiki\n',6,4,'Rackspace'),(271839,203,203,'2010-11-01 15:04:51','2010-11-01 15:04:51','    Changing to generic wiki page so no rhel in url\n',2,2,'Rackspace'),(271841,203,203,'2010-10-28 16:39:42','2010-10-28 16:39:42','    Added link to RHEL instructions in SAIO, added Google Analytics code\n',22,4,'Rackspace'),(271842,203,203,'2010-10-29 16:30:56','2010-10-29 16:30:56','    This contains an env variable in conf.py for the build to contain the GA code\n',24,17,'Rackspace'),(271843,203,203,'2010-11-01 17:51:26','2010-11-01 17:51:26','    Updated SAIO to genericize wiki pointer\n',1,2,'Rackspace'),(271844,203,203,'2010-11-01 18:00:12','2010-11-01 18:00:12','    Updated SAIO, deleting line to make merge easier\n',0,1,'Rackspace'),(271845,203,203,'2010-11-01 18:36:40','2010-11-01 18:36:40','    Reverted SAIO doc\n',2,0,'Rackspace'),(271847,5571,5571,'2010-10-29 13:30:34','2010-10-29 13:30:34','    catching invalid urls and adding tests\n',36,1,'Rackspace'),(271848,5571,5571,'2010-11-01 13:26:18','2010-11-01 13:26:18','    adding new exception type and catching other invalid paths\n',89,58,'Rackspace'),(271849,5571,5571,'2010-11-01 14:47:48','2010-11-01 14:47:48','    undoing new exception type\n',64,70,'Rackspace'),(271850,5571,5571,'2010-11-01 15:13:38','2010-11-01 15:13:38','    small cleanup stuff\n',5,6,'Rackspace'),(271852,197,197,'2010-10-29 01:23:01','2010-10-29 01:23:01','    shore up accept header parsing\n',95,47,'Rackspace'),(271853,197,197,'2010-10-29 01:26:22','2010-10-29 01:26:22','    missed a debug print\n',0,1,'Rackspace'),(271854,197,197,'2010-10-29 10:28:19','2010-10-29 10:28:19','    more tests\n',36,24,'Rackspace'),(271855,197,197,'2010-11-02 16:04:15','2010-11-02 16:04:15','    support text/xml\n',24,23,'Rackspace'),(271858,198,198,'2010-10-28 22:41:38','2010-10-28 22:41:38','    domain remap middleware that maps account and container references in the domain to the path\n',174,0,'Rackspace'),(271859,198,198,'2010-10-28 22:45:00','2010-10-28 22:45:00','    pep8\n',2,1,'Rackspace'),(271861,206,206,'2010-11-03 08:56:58','2010-11-03 08:56:58','    domain_remap bugfixes\n',21,3,'Rackspace'),(271862,206,206,'2010-11-03 09:04:44','2010-11-03 09:04:44','    PEPy fixes\n',6,2,'Rackspace'),(271866,198,198,'2010-10-29 11:10:40','2010-10-29 11:10:40','    added middleware to catch errors\n',102,1,'Rackspace'),(271869,198,198,'2010-11-03 13:17:59','2010-11-03 13:17:59','    fixed typo in example config\n',1,1,'Rackspace'),(271870,198,198,'2010-11-03 13:23:17','2010-11-03 13:23:17','    pep8\n',1,1,'Rackspace'),(271873,198,198,'2010-11-03 15:17:27','2010-11-03 15:17:27','    pep8\n',3,2,'Rackspace'),(271874,198,198,'2010-11-03 15:56:08','2010-11-03 15:56:08','    fixed some tests and edge cases\n',49,11,'Rackspace'),(271875,198,198,'2010-11-04 16:31:20','2010-11-04 16:31:20','    added SkipTest for cname tests if dnspython is not installed\n',11,4,'Rackspace'),(271876,198,198,'2010-11-05 13:37:54','2010-11-05 13:37:54','    better cname lookups\n',22,9,'Rackspace'),(271877,198,198,'2010-11-04 09:53:02','2010-11-04 09:53:02','    fixed typo\n',1,1,'Rackspace'),(271879,203,203,'2010-11-04 14:25:23','2010-11-04 14:25:23','    Adds multi server install doc\n',396,3,'Rackspace'),(271880,203,203,'2010-11-05 10:03:22','2010-11-05 10:03:22','    Added Stephen Milton to AUTHORS file under contributors\n',1,0,'Rackspace'),(271882,5246,5246,'2010-10-28 16:33:54','2010-10-28 16:33:54','    added failing test for COPY from private container\n',77,1,'Rackspace'),(271884,206,206,'2010-11-03 14:06:30','2010-11-03 14:06:30','    Fix tests; fix copy/auth problem\n',3,3,'Rackspace'),(271887,5246,5246,'2010-11-04 14:39:29','2010-11-04 14:39:29','    fixed auth_copy bug, and early denial for proxy.server.ObjectController.COPY method; added tests\n',41,11,'Rackspace'),(271888,198,198,'2010-10-28 15:33:31','2010-10-28 15:33:31','    reset bytes_transferred for copy requests\n',2,0,'Rackspace'),(271889,198,198,'2010-10-28 15:34:16','2010-10-28 15:34:16','    changed env var in request to properly log the method\n',1,1,'Rackspace'),(271894,4533,4533,'2010-11-05 12:31:48','2010-11-05 12:31:48','    Removing .DS_Store and adding to .bzrignore\n',1,0,'Rackspace'),(271896,198,198,'2010-11-04 14:56:08','2010-11-04 14:56:08','    fixed bug in internal_proxy\n',1,2,'Rackspace'),(271898,4116,4116,'2010-11-05 00:26:53','2010-11-05 00:26:53','    updated lazy_load_internal_proxy test\n',19,18,'independent'),(271902,198,198,'2010-11-05 14:06:52','2010-11-05 14:06:52','    added prefix to memcache key used\n',4,2,'Rackspace'),(271903,198,198,'2010-11-05 14:36:37','2010-11-05 14:36:37','    fixed to make tests work\n',3,7,'Rackspace'),(271905,203,203,'2010-11-11 09:00:00','2010-11-11 09:00:00','    Updated Google Analytics code for more precise tracking\n',1,1,'Rackspace'),(271907,5248,5248,'2010-11-08 12:39:21','2010-11-08 12:39:21','    checking for memcache incase not setup\n',63,30,'Rackspace'),(271909,203,203,'2010-11-15 10:51:12','2010-11-15 10:51:12','    Added a link to skip to the Rsync section, bypassing the loopback\n',3,0,'Rackspace'),(271911,203,203,'2010-11-12 12:54:07','2010-11-12 12:54:07','    Updated Sphinx theme and index.rst\n',36,12,'Rackspace'),(271912,203,203,'2010-11-16 09:05:38','2010-11-16 09:05:38','    Adding files for _theme dir and _static/tweaks.css\"\n',363,0,'Rackspace'),(271913,203,203,'2010-11-16 09:07:20','2010-11-16 09:07:20','    Hopefully removed a conf.app that mysteriously appeared\n',0,285,'Rackspace'),(271915,203,203,'2010-11-16 11:25:45','2010-11-16 11:25:45','    Added red link color to the module links\n',3,9,'Rackspace'),(271917,5571,5571,'2010-10-29 15:26:35','2010-10-29 15:26:35','    adding run_once unit test\n',86,3,'Rackspace'),(271918,5571,5571,'2010-11-03 16:08:13','2010-11-03 16:08:13','    adding extra tests and suffix hash bug fix\n',70,10,'Rackspace'),(271919,5248,5248,'2010-11-05 09:15:31','2010-11-05 09:15:31','    adding tests and splitting out collect jobs\n',167,113,'Rackspace'),(271920,5248,5248,'2010-11-16 08:32:03','2010-11-16 08:32:03','    changes from code review\n',7,20,'Rackspace'),(271921,5248,5248,'2010-11-16 11:06:39','2010-11-16 11:06:39','    adding temp dir thing\n',2,1,'Rackspace'),(271923,5567,5567,'2010-11-03 22:58:18','2010-11-03 22:58:18','    Added -o option for file redirection and/or stream data to stdout\n',29,7,'independent'),(271926,198,198,'2010-11-12 10:55:32','2010-11-12 10:55:32','    added end_marker query parameter to container and object listings\n',72,49,'Rackspace'),(271927,198,198,'2010-11-12 11:01:46','2010-11-12 11:01:46','    changed stats system to take advantage of end_marker\n',9,7,'Rackspace'),(271928,198,198,'2010-11-16 15:50:56','2010-11-16 15:50:56','    fixed copy/paste error\n',1,1,'Rackspace'),(271929,198,198,'2010-11-16 16:01:16','2010-11-16 16:01:16','    updated a docstring\n',1,0,'Rackspace'),(271931,198,198,'2010-11-17 09:36:21','2010-11-17 09:36:21','    fixed unit test to include knowledge of end_marker\n',7,3,'Rackspace'),(271933,206,206,'2010-11-18 10:53:37','2010-11-18 10:53:37','    Cleaned up st command line parsing; always use included client.py as well\n',934,886,'Rackspace'),(271934,206,206,'2010-11-18 11:11:14','2010-11-18 11:11:14','    Fix ST_ environ bug in st\n',4,3,'Rackspace'),(271935,206,206,'2010-11-18 11:20:12','2010-11-18 11:20:12','    Keep the first command line parse from exiting due to missing required options\n',3,3,'Rackspace'),(271936,206,206,'2010-11-18 11:27:23','2010-11-18 11:27:23','    Cosmetic fixes for some continuation line idents\n',13,14,'Rackspace'),(271937,206,206,'2010-11-18 11:35:35','2010-11-18 11:35:35','    Cleaner environ-based option defaults\n',7,7,'Rackspace'),(271938,206,206,'2010-11-18 12:52:00','2010-11-18 12:52:00','    This is to make letterj happy. Well, less unhappy.\n',1,1,'Rackspace'),(271939,206,206,'2010-11-18 13:40:40','2010-11-18 13:40:40','    Fallback to HTTPConnection if BufferedHTTPConnection is nbot available\n',10,4,'Rackspace'),(271941,5246,5246,'2010-11-11 16:41:07','2010-11-11 16:41:07','    added helper/util to parse command line args; removed some duplicated code in\n    server/daemon bin scripts;  more standized python/linux daemonization\n    procedures; fixed lp:666957 \"devauth server creates auth.db with the wrong\n    privileges\"; new run_daemon helper based on run_wsgi simplifies daemon\n    launching/testing; new - all servers/daemons support verbose option when\n    started interactivlty which will log to the console; fixed lp:667839 \"can\'t\n    start servers with relative paths to configs\"; added tests\n',533,199,'Rackspace'),(271942,4116,4116,'2010-11-11 22:57:07','2010-11-11 22:57:07','    swapped daemonize calls\n',1,1,'independent'),(271944,5246,5246,'2010-11-15 16:52:29','2010-11-15 16:52:29','    fixed typo in doc string for daemonize\n',1,1,'Rackspace'),(271945,5246,5246,'2010-11-16 13:52:05','2010-11-16 13:52:05','    fixed missing kwargs in bin/swift-log-uploader\n',1,1,'Rackspace'),(271949,5246,5246,'2010-11-17 17:17:05','2010-11-17 17:17:05','    cleaned up test reloads\n',4,10,'Rackspace'),(271950,5246,5246,'2010-11-19 12:15:41','2010-11-19 12:15:41','    removed unneeded daemonize function from utils, pulled get_socket out of run_wsgi, reworked test_utils and test_wsgi\n',180,65,'Rackspace'),(271951,5246,5246,'2010-11-19 16:20:17','2010-11-19 16:20:17','    fixed some calls to get_logger that didn\'t clean up after themselves\n',2,12,'Rackspace'),(271952,5246,5246,'2010-11-19 16:31:11','2010-11-19 16:31:11','    remove capture_io stuff from db_replicator.__init__\n',0,4,'Rackspace'),(271954,5572,5572,'2010-11-17 21:40:12','2010-11-17 21:40:12','    Fixed some logic in swift.proxy.Controller.account_info and container_info\n',71,5,'Rackspace'),(271956,203,203,'2010-11-23 16:30:38','2010-11-23 16:30:38','    Added a section about adding additional proxy servers to the multi-node install doc\n',37,3,'Rackspace'),(271957,203,203,'2010-11-24 10:55:29','2010-11-24 10:55:29','    Edits based on input\n',8,6,'Rackspace'),(271959,198,198,'2010-11-18 10:57:35','2010-11-18 10:57:35','    improved the container listings for the stats processor\n',27,36,'Rackspace'),(271963,5573,5573,'2010-11-23 18:59:31','2010-11-23 18:59:31','    Added Custom mime.types file for swift.\n',6,0,'Rackspace'),(271964,5573,5573,'2010-11-23 19:26:02','2010-11-23 19:26:02','    PEP 8 compliance and small modification to mime.types file\n',7,1,'Rackspace'),(271965,5573,5573,'2010-11-24 15:36:10','2010-11-24 15:36:10','    Added Unit Test\n',21,0,'Rackspace'),(271966,5573,5573,'2010-11-24 16:20:16','2010-11-24 16:20:16','    Unit tests pass now work as expected\n',4,5,'Rackspace'),(271967,206,206,'2010-11-24 14:48:03','2010-11-24 14:48:03','    Updated test_custom_mime_types_files\n',16,19,'Rackspace'),(271968,206,206,'2010-11-24 14:58:17','2010-11-24 14:58:17','    Maybe even a bit more concise with test_custom_mime_types_files\n',7,8,'Rackspace'),(271970,4533,4533,'2010-11-26 19:37:08','2010-11-26 19:37:08','    Removed uneeded creation of resellers.conf from the unit test\n',0,1,'Rackspace'),(271973,203,203,'2010-11-30 12:24:55','2010-11-30 12:24:55','    Adding Citrix contributions to Admin Guide\n',27,1,'Rackspace'),(271974,203,203,'2010-11-30 14:15:41','2010-11-30 14:15:41','    Edited to reflect ring creation not management\n',4,4,'Rackspace'),(271976,206,206,'2010-11-29 15:19:29','2010-11-29 15:19:29','    proxy: added account DELETE method; added option to control whether account PUTs and DELETEs are even callable\n',85,0,'Rackspace'),(271977,206,206,'2010-11-29 15:52:51','2010-11-29 15:52:51','    Updated howto_installmultinode.rst\n',1,0,'Rackspace'),(271979,206,206,'2010-11-30 15:00:12','2010-11-30 15:00:12','    Removed extra copy-pasted code\n',0,3,'Rackspace'),(271981,198,198,'2010-11-29 10:58:23','2010-11-29 10:58:23','    changed end_marker to not be inclusive\n',8,8,'Rackspace'),(271983,197,197,'2010-11-30 22:17:05','2010-11-30 22:17:05','    make swift-init only warn on missing configs\n',4,2,'Rackspace'),(271984,197,197,'2010-11-30 22:33:35','2010-11-30 22:33:35','    return from do_start early if config file is missing\n',1,0,'Rackspace'),(271986,5246,5246,'2010-11-30 19:07:21','2010-11-30 19:07:21','    update common.middleware.auth tests for compat with webob 1.0\n',36,30,'Rackspace'),(271989,5572,5572,'2010-11-30 22:40:44','2010-11-30 22:40:44','    makes account and container info caching in proxy better\n',168,63,'Rackspace'),(271991,5248,5248,'2010-12-16 16:20:57','2010-12-16 16:20:57','    adding in rate limiting and unit tests\n',178,9,'Rackspace'),(271992,5248,5248,'2010-12-17 00:27:08','2010-12-17 00:27:08','    more unit tests, refactoring,  and loc gen fix\n',113,56,'Rackspace'),(271993,5248,5248,'2010-12-28 14:54:00','2010-12-28 14:54:00','    adding defaults, docs, and unit tests\n',123,28,'Rackspace'),(271994,197,197,'2010-12-02 13:37:49','2010-12-02 13:37:49','    use logging formatter to standardize transaction id logging\n',37,15,'Rackspace'),(271995,5574,5574,'2010-12-06 11:45:06','2010-12-06 11:45:06','    object replicator: fix replica deletion condition\n',2,1,'NTT'),(271997,5572,5572,'2010-12-09 17:10:37','2010-12-09 17:10:37','    in st, skips directory creation when streaming to standard out\n',3,2,'Rackspace'),(271999,197,197,'2010-12-13 18:25:09','2010-12-13 18:25:09','    remove migration header\n',0,4,'Rackspace'),(272002,197,197,'2010-12-20 21:47:50','2010-12-20 21:47:50','    gettext updates\n',306,285,'Rackspace'),(272003,197,197,'2010-12-20 21:57:19','2010-12-20 21:57:19','    tests fixed\n',2,2,'Rackspace'),(272004,198,198,'2010-12-16 08:03:27','2010-12-16 08:03:27','    fixed lp bug 671704\n',3,3,'Rackspace'),(272006,206,206,'2010-11-16 15:35:39','2010-11-16 15:35:39','    Server-side implementation for segmented objects\n',915,27,'Rackspace'),(272009,206,206,'2010-11-18 18:29:03','2010-11-18 18:29:03','    Basic working segmented upload\n',121,35,'Rackspace'),(272010,206,206,'2010-11-19 13:01:28','2010-11-19 13:01:28','    st overwrites of manifests now clean up the old segments\n',76,45,'Rackspace'),(272011,206,206,'2010-11-19 14:50:35','2010-11-19 14:50:35','    st delete will delete manifest segments as well; added --leave-segments option to override such behavior\n',63,27,'Rackspace'),(272013,206,206,'2010-11-23 14:26:48','2010-11-23 14:26:48','    Documentation of the manifest/segments feature\n',122,0,'Rackspace'),(272015,206,206,'2010-11-29 12:52:14','2010-11-29 12:52:14','    Added history section for large object support docs\n',17,0,'Rackspace'),(272016,206,206,'2010-11-29 13:07:30','2010-11-29 13:07:30','    Fixed bug dfg found in st\n',6,3,'Rackspace'),(272018,206,206,'2010-12-02 19:37:58','2010-12-02 19:37:58','    SegmentIterable: logs exceptions just once; 503s on exception; fix except syntax; make sure self.response is always *something*\n',34,18,'Rackspace'),(272020,5246,5246,'2010-12-06 14:01:19','2010-12-06 14:01:19','    updated large objects history\n',50,11,'Rackspace'),(272023,206,206,'2010-12-13 14:14:26','2010-12-13 14:14:26','    Now supports infinite objects!\n',135,47,'Rackspace'),(272024,206,206,'2010-12-14 11:20:12','2010-12-14 11:20:12','    Fixed a bug where a HEAD on a really, really large object would give a content-length of 0 instead of transfer-encoding: chunked\n',17,2,'Rackspace'),(272025,206,206,'2010-12-14 13:51:24','2010-12-14 13:51:24','    x-copy-from now understands manifest sources and copies details rather than contents\n',13,4,'Rackspace'),(272026,206,206,'2010-12-14 14:16:38','2010-12-14 14:16:38','    Limit manifest gets to one segment per second; prevents amplification attacks of tons of tiny segments\n',4,0,'Rackspace'),(272027,206,206,'2010-12-14 14:25:12','2010-12-14 14:25:12','    Changed to only limit manifest gets after first 10 segments. Makes tests run faster but does allow amplification 1:10. At least it\'s not 1:infinity like before.\n',3,2,'Rackspace'),(272028,206,206,'2010-12-14 14:49:36','2010-12-14 14:49:36','    Even though isn\'t 100% related, made st emit a warning if there\'s a / in a container name\n',16,0,'Rackspace'),(272029,206,206,'2010-12-16 09:03:59','2010-12-16 09:03:59','    st: Works with chunked transfer encoded downloads now\n',5,2,'Rackspace'),(272030,206,206,'2010-12-16 09:21:30','2010-12-16 09:21:30','    Made stat display of objects suppress content-length, last-modified, and etag if they aren\'t in the headers\n',10,8,'Rackspace'),(272031,206,206,'2010-12-16 10:46:11','2010-12-16 10:46:11','    lobjects: The Last-Modified header is now determined for reasonably segmented objects.\n',7,1,'Rackspace'),(272034,197,197,'2010-12-20 22:10:58','2010-12-20 22:10:58','    add more gettext calls\n',15,12,'Rackspace'),(272035,197,197,'2010-12-22 16:36:31','2010-12-22 16:36:31','    i18n finishup\n',22,30,'Rackspace'),(272036,197,197,'2010-12-22 16:48:25','2010-12-22 16:48:25','    fix fancy txnid logging\n',4,1,'Rackspace'),(272037,197,197,'2010-12-22 17:18:30','2010-12-22 17:18:30','    add gettext to all binaries\n',27,2,'Rackspace'),(272038,206,206,'2010-12-22 11:35:11','2010-12-22 11:35:11','    Fixed probe tests to not use relativity (on imports)\n',5,5,'Rackspace'),(272041,197,197,'2010-12-06 22:53:44','2010-12-06 22:53:44','    set default journal mode for rolling back from WAL code\n',1,0,'Rackspace'),(272043,5246,5246,'2010-12-28 13:33:36','2010-12-28 13:33:36','    added functional test for copy, fixed bug in copy method\n',105,14,'Rackspace'),(272046,5248,5248,'2010-12-28 15:27:25','2010-12-28 15:27:25','    clearing out stats for forever mode\n',2,0,'Rackspace'),(272047,5248,5248,'2010-12-28 17:58:17','2010-12-28 17:58:17','    pep8 and merge fixes\n',6,4,'Rackspace'),(272048,5248,5248,'2010-12-28 20:31:38','2010-12-28 20:31:38','    fix for 0 incr_by\n',2,2,'Rackspace'),(272049,5248,5248,'2010-12-30 12:30:04','2010-12-30 12:30:04','    changes after peer review, pep8 and eventlet.sleep\n',33,37,'Rackspace'),(272050,5248,5248,'2011-01-03 10:25:08','2011-01-03 10:25:08','    fix i18n logs\n',4,4,'Rackspace'),(272051,5246,5246,'2010-12-29 13:14:43','2010-12-29 13:14:43','    made this i18n importing sane\n',2,4,'Rackspace'),(272053,206,206,'2010-12-29 12:00:08','2010-12-29 12:00:08','    Cleaned up the bins; patched the broken test (when run standalone)\n',5,28,'Rackspace'),(272056,206,206,'2010-12-29 12:47:22','2010-12-29 12:47:22','    PEP8 Updates\n',13,7,'Rackspace'),(272058,198,198,'2010-12-21 17:09:32','2010-12-21 17:09:32','    fixes variable name collision\n',7,4,'Rackspace'),(272060,203,203,'2011-01-04 17:34:43','2011-01-04 17:34:43','    Changed copyright notices on py files and the single rst file with a copyright notice\n',126,126,'Rackspace'),(272062,5575,5575,'2010-12-31 12:34:22','2010-12-31 12:34:22','    Refactor the command and help structure so it uses Python\'s docstrings. Also put the commands into a\n    class so they can be listed and their docstrings automatically printed.\n',139,165,'independent'),(272063,206,206,'2011-01-04 12:04:18','2011-01-04 12:04:18','    Fix a couple bugs; rework the rework a bit more; PEP8\n',100,67,'Rackspace'),(272066,5246,5246,'2011-01-04 16:00:01','2011-01-04 16:00:01','    fixed missing NamedLogger import in bin/swift-bench, refactored\n    LogAdapter.tnx_id so that it works with multiple calls to get_logger, fixed\n    common.middleware.catch_errors to only call get_logger if it needs too, renamed\n    x-cf-trans-id to x-swift-tnx-id\n',74,37,'Rackspace'),(272067,5246,5246,'2011-01-04 16:12:56','2011-01-04 16:12:56','    pep8\n',6,1,'Rackspace'),(272068,5246,5246,'2011-01-05 09:32:19','2011-01-05 09:32:19','    pep8 fo\' realz\n',1,1,'Rackspace'),(272069,5246,5246,'2011-01-05 11:15:21','2011-01-05 11:15:21','    moved the txn_id read into a utils helper\n',43,18,'Rackspace'),(272070,5246,5246,'2011-01-05 11:48:58','2011-01-05 11:48:58','    this is to make gholt happy; well less unhappy\n',4,4,'Rackspace'),(272071,5246,5246,'2011-01-05 13:52:33','2011-01-05 13:52:33','    revert x-cf-trans-id rename\n',27,55,'Rackspace'),(272074,198,198,'2011-01-05 16:24:14','2011-01-05 16:24:14','    object copy now copies the content type\n',10,0,'Rackspace'),(272075,198,198,'2011-01-05 16:49:43','2011-01-05 16:49:43','    changed the order of setting the charset and content_type to ensure that charset isn\'t added to the object\n',2,2,'Rackspace'),(272076,198,198,'2011-01-10 23:11:46','2011-01-10 23:11:46','    I did not know the wonders of test_chunked_put_and_a_bit_more\n',31,0,'Rackspace'),(272077,198,198,'2011-01-11 00:08:35','2011-01-11 00:08:35','    fixed and tested charset on content types\n',48,2,'Rackspace'),(272078,206,206,'2010-12-01 17:08:49','2010-12-01 17:08:49','    Incorporated Swauth into Swift as an optional DevAuth replacement.\n',2580,45,'Rackspace'),(272079,206,206,'2010-12-01 21:28:41','2010-12-01 21:28:41','    swauth-list work; new swauth-set-account-service; .clusters is now .services; doc updates\n',219,96,'Rackspace'),(272080,206,206,'2010-12-01 21:29:07','2010-12-01 21:29:07','    Added forgotten swauth-set-account-service\n',70,0,'Rackspace'),(272081,206,206,'2010-12-02 14:21:25','2010-12-02 14:21:25','    Expired token cleanup\n',11,1,'Rackspace'),(272082,206,206,'2010-12-03 10:22:57','2010-12-03 10:22:57','    swauth: another batch of tests and bugfixes found while testing\n',389,8,'Rackspace'),(272083,206,206,'2010-12-03 15:24:16','2010-12-03 15:24:16','    swauth: another batch of tests and bugfixes found while testing\n',1788,69,'Rackspace'),(272085,206,206,'2010-12-08 14:10:12','2010-12-08 14:10:12','    swauth: another batch of tests and bufixes found while testing\n',321,10,'Rackspace'),(272086,206,206,'2010-12-08 14:36:02','2010-12-08 14:36:02','    swauth: .token objects are now split into 16 containers\n',25,14,'Rackspace'),(272087,206,206,'2010-12-09 17:57:26','2010-12-09 17:57:26','    new swauth-cleanup-tokens; restricted listing .auth account to .super_admin; doc updates\n',180,24,'Rackspace'),(272089,206,206,'2010-12-20 08:35:29','2010-12-20 08:35:29','    swauth: Fixed unit tests for webob changes\n',30,30,'Rackspace'),(272092,206,206,'2010-12-22 13:28:51','2010-12-22 13:28:51','    i18nify log message\n',1,1,'Rackspace'),(272093,206,206,'2010-12-28 10:39:11','2010-12-28 10:39:11','    Updated the docs to better reflect the .token_[0-f] container selection.\n',6,3,'Rackspace'),(272095,206,206,'2011-01-04 12:51:57','2011-01-04 12:51:57','    Removed extraneous print\n',0,1,'Rackspace'),(272097,206,206,'2011-01-05 08:14:31','2011-01-05 08:14:31','    Fix to limit account DELETEs to just reseller admins\n',75,4,'Rackspace'),(272098,206,206,'2011-01-05 08:37:55','2011-01-05 08:37:55','    Fix bug where trying to access an account name that exactly matched the reseller_prefix would raise an exception\n',13,0,'Rackspace'),(272099,206,206,'2011-01-05 08:40:40','2011-01-05 08:40:40','    Make Swauth return 404 on split_path exceptions\n',10,4,'Rackspace'),(272100,206,206,'2011-01-05 12:06:55','2011-01-05 12:06:55','    Test updates suggested by glange\n',2,3,'Rackspace'),(272101,206,206,'2011-01-07 09:25:59','2011-01-07 09:25:59','    More error reporting\n',18,10,'Rackspace'),(272103,206,206,'2011-01-10 08:43:38','2011-01-10 08:43:38','    Added public/private urls for swauth default swift cluster setting\n',42,10,'Rackspace'),(272104,206,206,'2011-01-10 11:33:19','2011-01-10 11:33:19','    Fixed bug with using new internal url\n',2,2,'Rackspace'),(272105,206,206,'2011-01-10 12:37:49','2011-01-10 12:37:49','    Fp leak fix\n',1,0,'Rackspace'),(272107,206,206,'2010-12-28 09:18:37','2010-12-28 09:18:37','    Change copies of x-object-manifest objects to copy the actual contents of the object, not just the manifest marker itself\n',32,9,'Rackspace'),(272108,206,206,'2010-12-28 09:57:17','2010-12-28 09:57:17','    Made copies of ridiculously segmented objects error.\n',21,2,'Rackspace'),(272116,5248,5248,'2011-01-11 01:24:05','2011-01-11 01:24:05','    fixing error log bug\n',2,2,'Rackspace'),(272118,197,197,'2011-01-12 23:46:03','2011-01-12 23:46:03','    object replicator logging fixes\n',5,3,'Rackspace'),(272119,197,197,'2011-01-13 00:59:42','2011-01-13 00:59:42','    i18n\n',2,2,'Rackspace'),(272120,197,197,'2011-01-13 01:32:38','2011-01-13 01:32:38','    fix\n',1,1,'Rackspace'),(272122,206,206,'2011-01-13 09:05:44','2011-01-13 09:05:44','    Shuffle the partitions to reassign on a ring rebalance.\n',37,1,'Rackspace'),(272124,5572,5572,'2011-01-12 21:09:39','2011-01-12 21:09:39','    Made older functional tests look for default config file when env variable is unset\n',18,3,'Rackspace'),(272126,5574,5574,'2011-01-04 18:18:58','2011-01-04 18:18:58','    add S3 API support\n',334,5,'NTT'),(272127,5574,5574,'2011-01-05 11:48:43','2011-01-05 11:48:43','    s3api: clean up the response handling\n',102,105,'NTT'),(272128,197,197,'2011-01-05 21:54:45','2011-01-05 21:54:45','    GETorHEAD cleanup\n',28,21,'Rackspace'),(272129,197,197,'2011-01-05 22:01:03','2011-01-05 22:01:03','    further cleanup\n',6,8,'Rackspace'),(272130,5574,5574,'2011-01-06 18:08:48','2011-01-06 18:08:48','    s3api: fix GETorHEAD\n    \n    - replace \'content-length and \'content-encoding\' with \'Content-Length\n      and \'Content-Encoding\' respectively.\n    \n    - return \'Content-Type\' and \'last-modified\' headers too.\n    \n    - remove \'Content-MD5\' since seems that S3 doesn\'t use it for GET or\n      HEAD response.\n',1,3,'NTT'),(272131,5574,5574,'2011-01-06 18:51:26','2011-01-06 18:51:26','    rename the module from s3.py to swift3.py (suggested by Chuck Thier)\n',297,297,'NTT'),(272132,5574,5574,'2011-01-13 20:31:28','2011-01-13 20:31:28','    s3api: add unit tests\n',397,0,'NTT'),(272133,5574,5574,'2011-01-13 21:05:17','2011-01-13 21:05:17','    s3api: add more unit tests\n',27,1,'NTT'),(272136,206,206,'2011-01-12 08:40:55','2011-01-12 08:40:55','    Fix for GETing a manifest that has an empty listing\n',36,5,'Rackspace'),(272138,197,197,'2011-01-14 04:10:52','2011-01-14 04:10:52','    pep8 and xml escapes\n',52,17,'Rackspace'),(272139,197,197,'2011-01-14 04:14:25','2011-01-14 04:14:25','    unit tests\n',3,3,'Rackspace'),(272141,197,197,'2011-01-13 21:00:51','2011-01-13 21:00:51','    netifaces\n',12,7,'Rackspace'),(272143,5576,5576,'2011-01-13 23:17:36','2011-01-13 23:17:36','    Don\'t unnecessarily quote account, container or object values.\n    \n    This fixed the problem where containers or objects with characters\n    that need quoting can\'t be audited because they aren\'t found.\n',3,3,'Cloudscaling'),(272145,197,197,'2011-01-14 08:45:39','2011-01-14 08:45:39','    i18n stuff\n',91,81,'Rackspace'),(272146,197,197,'2011-01-14 11:17:33','2011-01-14 11:17:33','    few more from proxy\n',23,23,'Rackspace'),(272147,197,197,'2011-01-14 11:30:17','2011-01-14 11:30:17','    missed things\n',15,15,'Rackspace'),(272149,197,197,'2011-01-14 05:43:23','2011-01-14 05:43:23','    swift3 bucket listing args\n',128,22,'Rackspace'),(272150,197,197,'2011-01-14 05:47:44','2011-01-14 05:47:44','    typo\n',1,1,'Rackspace'),(272151,197,197,'2011-01-14 08:26:50','2011-01-14 08:26:50','    PUT headers\n',37,7,'Rackspace'),(272152,197,197,'2011-01-14 08:33:10','2011-01-14 08:33:10','    simplify put response\n',1,3,'Rackspace'),(272154,4533,4533,'2011-01-14 13:49:05','2011-01-14 13:49:05','    Added doc strings and pointers to docs for swift3\n',107,21,'Rackspace'),(272155,4533,4533,'2011-01-14 14:30:05','2011-01-14 14:30:05','    Moved the main middleware docs to the module level\n',38,36,'Rackspace'),(272157,197,197,'2011-01-14 20:30:38','2011-01-14 20:30:38','    Execute fsyncs in a thread pool.\n',3,3,'Rackspace'),(272159,4533,4533,'2011-01-17 21:51:09','2011-01-17 21:51:09','    Fixes issue of HTTPS not being greened\n',10,2,'Rackspace'),(272160,4533,4533,'2011-01-17 22:08:07','2011-01-17 22:08:07','    Removed the bare excepts\n',4,4,'Rackspace'),(272162,5574,5574,'2011-01-17 15:42:20','2011-01-17 15:42:20','    s3api: fix AWSAccessKeyId\n    \n    We use cfaccount as AWSAccessKeyId (something like\n    AUTH_89308df71f274e33af17779606f08fa0). However, users with the same\n    account use the same cfaccount. In such case, we can\'t know which\n    password should be used as a secret key to calculate the HMAC.\n    \n    This changes AWSAccessKeyId to the combination of account and user:\n    \n    Authorization: AWS test:tester:xQE0diMbLRepdf3YB+FIEXAMPLE=\n    \n    The auth validates the HMAC and sends a cfaccount back to the\n    proxy. The proxy rewrites the path with the cfaccount.\n',21,13,'NTT'),(272163,5574,5574,'2011-01-17 15:51:59','2011-01-17 15:51:59','    s3api: update unit tests for AWSAccessKeyId change\n',16,16,'NTT'),(272165,197,197,'2011-01-17 21:49:48','2011-01-17 21:49:48','    modify default_swift_cluster option format\n',31,32,'Rackspace'),(272167,5248,5248,'2011-01-26 14:31:33','2011-01-26 14:31:33','    removing blank excepts\n',77,74,'Rackspace'),(272168,5574,5574,'2011-01-18 14:44:00','2011-01-18 14:44:00','    s3api: fix devauth auth failure handling\n',2,1,'NTT'),(272170,5576,5576,'2011-01-18 12:08:22','2011-01-18 12:08:22','    Fix output formatting (missing tuple).\n    \n    Fix to be robust when container and object counts are None (this\n    happens if accounts can\'t be located).\n',5,3,'Cloudscaling'),(272172,197,197,'2011-01-18 20:55:19','2011-01-18 20:55:19','    shuffle nodes and cache files for public access performance\n',17,3,'Rackspace'),(272174,206,206,'2011-01-17 14:36:28','2011-01-17 14:36:28','    client.py: Reset of streams during upload retries\n',132,16,'Rackspace'),(272176,206,206,'2011-01-17 14:44:55','2011-01-17 14:44:55','    client.py: Dead code removal\n',0,6,'Rackspace'),(272178,198,198,'2011-01-17 11:07:58','2011-01-17 11:07:58','    access processor now handles extra fields in the log line\n',46,4,'Rackspace'),(272180,5574,5574,'2011-01-18 10:55:26','2011-01-18 10:55:26','    s3api: fix unicode name container and object\n',2,3,'NTT'),(272182,5574,5574,'2011-01-19 08:41:11','2011-01-19 08:41:11','    s3api: update the comment for the id scheme change\n',3,3,'NTT'),(272184,197,197,'2011-01-19 03:56:13','2011-01-19 03:56:13','    break up that chunked put test\n',627,570,'Rackspace'),(272186,5574,5574,'2011-01-20 06:22:05','2011-01-20 06:22:05','    http_connect and http_connect_raw use the default http ports if no\n    port is given\n',4,0,'NTT'),(272188,206,206,'2011-01-19 15:21:57','2011-01-19 15:21:57','    Updates to remove _ usage that is not i18n related\n',60,56,'Rackspace'),(272190,5246,5246,'2011-01-19 11:05:42','2011-01-19 11:05:42','    mocked out xattr in test_proxy\n',17,8,'Rackspace'),(272191,5246,5246,'2011-01-19 14:18:37','2011-01-19 14:18:37','    obsolete PATH_TO_TEST_XFS\n',38,107,'Rackspace'),(272192,5246,5246,'2011-01-19 16:05:22','2011-01-19 16:05:22','    made tests play nice with standalone unittest, fixed some doc stuff\n',6,4,'Rackspace'),(272193,5246,5246,'2011-01-19 16:19:43','2011-01-19 16:19:43','    pep8\n',5,1,'Rackspace'),(272195,206,206,'2011-01-21 12:43:50','2011-01-21 12:43:50','    container-updater: temporrar account update suppression on errors\n',41,6,'Rackspace'),(272196,206,206,'2011-01-22 10:01:43','2011-01-22 10:01:43','    Doc update\n',19,13,'Rackspace'),(272197,5577,5577,'2011-01-20 16:01:37','2011-01-20 16:01:37','    also catch NXDOMAIN exception\n',2,1,'iomart'),(272198,198,198,'2011-01-20 14:15:05','2011-01-20 14:15:05','    added NoAnswer error catching\n',2,2,'Rackspace'),(272201,5576,5576,'2011-01-20 14:57:06','2011-01-20 14:57:06','    Make sure we pass strings correctly to functions that will behave\n    badly otherwise (fix suggested by Chuck Thier).\n    \n    Tweak account & container name output slightly (makes cut & paste\n    easier).\n',5,5,'Cloudscaling'),(272202,5576,5576,'2011-01-20 16:11:23','2011-01-20 16:11:23','    Additional utf-8 encoding fixes to deal with containers.\n',3,3,'Cloudscaling'),(272204,5248,5248,'2011-01-20 17:05:44','2011-01-20 17:05:44','    fixing rate limiting to allow for catch up\n',30,14,'Rackspace'),(272205,5248,5248,'2011-01-20 17:07:01','2011-01-20 17:07:01','    pep8\n',1,1,'Rackspace'),(272206,5248,5248,'2011-01-21 16:28:58','2011-01-21 16:28:58','    fixes after code walk through\n',30,31,'Rackspace'),(272207,5248,5248,'2011-01-21 16:51:19','2011-01-21 16:51:19','    fix unit test\n',4,3,'Rackspace'),(272209,206,206,'2011-01-23 10:42:31','2011-01-23 10:42:31','    In-depth documentation on paste.deploy configuration files\n',74,3,'Rackspace'),(272210,206,206,'2011-01-23 10:50:55','2011-01-23 10:50:55','    Remove the misleading \"Always\"\n',4,4,'Rackspace'),(272211,206,206,'2011-01-23 12:32:10','2011-01-23 12:32:10','    get_logger now uses python\'s log routing to separate multiple log_names in the same process\n',20,12,'Rackspace'),(272212,206,206,'2011-01-23 12:58:54','2011-01-23 12:58:54','    get_logger now separates different log_levels\n',15,15,'Rackspace'),(272213,206,206,'2011-01-23 13:18:28','2011-01-23 13:18:28','    More doc updates for logger stuff\n',133,40,'Rackspace'),(272215,5577,5577,'2011-01-20 11:55:52','2011-01-20 11:55:52','    Check account starts with correct case version of reseller_prefix.\n',10,0,'iomart'),(272216,5577,5577,'2011-01-20 15:50:55','2011-01-20 15:50:55','    Wrapped long line\n',2,1,'iomart'),(272217,5577,5577,'2011-01-21 10:11:38','2011-01-21 10:11:38','    changed domain_remap to handle multiple reseller prefixes\n',7,5,'iomart'),(272218,5577,5577,'2011-01-21 22:32:43','2011-01-21 22:32:43','    update proxy-server.conf-sample for domain_remap reseller prefix list\n',1,1,'iomart'),(272219,198,198,'2011-01-24 13:24:47','2011-01-24 13:24:47','    changed domain_remap to use an exclusive list in reseller_prefixes. added tests\n',64,26,'Rackspace'),(272221,5577,5577,'2011-01-24 19:37:50','2011-01-24 19:37:50','    fix small typo in domain_remap docs\n',1,1,'iomart'),(272223,5576,5576,'2011-01-24 13:56:39','2011-01-24 13:56:39','    Show account names in output strings.\n    \n    This helps when the output comes from concurrent workers doing the\n    checking as it\'s not strictly ordered.\n',4,5,'Cloudscaling'),(272225,5574,5574,'2011-01-19 09:56:58','2011-01-19 09:56:58','    swauth: add s3api support\n    \n    This changes handle_put_user() to put \'x-object-meta-account-id\' to a\n    user object. The metadata includes an cfaccount like\n    x-container-meta-account-id.\n    \n    The above enables swauth to avoid issuing two HTTP requests per single\n    S3 request, that is, swauth get the password and cfaccount from the\n    account and user by issuing \'GET /v1/(auth_account)/(account)/(user)\'\n    \n    If swauth can\'t get \'x-object-meta-account-id\' metadata from a user\n    object (the existing user objects), it issues \'GET\n    /v1/(auth_account)/(account)\' to get the cfaccount.\n',48,2,'NTT'),(272226,5574,5574,'2011-01-19 15:23:29','2011-01-19 15:23:29','    swauth: update the unit tests for s3api changes\n',8,4,'NTT'),(272227,5574,5574,'2011-01-19 15:23:53','2011-01-19 15:23:53','    swauth: pep8 fixes\n',10,8,'NTT'),(272228,206,206,'2011-01-24 13:09:06','2011-01-24 13:09:06','    swauth: log s3 in place of token when in use; changed a couple GETs to HEADs; pep8\n',12,8,'Rackspace'),(272231,206,206,'2011-01-25 15:21:49','2011-01-25 15:21:49','    Update to load suppressions from both os.wait points\n',21,12,'Rackspace'),(272232,206,206,'2011-01-24 21:39:00','2011-01-24 21:39:00','    pep8 and i18n fixes\n',51,35,'Rackspace'),(272234,206,206,'2011-01-24 17:12:38','2011-01-24 17:12:38','    Fix tests to cleanup their /tmp dirs\n',21,23,'Rackspace'),(272236,4533,4533,'2011-01-25 16:19:38','2011-01-25 16:19:38','    Bumped version to 1.2 to get ready for release, and updated the AUTHORS file\n',5,1,'Rackspace'),(272242,197,197,'2011-01-27 00:01:24','2011-01-27 00:01:24','    add pybabel setup.py commands and initial .pot\n',1054,1,'Rackspace'),(272243,197,197,'2011-01-27 00:06:20','2011-01-27 00:06:20','    refactor setup.py\n',18,8,'Rackspace'),(272245,197,197,'2011-01-27 21:02:53','2011-01-27 21:02:53','    object replicator logging and increase rsync timeouts\n',11,8,'Rackspace'),(272246,197,197,'2011-01-27 22:42:36','2011-01-27 22:42:36','    fix typo\n',1,1,'Rackspace'),(272248,5567,5567,'2011-01-27 20:23:14','2011-01-27 20:23:14','    Commit out the both calls\n',4,2,'independent'),(272250,4533,4533,'2011-01-28 10:00:10','2011-01-28 10:00:10','    Changing version to add gamma\n',1,1,'Rackspace'),(272252,198,198,'2011-01-30 08:59:35','2011-01-30 08:59:35','    removed extra import in account stats logger\n',0,1,'Rackspace'),(272254,4533,4533,'2011-02-01 15:48:46','2011-02-01 15:48:46','    Bumping version to 1.2-rc\n',1,1,'Rackspace'),(272256,5567,5567,'2011-01-29 16:43:02','2011-01-29 16:43:02','    listing is a tuple correcting reference rv[1]\n',1,1,'independent'),(272258,206,206,'2011-02-02 09:38:17','2011-02-02 09:38:17','    Fix duplicate logging\n',4,3,'Rackspace'),(272259,206,206,'2011-02-02 10:23:01','2011-02-02 10:23:01','    Make swauth only log requests it handles\n',2,0,'Rackspace'),(272260,206,206,'2011-02-02 10:47:56','2011-02-02 10:47:56','    logging: Remove old handler before installing a new handler\n',15,9,'Rackspace'),(272262,206,206,'2011-02-02 13:39:08','2011-02-02 13:39:08','    logging: use routes to separate logging configurations\n',41,35,'Rackspace'),(272263,4533,4533,'2011-02-02 22:37:55','2011-02-02 22:37:55','    Bumping version to 1.2.0 in preparation for release\n',1,1,'Rackspace'),(272265,4533,4533,'2011-02-03 19:27:25','2011-02-03 19:27:25','    Updating version to 1.3-dev\n',1,1,'Rackspace'),(272267,5246,5246,'2011-02-04 20:58:31','2011-02-04 20:58:31','    fix st command help hangs\n    \n    Before running the command function global the main func would start the\n    print and error queues.  Inside the command function the the option\n    parser would see the the help option, print the help text, and raise\n    SystemExit, which wasn\'t getting caught.\n',1,1,'Rackspace'),(272269,197,197,'2011-01-29 00:54:12','2011-01-29 00:54:12','    support WAL journaling instead of .pending files\n',29,166,'Rackspace'),(272270,197,197,'2011-01-29 01:23:18','2011-01-29 01:23:18','    retry connect refactor\n',27,22,'Rackspace'),(272271,197,197,'2011-01-29 01:40:55','2011-01-29 01:40:55','    increase WAL autocheckpoint\n',2,0,'Rackspace'),(272272,197,197,'2011-01-29 03:26:26','2011-01-29 03:26:26','    replication fixes for WAL\n',5,1,'Rackspace'),(272273,197,197,'2011-01-29 18:22:16','2011-01-29 18:22:16','    refactor db open retry loop slightly\n',5,6,'Rackspace'),(272274,197,197,'2011-01-29 19:26:06','2011-01-29 19:26:06','    remove pending_timeout references\n',2,14,'Rackspace'),(272275,206,206,'2011-02-04 11:16:21','2011-02-04 11:16:21','    Indexing and integrity changes in dbs.\n',69,56,'Rackspace'),(272276,206,206,'2011-02-04 11:37:35','2011-02-04 11:37:35','    Move db version resolution to its own function\n',21,15,'Rackspace'),(272277,206,206,'2011-02-04 11:50:30','2011-02-04 11:50:30','    Fix account db change\n',6,10,'Rackspace'),(272282,206,206,'2011-02-10 00:01:07','2011-02-10 00:01:07','    Fix drive-audit\'s default log_name\n',1,0,'Rackspace'),(272284,5246,5246,'2011-02-10 11:57:51','2011-02-10 11:57:51','    slightly more consistant stats process log names\n    \n    Also a quick fix to the auditor tests xattr mock\n',8,11,'Rackspace'),(272286,4533,4533,'2011-02-10 10:09:31','2011-02-10 10:09:31','    Adding python-netifaces to dependencies for packaging docs\n',1,0,'Rackspace'),(272288,5246,5246,'2011-02-03 13:46:28','2011-02-03 13:46:28','    moved warning messages out of proxy.logger.info\n    \n    A few warning/client error messages were useing the .info log level which we\n    reserve for access logs.  They were changed to warnings.\n',3,3,'Rackspace'),(272289,5246,5246,'2011-02-03 15:23:07','2011-02-03 15:23:07','    Moved proxy server access log messages into their own log level\n    \n    Added new \"access\" log level available on swift loggers that will be routed to\n    the LOG_NOTICE priority in syslog for easy redirection of access log messages\n    via rsyslog and syslog-ng.\n',31,9,'Rackspace'),(272290,5246,5246,'2011-02-05 15:38:49','2011-02-05 15:38:49','    added new proxy-server configuration options for access_log_facility and\n    access_log_name\n',31,18,'Rackspace'),(272292,5246,5246,'2011-02-10 14:59:52','2011-02-10 14:59:52','    logging refactor to support proxy access logs\n    \n    New log level \"notice\" set to python log level 25 maps to syslog priority\n    LOG_NOTICE.  Used for some messages in the proxy server, but will be available\n    to all apps using the LogAdapter returned from get_logger.  Cleaned up some\n    code in get_logger so that console logging works with log_routes and removed\n    some unneeded bits.  NamedFormatter functionality was split between LogAdapter\n    (which now inherits from logging.LoggerAdapter) and TxnFormatter (which now is\n    only responsible for adding the log records txn_id).\n    \n    The proxy server app now configures a separate logger for access line logging.\n    By default it will use the same settings as the regular proxy logger.\n',417,164,'Rackspace'),(272293,5246,5246,'2011-02-10 15:05:53','2011-02-10 15:05:53','    updated proxy-server.conf-sample to include access_log_* defaults\n',3,0,'Rackspace'),(272294,5246,5246,'2011-02-10 15:23:59','2011-02-10 15:23:59','    cleaned up some comments\n',4,4,'Rackspace'),(272297,206,206,'2011-02-10 15:10:53','2011-02-10 15:10:53','    PEP8 Fixes\n',2,2,'Rackspace'),(272299,5247,5247,'2011-01-16 09:52:08','2011-01-16 09:52:08','    ipv6 support\n',99,37,'Rackspace'),(272302,197,197,'2011-02-03 19:50:16','2011-02-03 19:50:16','    update all ring-builder grammars\n',37,10,'Rackspace'),(272303,197,197,'2011-02-03 19:53:47','2011-02-03 19:53:47','    random newline\n',1,0,'Rackspace'),(272305,604,604,'2011-02-12 18:27:59','2011-02-12 18:27:59','    Added missing lockfile configuration to sample rsync.conf\n',3,0,'Nebula'),(272307,5246,5246,'2011-02-16 09:02:38','2011-02-16 09:02:38','    creating a Ring will ensure a valid HASH_PATH_SUFFIX\n    \n    To make sure that node lookups match what the servers return the generated\n    hashes need to match.  All the utils that use the ring should validate their\n    HASH_PATH_SUFFIX.\n',10,1,'Rackspace'),(272309,5246,5246,'2010-11-17 17:52:31','2010-11-17 17:52:31','    refactored swift-init to be more maintainable, added some features,\n    help, docs, tests, fixed lp:639710; new bin/test module with examples of\n    how to import files from bin and some stubs for swift-init\n',1153,161,'Rackspace'),(272310,5246,5246,'2010-11-18 16:47:44','2010-11-18 16:47:44','    made existing tests more literal/readable/useful\n',379,242,'Rackspace'),(272311,5246,5246,'2010-11-24 15:22:45','2010-11-24 15:22:45','    new test for status; pep8; moved capture std.out to inside temptree\n',93,15,'Rackspace'),(272313,5246,5246,'2010-11-19 07:42:21','2010-11-19 07:42:21','    started work on new tests\n',16,3,'Rackspace'),(272316,5246,5246,'2010-12-07 17:30:04','2010-12-07 17:30:04','    finished test_spawn, started test_wait\n',190,5,'Rackspace'),(272317,5246,5246,'2010-12-08 01:12:21','2010-12-08 01:12:21','    finished tests for wait\n',59,21,'Rackspace'),(272318,5246,5246,'2010-12-09 01:42:49','2010-12-09 01:42:49','    mostly finished SwiftServer tests, needs some cleanup\n',197,6,'Rackspace'),(272319,5246,5246,'2010-12-29 00:01:30','2010-12-29 00:01:30','    good start on TestSwiftInitClass\n',225,24,'Rackspace'),(272320,5246,5246,'2011-01-19 23:43:23','2011-01-19 23:43:23','    more tests, still slow going\n',128,7,'Rackspace'),(272321,5246,5246,'2011-02-11 13:18:19','2011-02-11 13:18:19','    Prepare for trunk merge.\n    \n    Refactored some of the swift_init classes into a new module in\n    swift.common, changed some names.  Removed the bin test stuff.  Fixed\n    some bugs, added some features.\n',169,2087,'Rackspace'),(272322,5246,5246,'2011-02-11 13:21:28','2011-02-11 13:21:28','    forgot some new files\n',1975,0,'Rackspace'),(272323,5246,5246,'2011-02-11 14:56:03','2011-02-11 14:56:03','    working on tests\n',110,51,'Rackspace'),(272324,5246,5246,'2011-02-12 01:49:24','2011-02-12 01:49:24','    more test, swift.common.manager coverage > 90%\n',247,148,'Rackspace'),(272326,5246,5246,'2011-02-12 02:22:01','2011-02-12 02:22:01','    fixed license dates\n',3,3,'Rackspace'),(272327,5246,5246,'2011-02-12 02:57:33','2011-02-12 02:57:33','    PEP8\n',5,2,'Rackspace'),(272330,5246,5246,'2011-02-12 03:25:29','2011-02-12 03:25:29','    renamed ini_files to conf_files in code\n',101,101,'Rackspace'),(272331,5246,5246,'2011-02-12 14:50:24','2011-02-12 14:50:24','    more tests and cleanup\n',138,20,'Rackspace'),(272332,5246,5246,'2011-02-14 14:52:49','2011-02-14 14:52:49','    review cleanup\n',37,28,'Rackspace'),(272333,5246,5246,'2011-02-14 16:53:25','2011-02-14 16:53:25','    i18n\n',23,25,'Rackspace'),(272334,5246,5246,'2011-02-14 17:02:08','2011-02-14 17:02:08','    redbo says we should capture stdio later\n',4,5,'Rackspace'),(272335,5246,5246,'2011-02-16 14:47:31','2011-02-16 14:47:31','    added [options] to command usage\n',1,1,'Rackspace'),(272336,5246,5246,'2011-02-15 10:48:22','2011-02-15 10:48:22','    wait is on by default\n',10,9,'Rackspace'),(272337,5246,5246,'2011-02-15 13:19:33','2011-02-15 13:19:33','    fixed tests for new wait default true\n',39,51,'Rackspace'),(272340,197,197,'2011-02-17 08:30:39','2011-02-17 08:30:39','    rename log-processing to log-processor\n',40,40,'Rackspace'),(272342,5246,5246,'2011-02-16 19:30:18','2011-02-16 19:30:18','    fixed glob pattern matching index offset error in stats\' LogUploader\n',135,4,'Rackspace'),(272343,5246,5246,'2011-02-16 19:52:22','2011-02-16 19:52:22','    pep8\n',16,9,'Rackspace'),(272345,206,206,'2011-02-15 18:43:55','2011-02-15 18:43:55','    ring: pickles now use only stdlib objects; old and really old pickles can still be read\n',78,16,'Rackspace'),(272347,206,206,'2011-02-11 17:39:44','2011-02-11 17:39:44','    Make swift-auth-to-swauth work with really old devauth dbs; update swauth to accept non-alnum chars in account and user names.\n',39,25,'Rackspace'),(272349,206,206,'2011-02-17 09:30:41','2011-02-17 09:30:41','    Revert wal+index\n',258,134,'Rackspace'),(272351,5248,5248,'2011-02-09 21:36:14','2011-02-09 21:36:14','    do not return devs with weight zero in get_more_nodes\n',67,26,'Rackspace'),(272354,206,206,'2011-02-23 23:26:05','2011-02-23 23:26:05','    Initial work on container syncing\n',509,78,'Rackspace'),(272355,206,206,'2011-02-24 10:50:00','2011-02-24 10:50:00','    Restrict hosts that can be targets/sources of container syncing\n',78,21,'Rackspace'),(272356,206,206,'2011-02-24 11:37:55','2011-02-24 11:37:55','    made x_container_sync_row its own column\n',58,36,'Rackspace'),(272357,206,206,'2011-02-24 15:01:22','2011-02-24 15:01:22','    More docs\n',274,14,'Rackspace'),(272358,206,206,'2011-02-25 17:31:58','2011-02-25 17:31:58','    Added [container-sync] to SAIO instructions\n',8,0,'Rackspace'),(272359,5248,5248,'2011-02-23 11:44:36','2011-02-23 11:44:36','    ratelimiting does not handle memcache restart\n',62,22,'Rackspace'),(272362,206,206,'2011-03-02 13:58:39','2011-03-02 13:58:39','    Double sync point code to divy up work amongst main nodes\n',131,29,'Rackspace'),(272363,206,206,'2011-03-02 14:18:49','2011-03-02 14:18:49','    Container sync doc updates\n',52,10,'Rackspace'),(272364,5248,5248,'2011-02-14 20:25:40','2011-02-14 20:25:40','    audit zero byte files quickly without true value\n',168,61,'Rackspace'),(272365,5248,5248,'2011-02-14 20:48:28','2011-02-14 20:48:28','    forgot log-uploader change\n',3,2,'Rackspace'),(272366,5248,5248,'2011-02-14 18:02:53','2011-02-14 18:02:53','    refactor daemons with args/kwargs\n',31,22,'Rackspace'),(272367,5248,5248,'2011-02-14 18:10:39','2011-02-14 18:10:39','    stupid comment\n',0,1,'Rackspace'),(272368,5248,5248,'2011-02-14 18:36:04','2011-02-14 18:36:04','    pep8\n',3,0,'Rackspace'),(272370,5248,5248,'2011-02-21 16:37:12','2011-02-21 16:37:12','    simplifying options and code\n',35,38,'Rackspace'),(272371,5248,5248,'2011-02-24 12:27:20','2011-02-24 12:27:20','    fixing the run_forever and unit tests\n',99,12,'Rackspace'),(272372,5248,5248,'2011-02-25 09:09:02','2011-02-25 09:09:02','    peer review edits\n',14,17,'Rackspace'),(272373,5248,5248,'2011-02-28 12:20:55','2011-02-28 12:20:55','    get rid of logger\n',0,1,'Rackspace'),(272374,5248,5248,'2011-02-28 10:59:16','2011-02-28 10:59:16','    lower memcache error limit duration\n',1,1,'Rackspace'),(272376,197,197,'2011-02-28 23:07:53','2011-02-28 23:07:53','    doc fix\n',1,1,'Rackspace'),(272378,198,198,'2011-02-08 14:46:11','2011-02-08 14:46:11','    fixed edge case when log processor cannot get a log file for processing\n',195,35,'Rackspace'),(272379,5246,5246,'2011-02-16 16:07:24','2011-02-16 16:07:24','    fix log_processor tests\n',9,5,'Rackspace'),(272381,5572,5572,'2011-02-24 17:22:57','2011-02-24 17:22:57','    fixed problem with how processed files list download failures are handled\n',10,4,'Rackspace'),(272383,5572,5572,'2011-02-25 21:01:35','2011-02-25 21:01:35','    reverts changes in my last merge request for lp707549\n',4,10,'Rackspace'),(272386,5574,5574,'2011-02-23 11:55:49','2011-02-23 11:55:49','    s3api: use boto to get canonical string for signature\n    \n    Replace the homegrown function to get a canonical string for\n    signature.\n',8,20,'NTT'),(272387,5574,5574,'2011-02-23 11:57:31','2011-02-23 11:57:31','    update docs about python-boto dependency\n',2,1,'NTT'),(272388,5574,5574,'2011-03-01 20:50:28','2011-03-01 20:50:28','    s3api: move boto dependency descriptions to swift3.py\n',4,2,'NTT'),(272390,4533,4533,'2011-03-03 20:34:48','2011-03-03 20:34:48','    Swift3 tests will now skip if boto is not installed\n',9,0,'Rackspace'),(272391,4533,4533,'2011-03-03 20:47:23','2011-03-03 20:47:23','    heh\n',1,3,'Rackspace'),(272393,197,197,'2011-01-16 14:50:29','2011-01-16 14:50:29','    proxy refactor\n',104,311,'Rackspace'),(272394,197,197,'2011-01-19 04:35:59','2011-01-19 04:35:59','    concurrent object PUT streaming\n',61,36,'Rackspace'),(272395,197,197,'2011-01-19 12:25:29','2011-01-19 12:25:29','    bug fixes in concurrency\n',20,21,'Rackspace'),(272396,197,197,'2011-01-19 13:55:07','2011-01-19 13:55:07','    make_requests refactor\n',12,19,'Rackspace'),(272397,197,197,'2011-01-19 14:08:41','2011-01-19 14:08:41','    error_limited refactor\n',15,57,'Rackspace'),(272398,197,197,'2011-01-19 14:22:32','2011-01-19 14:22:32','    concurrent object PUT connections\n',30,27,'Rackspace'),(272402,197,197,'2011-01-31 01:46:33','2011-01-31 01:46:33','    tweaks\n',4,4,'Rackspace'),(272404,197,197,'2011-02-24 08:07:26','2011-02-24 08:07:26','    fix loggin\n',6,2,'Rackspace'),(272405,197,197,'2011-02-24 09:02:50','2011-02-24 09:02:50','    small refactors\n',9,11,'Rackspace'),(272406,197,197,'2011-02-24 09:46:08','2011-02-24 09:46:08','    fixes\n',6,7,'Rackspace'),(272408,197,197,'2011-03-02 20:38:08','2011-03-02 20:38:08','    remove offending probe checks\n',0,22,'Rackspace'),(272410,197,197,'2011-03-03 20:24:03','2011-03-03 20:24:03','    recommended doc changes\n',4,1,'Rackspace'),(272414,197,197,'2011-03-01 15:24:15','2011-03-01 15:24:15','    Add a \"getting swift\" section to the getting started doc\n',15,0,'Rackspace'),(272416,5246,5246,'2011-02-22 18:00:11','2011-02-22 18:00:11','    made functional tests more configurable\n    \n    SWIFT_TEST_CONFIG_FILE can redirect both functional test suites to any conf\n    functional tests that don\'t require a account:username can now work with only\n    username for auth systems that don\'t support the account/namespace concept\n',42,20,'Rackspace'),(272417,5246,5246,'2011-02-22 22:25:38','2011-02-22 22:25:38','    i need to pull in the changes to functionalnosetest/swift_testing.py\n',3,0,'Rackspace'),(272418,5246,5246,'2011-02-23 11:29:06','2011-02-23 11:29:06','    made functionalnosetests works with no account usernames\n',32,38,'Rackspace'),(272419,5246,5246,'2011-02-24 11:59:34','2011-02-24 11:59:34','    better error messages on missing/malformed configs\n',16,14,'Rackspace'),(272420,5246,5246,'2011-02-24 12:28:17','2011-02-24 12:28:17','    went ahead and spoofed a [func_test] section\n',48,38,'Rackspace'),(272421,5246,5246,'2011-02-24 16:21:14','2011-02-24 16:21:14','    PEP8\n',9,7,'Rackspace'),(272422,5246,5246,'2011-02-25 14:22:56','2011-02-25 14:22:56','    consistant hasattr in readconf\n',1,1,'Rackspace'),(272425,206,206,'2011-03-18 15:05:20','2011-03-18 15:05:20','    Require x-timestamp for container-sync requests\n',4,3,'Rackspace'),(272426,198,198,'2011-02-25 15:19:51','2011-02-25 15:19:51','    internal_proxy handles retries better\n',17,32,'Rackspace'),(272427,198,198,'2011-02-28 16:25:43','2011-02-28 16:25:43','    added tests for internal proxy and updated internal proxy retries\n',141,15,'Rackspace'),(272428,198,198,'2011-03-04 14:01:42','2011-03-04 14:01:42','    improved internal proxy tests\n',72,31,'Rackspace'),(272429,198,198,'2011-03-07 10:21:32','2011-03-07 10:21:32','    streamlined internal_proxy\n',32,41,'Rackspace'),(272430,198,198,'2011-03-07 14:24:29','2011-03-07 14:24:29','    cleaned up internal proxy tests\n',29,10,'Rackspace'),(272431,198,198,'2011-03-07 14:32:16','2011-03-07 14:32:16','    renamed internal proxy test method\n',2,2,'Rackspace'),(272432,198,198,'2011-03-08 10:46:53','2011-03-08 10:46:53','    improved internal proxy tests and changed internal_proxy.get_container_list\n',2,2,'Rackspace'),(272433,198,198,'2011-03-08 10:50:07','2011-03-08 10:50:07','    better handling of internal_proxy.get_container_list response in log_processor\n',11,15,'Rackspace'),(272435,203,203,'2011-03-04 16:35:02','2011-03-04 16:35:02','    Fixes separate IP address for auth on multinode install plus adds some scripting touches\n',101,37,'Rackspace'),(272437,5246,5246,'2011-03-08 14:23:31','2011-03-08 14:23:31','    fix ring hash check fix in obj replicator tests\n',2,0,'Rackspace'),(272439,5248,5248,'2011-03-07 11:14:01','2011-03-07 11:14:01','    fix for object auditor invalidate hashes bug\n',13,4,'Rackspace'),(272441,206,206,'2011-03-10 08:52:03','2011-03-10 08:52:03','    Fixes to work with WebOb 1.0.1 and WebOb 1.0.3\n',8,8,'Rackspace'),(272443,203,203,'2011-03-09 23:14:38','2011-03-09 23:14:38','    Adding a box to each page that gives readers links to 1.1 and 1.2 Swift docs sites\n',219,4,'Rackspace'),(272445,5246,5246,'2011-03-11 17:50:54','2011-03-11 17:50:54','    fixed pattern matching/globbing in swift-log-uploader\n',365,108,'Rackspace'),(272446,5246,5246,'2011-03-11 18:07:17','2011-03-11 18:07:17','    removed old comment\n',0,2,'Rackspace'),(272448,5246,5246,'2011-03-14 10:06:16','2011-03-14 10:06:16','    rename var\n',3,3,'Rackspace'),(272450,5572,5572,'2011-02-25 21:36:54','2011-02-25 21:36:54','    processed files list in log processing will now only be created if a 404 is returned on failed download\n',10,4,'Rackspace'),(272452,5574,5574,'2011-02-23 13:19:06','2011-02-23 13:19:06','    s3api: fix PUT Object Copy\n',7,1,'NTT'),(272453,5574,5574,'2011-03-06 18:58:07','2011-03-06 18:58:07','    s3api: fix PUT Object Copy unit test\n',1,1,'NTT'),(272455,5574,5574,'2011-03-07 13:00:39','2011-03-07 13:00:39','    s3api: add get acl object and bucket support\n    \n    A simple response that gives the owner to FULL_CONTROL always returns\n    because Swift doesn\'t support a fine acl.\n',33,2,'NTT'),(272456,5574,5574,'2011-03-07 13:03:01','2011-03-07 13:03:01','    s3api: add acl get unit tests\n',24,0,'NTT'),(272458,4533,4533,'2011-02-04 14:20:09','2011-02-04 14:20:09','    Added rsyslog setup docs for SAIO\n',41,0,'Rackspace'),(272459,4533,4533,'2011-02-07 14:45:38','2011-02-07 14:45:38','    Added a catch all log, and cleaned up a bit\n',13,10,'Rackspace'),(272460,4533,4533,'2011-02-14 16:56:40','2011-02-14 16:56:40','    Added logging for stats processing\n',25,36,'Rackspace'),(272461,4533,4533,'2011-02-15 14:51:00','2011-02-15 14:51:00','    Fixed a typo, and made restarting consistent\n',4,4,'Rackspace'),(272462,4533,4533,'2011-03-03 10:44:50','2011-03-03 10:44:50','    Updated user to be in the adm group and chmod the log dirs so that the processing will work correctly\n',3,0,'Rackspace'),(272464,4533,4533,'2011-03-15 15:28:29','2011-03-15 15:28:29','    added cleaning up of logs in resetswift for saio\n',1,0,'Rackspace'),(272466,206,206,'2011-03-15 15:06:35','2011-03-15 15:06:35','    Fix incorrect import\n',2,3,'Rackspace'),(272468,206,206,'2011-03-14 02:56:37','2011-03-14 02:56:37','    Removing DevAuth\n',102,3081,'Rackspace'),(272469,206,206,'2011-03-14 03:08:23','2011-03-14 03:08:23','    Fixes with removing DevAuth\n',1,10,'Rackspace'),(272471,206,206,'2011-03-11 12:50:57','2011-03-11 12:50:57','    Fix for incorrect use of urlparse results in swauth bins\n',43,36,'Rackspace'),(272473,206,206,'2011-02-18 08:07:03','2011-02-18 08:07:03','    Readd new index changes\n',72,62,'Rackspace'),(272474,206,206,'2011-02-18 08:30:08','2011-02-18 08:30:08','    Updated new index code\n',27,78,'Rackspace'),(272475,206,206,'2011-02-18 08:43:19','2011-02-18 08:43:19','    Possibly speed improvement on existence-select\n',1,1,'Rackspace'),(272482,198,198,'2011-03-17 16:42:58','2011-03-17 16:42:58','    whitelist valid query params to count for stats\n',4,1,'Rackspace'),(272483,198,198,'2011-03-17 17:22:43','2011-03-17 17:22:43','    fixed tests\n',24,1,'Rackspace'),(272486,5248,5248,'2011-03-10 12:26:41','2011-03-10 12:26:41','    refactor the quarantine\n',116,49,'Rackspace'),(272487,5248,5248,'2011-03-15 22:12:03','2011-03-15 22:12:03','    unittests workng and added probe test\n',757,147,'Rackspace'),(272489,5248,5248,'2011-03-16 07:55:07','2011-03-16 07:55:07','    change ite logic and add more tests\n',106,72,'Rackspace'),(272491,5248,5248,'2011-03-16 09:04:00','2011-03-16 09:04:00','    pep8\n',17,17,'Rackspace'),(272493,5248,5248,'2011-03-24 09:16:05','2011-03-24 09:16:05','    adding reset flags\n',2,0,'Rackspace'),(272494,5248,5248,'2011-03-28 19:09:24','2011-03-28 19:09:24','    peer review changes\n',3,2,'Rackspace'),(272495,206,206,'2011-02-18 23:22:15','2011-02-18 23:22:15','    Working staticweb filter\n',238,1,'Rackspace'),(272496,206,206,'2011-02-18 23:37:51','2011-02-18 23:37:51','    staticweb: Reallow direct container listings\n',6,2,'Rackspace'),(272497,206,206,'2011-02-19 12:35:58','2011-02-19 12:35:58','    staticweb: work in progress\n',85,80,'Rackspace'),(272498,206,206,'2011-02-19 13:09:20','2011-02-19 13:09:20','    staticweb: added a todo\n',1,0,'Rackspace'),(272500,206,206,'2011-03-24 03:37:07','2011-03-24 03:37:07','    Update from feedback; docs\n',335,110,'Rackspace'),(272501,206,206,'2011-03-24 07:46:02','2011-03-24 07:46:02','    Tests; bug fixes\n',551,28,'Rackspace'),(272502,206,206,'2011-03-24 19:22:54','2011-03-24 19:22:54','    Typo in docs\n',1,1,'Rackspace'),(272503,198,198,'2011-03-22 18:17:47','2011-03-22 18:17:47','    fixed object POST so content encoding can be set and deleted\n',23,2,'Rackspace'),(272504,198,198,'2011-03-22 18:25:16','2011-03-22 18:25:16','    now can delete content-encoding if it was set at object creation\n',1,1,'Rackspace'),(272505,198,198,'2011-03-22 20:05:44','2011-03-22 20:05:44','    objects can now have arbitrary headers set in metadata that will be served back when they are fetched\n',34,9,'Rackspace'),(272506,198,198,'2011-03-22 22:41:39','2011-03-22 22:41:39','    simplified header key lookup\n',2,4,'Rackspace'),(272507,198,198,'2011-03-22 22:54:16','2011-03-22 22:54:16','    explicitly strip disallowed headers from the config\n',2,1,'Rackspace'),(272508,198,198,'2011-03-24 11:43:12','2011-03-24 11:43:12','    fixed location of a test\n',1,1,'Rackspace'),(272510,198,198,'2011-03-24 13:03:49','2011-03-24 13:03:49','    added default support for content-disposition and allows x-object-manifest to be manipulated like any other object metadata header\n',59,18,'Rackspace'),(272512,197,197,'2011-03-20 22:14:03','2011-03-20 22:14:03','    refactor obj-rep a bit and move hash recalculate to before rsync step\n',37,52,'Rackspace'),(272515,206,206,'2011-03-24 22:53:08','2011-03-24 22:53:08','    Changing some semantics and defaults; .r:* listings are off by default now and .rlistings turn them on; new x-container-meta-web-listings header to turn webmode listings on/off (off by default)\n',83,72,'Rackspace'),(272516,206,206,'2011-03-24 23:12:36','2011-03-24 23:12:36','    Updated func tests and made swauth .rlistings check a bit easier to read\n',5,5,'Rackspace'),(272517,206,206,'2011-03-24 23:17:38','2011-03-24 23:17:38','    Updated sample conf\n',1,2,'Rackspace'),(272518,206,206,'2011-03-24 23:50:52','2011-03-24 23:50:52','    More bugfixes found by letterj\n',15,9,'Rackspace'),(272519,206,206,'2011-03-25 08:33:46','2011-03-25 08:33:46','    Added logging\n',124,47,'Rackspace'),(272520,206,206,'2011-03-25 08:55:53','2011-03-25 08:55:53','    pep8 and doc updates\n',18,7,'Rackspace'),(272521,206,206,'2011-03-25 09:16:38','2011-03-25 09:16:38','    Made the link to the custom listings css relative since the request could have had its path modified several times between the end remote client and staticweb\n',4,3,'Rackspace'),(272522,206,206,'2011-03-25 19:21:35','2011-03-25 19:21:35','    Bug fix for subpath redirects\n',20,20,'Rackspace'),(272523,206,206,'2011-03-25 20:00:21','2011-03-25 20:00:21','    Specific unit test for previous bugfix\n',24,0,'Rackspace'),(272524,206,206,'2011-03-25 20:22:04','2011-03-25 20:22:04','    A bit more unit tests.\n',13,5,'Rackspace'),(272526,5248,5248,'2011-03-24 15:51:44','2011-03-24 15:51:44','    changing /usr/bin/python to /usr/bin/env python\n',34,34,'Rackspace'),(272527,5248,5248,'2011-03-24 16:19:39','2011-03-24 16:19:39','    getting rid of -u stuff\n',4,4,'Rackspace'),(272530,5248,5248,'2011-03-28 21:03:19','2011-03-28 21:03:19','    make executable\n',0,4,'Rackspace'),(272532,5246,5246,'2011-03-30 15:04:15','2011-03-30 15:04:15','    fixed lockups and lost messages in swift-init and capture_stdio\n',51,25,'Rackspace'),(272534,197,197,'2011-03-30 13:09:02','2011-03-30 13:09:02','    move canonical_string logic into swift3 middleware\n',57,16,'Rackspace'),(272535,197,197,'2011-03-30 13:47:04','2011-03-30 13:47:04','    remove re import\n',0,1,'Rackspace'),(272536,197,197,'2011-03-30 20:32:34','2011-03-30 20:32:34','    refactor to use webob req\n',11,10,'Rackspace'),(272538,4067,4067,'2011-03-30 20:32:11','2011-03-30 20:32:11','    Added two command line options to bin/swift-log-stats-collector\n',14,1,'Rackspace'),(272539,4067,4067,'2011-03-30 21:10:27','2011-03-30 21:10:27','    changed None check to use not and is\n',1,1,'Rackspace'),(272541,197,197,'2011-03-31 05:53:44','2011-03-31 05:53:44','    swift3 missing content type fix\n',16,1,'Rackspace'),(272542,197,197,'2011-03-31 05:56:00','2011-03-31 05:56:00','    messed up test\n',1,2,'Rackspace'),(272544,206,206,'2011-04-01 18:47:21','2011-04-01 18:47:21','    Fix .admin get_user privileges.\n',21,0,'Rackspace'),(272545,206,206,'2011-04-01 20:51:25','2011-04-01 20:51:25','    Fix to now allow reseller admins to see other reseller admin creds\n',35,4,'Rackspace'),(272546,206,206,'2011-04-01 21:17:47','2011-04-01 21:17:47','    Now .super_admin may get any user info; .reseller_admin may not get .reseller_admin info, .admin may not get .reseller_admin or .admin info, users can\'t get any user info\n',45,17,'Rackspace'),(272548,197,197,'2011-04-07 16:03:43','2011-04-07 16:03:43','    Add timeout exceptions to the proxy _make_request error handler\n',1,1,'Rackspace'),(272549,197,197,'2011-04-07 16:15:26','2011-04-07 16:15:26','    probably should not error limit on timeouts\n',1,2,'Rackspace'),(272551,5578,5578,'2011-03-17 14:02:59','2011-03-17 14:02:59','    Refactored and tested some of the log processing stuff\n',512,66,'Rackspace'),(272552,4067,4067,'2011-03-17 19:53:51','2011-03-17 19:53:51','    Fixed test\n',2,1,'Rackspace'),(272553,4067,4067,'2011-03-21 18:03:51','2011-03-21 18:03:51','    fixed a mismerge\n',1,1,'Rackspace'),(272554,4067,4067,'2011-03-24 17:14:18','2011-03-24 17:14:18','    fixed test and pep8 problem\n',4,3,'Rackspace'),(272556,4067,4067,'2011-04-11 20:56:57','2011-04-11 20:56:57','    added doc strings to new methods\n',119,2,'Rackspace'),(272558,206,206,'2011-04-11 23:06:20','2011-04-11 23:06:20','    Handle TimeoutErrors with a tpooled get_hashes\n',26,5,'Rackspace'),(272561,239,239,'2011-04-14 11:09:08','2011-04-14 11:09:08','    Bump version to 1.3-rc\n',1,1,'OpenStack Foundation'),(272563,239,239,'2011-04-14 15:39:59','2011-04-14 15:39:59','    Final Cactus versioning\n',1,1,'OpenStack Foundation'),(272565,239,239,'2011-04-15 11:54:32','2011-04-15 11:54:32','    Diablo versioning\n',1,1,'OpenStack Foundation'),(272568,206,206,'2011-04-15 23:27:07','2011-04-15 23:27:07','    consync: Make send-all-keys be send-all-keys-we-didnt-already-send\n',11,3,'Rackspace'),(272569,206,206,'2011-04-15 23:37:07','2011-04-15 23:37:07','    Bring st to date with client.py\n',2,3,'Rackspace'),(272570,206,206,'2011-04-15 23:47:25','2011-04-15 23:47:25','    consync: Make validate_sync_to explicitly return None on validation\n',1,0,'Rackspace'),(272571,4067,4067,'2011-04-14 20:55:03','2011-04-14 20:55:03','    made objrep use utils.write_pickle\n',7,10,'Rackspace'),(272573,4067,4067,'2011-04-13 19:30:21','2011-04-13 19:30:21','    swift-bench now deletes containers it makes if deleting of objects is requested\n',8,0,'Rackspace'),(272574,4067,4067,'2011-04-13 20:10:55','2011-04-13 20:10:55','    should probably let the user know when a container delete fails for reasons other than having objects in it\n',3,1,'Rackspace'),(272575,4067,4067,'2011-04-14 15:34:02','2011-04-14 15:34:02','    moving deleting of containers to run() method makes more sense\n',10,10,'Rackspace'),(272577,206,206,'2011-04-12 00:07:52','2011-04-12 00:07:52','    Move loadapp to after-fork\n',2,3,'Rackspace'),(272578,206,206,'2011-04-12 18:30:05','2011-04-12 18:30:05','    Put early loadapp back in, even though we won\'t use the result, to test for any instantiation problems early\n',3,0,'Rackspace'),(272580,4067,4067,'2011-04-14 22:34:12','2011-04-14 22:34:12','    removed ECONNRESET patch for eventlet wsgi\n',0,6,'Rackspace'),(272582,4067,4067,'2011-04-12 19:17:48','2011-04-12 19:17:48','    swauth-cleanup-tokens now handles 404s on token containers and tokens better\n',19,3,'Rackspace'),(272584,5248,5248,'2011-03-31 18:12:45','2011-03-31 18:12:45','    update ubuntu images on saio\n',3,3,'Rackspace'),(272585,5248,5248,'2011-04-13 11:38:01','2011-04-13 11:38:01','    adding line in resetswift for logging\n',3,1,'Rackspace'),(272587,5248,5248,'2011-04-11 16:26:50','2011-04-11 16:26:50','    unit tests for timeout exception\n',15,3,'Rackspace'),(272588,5248,5248,'2011-04-13 10:57:59','2011-04-13 10:57:59','    adding the probe test\n',58,1,'Rackspace'),(272590,5579,5579,'2011-04-01 08:10:55','2011-04-01 08:10:55','    making client ip appear in a standard place\n',31,0,'independent'),(272593,206,206,'2011-04-16 01:58:08','2011-04-16 01:58:08','    PEP8 Fixes\n',15,12,'Rackspace'),(272595,197,197,'2011-04-08 22:36:03','2011-04-08 22:36:03','    support URL-param signed requests in swift3 middleware\n',10,4,'Rackspace'),(272596,197,197,'2011-04-16 05:57:53','2011-04-16 05:57:53','    add at least one test\n',30,16,'Rackspace'),(272597,197,197,'2011-04-16 06:02:01','2011-04-16 06:02:01','    clean up at least one test\n',1,5,'Rackspace'),(272600,206,206,'2011-05-11 02:51:31','2011-05-11 02:51:31','    Merged from trunk\n',286,1,'Rackspace'),(272601,4067,4067,'2011-04-18 16:08:48','2011-04-18 16:08:48','    swauth scripts exit with non zero exit codes on failure now\n',12,14,'Rackspace'),(272604,4067,4067,'2011-04-13 14:52:25','2011-04-13 14:52:25','    made stats processing handle generic exception in collate_worker()\n',17,10,'Rackspace'),(272605,4067,4067,'2011-04-13 15:48:43','2011-04-13 15:48:43','    needed to push logging to where exception is caught\n',8,14,'Rackspace'),(272606,4067,4067,'2011-04-13 16:19:30','2011-04-13 16:19:30','    fixed a unit test assert statement\n',1,1,'Rackspace'),(272607,4067,4067,'2011-04-18 15:27:43','2011-04-18 15:27:43','    added account to log message\n',1,1,'Rackspace'),(272609,198,198,'2011-04-18 13:26:01','2011-04-18 13:26:01','    added scott simpson to the authors file\n',1,0,'Rackspace'),(272611,198,198,'2011-04-19 15:57:44','2011-04-19 15:57:44','    made failing unit test for HEAD requests\n',13,0,'Rackspace'),(272612,198,198,'2011-04-19 15:58:37','2011-04-19 15:58:37','    fixed HEAD requests with allowed_headers\n',2,2,'Rackspace'),(272614,5248,5248,'2011-04-18 15:00:59','2011-04-18 15:00:59','    adding double quarantine support for db replication\n',44,1,'Rackspace'),(272617,206,206,'2011-04-20 22:43:11','2011-04-20 22:43:11','    Fix for Object replicator breaks when running object replicator with no objects on the server\n',1,0,'Rackspace'),(272619,5579,5579,'2011-04-20 15:10:02','2011-04-20 15:10:02','    adding Accept-Ranges: bytes header to HEAD and GET requests.\n',73,2,'independent'),(272620,5579,5579,'2011-04-21 11:51:09','2011-04-21 11:51:09','    pep8 the file\n',2,2,'independent'),(272621,5579,5579,'2011-04-21 15:09:04','2011-04-21 15:09:04','    fixing unit test\n',1,1,'independent'),(272623,4067,4067,'2011-04-20 19:54:28','2011-04-20 19:54:28','    only latest async pending is now sent\n',65,7,'Rackspace'),(272624,4067,4067,'2011-04-21 15:18:34','2011-04-21 15:18:34','    got rid of use of set to keep track of obj hashes\n',4,4,'Rackspace'),(272626,4533,4533,'2011-05-05 20:48:22','2011-05-05 20:48:22','    Fixed issue of swift3 middleware not accepting \'/\' in object names\n',1,1,'Rackspace'),(272627,4533,4533,'2011-05-05 21:02:08','2011-05-05 21:02:08','    removed test that was incorrectly testing for a bad path\n',0,10,'Rackspace'),(272629,203,203,'2011-04-27 08:41:07','2011-04-27 08:41:07','    Changing version links to 1.2 and 1.3 instead of 1.1 and 1.2\n',1,1,'Rackspace'),(272630,203,203,'2011-04-28 20:17:55','2011-04-28 20:17:55','    Adds python-netifaces to the list\n',1,1,'Rackspace'),(272633,198,198,'2011-05-06 09:50:06','2011-05-06 09:50:06','    added transaction id header to every response\n',46,3,'Rackspace'),(272634,198,198,'2011-05-09 15:21:34','2011-05-09 15:21:34','    moved transaction id to catch errors middleware\n',61,69,'Rackspace'),(272635,198,198,'2011-05-12 10:48:46','2011-05-12 10:48:46','    fixed error with setting the tx trans_id prefix\n',2,2,'Rackspace'),(272636,198,198,'2011-05-12 10:57:35','2011-05-12 10:57:35','    reverted unneeded changes in proxy server\n',3,6,'Rackspace'),(272637,198,198,'2011-05-12 11:13:08','2011-05-12 11:13:08','    added a CHANGELOG\n',6,0,'Rackspace'),(272638,206,206,'2011-03-31 22:32:41','2011-03-31 22:32:41','    Rename swift-stats-* to swift-dispersion-* to avoid confusion with log stats stuff\n',437,24,'Rackspace'),(272640,206,206,'2011-05-12 00:14:02','2011-05-12 00:14:02','    Updated to use standard shebang and explicitly flush output; added deprecation warning to stats.conf\n',21,5,'Rackspace'),(272641,206,206,'2011-05-12 01:10:16','2011-05-12 01:10:16','    PEP8 fixes\n',3,0,'Rackspace'),(272645,5573,5573,'2011-05-13 07:51:21','2011-05-13 07:51:21','    Changed <subdir> formatting for container lsitings to align with <object>\n',2,1,'Rackspace'),(272646,5573,5573,'2011-05-13 08:08:10','2011-05-13 08:08:10','    Added Attribute for <subdir> back in as per suggestion by redbo\n',2,2,'Rackspace'),(272647,5573,5573,'2011-05-13 15:11:48','2011-05-13 15:11:48','    Removed / no need when in ()\n',1,1,'Rackspace'),(272648,5573,5573,'2011-05-19 06:59:47','2011-05-19 06:59:47','    Modified Unit tests for XML change\n',3,2,'Rackspace'),(272649,206,206,'2011-05-12 22:04:39','2011-05-12 22:04:39','    Fixed Python 2.7 compatibility problem\n',29,2,'Rackspace'),(272650,206,206,'2011-05-12 22:54:54','2011-05-12 22:54:54','    Fixed unit test not restoring things to prepatched state\n',10,6,'Rackspace'),(272652,206,206,'2011-05-17 15:29:33','2011-05-17 15:29:33','    Change the CHANGELOG; now we\'ll only change it as we cut a release.\n',4,9,'Rackspace'),(272654,197,197,'2011-05-12 19:07:48','2011-05-12 19:07:48','    fix ipv6 literals in rsync\n',4,4,'Rackspace'),(272656,197,197,'2011-05-13 02:41:37','2011-05-13 02:41:37','    update unit tests\n',2,2,'Rackspace'),(272658,5567,5567,'2011-05-02 23:49:44','2011-05-02 23:49:44','    Added bin/swift-container-stats-logger\n',1,0,'independent'),(272659,5567,5567,'2011-05-02 23:52:20','2011-05-02 23:52:20','    Adding section for container stats\n',11,0,'independent'),(272660,5567,5567,'2011-05-02 23:53:16','2011-05-02 23:53:16','    Initial commit for new script to collect container stats\n',112,0,'independent'),(272661,5567,5567,'2011-05-02 23:54:27','2011-05-02 23:54:27','    Initial commit for new cron job to collect container stats\n',26,0,'independent'),(272662,5567,5567,'2011-05-03 00:28:21','2011-05-03 00:28:21','    Added the utf-8 and url encodeing for the container name\n',6,3,'independent'),(272663,5567,5567,'2011-05-03 03:00:07','2011-05-03 03:00:07','    Added container stats info to the stats overview doc\n',22,3,'independent'),(272664,5567,5567,'2011-05-03 16:32:37','2011-05-03 16:32:37','    Rename source_filename_format in the example doc\n',9,9,'independent'),(272665,5567,5567,'2011-05-03 18:44:27','2011-05-03 18:44:27','    Corrected name typo in the container-stats section\n',5,5,'independent'),(272666,5567,5567,'2011-05-03 18:48:33','2011-05-03 18:48:33','    Fix pep8 issue\n',1,1,'independent'),(272667,5567,5567,'2011-05-03 19:13:05','2011-05-03 19:13:05','    Change source_filename_format to source_filename_pattern in the doc file\n',3,3,'independent'),(272668,5248,5248,'2011-05-04 18:47:56','2011-05-04 18:47:56','    refactor for dry\n',101,163,'Rackspace'),(272669,5248,5248,'2011-05-09 14:18:20','2011-05-09 14:18:20','    replace file and unit tests are working\n',222,399,'Rackspace'),(272671,5248,5248,'2011-05-10 15:36:01','2011-05-10 15:36:01','    adding unit tests and conf changes\n',226,103,'Rackspace'),(272672,5248,5248,'2011-05-10 15:53:21','2011-05-10 15:53:21','    stats conf changes\n',8,4,'Rackspace'),(272673,5248,5248,'2011-05-11 13:02:39','2011-05-11 13:02:39','    rename files and mas unit tests\n',317,308,'Rackspace'),(272674,5248,5248,'2011-05-11 13:28:24','2011-05-11 13:28:24','    typo\n',3,3,'Rackspace'),(272675,5248,5248,'2011-05-11 13:33:22','2011-05-11 13:33:22','    pep8\n',1,1,'Rackspace'),(272676,5248,5248,'2011-05-11 17:01:24','2011-05-11 17:01:24','    adding processable flag and fix unicode thing\n',8,4,'Rackspace'),(272677,5248,5248,'2011-05-11 17:03:58','2011-05-11 17:03:58','    pep8\n',4,2,'Rackspace'),(272679,5248,5248,'2011-05-17 12:23:11','2011-05-17 12:23:11','    Adding full path to the stats cron jobs.\n',6,6,'Rackspace'),(272681,203,203,'2011-05-16 22:59:57','2011-05-16 22:59:57','    Edits to multinode install after testing in internal training class\n',28,25,'Rackspace'),(272682,203,203,'2011-05-17 22:50:44','2011-05-17 22:50:44','    Changing optional bzr steps to be more precise\n',2,1,'Rackspace'),(272683,203,203,'2011-05-18 10:26:52','2011-05-18 10:26:52','    Made bzr init-repo swift step non-optional\n',1,1,'Rackspace'),(272687,206,206,'2011-05-14 02:31:47','2011-05-14 02:31:47','    Updated st\'s copy of client.py; st no longer aborts everything on one error; st prints when it had to retry; st prints ClientExceptions without the full stack trace; st aborts manifest creation if segments couldn\'t be uploaded; client.py will retry on 408s; client.py will treat empty contents as resettable\n',121,37,'Rackspace'),(272691,206,206,'2011-05-19 14:48:15','2011-05-19 14:48:15','    st: Suppress a few more stack traces\n',5,2,'Rackspace'),(272693,206,206,'2011-05-12 01:01:38','2011-05-12 01:01:38','    Added list_parts command to swift-ring-builder which lists common partitions for a list of devices.\n',45,0,'Rackspace'),(272694,206,206,'2011-05-12 01:07:57','2011-05-12 01:07:57','    PEP8 fix\n',1,1,'Rackspace'),(272699,206,206,'2011-05-18 15:11:08','2011-05-18 15:11:08','    swift-ring-builder: Updated help for list_parts\n',6,3,'Rackspace'),(272701,5248,5248,'2011-05-23 12:08:38','2011-05-23 12:08:38','    Changing auditor log messages\n',23,17,'Rackspace'),(272702,5248,5248,'2011-05-23 13:20:09','2011-05-23 13:20:09','    adding total quarantine and error to logs\n',7,1,'Rackspace'),(272704,5248,5248,'2011-05-24 13:23:12','2011-05-24 13:23:12','    allow override regex for source_filename_pattern\n',17,10,'Rackspace'),(272705,5248,5248,'2011-05-24 13:51:07','2011-05-24 13:51:07','    allow override new_log_cutoff\n',17,15,'Rackspace'),(272707,1625,1625,'2011-05-26 11:25:39','2011-05-26 11:25:39','    Add a __canonical_version__ attribute to the swift module. This is only the numbered part of the version string, no \"-dev\" or similar suffixes.\n    \n    Add a couple of unit tests to make sure __version__ and __canonical_version__ are generated correctly and to ensure __canonical_version__ never accidentally has anything other than numbers and points in it.\n',55,2,'Cisco Systems'),(272708,1625,1625,'2011-05-26 14:04:39','2011-05-26 14:04:39','    Prematurely bumped to 1.4.1. Setting back to 1.4.0 so that this can land on the milestone branch as well and then we can bump trunk to 1.4.1.\n',1,1,'Cisco Systems'),(272709,1625,1625,'2011-05-26 16:27:15','2011-05-26 16:27:15','    pep8 fixes\n',2,2,'Cisco Systems'),(272710,1625,1625,'2011-05-26 16:27:46','2011-05-26 16:27:46','    Leave it to a later patch to make this final.\n',1,1,'Cisco Systems'),(272712,198,198,'2011-05-27 08:48:41','2011-05-27 08:48:41','    updated changelog for 1.4.0\n',56,5,'Rackspace'),(272714,239,239,'2011-05-27 15:53:46','2011-05-27 15:53:46','    Switch trunk to 1.4.1, now that the 1.4.0 release branch is branched out\n',1,1,'OpenStack Foundation'),(272716,4060,4060,'2011-05-25 12:56:53','2011-05-25 12:56:53','    Don\'t track names on PUT failure to avoid extra failures in GET/DELETE.\n',2,1,'Memset Ltd'),(272719,206,206,'2011-05-27 23:31:58','2011-05-27 23:31:58','    replicator: Log timings for replicator-rpc sync method if debug mode is on.\n',32,5,'Rackspace'),(272720,206,206,'2011-05-31 20:37:39','2011-05-31 20:37:39','    replicator: removed extraneous comment\n',0,1,'Rackspace'),(272722,206,206,'2011-06-01 15:04:43','2011-06-01 15:04:43','    db_replicator: Made hardcoded 10 into debug_timings_threshold.\n',7,5,'Rackspace'),(272723,206,206,'2011-06-01 15:19:12','2011-06-01 15:19:12','    db_replicator: Made hardcoded 10 into DEBUG_TIMINGS_THRESHOLD.\n',8,7,'Rackspace'),(272726,206,206,'2011-05-26 01:19:03','2011-05-26 01:19:03','    Created testauth WSGI middleware to replace Swauth as development auth service.\n',508,32,'Rackspace'),(272727,206,206,'2011-05-26 02:17:42','2011-05-26 02:17:42','    Remove swauth; update references from swauth to testauth.\n',463,5495,'Rackspace'),(272728,206,206,'2011-05-26 02:24:12','2011-05-26 02:24:12','    Renaming TestAuth to TempAuth because nose hates anything with the word test in it.\n',903,903,'Rackspace'),(272731,206,206,'2011-06-01 22:12:41','2011-06-01 22:12:41','    Made probe tests more resilent against timing issues.\n',18,6,'Rackspace'),(272733,206,206,'2011-06-03 02:28:21','2011-06-03 02:28:21','    container-sync: Support HTTP proxy.\n',24,9,'Rackspace'),(272734,206,206,'2011-06-03 02:39:31','2011-06-03 02:39:31','    st: resync with client.py changes\n',17,7,'Rackspace'),(272735,206,206,'2011-06-06 16:12:54','2011-06-06 16:12:54','    Updated container-server.conf-sample\n',2,2,'Rackspace'),(272736,206,206,'2011-06-09 21:02:30','2011-06-09 21:02:30','    tempauth: Check and make all handled accounts\n',8,8,'Rackspace'),(272739,206,206,'2011-06-10 16:33:12','2011-06-10 16:33:12','    Merged from trunk\n',3,3,'Rackspace'),(272740,5248,5248,'2011-06-07 17:32:59','2011-06-07 17:32:59','    Adding the collection of specified metadata keys, unit tests working\n',96,22,'Rackspace'),(272741,5248,5248,'2011-06-08 08:55:14','2011-06-08 08:55:14','    fixing case thing and adding docs\n',11,7,'Rackspace'),(272742,5248,5248,'2011-06-08 09:19:55','2011-06-08 09:19:55','    fix unittest\n',3,2,'Rackspace'),(272743,5248,5248,'2011-06-08 09:24:44','2011-06-08 09:24:44','    pep8\n',9,10,'Rackspace'),(272744,5248,5248,'2011-06-08 09:42:18','2011-06-08 09:42:18','    clean headers\n',1,1,'Rackspace'),(272745,5248,5248,'2011-06-08 09:44:03','2011-06-08 09:44:03','    clean headers in unit tests...\n',2,2,'Rackspace'),(272746,5248,5248,'2011-06-10 08:59:34','2011-06-10 08:59:34','    handling no metadata column\n',70,15,'Rackspace'),(272749,206,206,'2011-06-05 23:22:35','2011-06-05 23:22:35','    Adding account_autocreate mode and refactoring TRUE_VALUES\n',32,11,'Rackspace'),(272750,206,206,'2011-06-05 23:44:39','2011-06-05 23:44:39','    Only autocreate accounts for certain operations\n',16,12,'Rackspace'),(272752,206,206,'2011-06-10 15:55:25','2011-06-10 15:55:25','    Adding some tests\n',34,11,'Rackspace'),(272753,206,206,'2011-06-10 16:56:53','2011-06-10 16:56:53','    Made failed account autocreate raise exception to cause 5xx.\n',25,2,'Rackspace'),(272756,206,206,'2011-06-11 04:57:04','2011-06-11 04:57:04','    Fixed so account GETs and HEADs autocreate the account when account_autocreate = true\n',64,2,'Rackspace'),(272758,206,206,'2011-06-10 18:36:02','2011-06-10 18:36:02','    Fixed account and container listings to return with charset=utf-8 instead of charset=utf8\n',8,2,'Rackspace'),(272759,206,206,'2011-06-10 18:49:41','2011-06-10 18:49:41','    Updated functests to test for utf-8\n',4,4,'Rackspace'),(272761,206,206,'2011-06-10 19:33:53','2011-06-10 19:33:53','    Update staticweb generated test data to match utf-8 update\n',6,6,'Rackspace'),(272764,206,206,'2011-06-14 23:13:37','2011-06-14 23:13:37','    Removing bin/st in prep for merge from trunk\n',0,1854,'Rackspace'),(272765,198,198,'2011-06-14 11:04:06','2011-06-14 11:04:06','    renamed st to swift\n',1845,1845,'Rackspace'),(272767,198,198,'2011-06-14 11:29:22','2011-06-14 11:29:22','    updated changelog with 1.4.1 changes\n',16,0,'Rackspace'),(272769,198,198,'2011-06-14 11:39:30','2011-06-14 11:39:30','    bumped version to 1.4.2\n',1,1,'Rackspace'),(272772,206,206,'2011-06-14 23:14:28','2011-06-14 23:14:28','    Readded changes to bin/swift after merge from trunk\n',62,20,'Rackspace'),(272773,206,206,'2011-06-15 02:01:01','2011-06-15 02:01:01','    consync: Some more tests and bugfixes.\n',195,17,'Rackspace'),(272774,206,206,'2011-06-16 00:59:55','2011-06-16 00:59:55','    consync: More tests and slight refactor to be more testable\n',672,25,'Rackspace'),(272775,206,206,'2011-06-16 01:31:51','2011-06-16 01:31:51','    consync: Now queries all primary nodes for a put and uses the newest object if it is newer or equal to the object to sync\n',22,14,'Rackspace'),(272776,206,206,'2011-06-16 01:37:43','2011-06-16 01:37:43','    consync: Minor change to ignore 404 is there is some other error from another node\n',6,1,'Rackspace'),(272777,5248,5248,'2011-06-16 11:04:17','2011-06-16 11:04:17','    fixing ratelimit tests\n',91,50,'Rackspace'),(272778,5248,5248,'2011-06-16 11:09:15','2011-06-16 11:09:15','    fixing ratelimit tests\n',0,1,'Rackspace'),(272780,206,206,'2011-06-07 23:19:48','2011-06-07 23:19:48','    You can specify X-Newest: true on GETs and HEADs to indicate you want Swift to query all backend copies and return the newest version retrieved.\n',95,18,'Rackspace'),(272781,206,206,'2011-06-08 02:26:16','2011-06-08 02:26:16','    Object COPY requests now always copy the newest object they can find.\n',69,16,'Rackspace'),(272782,206,206,'2011-06-08 04:19:34','2011-06-08 04:19:34','    Implemented object POST as COPY\n',312,101,'Rackspace'),(272783,206,206,'2011-06-08 04:29:24','2011-06-08 04:29:24','    Changed post_as_copy to object_post_as_copy\n',15,15,'Rackspace'),(272788,206,206,'2011-06-22 15:05:23','2011-06-22 15:05:23','    Doc updates\n',78,46,'Rackspace'),(272789,206,206,'2011-06-29 20:49:19','2011-06-29 20:49:19','    consync: updated class docs\n',4,4,'Rackspace'),(272790,5574,5574,'2011-06-14 12:11:25','2011-06-14 12:11:25','    fix posix_fadvise invalid argument error\n    \n    off_t isn\'t always 64 bit. Let\'s use posix_fadvise64 instead.\n',2,2,'NTT'),(272792,198,198,'2011-06-13 15:57:32','2011-06-13 15:57:32','    removed basic slogging code\n',0,3408,'Rackspace'),(272793,198,198,'2011-06-15 10:06:31','2011-06-15 10:06:31','    removed slogging references from docs\n',0,204,'Rackspace'),(272797,198,198,'2011-06-23 14:41:02','2011-06-23 14:41:02','    removed reference to recreateaccounts script\n',0,1,'Rackspace'),(272799,206,206,'2011-06-17 00:57:00','2011-06-17 00:57:00','    Update to comply with XML 1.1: No NULLs in names allowed; control chars are converted to entities (ex: &#x4;)\n',230,29,'Rackspace'),(272800,206,206,'2011-06-17 01:03:59','2011-06-17 01:03:59','    Fixed typo/bug with 20 instead of 0x20\n',1,1,'Rackspace'),(272802,5580,5580,'2011-06-21 21:53:48','2011-06-21 21:53:48','    fixed bug bug800348 - TempAuth failed to instantiate when bind_port was missing from config while building up users\n',19,1,'Cloudscaling'),(272803,5580,5580,'2011-06-22 01:06:05','2011-06-22 01:06:05','    Changed port for storage ural to the documented 8080\n',3,3,'Cloudscaling'),(272805,229,229,'2011-06-30 10:20:36','2011-06-30 10:20:36','    updated test to include request method\n',4,4,'Rackspace'),(272807,229,229,'2011-06-29 15:44:33','2011-06-29 15:44:33','    added Joe Arnold to the AUTHORS file\n',1,0,'Rackspace'),(272810,206,206,'2011-07-05 16:25:39','2011-07-05 16:25:39','    consync: updated client.py to better work with proxies. Had to use the private httplib._set_tunnel though. :/\n',6,9,'Rackspace'),(272811,206,206,'2011-07-07 14:24:37','2011-07-07 14:24:37','    Updated swift util with client.py changes.\n',6,9,'Rackspace'),(272812,206,206,'2011-07-08 19:57:45','2011-07-08 19:57:45','    consync: fixes as per the code roast\n',26,20,'Rackspace'),(272813,206,206,'2011-07-10 14:18:36','2011-07-10 14:18:36','    comment on domain_remap regarding container sync\n',4,0,'Rackspace'),(272814,206,206,'2011-07-13 20:03:04','2011-07-13 20:03:04','    Update to <?xml version=\"1.1\"\n',4,4,'Rackspace'),(272816,5579,5579,'2011-07-12 11:16:52','2011-07-12 11:16:52','    fixed the content type on object server to return what is in the xattrs exactly\n',6,4,'independent'),(272818,206,206,'2011-07-13 21:38:20','2011-07-13 21:38:20','    Fix post-as-copy return code\n',8,2,'Rackspace'),(272821,206,206,'2011-07-14 18:53:04','2011-07-14 18:53:04','    Added notes about container sync and large objects\n',13,0,'Rackspace'),(272822,206,206,'2011-07-14 20:07:45','2011-07-14 20:07:45','    Reset container sync points when the sync-to changes\n',80,0,'Rackspace'),(272823,206,206,'2011-07-14 20:47:45','2011-07-14 20:47:45','    Ensure paired alter table commands are in same transaction\n',24,16,'Rackspace'),(272825,5248,5248,'2011-07-08 10:48:47','2011-07-08 10:48:47','    changing ratelimiting so it only limits PUTs/DELETEs\n',34,62,'Rackspace'),(272826,5248,5248,'2011-07-11 15:54:51','2011-07-11 15:54:51','    limit posts and copies\n',4,4,'Rackspace'),(272827,5248,5248,'2011-07-12 08:15:15','2011-07-12 08:15:15','    limit PUT, DELETE, POSTs to /a/c and /a/c/o\n',9,10,'Rackspace'),(272828,5248,5248,'2011-07-13 11:00:13','2011-07-13 11:00:13','    fixing what is limited\n',2,5,'Rackspace'),(272829,5248,5248,'2011-07-13 11:05:26','2011-07-13 11:05:26','    fixing unit test\n',1,3,'Rackspace'),(272830,5248,5248,'2011-07-18 15:19:32','2011-07-18 15:19:32','    fix docs\n',2,2,'Rackspace'),(272832,5574,5574,'2011-07-11 20:17:58','2011-07-11 20:17:58','    s3api: fix canonical_string for Date and X-Amz-Date header handling\n    \n    canonical_string needs to reset the Date header if it sees the\n    X-Amz-Date header.\n',13,3,'NTT'),(272833,5574,5574,'2011-07-11 20:19:43','2011-07-11 20:19:43','    s3api: add more unittests for canonical_string\n    \n    For the Date and X-Amz-Date header handling.\n',9,0,'NTT'),(272835,206,206,'2011-07-25 08:40:11','2011-07-25 08:40:11','    Fix test to compare unpickled values since we really don\'t care to test pickling\n',1,1,'Rackspace'),(272837,5248,5248,'2011-07-22 10:53:25','2011-07-22 10:53:25','    rolling back xml changes bzr merge -r323..322\n',4,4,'Rackspace'),(272838,5248,5248,'2011-07-22 10:54:54','2011-07-22 10:54:54','    rolling back xml changes bzr merge -r319..318\n',29,230,'Rackspace'),(272841,206,206,'2011-07-25 09:17:49','2011-07-25 09:17:49','    1.4.2 CHANGELOG\n',21,0,'Rackspace'),(272843,239,239,'2011-07-25 14:08:43','2011-07-25 14:08:43','    Switch trunk to 1.4.3 development\n',1,1,'OpenStack Foundation'),(272845,206,206,'2011-07-27 12:32:20','2011-07-27 12:32:20','    Updated CHANGELOG with stuff I got confused about with the 1.4.2 release.\n',6,0,'Rackspace'),(272847,5581,5581,'2011-07-27 14:51:34','2011-07-27 14:51:34','    Change content type to application/xml for GET service/bucket.\n',2,2,'independent'),(272848,5581,5581,'2011-07-28 22:02:28','2011-07-28 22:02:28','    Updated Authors list for this merge.\n',1,0,'independent'),(272849,5581,5581,'2011-07-29 21:39:06','2011-07-29 21:39:06','    Revert AUTHORS.\n',0,1,'independent'),(272851,198,198,'2011-08-02 14:51:27','2011-08-02 14:51:27','    added Gaurav B. Gangalwar to AUTHORS file\n',1,0,'Rackspace'),(272853,2172,2172,'2011-08-02 22:55:13','2011-08-02 22:55:13','    Bug #820185: Intermittent TypeError NoneType in atexit handler of unit tests\n    \n    Work around what appears to be a Python standard library bug by silencing\n    exceptions in the logging library.\n',6,0,'Citrix'),(272855,198,198,'2011-08-03 14:19:06','2011-08-03 14:19:06','    added Ewan to authors file\n',1,0,'Rackspace'),(272857,206,206,'2011-08-01 16:08:55','2011-08-01 16:08:55','    More quarantine catching\n',67,31,'Rackspace'),(272858,206,206,'2011-08-01 20:46:30','2011-08-01 20:46:30','    Tests for db quarantining\n',511,19,'Rackspace'),(272859,206,206,'2011-08-01 21:14:41','2011-08-01 21:14:41','    Fixed test based on testdir\n',12,6,'Rackspace'),(272860,206,206,'2011-08-02 17:46:17','2011-08-02 17:46:17','    Fix bug; added test for quarantined a hash dir that becomes a file\n',28,1,'Rackspace'),(272861,206,206,'2011-08-02 18:21:25','2011-08-02 18:21:25','    Real files for bad databases.\n',7,451,'Rackspace'),(272863,206,206,'2011-08-07 14:46:11','2011-08-07 14:46:11','    PEP8 fix\n',2,1,'Rackspace'),(272865,5582,5582,'2011-07-27 10:41:07','2011-07-27 10:41:07','    recon middlewear for the object server and utils for cluster monitoring\n',572,0,'Rackspace'),(272866,5582,5582,'2011-07-27 22:29:23','2011-07-27 22:29:23','    few fixes to temp cronjob\n',15,5,'Rackspace'),(272867,5582,5582,'2011-08-01 21:43:55','2011-08-01 21:43:55','    quick comment on how to load recon.py\n',7,0,'Rackspace'),(272868,5582,5582,'2011-08-11 15:17:28','2011-08-11 15:17:28','    add binary\'s/recon.py to setup.py\n',2,0,'Rackspace'),(272870,198,198,'2011-08-11 15:44:48','2011-08-11 15:44:48','    added florian to AUTHORS\n',1,0,'Rackspace'),(272872,198,198,'2011-08-11 14:36:02','2011-08-11 14:36:02','    added client_ip to all proxy log lines not otherwise containing it\n',46,6,'Rackspace'),(272873,198,198,'2011-08-12 08:33:42','2011-08-12 08:33:42','    removed extraneous docstring lines\n',0,2,'Rackspace'),(272875,206,206,'2011-08-12 18:29:16','2011-08-12 18:29:16','    Minor fix of quarantine naming\n',4,4,'Rackspace'),(272877,5583,5583,'2011-07-28 22:32:40','2011-07-28 22:32:40','    made a small change in the  _object_job function in order to have the initial foward slash stripped off an object name when one exits\n',2,0,'Rackspace'),(272879,5582,5582,'2011-08-12 15:01:28','2011-08-12 15:01:28','    add quarantine stats\n',58,8,'Rackspace'),(272880,5582,5582,'2011-08-12 16:29:13','2011-08-12 16:29:13','    account for parent/.. hardlinks\n',9,6,'Rackspace'),(272881,5582,5582,'2011-08-14 10:49:15','2011-08-14 10:49:15','    pep8 fix\n',1,1,'Rackspace'),(272883,198,198,'2011-08-19 10:58:18','2011-08-19 10:58:18','    simplified setup.py\n',0,35,'Rackspace'),(272885,198,198,'2011-08-19 17:14:43','2011-08-19 17:14:43','    updated manifest files to not filter headers returned by the manifest object\n',3,16,'Rackspace'),(272886,198,198,'2011-08-22 10:22:50','2011-08-22 10:22:50','    added test for an extra header in lobjects\n',5,2,'Rackspace'),(272888,198,198,'2011-08-29 10:58:07','2011-08-29 10:58:07','    deleting a db now also clears the db\'s metadata\n',14,9,'Rackspace'),(272889,198,198,'2011-08-29 13:04:20','2011-08-29 13:04:20','    improved delete db test\n',22,5,'Rackspace'),(272890,198,198,'2011-08-29 15:26:25','2011-08-29 15:26:25','    cleaned up local variable\n',1,2,'Rackspace'),(272892,5248,5248,'2011-08-15 14:09:11','2011-08-15 14:09:11','    adding self signed request\n',36,3,'Rackspace'),(272893,5248,5248,'2011-08-17 11:29:21','2011-08-17 11:29:21','    fix to wsgi request\n',2,1,'Rackspace'),(272894,5248,5248,'2011-08-29 12:34:53','2011-08-29 12:34:53','    fix for trans id\n',1,1,'Rackspace'),(272895,5248,5248,'2011-08-29 12:39:20','2011-08-29 12:39:20','    fix for trans id\n',1,1,'Rackspace'),(272896,5248,5248,'2011-08-30 12:07:32','2011-08-30 12:07:32','    adding unit tests\n',35,0,'Rackspace'),(272898,5248,5248,'2011-08-30 14:29:19','2011-08-30 14:29:19','    make sure files always get closed\n',45,24,'Rackspace'),(272899,5248,5248,'2011-08-31 07:28:36','2011-08-31 07:28:36','    fix for unit test\n',9,7,'Rackspace'),(272901,206,206,'2011-08-30 20:27:06','2011-08-30 20:27:06','    Test for x-newest with new proxy and old object server\n',3,0,'Rackspace'),(272902,5584,5584,'2011-08-30 08:11:26','2011-08-30 08:11:26','    Changed GETorHEAD_base to return an object even when HTTP_X_NEWEST is set and none of the requested objects have a timestamp set.\n',5,4,'San Diego Supercomputer Center'),(272906,4533,4533,'2011-08-31 19:08:02','2011-08-31 19:08:02','    Fixed ppa for multinode instructions\n',1,1,'Rackspace'),(272908,5582,5582,'2011-08-31 02:14:35','2011-08-31 02:14:35','    object-replicator now optionally updates recon stats directly. also updated swift-recon-cron with a cleaner python version.\n',153,58,'Rackspace'),(272909,5582,5582,'2011-08-31 11:29:59','2011-08-31 11:29:59','    fixup file recon file locking\n',20,22,'Rackspace'),(272910,5582,5582,'2011-08-31 15:19:16','2011-08-31 15:19:16','    pep8\n',0,1,'Rackspace'),(272911,5582,5582,'2011-09-01 13:46:13','2011-09-01 13:46:13','    simplejson import and exception/logging fixes\n',24,13,'Rackspace'),(272913,4533,4533,'2011-09-01 15:48:53','2011-09-01 15:48:53','    Fixed date format for S3 bucket listing\n',1,1,'Rackspace'),(272914,4533,4533,'2011-09-01 21:12:35','2011-09-01 21:12:35','    Added unit test :P\n',4,0,'Rackspace'),(272915,4533,4533,'2011-09-02 15:17:35','2011-09-02 15:17:35','    removed unused import\n',0,1,'Rackspace'),(272917,9,9,'2011-09-06 08:37:54','2011-09-06 08:37:38','    Add rfc.sh to help with gerrit workflow.\n    \n    Change-Id: If2af58cd4724b440d47385c10f202c9441cdf4bb\n',136,0,'Rackspace'),(272918,5249,5249,'2011-09-07 21:55:40','2011-09-07 21:55:40','    Updating changelog for 1.4.3\n    \n    Change-Id: Iae6a3d5341d9621034c772174abfa3f10e7e335b\n',32,8,'Rackspace'),(272919,239,239,'2011-09-12 13:48:38','2011-09-12 13:48:38','    Final versioning for Swift 1.4.3\n    \n    Change-Id: Ia78ac14858777ef0cea522b01713e4a9d1da9ec5\n',1,1,'OpenStack Foundation'),(272920,229,229,'2011-09-07 17:11:15','2011-09-07 17:11:15','    bumped version to 1.4.4\n    \n    Change-Id: I752def9a6f76f74cfd30c744525dfcccc35782c1\n',1,1,'Rackspace'),(272921,211,211,'2011-09-26 15:31:48','2011-09-26 15:30:18','    Fix swift-recon\n    \n    Make sure there is things in the row of ring_data.devs.\n    Adjust else: for the driver information.\n    \n    Change-Id: I11a949dfa3f36691f86f3b7330d65e435c22da24\n',2,2,'eNovance'),(272922,2161,2161,'2011-09-20 14:53:53','2011-09-20 14:53:53','    Changes swift-ring-builder exit codes\n    \n    swift-ring-builder will now return zero for successful operations and\n    non-zero for operations that have errored or need attention.\n    \n    Fixes bug 836922\n    \n    Change-Id: I8d18a49fcf239f7cc7bfe4cdb468ac849436122e\n',34,30,'Nebula'),(272924,2173,2173,'2011-10-05 17:05:23','2011-10-05 16:54:56','    Fix documentation leftover from swift-stats rename\n    \n    Change-Id: Ia6f4eeb626cc34b6cec43cab92a0afe7b46354e0\n    Signed-off-by: Julien Danjou <julien.danjou@enovance.com>\n',1,1,'Red Hat'),(272925,2161,2161,'2011-09-27 09:54:07','2011-09-21 13:17:50','    Fix for bug 845952\n    \n    Devices scheduled to be removed are assigned a device of 65535.  When\n    looking for parts to reassign from heavy nodes, these parts need to be\n    skipped.\n    \n    Includes review suggestions\n    \n    Change-Id: I61f40c36509bf998834c123b0f80117ca6def3ff\n',33,1,'Nebula'),(272927,2161,2161,'2011-09-27 10:20:51','2011-09-21 13:20:27','    Add more specific error messages to swift-ring-builder\n    \n    Replace existing Exceptions in ring builder with more specific exceptions.\n    Abstracted out some behavior in ring-builder that is likely to cause an\n    exception. Add try/except blocks to swift-ring-builder to catch specific\n    exceptions and provide the user with some information about how to deal\n    with the error.\n    \n    This change begins to address blueprint friendly-error-messages\n    \n    Change-Id: I8fc9cfa4899421fe04bba23ac52523778e902321\n',80,19,'Nebula'),(272929,211,211,'2011-10-06 11:35:43','2011-10-06 11:35:43','    Use account_autocreate for tempauth.\n    \n    We don\'t need to create ourself account in tempauth as we can use\n    account_autocreate from proxy server.\n    \n    Change-Id: I6d0a044be361a53faee15d15177a9b5bc95da19e\n',6,21,'eNovance'),(272931,211,211,'2011-10-07 18:53:48','2011-10-07 18:53:48','    Fix documentation example.\n    \n    get HTTPUnauthorized and HTTPForbidden from webob.exc\n    \n    Change-Id: Id0a40077fb0adedd8cbf4f490e13fd522c92571a\n',5,5,'eNovance'),(272932,5582,5582,'2011-09-28 01:00:31','2011-09-28 01:00:31','    Query only specific zone via swift-recon\n    \n    Add support to query only specific zones, as well a --all shortcut flag to run all checks.\n    Also skip deleted devices when trying to grab hosts from the ring.\n    \n    Change-Id: I441ec76c90857c2e74262a7a9e2d36de89b28631\n',48,33,'Rackspace'),(272934,4064,4064,'2011-10-11 12:21:20','2011-10-11 12:21:20','    Adding what acc/cont/obj into the ratelimit error messages\n    \n    Change-Id: I8a033e95f784c30175d6b26c6511bedf14d919aa\n',8,5,'Rackspace'),(272936,5585,5585,'2011-09-30 00:17:35','2011-09-30 00:17:35','    make drive audit regexes detect 4-letter drives\n    \n    addresses bug 827913\n    \n    Change-Id: I691eee191f5951186158c553281f88aae9e5d25f\n',18,13,'Rackspace'),(272938,5582,5582,'2011-10-21 00:17:10','2011-10-18 21:10:50','    Add documentation for Swift Recon.\n    \n    Change-Id: I37f4fb624bdc5b8bbf2e691d29aa6b15cd648aa8\n',112,1,'Rackspace'),(272939,4064,4064,'2011-10-13 13:56:51','2011-10-13 09:36:17','    Fixing bug with x-trans-id.  Will now be set on all incoming requests to proxy and trans-ids will not be reused.\n    \n    Change-Id: Ieb59cadd9925a122566c98374b9736e77d3f98dd\n',50,39,'Rackspace'),(272941,9,9,'2011-10-24 15:05:49','2011-10-20 13:51:50','    Add .gitreview config file for gerrit.\n    \n    The CI team is developing a new tool, git-review:\n    \n      https://github.com/openstack-ci/git-review\n    \n    which is intendend to replace rfc.sh.  This adds a .gitreview file\n    so that it can automatically determine the canonical gerrit location\n    for the repository when first run.  Later, rfc.sh will be updated to\n    indicate it is deprecated, and then eventually removed.\n    \n    Change-Id: I12e6814796df23fa1be4fa2b3e6427381b218461\n',4,0,'Rackspace'),(272942,5586,5586,'2011-10-27 10:26:26','2011-10-20 13:04:12','    Correct http.path initilization. Fixes Bug #876927\n    \n    Change-Id: Ibf1893051be0a74c6d45a571a3068c36f99f9cfa\n',1,1,'HP'),(272943,5586,5586,'2011-10-27 10:52:40','2011-10-26 16:18:52','    Correct http.path initilization. Fixes Bug #876927\n    \n    Verified with test and pep8\n    \n    Initial Change-Id: Ibf1893051be0a74c6d45a571a3068c36f99f9cfa\n    \n    Change-Id: I1f905cdc3f5dfdbf315f272e848b2c20c02a5c89\n',2,2,'HP'),(272944,211,211,'2011-11-01 08:18:51','2011-11-01 08:18:51','    Remove bazaar/lp reference and change it to github\n    \n    Change-Id: Ic58d3023f41204568bff9a4a77c895937b9456d2\n',7,16,'eNovance'),(272945,5249,5249,'2011-11-01 15:49:00','2011-10-26 21:42:24','    Expiring Objects Support\n    \n    Please see the doc/source/overview_expiring_objects.rst for\n    more detail.\n    \n    Change-Id: I4ab49e731248cf62ce10001016e0c819cc531738\n',2043,53,'Rackspace'),(272946,229,229,'2011-10-21 16:13:14','2011-10-19 09:21:14','    requote the source when doing a COPY\n    \n    fixes lp bug 857673\n    also fixes similar bug in post-as-copy code\n    adds test\n    \n    Change-Id: I7a1984506bba28afe2b7ba46998d7306c058fd5c\n',6,12,'Rackspace'),(272948,5586,5586,'2011-11-03 22:17:16','2011-11-03 22:17:16','    Fixes the HTTPConflict import.\n    \n    AccountController.PUT references HTTPConflict but doesn\'t import it. Fixed the import\n    and verified with setup.py test and pep8\n    \n    Change-Id: I13b3fa57a72f0112bc6af012e438634fa7d893c1\n',2,1,'HP'),(272949,211,211,'2011-11-07 17:27:18','2011-11-07 17:21:46','    Change bzr to swift in getting_started doc.\n    \n    Fixes #884766.\n    \n    Change-Id: Id251fa04305352522db22cd27410f0b2e6e9fc06\n',2,2,'eNovance'),(272950,5582,5582,'2011-11-07 19:38:56','2011-11-07 19:34:08','    Fixes bug 887278. The disk usage graph will now be drawn correctly.\n    \n    Change-Id: I75cf87e409fefa701eea5019f2449757e55eba2f\n',1,1,'Rackspace'),(272951,229,229,'2011-11-11 08:50:14','2011-11-11 08:50:14','    added people to the AUTHORS file who have commits since 1.4.3\n    \n    Change-Id: I5dbc54c32585a67d99dad4da653b2ccc79fa16d2\n',3,0,'Rackspace'),(272952,229,229,'2011-11-11 13:55:58','2011-11-11 13:55:58','    fixed object manifest etags\n    \n    fixes lp bug #873133\n    \n    Change-Id: Ic371b1e5d858a87dfdb7e28f888f9f3bbd60e661\n',5,1,'Rackspace'),(272953,5249,5249,'2011-11-01 23:16:11','2011-11-01 23:16:11','    Fixed time-sensitive tests.\n    \n    I noticed that a couple of tests I recently made were\n    time-sensitive. This can be shown with the following quick\n    script:\n    \n    from sys import exit\n    from unittest import TestSuite, TextTestRunner\n    \n    from test.unit.obj.test_server import TestObjectController\n    \n    s = TestSuite()\n    s.addTest(TestObjectController(\'test_GET_but_expired\'))\n    s.addTest(TestObjectController(\'test_HEAD_but_expired\'))\n    for x in xrange(200):\n        if TextTestRunner().run(s).failures:\n            exit(\'!!!!!!!!!!!!!!! TEST FAILED !!!!!!!!!!!!!!!\')\n    print \'\\o/ Test ran 200 times without failure.\'\n    \n    Change-Id: Ifdb1920e5266aaa278baa0759fc0bfaa1aff2d0d\n',40,27,'Rackspace'),(272955,5249,5249,'2011-11-07 16:26:03','2011-11-07 16:24:08','    Updated TimeoutError and except Exception refs...\n    \n    Updated eventlet.TimeoutError (deprecated) references to\n    Timeout and, more importantly, updated many except Exception\n    clauses to except (Exception, Timeout).\n    \n    Change-Id: Ib089265551bd20b94c00ea84f11140ccd795d301\n',81,78,'Rackspace'),(272957,5249,5249,'2011-11-11 14:17:47','2011-11-09 20:38:54','    Make Eventlet\'s WSGI server log differently.\n    \n    Change-Id: I6d7fc8c9a0c4c3a033e0e5ee7943e59a52d7c56f\n',5,0,'Rackspace'),(272959,5587,5587,'2011-11-08 21:09:42','2011-10-12 13:23:13','    changing config files to be on section 5 and also running spellchecks against all files\n    \n    \"Also adding the new swift-recon and swift-ring-builder manpages to this set\"\n    \"Adding new manpages for configuration files and also making changes according to previous review suggestions\"\n    \"removing the Author line from the manpages according to suggestions\"\n    \n    Change-Id: I256d2b2851b55a379b59011894f214bf55ba7da9\n',3148,0,'Rackspace'),(272961,211,211,'2011-11-01 19:39:58','2011-10-05 11:55:01','    Add support for OS Auth API version 2\n    \n    Add a switch -2 to allow authenticate against service providing\n    OpenStack auth version 2.0 (ie: keystone).\n    \n    By default it will authenticate against v1.0 and you can explicitely\n    force it by adding a --auth-version 1 if in future we decide to set 2.0\n    auth as default.\n    \n    It will handle the format tenant:user to indentify to a specific tenant,\n    if this format is not specified it will assume user is the same as\n    tenant.\n    \n    Change-Id: I4684ec1e0950a1dae6935486aa730eaf13d6cd46\n',120,37,'eNovance'),(272963,5249,5249,'2011-11-14 23:04:17','2011-11-14 23:04:17','    Fixed bufferedhttp to deref socks and fps\n    \n    Change-Id: Iba5ec452b350adcf8aa4976316c4d5d5686eeee9\n',7,0,'Rackspace'),(272965,5249,5249,'2011-11-14 23:46:57','2011-11-09 03:25:43','    Fixed leak from SegmentedIterable\n    \n    Change-Id: Iad26076f9ec3bd26115f67a34401a3e2c9626f74\n',33,0,'Rackspace'),(272967,5582,5582,'2011-11-15 17:55:14','2011-11-15 17:55:14','    Add sockstat info to recon.\n    \n    Add\'s support for pulling info from /proc/net/sockstat and /proc/net/sockstat6 via recon.\n    \n    Change-Id: Idb403c6eda199c5d36d96cc9027ee249c12c7d8b\n',81,1,'Rackspace'),(272969,4064,4064,'2011-11-16 16:00:31','2011-11-16 13:38:40','    Adding Changelog for 1.4.4\n    \n    Change-Id: I4f8915ba81fb08fb1c94f56fa45a1d5c6f2889e9\n',40,0,'Rackspace'),(272970,229,5249,'2011-11-23 09:09:24','2011-11-19 18:03:38','    Backport of socket hoarding patch. Full original commit message below\n    \n    Main thing is the addition of a Queue between reading from the backend\n    server\'s httplib.Response and the frontend client\'s webob.Response,\n    allowing timeouts on either end to tear down the sockets.\n    \n    Also, Connection: close headers were added to backend requests since\n    we only ever do one request per connection; this will tear down those\n    connections more quickly after the request is complete.\n    \n    Finally, the eventlet.wsgi.WRITE_TIMEOUT is set in case the Eventlet\n    version supports it, timing out writes to client connections if they\n    take too long to read.\n    \n    Change-Id: I1d4d028ac5e864084a9b7537b140229cb235c7a3\n',118,30,'Rackspace'),(272971,239,239,'2011-11-21 11:09:15','2011-11-21 11:09:15','    Final versioning for Swift 1.4.4\n    \n    Set final versioning for Swift 1.4.4, should be the last commit to\n    milestone-proposed branch before 1.4.4 release.\n    \n    Change-Id: Ide6ea519f79c012894ab57705a873101776a347e\n',1,1,'OpenStack Foundation'),(272973,229,229,'2011-11-16 22:14:06','2011-11-16 22:14:01','    version bump to 1.4.5\n    \n    Change-Id: I0535c0e861c1a96f20012180ff3e366c6b437794\n',1,1,'Rackspace'),(272974,5249,5249,'2011-11-22 21:11:12','2011-11-19 18:03:38','    Fixes to prevent socket hoarding...\n    \n    Main thing is the addition of a Queue between reading from the backend\n    server\'s httplib.Response and the frontend client\'s webob.Response,\n    allowing timeouts on either end to tear down the sockets.\n    \n    Also, Connection: close headers were added to backend requests since\n    we only ever do one request per connection; this will tear down those\n    connections more quickly after the request is complete.\n    \n    Finally, the eventlet.wsgi.WRITE_TIMEOUT is set in case the Eventlet\n    version supports it, timing out writes to client connections if they\n    take too long to read.\n    \n    Change-Id: I18c7559442cf17a47ff30690ffc75010a7f003c4\n',116,30,'Rackspace'),(272975,5579,5579,'2011-11-23 11:50:09','2011-11-16 13:48:23','    fixes bug lp 891247\n    \n    added try/except around the accept header matcher\n    to catch the assertionerror that was being thrown\n    and return a more meaningful message.\n    \n    Change-Id: I64184be0a40f8696f8e7e3801763d555ec2526dd\n',51,9,'independent'),(272976,4064,4064,'2011-11-28 11:24:22','2011-11-28 09:13:41','    Fix object replicator to handle Timeouts fixes: lp 814263\n    \n    Change-Id: I4c8b73d4cb0540fa105f240b2a9d481cf9c1e55c\n',111,42,'Rackspace'),(272978,668,668,'2011-12-16 20:22:18','2011-12-16 20:18:44','    Updates swift docs to use correct release PPA.\n    \n    Changes swift doc references from defunct ppa repo swift-core/ppa to\n    new swift-core/release repo.  Fixes lp bug 905608.\n    \n    Change-Id: I58d85b22d8dbcff43b03eb256ad39e03dd208bfc\n',4,4,'Red Hat'),(272980,702,702,'2011-12-21 12:56:23','2011-12-21 02:08:40','    Explain how replication works more clearly\n    \n    A replicator creates an extra replica when it detects a remote disk\n    failure. However, when it fails to create a replica due to other\n    reasons (e.g. entire node failures), it doesn\'t create another replica\n    at all.  We should explain it explicitly so that users can know it.\n    This fixes bug 906976.\n    \n    Change-Id: I2f56428ccbbb0cf0d8538ca6e08f7da71257e661\n',1,1,'independent'),(272982,2173,2173,'2011-12-23 17:44:14','2011-12-23 17:44:14','    common.ring: fix docstrings\n    \n    Change-Id: I897791507de43f1fe801239f2b773eecdd996cdc\n    Signed-off-by: Julien Danjou <julien.danjou@enovance.com>\n',4,2,'Red Hat'),(272983,5249,5249,'2011-12-17 06:54:38','2011-12-15 08:06:39','    Added exception catchalls for auditors.\n    \n    Also, changed some os.listdir calls to a new\n    swift.common.utils.listdir call which returns an empty list for\n    non-existent paths.\n    \n    Change-Id: I89964636899d39bc07b1ecf2688786ffca67bf17\n',56,40,'Rackspace'),(272985,229,229,'2011-12-20 10:18:16','2011-12-20 10:18:16','    Added option to allow marker queries when downloading accounts or containers\n    \n    Change-Id: I5e70481d975ee6b771b8c784d8e181ce79fa3b0f\n',5,2,'Rackspace'),(272987,5588,5588,'2012-01-03 15:40:35','2012-01-03 15:39:42','    ~/swift/trunk doesn\'t exist after git clone\n    \n    Change-Id: I0b12a1bd1a119aeedda07fa6f7883ae6318ee4d6\n',1,1,'independent'),(272988,5249,5249,'2011-12-21 20:55:37','2011-12-21 20:55:37','    Save extra request with staticweb when possible\n    \n    Change-Id: I6459d11e64c9b1a857574fd943ed5c0ed5f4f792\n',19,3,'Rackspace'),(272990,5589,5589,'2011-12-29 19:19:41','2011-12-03 07:42:08','    Added swift-orphans and swift-oldies.\n    \n    Change-Id: I95210098556a22d7bd05f245ae387ee13041fa61\n',195,1,'Rackspace'),(272992,2174,2174,'2012-01-04 14:53:53','2012-01-04 14:43:16','    PEP8 swift cleanup\n    \n    The None, True, and False values are singletons.\n    \n    All variable *comparisons* to singletons should use \'is\' or \'is not\'.\n    All variable *evaluations* to boolean should use \'if\' or \'if not\'.\n    All Object type comparisons should use isinstance()\n    instead of comparing types directly.\n    \n    Change-Id: I47863c4862791022670619f19b8bc15d8a93fd81\n',17,17,'independent'),(272993,5589,5589,'2012-01-03 22:12:33','2012-01-03 22:12:33','    Updated the swift-init manager for object-expir...\n    \n    Updated the swift-init manager for object-expirer support since the\n    expirer doesn\'t not use the object-server.conf but does start with\n    object-.\n    \n    Change-Id: If6e0e9af4c6c861fdf390370f271d9139c573ba2\n',36,7,'Rackspace'),(272995,5589,5589,'2012-01-04 19:15:06','2012-01-04 19:14:42','    AUTHORS and CHANGELOG updates for 1.4.5\n    \n    Change-Id: I0ddfa712f9c4dc5110d953439ec41355a25bb4f0\n',35,1,'Rackspace'),(272996,229,229,'2012-01-04 13:21:18','2012-01-04 13:21:18','    version bump for 1.4.6\n    \n    Change-Id: I5e7a159fc040044cf301e5af9e2b247153b48ad8\n',1,1,'Rackspace'),(272997,5590,5590,'2012-01-05 12:32:15','2012-01-05 12:32:15','    Updated whataremyips -> added try/catch block to prevent error related to known\n    netifaces issue:\n    \n    https://bugs.launchpad.net/ubuntu/+source/netifaces/+bug/753009\n    \n    Change-Id: I0f4ccdcf6d1655923d39ed44f4eb81203d3e525b\n',9,6,'Red Hat'),(272998,5589,5589,'2012-01-10 02:01:47','2012-01-06 21:27:44','    Added memcache.conf option\n    \n    Change-Id: Idfcb97421a5c1476b776acef94c7b997dab55aa9\n',111,5,'Rackspace'),(272999,5589,5589,'2012-01-10 21:57:52','2011-12-21 13:54:07','    TempURL and FormPost Middleware\n    \n    Change-Id: I8d2ce2abdfe3a44605c9441ad7b1abc6c77e282d\n',3359,16,'Rackspace'),(273000,1020,1020,'2012-01-05 11:12:13','2012-01-05 11:07:23','    Bug #904830: use type==object-store instead of name==swift from service catalog\n    \n    The name field in the service catalog is an operator-specified, marketing name.\n    The type field contains the canonical name for the service (i.e., swift is\n    object-store).\n    \n    Change-Id: I8556b3e6fddd8784f259170195352478d9c6ae32\n',2,2,'HP'),(273002,5589,5589,'2012-01-12 22:30:32','2012-01-12 22:30:32','    Make memcached allow no port = default port\n    \n    Change-Id: I5a6cb714a4fd7a57db63aa17bb043fcc7a8eb29b\n',27,5,'Rackspace'),(273004,5589,5589,'2012-01-18 16:39:20','2012-01-18 16:37:58','    Fix for UTF-8 encoding/quoting issues in staticweb\n    \n    Also added ; charset=UTF-8 to the content-type.\n    \n    Change-Id: I144a9fa2647b47663863b06636968beaa68a5d60\n',15,4,'Rackspace'),(273006,239,239,'2012-01-12 10:41:14','2012-01-11 17:26:55','    Add missing files in tarball\n    \n    Fix MANIFEST.in to include all files in released tarballs.\n    Note that tools/rfc.sh is ignored since it\'s only for (deprecated)\n    gerrit support. Fixes bug 912193.\n    \n    Change-Id: Ic9952220a67d5583e639fcb9e74f472dd9f0fdef\n',5,2,'OpenStack Foundation'),(273008,211,211,'2012-01-20 15:07:55','2012-01-20 15:07:03','    PEP8 fixes.\n    \n    Change-Id: I3c33c03547f97ca7afbb47c3bddfdeabf152afe2\n',4,2,'eNovance'),(273009,239,239,'2012-01-24 16:34:13','2012-01-23 17:00:40','    Drop eval-based json parser fallback\n    \n    Drop potentially-unsafe eval-based json parser that was\n    used as a fallback in case simplejson and json were not\n    available. Let\'s assume people run Python 2.6 or can\n    install simplejson if they are not. Fixes bug 909568.\n    \n    Change-Id: I1b1860a77de5075fcea291a4f1b320a3e9e6261f\n',5,102,'OpenStack Foundation'),(273010,1407,1407,'2012-01-28 22:38:57','2012-01-28 22:26:58','    remove unsed imports and variables\n    \n    This cleanup is for the swift.common package\n    \n    Change-Id: Ibe74d4f0ae0376395f620b9be24a52cb8a4a5d98\n',8,20,'Canonical'),(273011,211,211,'2012-01-19 10:45:26','2012-01-19 10:45:26','    Fix permissions when creating files/permissions.\n    \n    Set umask to 022 when creating directories instead of 0.\n    \n    Change-Id: I8915d31907282f999df4ea3991d2ef440baee537\n',1,1,'eNovance'),(273013,229,229,'2012-01-23 15:43:48','2012-01-23 15:43:48','    removed tools/rfc.sh\n    \n    Change-Id: I297c3801991cbed2c360b3324d005ed003a1108d\n',0,136,'Rackspace'),(273015,5589,5589,'2012-01-31 16:58:00','2012-01-31 16:58:00','    Fix bug regarding negative Content-Length headers.\n    \n    Change-Id: Ib8e2a5271c33f57429a9683db233610416887ea3\n',20,0,'Rackspace'),(273016,4060,4060,'2012-02-02 11:54:15','2012-02-02 11:54:15','    Consistent timestamp formatting for last_modified.\n    \n    Fixes bug 798268.\n    \n    Python datetime\'s isoformat() uses %Y-%m-%dT%H:%M:%S.%f format, but\n    the miliseconds part is not included when it\'s zero.\n    \n    As consequence the compliant ISO 8601 format was not consistent\n    when performing a GET request over a container (listing objects info).\n    \n    Change-Id: Ifed3f0adf3eaca47304c142615169bd3f1901631\n',49,8,'Memset Ltd'),(273018,219,219,'2012-02-07 14:20:42','2012-02-07 14:19:22','    Call setgroups() before setuid() and setgid().\n    \n    Fixes bug 989569.\n    \n    This patch ensures that the list of groups is completely reset when dropping\n    privileges.\n    \n    Change-Id: I049f75e66e08a4a6361504b013bc68c4c38ef093\n',9,2,'Red Hat'),(273019,4064,4064,'2012-02-07 12:02:24','2012-02-07 11:36:42','    skip host in http_connect if specified in headers\n    \n    Change-Id: If614768f2aaf7ca8b06985c8efcd4120b324b290\n',3,3,'Rackspace'),(273020,5591,5591,'2012-02-08 00:06:55','2012-02-08 00:06:55','    Added timeout option to swift-recon\n    \n    Change-Id: I0d3c55a11c5e3252f0fd4b128ab840403c7f55f6\n',8,2,'Rackspace'),(273022,211,211,'2012-02-02 19:47:39','2012-02-02 19:47:39','    Allow to pass arguments to nosetest.\n    \n    When running .functests or .unittests allow to pass argument on the\n    command line for nosetests.\n    \n    Fixes bug 925636\n    \n    Change-Id: Icb07c192328528900b502fbc937b9c83f70a4b0f\n',3,3,'eNovance'),(273024,4064,4064,'2012-02-08 10:22:39','2012-02-07 14:02:28','    Change tpooled_get_hashes back to err,err on Timeout, (object server REPLICATE needs it) and unit tests\n    \n    Change-Id: Ic60c33570594fd2c0939043863b013aa2103505d\n',55,6,'Rackspace'),(273025,229,229,'2012-02-08 14:30:39','2012-02-08 14:30:39','    updated authors file\n    \n    Change-Id: Id483bb1cec1b8b27788fe1233e1795adea6e5e49\n',10,2,'Rackspace'),(273026,229,229,'2012-02-08 15:13:13','2012-02-08 15:06:26','    updated changelog for 1.4.6\n    \n    Change-Id: If77964f27ad8d47aa02dd73b771b77cc6558ef37\n',24,0,'Rackspace'),(273027,229,229,'2012-02-08 15:42:42','2012-02-08 15:42:42','    1.4.7 version bump\n    \n    Change-Id: Ib6fbd5fb86e817ac63d14d9e05aff121ab0cfd86\n',1,1,'Rackspace'),(273028,5591,5591,'2012-02-10 21:44:17','2012-02-10 18:50:00','    Fix tempurl docs.\n    \n    Change-Id: I77511241693b493b97eda2264d0c3e3d7e1df8d6\n',13,8,'Rackspace'),(273029,5591,5591,'2012-02-09 02:49:14','2012-02-09 02:49:14','    tempurl and formpost set REMOTE_USER\n    \n    This is to allow them to pass through staticweb.\n    \n    Change-Id: I421b1dba89b298c6dbd8e99d7aa8d4e98f0c28e3\n',16,0,'Rackspace'),(273031,42,42,'2012-02-22 08:19:37','2012-02-22 08:19:37','    Add Fedora to SAIO.\n    \n    In the past we had a document at Wiki, called RHELInstructions,\n    but it was permanently out of date, and someone deleted it, in\n    order to stop the confusion.\n    \n    Differences for Fedora as quite small and it makes sense to maintain\n    them inside the main document.\n    \n    This patch also fixes a couple of obvious problems:\n     - a missing period\n     - unwanted leading space that breaks a paragraph\n    \n    Still no idea how to remove color from [swift-hash].\n    \n    Change-Id: I73cda027c9d9bf695cd640a6d55735d82fba0048\n',37,6,'Red Hat'),(273032,5592,5592,'2012-02-27 02:44:27','2012-02-27 02:35:50','    Prevent a possible divide by 0 in obj/auditor.py.\n    \n    Fixes bug 941731. If \'elapsed=0\' in audit_all_objects set it\n    to 0.000001 to avoid divide by 0.\n    \n    Change-Id: If0b43568033167818c482c8927863bea1dccfe57\n',2,1,'San Diego Supercomputer Center'),(273033,5591,5591,'2012-02-23 08:01:21','2012-02-22 13:10:37','    Added logging to start and end of audit passes.\n    \n    Change-Id: Ibf64387f53e4b6ce532272e0a5005a1f1d54fb53\n',8,2,'Rackspace'),(273035,42,42,'2012-02-22 18:43:05','2012-02-22 18:40:22','    Fix lp:875301\n    \n    Pure formatting, not a word changed.\n    \n    Change-Id: I95671428c5ad648497b0275489492d04e85ac79e\n    Bug: 875301\n',14,11,'Red Hat'),(273037,229,229,'2012-02-27 13:31:38','2012-02-24 23:01:27','    added emails to AUTHORS file\n    \n    Change-Id: Ib379e45b3869725121fbc02e5be788163c04619b\n',49,46,'Rackspace'),(273038,5593,5593,'2012-02-27 11:58:35','2012-02-27 11:58:35','    set query_string \'qs\' in direct_get_account and direct_get_container, but didn\'t pass it to http_connect\n    \n    Change-Id: I44ded709fa174aacd66c2962231f2f5997dc0f71\n',2,2,'independent'),(273040,229,229,'2012-02-09 07:40:00','2012-02-09 07:40:00','    added account_autocreate = true to example proxy config\n    \n    Change-Id: Ib25c61da37bcbbda7bbd729560996ef6b3be1670\n',1,0,'Rackspace'),(273042,597,597,'2012-02-08 15:06:40','2012-02-02 16:05:06','    Blueprint cli-auth: common cli args\n    \n    Add --auth_url, --username and --password and OS_* env vars as\n    aliases to --auth, --user and --key.\n    \n    Default to --auth-version=2.0 if none of --auth, --user or --key\n    are set or if OS_AUTH_URL is set.\n    \n    Ensure trailing \'/\' is present in --auth so URLs are created correctly.\n    \n    Fixes lp925212\n    \n    Change-Id: Ic0008c5d5c1ab4fddbaab5d982ab60fed2c50019\n',28,1,'Intel'),(273044,219,219,'2012-02-28 14:57:12','2012-02-28 11:17:21','    Use constant time string comparisons for auth.\n    \n    Fix bug 942644.\n    \n    Use constant time string comparisons when doing authentication to help\n    guard against timing attacks.\n    \n    Change-Id: I88c4c5cd9edd9e5d60db07b6ae2638b74a2a2e17\n',28,2,'Red Hat'),(273046,4064,4064,'2012-02-23 15:47:03','2011-12-14 14:37:22','    client HEAD headers and swift source in logs\n    \n    Change-Id: Ic5e3b6d333f94da971bf3e0ae4cdd6a9689c7f1c\n',6,2,'Rackspace'),(273048,5594,5594,'2012-02-28 12:20:49','2012-02-28 12:20:49','    Few fix in the SAIO doc:\n     - Fix the ubuntu isos urls\n     - Removed trailing whitespaces\n     - Correct the text that explain how to build the documentation\n    \n    Change-Id: Ie19604d4586562dcef8c1d46addd14c15db2c442\n',30,29,'independent'),(273050,4055,4055,'2012-02-29 11:30:08','2012-02-28 18:25:14','    Fix rebalancing when 2+ of a partition\'s replicas are on deleted devices.\n    \n    RingBuilder._reassign_parts assumed that only replica for a given\n    partition would move. This isn\'t necessarily true in the case where a\n    bunch of devices have been removed. This would leave invalid entries\n    in _replica2part2dev and also cause validation to fail.\n    \n    One easy way to reproduce this is to create a 3-replica, 3-zone,\n    6-device ring with 2 drives per zone (all of equal weight), rebalance,\n    and then remove one drive from each zone and rebalance again.\n    \n    Bug: 943493\n    \n    Change-Id: I0d399bed5d733448ad877fa2823b542777d385a4\n',55,20,'SwiftStack'),(273052,5592,5592,'2012-02-23 06:44:45','2012-02-23 05:50:36','    Add support for URLs and absolute paths in staticweb CSS listings.\n    \n    Fixes bug 939267. Return the quoted web-listings-css value\n    if it starts with \'/\', \'http://\', or \'https://.\' All other values\n    are treated as relative paths.\n    \n    Change-Id: I55ee4ec77cf8db99aa48c9a398e29767b200e1eb\n',70,6,'San Diego Supercomputer Center'),(273054,5592,5592,'2012-02-23 18:22:31','2012-02-12 07:16:04','    Adds support for metadata values with a \':\'.\n    \n    Changes the item.split(\':\') in st_post to item.split(\':\', 1). Fixes bug 930872.\n    Adds a helper function named split_metadata to have a common place for parsing\n    metadata options. Errors out if the metadata parameters do not contain a :.\n    \n    Change-Id: I49bfb4dc8c34410e491cf55ef6e7f9a1466f201f\n',26,15,'San Diego Supercomputer Center'),(273056,5582,5582,'2012-02-28 16:33:57','2012-02-25 20:33:15','    swift-recon cli cleanup\n    \n    Refactored swift-recon completely. It\'s broken out into Classes and no\n    longer uses globals. In addition, I pulled out the previous individual\n    scout_XXXX functions that where getting added for each check. All the\n    check\'s now use the same method from the Scout class to obtain stats\n    and telemetry.\n    \n    Change-Id: I512ab50f29e1ef4d10bd3adbf1cac642308e7cf1\n',438,382,'Rackspace'),(273058,5582,5582,'2012-02-29 04:24:54','2012-02-29 04:24:26','    Add json output option to swift-dispersion-report\n    \n    Add\'s the configuration file option \"dump_json\" or command line\n    options [-j|--dump-json] to have swift-dispersion-report output\n    the report in json format. This allows the dispersion report to\n    be more easily consumed elsewhere.\n    \n    There\'s also a few pep8 fixes and removal of unused imports.\n    \n    Change-Id: I2374311ccbef43e6bbae24665c9584e60f3da173\n',117,62,'Rackspace'),(273060,229,229,'2012-02-28 21:38:30','2012-02-28 21:38:30','    fixed pep8 issue and renamed strcmp_const_time to streq_const_time\n    \n    Change-Id: Ifc21f0ec08ac2ba120a67795e82082b18e08584e\n',7,7,'Rackspace'),(273062,4056,4056,'2012-03-01 15:00:03','2012-02-17 11:28:37','    Make initial ring balance robust to \"holes\".\n    \n    Make initial ring building robust to \"holes\" (None values in self.devs).\n    Having these None values in the self.devs array is fine later in the\n    builder file\'s life.  Making it okay upon initial balance makes\n    builder files easier to programatically manipulate.\n    \n    Change-Id: Icca9c1aa4fd0aae12168998acc39e52f95989b7d\n',6,3,'SwiftStack'),(273063,211,211,'2012-03-03 21:56:02','2012-03-03 21:55:09','    Make sure auth is present before checking for /\n    \n    - Fixes bug 945882\n    \n    Change-Id: I22a688b01678ab93e888c9537a3f611e43e22c30\n',1,1,'eNovance'),(273064,595,595,'2012-03-02 16:14:35','2012-03-02 16:14:27','    add git commit date / sha1 to sphinx html docs\n    \n    Change-Id: If47cee942707d2c36b0b897470b7ec994f0e259a\n',3,1,'Rackspace'),(273066,2173,2173,'2012-03-05 15:50:27','2012-03-05 15:50:27','    Fix typo in Connection comments\n    \n    Change-Id: I46315f6840f7d2ffeb39e8e747ac99fbbb0ca293\n    Signed-off-by: Julien Danjou <julien.danjou@enovance.com>\n',1,1,'Red Hat'),(273067,5592,5592,'2012-03-05 06:14:49','2012-03-05 06:14:49','    Fix a ZeroDivisionError for short replicator runs.\n    \n    During unittest runs it\'s possible for time.time() - self.start\n    to be zero. This patch sets the elapsed value to an arbitrarily\n    small number to prevent divide by zero errors.\n    \n    Change-Id: I20d4b9bf7ff3cdce4e9fe3215622c01cfec7f8bb\n',2,1,'San Diego Supercomputer Center'),(273069,138,138,'2012-03-05 15:30:43','2012-03-05 15:27:51','    Fixing some minor issues in SAIO on Fedora\n    \n    Change-Id: I2abdcd1a3c7f2a54b200489efe57f8990bd94bbf\n',4,4,'Red Hat'),(273071,5591,5591,'2012-03-03 23:04:27','2012-03-03 19:21:08','    Change account pending to behave like container...\n    \n    Change account pending to behave like container pending.\n    \n    Change-Id: I32af5e7671c9b69b3aca8997534fe4af19ded374\n',22,15,'Rackspace'),(273073,5591,5591,'2012-03-06 06:08:18','2012-03-06 03:24:16','    Improvements to database replication.\n    \n    Note: I\'d like to get this released as soon as possible as it is a\n    data durability issue.\n    \n    1) Orders nodes so that none get starved (see code and footnote).\n    \n    2) New max_diffs setting that caps how long the replicator will spend\n       trying to sync a given database per pass so the other databases\n       don\'t get starved.\n    \n    3) Replaces run_pause with the more standard \"interval\", which means\n       the replicator won\'t pause unless it takes less than the interval\n       set.\n    \n    Change-Id: I986742229e65031df88f5251ca61746b7c8d2bde\n',48,14,'Rackspace'),(273075,5591,5591,'2012-03-06 17:57:16','2012-03-06 17:52:42','    Remove old stats tools.\n    \n    https://blueprints.launchpad.net/swift/+spec/remove-old-swift-stats-tools\n    \n    Change-Id: Ibb57b3d71c7f18060d2d48a1d3754a7f1444624d\n',0,1170,'Rackspace'),(273076,5591,5591,'2012-03-06 21:47:41','2012-03-06 21:43:15','    Updated CHANGELOG for 1.4.7\n    \n    Change-Id: I6933a3faaceaff28f6ecbbe5904ed3eb46413a02\n',18,0,'Rackspace'),(273077,239,239,'2012-03-09 11:46:58','2012-03-09 11:46:58','    Final 1.4.7 versioning\n    \n    Change-Id: Ie07b93bc50bd1b19ce1d34df7b96a7e5882e398f\n',1,1,'OpenStack Foundation'),(273078,229,229,'2012-03-06 16:11:12','2012-03-06 16:11:12','    version bump to 1.4.8\n    \n    Change-Id: I281422fbd4a1b028f600aad3b6f8d68be09f6399\n',1,1,'Rackspace'),(273079,5582,5582,'2012-03-08 04:47:00','2012-03-08 04:47:00','    Create tmpfile in the same dir as the cache file\n    \n    Make sure we don\'t try to rename files across devices. Fixes bug 949366\n    \n    Change-Id: I75581a0682c8db90cad9b077b1c22a886d234e31\n',2,1,'Rackspace'),(273080,211,211,'2012-03-07 13:52:06','2012-03-05 13:43:00','    Return NoSuchBucket/Key on 404.\n    \n    - Fixes bug 945937.\n    \n    Change-Id: If6dd53a716491a7d1a9ab4992224038ede4cb32a\n',6,6,'eNovance'),(273082,1266,1266,'2012-03-08 17:23:58','2012-03-02 11:23:17','    Adds name_check filter\n    \n    Bug 926048.\n    \n    Filter checks path for user-defined forbidden characters, and for\n    user-defined maximum length.\n    \n    Includes changes to reflect gholt\'s latest comments to Patch Set 4\n    Also includes a change to a unit-test, renames another unit-test,\n    and removes one superfluous unit-test.\n    \n    Added section to the example proxy config\n    \n    Fixed-up unit test pep8 warnings\n    \n    Changed error response code to 400 (Bad Request)\n    \n    Change-Id: Iace719d6a3d00fb3dda1b9d0bc185b8c4cbc00ca\n',188,0,'HP'),(273083,5582,5582,'2012-03-08 21:08:15','2012-03-08 21:08:15','    Fix \"retries\" key in dispersion json output.\n    \n    Change-Id: I466302f05fd17c5b5460284c372c3667d7c46d7b\n',2,2,'Rackspace'),(273084,668,668,'2012-03-07 22:44:34','2012-01-31 15:27:29','    Add support for venv-based test run with tox.\n    \n     * Adds tox config\n       - based on the config from python-quantumclient and updated for\n         test, pep8 and coverage execution as per nova\'s run_tests.sh.\n     * Adds nosetests defaults in setup.cfg\n     * Adds runtime dependencies in tools/pip-requires\n       - dependencies were gathered by referencing the packages used in\n         creation of a Swift All In One.  Versions were determined by\n         checking the swift-core/trunk ppa or, failing that, the version\n         available in lucid.\n     * Adds test dependencies in tools/test-requires\n     * Updates swift/common/middleware/formpost.py for pep8 compliance\n     * Adds instructions for executing the tests with Tox to the\n       developer_guidelines\n     * Adds instructions for installing openstack.nose_plugin to\n       developer_saio\n     * Fixes bug 909177\n    \n    Change-Id: I5407924d2181e9ab335aaf76bf30c8d40deccbb4\n',98,5,'Red Hat'),(273086,5582,5582,'2012-03-09 20:49:06','2012-03-09 19:35:38','    Add instructions for pip install via easy_install.\n    \n    Add a line item to easy_install pip since we now need to pip install\n    openstack.nose_plugin. Fixes bug 951019\n    \n    Change-Id: Ibf4b8bb7feac2b8290db2f4c4665dacf8a881462\n',1,0,'Rackspace'),(273087,5591,5591,'2012-03-13 15:47:41','2012-03-12 21:54:31','    Make tests work like they used to.\n    \n    Change-Id: I081d853a90ad0efce5b7a20b52794ce3348a9617\n',13,7,'Rackspace'),(273088,5595,5595,'2012-03-14 10:43:36','2011-11-28 16:05:23','    add content-range headers to partial HTTP responses triggered by \"Range:\" requests as required by the HTTP protocol\n    \n    The S3 layer should not filter out content-range response headers as they are part of the\n    protocol and expected on a partial response.\n    \n    Change-Id: I2ae0775b5e039d1d505c44ec235ea32370dba1bc\n',20,1,'CERN'),(273089,1266,1266,'2012-03-12 11:25:41','2012-03-08 15:38:49','    Body of http responses included in Swift error msg\n    \n    The body of http responses is included in error messages from\n    swift.common.client and bin/swift if the body exists\n    \n    Includes changes requested by Juan Martinez\n    \n    Includes changes requested by David Goetz\n    \n    Fixed pep8 warnings\n    \n    Bug 949843\n    \n    Change-Id: Ib998280762b084dd46f8c0f4524eed20513de82b\n',118,60,'HP'),(273091,5591,5591,'2012-03-13 22:09:34','2012-03-13 20:01:14','    Small change to staticweb with container reques...\n    \n    Small change to staticweb with container requests. Before, a request\n    to a container that had no x-container-meta-web-index and no\n    x-container-meta-web-listings would pass the request on to the proxy\n    server, even if x-web-mode was set to true. Now, if x-web-mode is set\n    true, it will 404.\n    \n    This mostly important to folks that are using staticweb with an\n    external service that uses authenticated requests and x-web-mode set\n    to true, in which case the above 404 previously would return the\n    container listing (you were authenticated after all). Unauthenticated\n    requests would have received 401s anyway.\n    \n    Change-Id: Ifd321a8a076a79c1e119c5259a40bf08defdbe3c\n',38,0,'Rackspace'),(273093,597,597,'2012-03-14 00:13:56','2012-03-13 17:53:37','    Change CLIAuth arg names\n    \n    Change the argument names used for common Keystone authentication per the\n    updated http://wiki.openstack.org/CLIAuth:\n    \n    --auth_url -> --os_auth_url\n    --password -> --os_password\n    --username -> --os_username\n    \n    Fixes bug 954528\n    \n    Change-Id: I7e956e74de8192957eee87d155b2e5338c8942f0\n',9,9,'Intel'),(273095,4055,4055,'2012-03-09 15:53:34','2012-03-09 15:53:20','    Refactor how RingBuilder iterates over its devices.\n    \n    There were a dozen or so different places in RingBuilder that were\n    iterating over self.devs and filtering out None; now there\'s just one.\n    \n    Change-Id: If8d9b44efc083040932d876cd76a6d26e4a36ebc\n',29,35,'SwiftStack'),(273097,4055,4055,'2012-03-06 10:17:03','2012-03-01 10:53:06','    Refactor partition gathering.\n    \n    RingBuilder._reassign_parts() is really moving one (partition,\n    replica) pair at a time. However, the way that _gather_reassign_parts\n    passes that data in was strange; it would update each replica\'s entry\n    in _replica2part2dev to 0xffff, then return a list of affected\n    partitions. Now it just returns the pairs to move.\n    \n    This is helpful in the presence of bugs that affect partition\n    assignment (e.g. #943493), there\'s no chance of stray 0xffff values\n    hanging around and corrupting the partition map.\n    \n    Also, update my email address.\n    \n    Change-Id: Ifb3aeb4fac750f66e2ddbad88eb5846e72bac20c\n',17,15,'SwiftStack'),(273099,5591,5591,'2012-03-15 04:42:21','2012-03-10 20:02:49','    Alternate meta header removal method.\n    \n    Prior to this patch, you removed header metadata (such as\n    x-account-meta-name or x-container-meta-name) by sending the header\n    with no value. However, many tools such as curl will not send headers\n    with empty values.\n    \n    This patch adds an alternate method for header metadata removal: Send\n    an x-remove-account-meta-name (x-remove-container-meta-name) header\n    with any value and the proxy will translate it to the original header\n    name with no value, indicating removal.\n    \n    For safety, if you specify both x-remove-account-meta-name and\n    x-account-meta-name headers in the same request, the -remove header\n    will be ignored.\n    \n    Change-Id: Ic220bec05a0e266db85fc8fa50011146ee886d9c\n',40,18,'Rackspace'),(273101,211,211,'2012-03-15 16:06:17','2012-03-04 15:46:55','    Update swift.common.client with bin/swift changes.\n    \n    - Add auth version 2 to swift.common.client.\n    - Remove ununsed imports.\n    - Fix bug where auth_version should be a string.\n    - Add test for auth version 2.\n    - Allow to override the returns of http_connection for tests.\n    - Sync the passing of headers in bin/swift as well from client.\n    - Fixes bug 885011\n    - Previously it was review 3680 but abandoned.\n    - Address: Maru newby review.\n    - TODO: properly test auth_v1.\n    \n    Change-Id: I579d8154828e892596fae9ab75f69d353f15e12c\n',188,78,'eNovance'),(273103,5591,5591,'2012-03-16 00:12:06','2012-03-16 00:12:06','    PEP8 Fixes\n    \n    Change-Id: Ibf5316e96b88088ecbc56fe1f6fa7541bc967d5f\n',2,1,'Rackspace'),(273104,1,1,'2012-03-16 11:07:33','2012-03-16 01:23:39','    Add venv commands to tox.ini.\n    \n    The recent tox addition missed the general purpose that we use\n    for things like building docs and other arbitrary commands.\n    \n    Change-Id: Ib195a78d084a170c5051906f619743def4dbfbea\n',8,7,'HP'),(273105,1,1,'2012-03-16 12:11:47','2012-03-16 12:11:47','    Add sphinx to test-requires.\n    \n    Need sphinx in test-requires so that we can build docs in\n    the venv (wanted because module introspection needs build\n    depends installed)\n    \n    Change-Id: If3caf817381aea8e9cd8fb50e7e35c647f088b60\n',1,0,'HP'),(273106,5591,5591,'2012-03-15 19:41:31','2012-03-14 17:30:02','    Added optional max_containers_per_account restr...\n    \n    Added optional max_containers_per_account restriction. If set to a\n    positive value and if a client tries to perform a container PUT when\n    at or above the max_containers_per_acount cap, a 403 Forbidden will\n    be returned with an explanatory message.\n    \n    This only restricts the proxy server, not any of the background\n    processes that might need to create containers (replication, for\n    instance). Also, the container count is cached for the proxy\'s\n    recheck_account_existence number of seconds. For these reasons, a\n    given account could exceed this cap before the 403 Forbidden\n    responses kick in and therefore this feature should be considered a\n    \"soft\" limit.\n    \n    You may also add accounts to the proxy\'s max_containers_whitelist\n    setting to have accounts that ignore this cap.\n    \n    Change-Id: I74e8fb152de5e78d070ed30006ad4e53f82c8376\n',133,38,'Rackspace'),(273108,229,229,'2012-03-19 13:45:34','2012-03-19 13:45:34','    updated copyright date for all files\n    \n    Change-Id: Ifd909d3561c2647770a7e0caa3cd91acd1b4f298\n',112,112,'Rackspace'),(273109,229,229,'2012-03-19 12:35:53','2012-03-19 12:35:53','    updated authors file and added .mailmap\n    \n    Change-Id: Idf0d1bbc5c9df025825190035871294692e7e6a4\n',36,2,'Rackspace'),(273111,229,229,'2012-03-19 15:35:39','2012-03-19 12:59:14','    changelog for 1.4.8\n    \n    Change-Id: I1fb485fadbc23cfd4ff76667f0b52bf0fc3f9fe6\n',31,0,'Rackspace'),(273113,239,239,'2012-03-22 10:22:04','2012-03-22 10:22:04','    Final 1.4.8 versioning\n    \n    Change-Id: I0f726d2afa1c0b38acc384a17ace543c3c35f5ae\n',1,1,'OpenStack Foundation'),(273114,229,229,'2012-03-19 15:54:58','2012-03-19 15:54:58','    version bump to 1.4.9\n    \n    Change-Id: I8a2f7d09f1db5b24e69b108b7c90869d90aacb48\n',1,1,'Rackspace'),(273115,5596,5596,'2012-03-14 22:00:30','2012-03-11 04:36:26','    Make ring class interface slightly more abstracted from implementation.\n    \n    Change-Id: I0f55d61c7b8de30460f17a69e5d9946494dbda6e\n',52,62,'Rackspace'),(273117,5582,5582,'2012-03-19 13:44:43','2012-03-16 21:26:08','    tests for recon middleware.\n    \n    My first stab at unittests for the recon middleware.\n    Also, made some minor changes to the middleware to make testing\n    easier now and down the road.\n    \n    Change-Id: I23ce853398ff035ffbfc2082e90e22038832b966\n',531,21,'Rackspace'),(273119,4064,4064,'2012-03-19 10:22:09','2012-03-13 12:01:28','    set denied resp on requests to \'/\' in tempauth\n    \n    Change-Id: If2e319561b3d41e09310228792356f38b7958416\n',5,3,'Rackspace'),(273121,5582,5582,'2012-03-21 17:30:44','2012-03-21 17:30:44','    Display total disk usage info in swift-recon\n    \n    Now display\'s cluster disk space used, free, and total.\n    \n    Change-Id: I9c48dd6badaecd64cda4a2a8a51f41f1c29d328a\n',9,0,'Rackspace'),(273123,5596,5596,'2012-03-21 10:58:17','2012-03-19 20:29:32','    Only rewrite async-pending files if the data changed\n    \n    Change-Id: If33b37a89e78632522874034df7bac433e7d0a9b\n',5,2,'Rackspace'),(273125,229,229,'2012-03-26 05:14:01','2012-03-26 05:14:01','    added Ye Jia Xu to AUTHORS file and appropriate .mailmap entry\n    \n    Change-Id: Ib05f7742c51d00bd5ba901973343fd68ed6cd114\n',2,0,'Rackspace'),(273126,4067,4067,'2012-03-26 15:56:38','2012-03-26 15:56:38','    Fixed url in ObjectExpirer.iter_objects().\n    \n    Change-Id: I859a08debc378c2bbb421a6323c6ea6e0564272f\n',1,1,'Rackspace'),(273127,4064,4064,'2012-03-26 18:00:19','2012-03-26 18:00:19','    allow / to pass through ratelimit\n    \n    Change-Id: I891c5ea48511ca9ad47f2adbcbee700d63a4231d\n',3,3,'Rackspace'),(273128,26,26,'2012-03-28 14:28:32','2012-03-22 01:50:08','    StaticWeb fixes.\n    \n    The previous staticweb had the silly problem of global state for\n    concurrent requests. This fixes that.\n    \n    Also, the WSGI spec indicates start_response might not be called\n    right away and is only guaranteed to be called just before the first\n    \"chunk\" of the output iterator returns. This fixes StaticWeb\'s\n    previously incorrect assumption.\n    \n    A thorough review of this code would be much appreciated; I\'ve\n    messed it up enough times to not be completely trusted with it.\n    \n    Change-Id: Ie751c24e21db7a884a83a731fbf2f4309437302c\n',164,93,'Rackspace'),(273129,5591,5591,'2012-03-21 15:26:07','2012-03-16 17:10:36','    Add an optional delay to account reaping.\n    \n    Normally, the reaper begins deleting account information for deleted\n    accounts immediately. With this patch you can set it to delay its\n    work. You set the delay_reaping value in the [account-reaper] section\n    of the account-server.conf. The value is in seconds; 2592000 = 30\n    days, for example.\n    \n    Unfortunately, there are currently zero tests for the account-reaper.\n    This also needs fixing, but I thought I\'d submit this delay patch\n    alone for consideration.\n    \n    Change-Id: Ic077df9cdd95c5d3f8949dd3bbe9893cf24c6623\n',82,10,'Rackspace'),(273131,229,229,'2012-03-28 15:48:43','2011-12-29 11:29:19','    object versioning\n    \n    Object versioning in swift is implemented by setting a flag on the container\n    to tell swift to version all objects in the container. The flag is the\n    ``X-Versions-Location`` header on the container, and its value is the\n    container where the versions are stored.\n    \n    When data is ``PUT`` into a versioned container (a container with the\n    versioning flag turned on), the existing data in the file is redirected to a\n    new object and the data in the ``PUT`` request is saved as the data for the\n    versioned object. The new object name (for the previous version) is\n    ``<versions_container>/<object_name>/<timestamp>``, where the timestamp is\n    generated by converting the ``Last-Modified`` header value of the current\n    version to a unix timestamp.\n    \n    A ``GET`` to a versioned object will return the current version of the object\n    without having to do any request redirects or metadata lookups.\n    \n    Change-Id: I4fcd723145e02bbb2ec1d3ad356713f5dea43b8b\n',579,238,'Rackspace'),(273132,26,26,'2012-03-28 21:45:18','2012-03-28 21:40:48','    Added option to disable SQLite db preallocation\n    \n    Added option to disable SQLite db preallocation. This can be very\n    useful on pure ssd account/container servers where the extra space is\n    worth more than the lesser fragmentation.\n    \n    Change-Id: I8fbb028a9b6143775b25b343e97896497a8b63a9\n',50,6,'Rackspace'),(273133,26,26,'2012-03-29 07:50:15','2012-03-29 07:50:15','    Refactored Swift3 middleware to use WSGIContext.\n    \n    Change-Id: Ie73a2622576f29150c740cead0ea9c177688972e\n',63,99,'Rackspace'),(273135,26,26,'2012-03-29 07:24:17','2012-03-29 07:22:24','    Update middleware to use common pre_authed funcs\n    \n    Update StaticWeb, FormPost, and TempURL to use common\n    make_pre_authed_env and make_pre_authed_req functions.\n    \n    Change-Id: I32cc3cddff0d2aaeb6314578872707c1a37b4bce\n',115,96,'Rackspace'),(273137,26,26,'2012-04-02 15:05:01','2012-04-02 14:58:40','    1.4.9 CHANGELOG\n    \n    Change-Id: I15496cc846f8eaf890753b0a7256a91da197423e\n',21,0,'Rackspace'),(273138,229,229,'2012-04-02 10:14:09','2012-04-02 10:14:09','    version bump to 1.4.10\n    \n    Change-Id: I050be4f06ba8761be9fe8aefb0e181406bf31616\n',1,1,'Rackspace'),(273139,229,229,'2012-04-02 11:11:02','2012-04-02 11:10:09','    Revert \"version bump to 1.4.10\"\n    \n    This reverts commit e4ab8f004c0c4a8b631d0de77b72d85d5fdba221.\n    \n    Change-Id: Id8262405acec0f13314f27fbac02bd3cded60789\n',1,1,'Rackspace'),(273140,2173,2173,'2012-04-02 16:38:48','2012-04-02 16:24:09','    Fix typo in swift-dispersion-report and populate\n    \n    Change-Id: I5168942ad32b3461f4c46300e378b249dab6a2ee\n    Signed-off-by: Julien Danjou <julien.danjou@enovance.com>\n',2,2,'Red Hat'),(273142,4064,4064,'2012-04-02 11:36:40','2012-04-02 11:32:35','    fix for listing_iter\n    \n    Change-Id: I2a32d333af7ed87208928032d6f6c44e78ee6dee\n',12,9,'Rackspace'),(273143,2173,2173,'2012-04-02 16:42:05','2012-04-02 16:41:16','    Allow to specify auth_version in swift-dispersion tools\n    \n    Change-Id: I080d531471d8ea57c69a918d4f6930441f1e69f6\n    Signed-off-by: Julien Danjou <julien.danjou@enovance.com>\n',7,2,'Red Hat'),(273145,5579,5579,'2012-04-04 10:44:43','2012-04-04 10:44:43','    fixing response iterator in swift3 test\n    \n    Change-Id: I6e58eed72aa3d1835b1a9ef99014d27a7dfd810e\n',2,2,'independent'),(273146,211,211,'2012-03-20 12:11:21','2012-03-20 11:54:51','    Add os_tenant_name to bin/swift and common.client\n    \n    - Make sure we have a tenant_name when doing get_auth for 2.0\n      auth_version.\n    \n    Change-Id: I02dceb03f224c8fb91972e1f0e2925e5d1a06640\n',70,42,'eNovance'),(273148,4064,4064,'2012-04-06 13:51:22','2012-04-06 13:51:11','    wsgi pre_auth fixes\n    \n    Change-Id: Idb84bd6800c047ce1080039434b7957aa7d69b4d\n',4,1,'Rackspace'),(273150,26,26,'2012-04-10 11:16:06','2012-04-10 11:16:06','    Removed SCRIPT_NAME from preauth env\n    \n    Change-Id: Iaf5f7011cf41f503b7ccdea671cd31a0466f5248\n',2,3,'Rackspace'),(273151,42,42,'2012-04-10 10:44:55','2012-04-10 10:41:22','    Fix colorization of \"hash\" in SAIO doc.\n    \n    Admittedly, this is ridiculously trivial, but the coloring of\n    \"hash\" always peeved me. Not so much that it existed, but that\n    I did not understand what caused it. After consulting our Sphinx\n    experts, it turned out that the code block was considered code\n    in Python and \"hash\" is a reserved word in Python, so it was\n    colored.\n    \n    One option is to declare the code block \"ini\", which is what\n    it is, but that causes the block stand out just as badly, unless\n    we highlight every one of them. So, for now use \"none\".\n    \n    Change-Id: Icee021fc30839eeb02cd3e232ff6be92ed32df52\n',3,1,'Red Hat'),(273153,5583,5583,'2012-04-10 14:52:52','2012-04-06 14:58:35','    Appending some new information to proxy, account and container config manpages. Adding object-expirer files and swift-orphans as well. Also making some minor modification on the other files to stop lithian from complaining during package creation checks. Adding name to Authors file.\n    \n    Change-Id: Id68231ced070b27d1f7fb5a230d345694632e7dd\n',400,52,'Rackspace'),(273155,2173,2173,'2012-04-06 15:53:43','2012-04-06 15:52:43','    Use options.os_auth_url rather then environment variable\n    \n    If you do specify --os_auth_url rather than using the environment variable\n    OS_AUTH_URL, you\'ll end up with different behaviour.\n    \n    Change-Id: I7430c2a619487375427b1c377ce00245eff107ff\n',1,1,'Red Hat'),(273157,4064,4064,'2012-04-12 14:18:40','2012-04-12 12:46:03','    proxy to be able to deny request to invalid hostnames\n    \n    Change-Id: I974f729da60e5ab9453daf9e52466b3e1af5c69b\n',20,0,'Rackspace'),(273158,229,229,'2012-04-05 15:02:15','2012-03-31 10:18:44','    updated docs for domain remap and cname lookup middleware\n    \n    Change-Id: I1c571951f25a6e724cdd4699eb94baad5e47eb95\n',94,38,'Rackspace'),(273160,42,42,'2012-04-10 10:27:54','2012-04-10 10:27:54','    Make swift client easier to wrap\n    \n    In the process of wrapping for profiling, a trivial wrap with def main()\n    ended in a ton of these:\n        NameError: global name \'parser\' is not defined\n    \n    A closer investigation revealed an apparent confusion in argument names.\n    The problem was introduced by commit 985968f76550251904b64d12de025fa5d65ed03f\n    of November 2010. Note that Greg fixed st_delete() correctly in that one,\n    but apparently forgot the others.\n    \n    Unit tests pass for both current (bad) code, and the patched code.\n    By the magic of Python scoping, current code works, just impossible\n    to wrap for a quick hack.\n    \n    Change-Id: I18f2494ce2a201d04d49f99ea259d141939dcb6a\n',5,5,'Red Hat'),(273162,229,229,'2012-04-12 21:45:33','2012-04-09 14:18:49','    fix when deleting a versioned object when the version target container is missing\n    \n    Change-Id: I16a8d1f5543d62a6d968bf1b9f52f319902437cb\n',46,7,'Rackspace'),(273164,4740,4740,'2012-04-15 09:55:33','2012-04-15 09:49:35','    Fixed TestObjectController.test_PUT_auto_content_type()\n    \n    The test was failing silently. To catch these errors the response\n    from controller.PUT() is now checked.\n    \n    Fixes to the TestObjectController.test_PUT_auto_content_type():\n    * Check for the correct \'Content-Type\' header in the fake connect() method\n    * Pass in the correct number of responses to fake_http_connect()\n    * Pass a \'transfer-encoding\' header to PUT() so that\n      constraints.check_object_creation() passes\n    * Pass the correct number of elements in the \'expected\' iter to the\n      test_content_type() method\n    \n    Change-Id: I8dced7b2f3c7e1b1d292c6995b1faf46f5e863fe\n',16,7,'NEC'),(273166,869,869,'2012-03-29 22:40:14','2012-03-29 22:40:14','    Unify different ring-balancing methods.\n    \n    RingBuilder._initial_balance() gathers partitions differently from\n    .rebalance(), but the assignment algorithm is the same. However, there\n    were two nearly-identical implementations; these have been combined.\n    \n    Also extracted a couple of utility methods to reduce duplication.\n    \n    Change-Id: Ia5442782a8285dc14aa9a93878a7b0e8d1bb1be5\n',26,50,'SwiftStack'),(273168,1405,1405,'2012-04-18 15:13:09','2012-04-18 15:12:10','    make test runner functions return the status of running the tests\n    \n    This makes it a lot easier for CI jobs to be setup and return the true\n    status of the testsuite.\n    \n    Change-Id: I0c2b0d6b17f560a889cd2f22ab98a68361f6d738\n',9,0,'SUSE'),(273170,2175,2175,'2012-04-10 12:27:14','2012-04-10 12:25:01','    Fixed grammar and improve docs.\n    \n    Corrected its/it\'s mistakes, harmonized line wrapping within some docs\n    and clarified doc wording in several places.\n    \n    Change-Id: Ib9ac6d5e859f770a702e1fad6de8d4abe0390b47\n',79,38,'Nebula'),(273172,26,26,'2012-04-14 05:23:28','2012-04-14 05:23:28','    Allowed the proxy to pass on the X-Timestamp header.\n    \n    Change-Id: I31a64614231391b52855b88220319b2359bea142\n',1,2,'Rackspace'),(273174,1173,1173,'2012-04-23 10:48:24','2012-04-23 10:48:24','    Adds links to docs.openstack.org\n    \n    In the side bar, links to past versions and docs.openstack.org\n    \n    On the index.rst, links to wiki and docs.openstack.org\n    \n    Change-Id: Icf33c6f396e1ab016fd86a56e61df3e063a1bae2\n',3,3,'Rackspace'),(273176,1405,1405,'2012-04-24 17:56:46','2012-04-24 17:55:59','    remove unused imports and useless empty class Base\n    \n    Change-Id: I78dbb390cf0afe03d4bcf1aa9ffc9497392579dd\n',1,10,'SUSE'),(273177,26,26,'2012-04-10 08:36:51','2012-04-10 08:36:51','    Added db_preallocation setting to replicators\n    \n    Somehow I forgot the account and container replicators with the last\n    db_preallocation patch.\n    \n    Change-Id: I1a42ef000d60b59aedb113d91485319d6919bc36\n',4,1,'Rackspace'),(273179,1405,1405,'2012-04-17 18:27:38','2012-04-17 18:27:38','    return the full response from FakeAppObject\n    \n    Fixes bug 984042\n    \n    Change-Id: I18a6eac497b24338af4d82a568484b0fc9d97382\n',2,2,'SUSE'),(273181,229,229,'2012-04-23 19:29:26','2012-04-23 16:27:43','    added docs and warnings about using SSL\n    \n    Change-Id: I766b2da0a3769869b5b6c5565106e9032fea8c3e\n',18,3,'Rackspace'),(273183,42,42,'2012-04-26 10:58:07','2012-04-26 10:58:07','    Restore the syntax -U tenant:user\n    \n    On a relatively recent build of swift, all my scripts blew up with\n    \"No tenant specified\". It was caused by the fix to add --os_tenant_name,\n    commit ID:  208b8e85a80e46ddb49dc2035cb292570a20c7db\n    \n    This patch restores the old behavior. I tested it to work with old\n    swauth-based Swift, new Keystone-based Swift, in the latter case using\n    both -U and --os_tenant_name arguments.\n    \n    Note that this patch permits to use a literal colon in the user name\n    with the new syntax, as long as tenant is specified. Empty tenant\n    names are not allowed with either syntax.\n    \n    Change-Id: I7785e6981a9d6281d0421c43875ee19d61d5ff43\n    Bug: 982909\n',4,2,'Red Hat'),(273185,26,26,'2012-04-26 20:29:08','2012-04-26 20:29:08','    Fixed tabs in the multi-node doc.\n    \n    Change-Id: Idf2ea227b0078026eb2693ff7c0a24ec926bb6f3\n',3,2,'Rackspace'),(273187,638,638,'2012-04-05 18:24:18','2012-04-05 18:23:54','    Removed unused imports.\n    \n    Change-Id: I5a837bea8699b78484265dc2434b190d0cf15de2\n',6,18,'Piston Cloud Computing, Inc.'),(273189,1175,1175,'2012-04-30 08:22:42','2012-04-28 16:31:00','    bug 661267 adding config eastereggs, fixing defaults\n    \n    Change-Id: I41356ee250c9088a2387b0d493586dd990a04ac3\n',17,8,'NEC'),(273190,4160,4160,'2012-04-25 09:26:22','2012-04-21 02:02:19','    HTTP status value naming normalization\n    \n    Replace HTTP status code with constants like HTTP_OK, HTTP_NOT_FOUND, etc.\n    \n    Change-Id: I76cd8bf880e7269454192a3bc4b027a297741247\n',397,169,'Nexenta'),(273192,26,26,'2012-05-04 03:36:56','2012-05-04 03:25:36','    Added associated_projects.rst\n    \n    In the interest of keeping the core Swift code repository less\n    complex, but still offering a quick way to find associated projects\n    that enhance or use Swift, I\'ve added this new Associated Projects\n    page prominently to the Swift documentation.\n    \n    This will allow much less barrier to entry on enhancing Swift as\n    other projects can work independently and will only need to wait on\n    the core Swift project for approval of minimal tweaks to the core\n    Swift code base.\n    \n    It will also allow an easy central place to find cool associated\n    projects that otherwise might go unnoticed or even duplicated.\n    \n    The plan is to move non-essential projects that are currently\n    embedded in the Swift repository out into their own projects with\n    links to them on this new page. This would include items such as\n    (just what I can think of right now): bin/swift command line tool and\n    clients, swift-bench, swift-dispersion, TempURL, FormPost, StaticWeb,\n    Rate Limiting, Swift3, Domain Remap, and CNAME Lookup.\n    \n    After all that is done, those projects will be able to move forward\n    much more quickly and new developers for Swift itself will have much\n    less to learn and get confused about.\n    \n    Change-Id: Ib8447d8bd480f0a3d8f0413137ccdba73a11dd91\n',61,0,'Rackspace'),(273193,5590,5590,'2012-05-04 06:59:45','2012-05-04 06:58:31','    Fix related to bug #994502\n    \n    Added support for configuring lock file location.\n    added an additional error handler.\n    \n    Change-Id: I3635ed9694b9fb8526e0ca0591dc731da03a7128\n',9,3,'Red Hat'),(273195,869,869,'2012-05-04 08:24:51','2012-05-03 18:33:05','    Make scripts in bin/ PEP8-compliant.\n    \n    Also made tox\'s PEP8 check look at the scripts in bin/ to keep them\n    PEP8-compliant.\n    \n    Change-Id: I710365ea929d7fc15578d5f742a236bad47ef28e\n',56,35,'SwiftStack'),(273197,26,26,'2012-05-03 00:25:31','2012-05-03 00:25:31','    Fixed inconsistent end_marker\n    \n    The listing of containers was inclusive whereas the listing of\n    objects was exclusive. I searched and searched and only found\n    end_marker usage with listings of objects so I changed the listings\n    of containers to match that.\n    \n    Change-Id: Ia8eb66a7ceaef28c698e2d4e19dd5dfd9197a911\n',3,3,'Rackspace'),(273199,4067,4067,'2012-05-04 18:07:54','2012-05-04 18:07:22','    Added an internal client.\n    \n    Refactored object expirer to use this client.\n    \n    Change-Id: Ibeca6dba873f8b4a558ecf3ba6e8d23d36f545b0\n',1598,460,'Rackspace'),(273200,229,229,'2012-05-07 15:15:28','2012-05-07 15:15:28','    added annegentle entry in .mailmap\n    \n    Change-Id: I9416d7e5ca155ce8b3258d4e18dd32917dc314a8\n',1,0,'Rackspace'),(273202,26,26,'2012-05-05 00:40:33','2012-05-05 00:08:37','    Pulled StaticWeb out to separate project\n    \n    StaticWeb is now at http://gholt.github.com/swift-staticweb/\n    \n    For current users of StaticWeb, this will require installing the new\n    package and changing the \"use\" line of the staticweb filter conf\n    section to:\n    \n    use = egg:swiftstaticweb#middleware\n    \n    And then \'swift-init proxy reload\'.\n    \n    Change-Id: Iab32adb5927698a667c5c6d6a572c44ca23414eb\n',1,1244,'Rackspace'),(273204,26,26,'2012-05-08 20:20:29','2012-05-08 19:48:29','    Pulled out TempURL/FormPOST\n    \n    TempURL/FormPOST is now at http://gholt.github.com/swift-tempurl/\n    \n    For current users of TempURL/FormPOST, this will require installing the new\n    package and changing the \"use\" line of the tempurl and formpost conf section\'s\n    to:\n    \n    [filter:tempurl]\n    use = egg:swifttempurl#tempurl\n    \n    [filter:formpost]\n    use = egg:swifttempurl#formpost\n    \n    And then \'swift-init proxy reload\'.\n    \n    Change-Id: I5bddf7f9e09ee07815530a41c46ff901fc21b447\n',1,3346,'Rackspace'),(273205,4064,4064,'2012-05-07 13:46:41','2012-05-07 13:46:41','    fix pre_auth request funcs to handle quoted paths\n    \n    Change-Id: I739e3f600cedab5c7174a5b1f0ff2ec6003fc453\n',30,9,'Rackspace'),(273207,229,229,'2012-05-08 21:30:35','2012-05-07 09:41:42','    removed domain remap middleware\n    \n    The code has moved to https://github.com/notmyname/swift-domainremap.\n    \n    For current users of domain remap, this will require installing the new\n    package and changing the \"use\" line of the domain remap conf section\'s\n    to:\n    \n    [filter:domain_remap]\n    use = egg:swift_domainremap#swift_domainremap\n    \n    And then \'swift-init proxy reload\'.\n    \n    Change-Id: I710caf9b991f9d37df36b826ae4338086d0ec36d\n',1,309,'Rackspace'),(273208,26,26,'2012-05-09 18:44:45','2012-05-09 18:40:51','    Pulled out Rate Limit middleware\n    \n    Rate Limit middleware is now at\n    http://dpgoetz.github.com/swift-ratelimit/\n    \n    For current users of Rate Limit, this will require installing the new\n    package and changing the \"use\" line of the ratelimit conf section to:\n    \n    [filter:ratelimit]\n    use = egg:swiftratelimit#middleware\n    \n    And then \'swift-init proxy reload\'.\n    \n    Change-Id: I2ab774e9cee9fba4103c1be4bea6d52d1adb29f7\n',4,845,'Rackspace'),(273209,229,229,'2012-05-09 14:00:51','2012-05-09 10:15:23','    removed cname lookup middleware\n    \n    The code has moved to https://github.com/notmyname/swift-cnamelookup.\n    \n    For current users of cname lookup, this will require installing the new\n    package and changing the \"use\" line of the cname lookup conf section\'s\n    to:\n    \n    [filter:cname_lookup]\n    use = egg:swift_cnamelookup#swift_cnamelookup\n    \n    And then \'swift-init proxy reload\'.\n    \n    Change-Id: If622486ddb04a53251244c9840aa3cfe72168fc5\n',0,374,'Rackspace'),(273210,869,869,'2012-05-09 12:28:00','2012-05-09 12:28:00','    One PEP8 fix to make tox happy again.\n    \n    Change-Id: I5ff2056f9f2eb99bfb98b020e3fc013332100e12\n',2,1,'SwiftStack'),(273211,869,869,'2012-05-09 15:56:06','2012-04-23 10:41:44','    As-unique-as-possible partition replica placement.\n    \n    This commit introduces a new algorithm for assigning partition\n    replicas to devices. Basically, the ring builder organizes the devices\n    into tiers (first zone, then IP/port, then device ID). When placing a\n    replica, the ring builder looks for the emptiest device (biggest\n    parts_wanted) in the furthest-away tier.\n    \n    In the case where zone-count >= replica-count, the new algorithm will\n    give the same results as the one it replaces. Thus, no migration is\n    needed.\n    \n    In the case where zone-count < replica-count, the new algorithm\n    behaves differently from the old algorithm. The new algorithm will\n    distribute things evenly at each tier so that the replication is as\n    high-quality as possible, given the circumstances. The old algorithm\n    would just crash, so again, no migration is needed.\n    \n    Handoffs have also been updated to use the new algorithm. When\n    generating handoff nodes, first the ring looks for nodes in other\n    zones, then other ips/ports, then any other drive. The first handoff\n    nodes (the ones in other zones) will be the same as before; this\n    commit just extends the list of handoff nodes.\n    \n    The proxy server and replicators have been altered to avoid looking at\n    the ring\'s replica count directly. Previously, with a replica count of\n    C, RingData.get_nodes() and RingData.get_part_nodes() would return\n    lists of length C, so some other code used the replica count when it\n    needed the number of nodes. If two of a partition\'s replicas are on\n    the same device (e.g. with 3 replicas, 2 devices), then that\n    assumption is no longer true. Fortunately, all the proxy server and\n    replicators really needed was the number of nodes returned, which they\n    already had. (Bonus: now the only code that mentions replica_count\n    directly is in the ring and the ring builder.)\n    \n    Change-Id: Iba2929edfc6ece89791890d0635d4763d821a3aa\n',826,214,'SwiftStack'),(273212,5597,5597,'2012-05-03 14:25:46','2012-04-30 16:38:15','    Implement unit_test config to disable syslog.\n    \n    bug 701248\n    bug 819303\n    \n    This change makes syslog optional, by providing a unit test\n    config with the ability to cause test/unit/__init__.py to\n    replace SysLogHandler with a fake logging class. The\n    default behavior is unchanged.\n    \n    FakeLogger now inherits directly from Handler and mocks out\n    its API - this was a backward-compatibility issue.\n    \n    Change-Id: I653dec148c4f6cf81759de03964c6a3290c1a290\n',123,38,'Sonian'),(273214,869,869,'2012-05-10 00:10:24','2012-05-10 00:07:57','    Speed up swift-get-nodes by 2x.\n    \n    It was loading the ring off disk once to print the primary nodes, and\n    then loading the whole thing off disk again to print the handoff\n    nodes. Changed it to only load the ring off disk once.\n    \n    Change-Id: I6f4cd0af9762e1e69660c3eb20586590b5339e5f\n',10,7,'SwiftStack'),(273216,4064,4064,'2012-05-09 21:55:57','2012-05-09 21:55:48','    have wsgi preauth copy over HTTP_HOST\n    \n    Change-Id: I1d9a6dcc6fcdad5cf99353eaf7eb69e703c38e22\n',1,1,'Rackspace'),(273218,5598,5598,'2012-05-10 17:02:35','2012-05-03 12:55:42','    SwiftException base class for all swift exceptions.\n    \n    Also add new exception class SwiftConfigurationError,\n    that can\'t be used to indicate that swift parameters\n    in swift conf files are not correct.\n    \n    Change-Id: I39bff9068a19c8e1c1b4aac38cb756c5e46d75e6\n',15,7,'Nexenta'),(273219,869,869,'2012-05-03 17:45:33','2012-04-29 12:03:49','    Let some swift-ring-builder commands take >1 arg.\n    \n    `swift-ring-builder X.builder [add|set_weight|set_info|remove]` can\n    now work on multiple devices at once.\n    \n    This allows for faster bulk operations; for example, if an\n    administrator has to add 48 new devices to the ring, then this lets\n    them do it in one command invocation. Since each invocation of\n    swift-ring-builder follows a deserialize-operate-serialize pattern,\n    using the bulk form of the commands on N devices will save N-1\n    [de]serializations.\n    \n    Change-Id: Ibf77528f28026866af3c94d0370181c8013d5bc5\n',229,186,'SwiftStack'),(273221,4056,4056,'2012-05-11 15:25:38','2012-04-01 16:47:08','    Adding StatsD logging to Swift.\n    \n    Documentation, including a list of metrics reported and their semantics,\n    is in the Admin Guide in a new section, \"Reporting Metrics to StatsD\".\n    An optional \"metric prefix\" may be configured which will be prepended to\n    every metric name sent to StatsD.\n    \n    Here is the rationale for doing a deep integration like this versus only\n    sending metrics to StatsD in middleware.  It\'s the only way to report\n    some internal activities of Swift in a real-time manner. So to have one\n    way of reporting to StatsD and one place/style of configuration, even\n    some things (like, say, timing of PUT requests into the proxy-server)\n    which could be logged via middleware are consistently logged the same\n    way (deep integration via the logger delegate methods).\n    \n    When log_statsd_host is configured, get_logger() injects a\n    swift.common.utils.StatsdClient object into the logger as\n    logger.statsd_client.  Then a set of delegate methods on LogAdapter\n    either pass through to the StatsdClient object or become no-ops. This\n    allows StatsD logging to look like:\n        self.logger.increment(\'some.metric.here\')\n    and do the right thing in all cases and with no messy conditional logic.\n    \n    I wanted to use the pystatsd module for the StatsD client, but the\n    version on PyPi is lagging the git repo (and is missing both the prefix\n    functionality and timing_since() method).  So I wrote my\n    swift.common.utils.StatsdClient.  The interface is the same as\n    pystatsd.Client, but the code was written from scratch.  It\'s pretty\n    simple, and the tests I added cover it.  This also frees Swift from an\n    optional dependency on the pystatsd module, making this feature easier\n    to enable.\n    \n    There\'s test coverage for the new code and all existing tests continue\n    to pass.\n    \n    Refactored out _one_audit_pass() method in swift/account/auditor.py and\n    swift/container/auditor.py.\n    \n    Fixed some misc. PEP8 violations.\n    \n    Misc test cleanups and refactorings (particularly the way \"fake logging\"\n    is handled).\n    \n    Change-Id: Ie968a9ae8771f59ee7591e2ae11999c44bfe33b2\n',1412,253,'SwiftStack'),(273222,26,26,'2012-05-16 21:25:10','2012-05-16 21:08:34','    Reverted the pulling out of various middleware:\n    \n    RateLimit\n    StaticWeb\n    TempURL/FormPOST\n    \n    Change-Id: I988e93e6f4aacb817a2e354d43a04e47516fdf88\n',5497,6,'Rackspace'),(273223,229,229,'2012-05-21 20:02:04','2012-05-17 10:43:44','    Re-add cname lookup and domain remap middleware\n    \n    Revert \"removed cname lookup middleware\"\n    \n    This reverts commit b47bcf19e41e862ca84d77a7b8843f836e084b6a.\n    \n    Revert \"removed domain remap middleware\"\n    \n    This reverts commit 317cf868bdf66dbc17c02d4ca383efafa5e2f229.\n    \n    Change-Id: I260498d555c93b28896ace48a6f0e96701cbcc38\n',615,0,'Rackspace'),(273224,42,42,'2012-05-17 19:20:31','2012-05-17 19:20:31','    Clean up weird test code\n    \n    While fixing something else, the strange code in the test suite\n    presented itself. Looks like a massive copy-paste error and a couple\n    of random oddities.\n    \n    Change-Id: I191e8cd9299b9336b0600363780d2930a04d1fd5\n',19,22,'Red Hat'),(273226,26,26,'2012-05-22 00:30:47','2012-05-22 00:30:47','    !! Changed db_preallocation to False\n    \n    Long explanation, but hopefully answers any questions.\n    \n    We don\'t like changing the default behavior of Swift unless there\'s a\n    really good reason and, up until now, I\'ve tried doing this with this\n    new db_preallocation setting.\n    \n    For clusters with dedicated account/container servers that usually\n    have fewer disks overall but SSD for speed, having db_preallocation\n    on will gobble up disk space quite quickly and the fragmentation it\'s\n    designed to fight isn\'t that big a speed impact to SSDs anyway.\n    \n    For clusters with account/container servers spread across all servers\n    along with object servers usually having standard disks for cost,\n    having db_preallocation off will cause very fragmented database files\n    impacting speed, sometimes dramatically.\n    \n    Weighing these two negatives, it seems the second is the lesser evil.\n    The first can cause disks to fill up and disable the cluster. The\n    second will cause performance degradation, but the cluster will still\n    function.\n    \n    Furthermore, if just one piece of code that touches all databases\n    runs with db_preallocation on, it\'s effectively on for the whole\n    cluster. We discovered this most recently when we finally configured\n    everything within the Swift codebase to have db_preallocation off,\n    only to find out Slogging didn\'t know about the new setting and so\n    ran with it on and starting filling up SSDs.\n    \n    So that\'s why I\'m proposing this change to the default behavior.\n    \n    We will definitely need to post a prominent notice of this change\n    with the next release.\n    \n    Change-Id: I48a43439264cff5d03c14ec8787f718ee44e78ea\n',20,22,'Rackspace'),(273228,211,211,'2012-05-24 10:21:42','2012-05-21 17:37:01','    Remove swift3 from here.\n    \n    - Reference https://github.com/fujita/swift3 in associated_projects.\n    - Implements blueprint add-associated-projects-docs.\n    \n    Change-Id: I48ef4c03449edf6ef4fda1a391228cacac7d2ac6\n',6,1099,'eNovance'),(273230,26,26,'2012-05-25 00:19:23','2012-05-25 00:19:02','    Fixed the one new thing PEP8 1.1 found\n    \n    Change-Id: Iaa15bd47ff5ba48bd971ccc8c1707930977116df\n',1,1,'Rackspace'),(273231,5596,5596,'2012-05-24 21:15:51','2012-05-24 21:15:51','    Move proxy server logging to middleware.\n    \n    Change-Id: I771c87207d4e1821e32c3424b341d182cc7ea7c0\n',446,446,'Rackspace'),(273232,5582,5582,'2012-05-24 14:50:00','2012-05-14 18:01:48','    Expand recon middleware support\n    \n    Expand recon middleware to include support for account and container\n    servers in addition to the existing object servers. Also add support\n    for retrieving recent information from auditors, replicators, and\n    updaters. In the case of certain checks (such as container auditors)\n    the stats returned are only for the most recent path processed.\n    \n    The middleware has also been refactored and should now also handle\n    errors better in cases where stats are unavailable.\n    \n    While new check\'s have been added the output from pre-existing\n    check\'s has not changed. This should allow existing 3rd party\n    utilities such as the Swift ZenPack to continue to function.\n    \n    Change-Id: Ib9893a77b9b8a2f03179f2a73639bc4a6e264df7\n',1195,439,'Rackspace'),(273234,229,229,'2012-05-27 21:31:56','2012-05-25 11:01:32','    Updated AUTHORS, CHANGELOG, and version for 1.5.0 release\n    \n    Change-Id: I9e0e26394a1892d757e33806511940cbe43be4d5\n',63,8,'Rackspace'),(273235,239,239,'2012-05-30 16:18:10','2012-05-30 15:39:37','    Adding missing files in generated tarballs\n    \n    Fix MANIFEST.in to include tools/, tox.ini and test/sample.conf\n    in generated tarballs. Fixes bug 960018 and bug 1005801.\n    \n    Change-Id: Ifa83eab62300e3aec71ced217dc3cdcb2846ea0e\n',3,0,'OpenStack Foundation'),(273236,229,26,'2012-06-04 15:22:26','2012-05-27 21:48:13','    Fixed query removal bug in make_pre_authed_request\n    \n    This fixes LP#1008708\n    \n    Change-Id: I1b8238fb2ffe07b1474f7d8f040fdc620b6897d7\n',13,1,'Rackspace'),(273237,229,26,'2012-06-04 15:24:53','2012-05-31 18:33:12','    Fixed another make_pre_auth bug (wsgi.input)\n    \n    Fixes LP#1008712\n    \n    Change-Id: I8b3c182ab85d4c5545e0a4259a64a496ebaf2bcb\n',13,0,'Rackspace'),(273239,229,26,'2012-06-04 15:32:35','2012-06-01 15:59:07','    Proxy logging content-length fix\n    \n    Fixes LP#1008719\n    \n    Change-Id: Iad2f12b3db44378c1369481c567b3d13b9a4b75f\n',31,10,'Rackspace'),(273241,229,869,'2012-06-04 15:33:46','2012-06-01 15:24:21','    Fix starvation in object server with fast clients.\n    \n    When an object server was handling concurrent GET or POST requests\n    from very fast clients, it would starve other connected clients. The\n    greenthreads responsible for servicing the fast clients would hog the\n    processor and only rarely yield to another greenthread.\n    \n    The reason this happens for GET requests is found in\n    eventlet.greenio.GreenSocket, in the send() method. When you call\n    .send(data) on a GreenSocket, it immediately calls .send(data) on its\n    underlying real socket (socket._socketobject). If the real socket\n    accepts all the data, then GreenSocket.send() returns without yielding\n    to another greenthread. Only if the real socket failed to accept all\n    the data (either .send(data) < len(data) or by raising EWOULDBLOCK)\n    does the GreenSocket yield control.\n    \n    Under most workloads, this isn\'t a problem. The TCP connection to\n    client X can only consume data so quickly, and therefore the\n    greenthread serving client X will frequently encounter a full socket\n    buffer and yield control, so no clients starve. However, when there\'s\n    a lot of contention for a single object from a large number of fast\n    clients (e.g. on a LAN connected w/10Gb Ethernet), then one winds up\n    in a situation where reading from the disk is slower than writing to\n    the network, and so full socket buffers become rare, and therefore so\n    do context switches. The end result is that many clients time out\n    waiting for data.\n    \n    The situation for PUT requests is analogous; GreenSocket.recv() seldom\n    encounters EWOULDBLOCK, so greenthreads seldom yield.\n    \n    This patch calls eventlet.sleep() to yield control after each chunk,\n    preventing any one greenthread\'s IO from blocking the hub for very\n    long.\n    \n    This code has the flaw that it will greenthread-switch twice when a\n    send() or recv() does block, but since there isn\'t a way to find out\n    if a switch occurred or not, there\'s no way to avoid it. Since\n    greenlet switches are quite fast (faster than system calls, which the\n    object server does a lot of), this shouldn\'t have a significant\n    performance impact.\n    \n    Fixes LP#1008720\n    \n    Change-Id: I8549adfb4a198739b80979236c27b76df607eebf\n',26,5,'SwiftStack'),(273243,229,5250,'2012-06-04 15:26:24','2012-05-31 18:25:05','    Ensure empty results are returned\n    \n    Make sure that empty but still valid results (like no unmounted drives)\n    aren\'t treated as 500 errors.\n    \n    Fixes LP#1008715\n    \n    Change-Id: I9588e2711d7916406f15613d5a26b9f0cf38235a\n',28,1,'Rackspace'),(273245,229,26,'2012-06-04 15:28:29','2012-05-31 22:58:56','    Fixed bug where 204 would sometimes be chunked\n    \n    Not sure how this got introduced (which really annoys me)\n    but here\'s the fix to make sure the content-length /\n    transfer-encoding headers are set properly. Specifically,\n    the proxy was sometimes returning transfer-encoding: chunked\n    with no content-length on 204 No Content responses where it\n    used to return content-length: 0 and no transfer-encoding\n    header at all.\n    \n    Fixes LP#1008716\n    \n    Change-Id: I0927d102bc5e4324e38dbbb44be9033a6cd8ee20\n',16,5,'Rackspace'),(273247,239,239,'2012-05-30 16:28:46','2012-05-30 16:28:46','    Final versioning for 1.5.0\n    \n    Final versioning for 1.5.0. This should be merged as the last\n    commit before 1.5.0 final release !\n    \n    Change-Id: I6663036993fb0a5cf12fc7fa3f4e1bc261b79ef4\n',1,1,'OpenStack Foundation'),(273249,229,229,'2012-05-28 08:10:19','2012-05-28 08:10:19','    1.5.1 version bump to continue dev\n    \n    Change-Id: Ied84c8274b3aee5f63a11e557c6c59729666d99f\n',1,1,'Rackspace'),(273250,229,229,'2012-05-28 13:36:59','2012-05-28 13:36:59','    fixed doc table format\n    \n    Change-Id: I319de933ecfb1e3853e3064656968c36980ce5f5\n',4,4,'Rackspace'),(273251,239,239,'2012-05-30 15:39:37','2012-05-30 15:39:37','    Adding missing files in generated tarballs\n    \n    Fix MANIFEST.in to include tools/, tox.ini and test/sample.conf\n    in generated tarballs. Fixes bug 960018 and bug 1005801.\n    \n    Change-Id: Ifa83eab62300e3aec71ced217dc3cdcb2846ea0e\n',3,0,'OpenStack Foundation'),(273252,26,26,'2012-05-27 21:48:13','2012-05-27 21:48:13','    Fixed query removal bug in make_pre_authed_request\n    \n    Change-Id: I1b8238fb2ffe07b1474f7d8f040fdc620b6897d7\n',13,1,'Rackspace'),(273254,26,26,'2012-05-31 18:33:12','2012-05-31 18:33:12','    Fixed another make_pre_auth bug (wsgi.input)\n    \n    Change-Id: I8b3c182ab85d4c5545e0a4259a64a496ebaf2bcb\n',13,0,'Rackspace'),(273256,5250,5250,'2012-05-31 18:25:05','2012-05-31 18:25:05','    Ensure empty results are returned\n    \n    Make sure that empty but still valid results (like no unmounted drives)\n    aren\'t treated as 500 errors.\n    \n    Change-Id: I9588e2711d7916406f15613d5a26b9f0cf38235a\n',28,1,'Rackspace'),(273257,26,26,'2012-05-31 22:58:56','2012-05-31 22:58:56','    Fixed bug where 204 would sometimes be chunked\n    \n    Not sure how this got introduced (which really annoys me)\n    but here\'s the fix to make sure the content-length /\n    transfer-encoding headers are set properly. Specifically,\n    the proxy was sometimes returning transfer-encoding: chunked\n    with no content-length on 204 No Content responses where it\n    used to return content-length: 0 and no transfer-encoding\n    header at all.\n    \n    Change-Id: I0927d102bc5e4324e38dbbb44be9033a6cd8ee20\n',16,5,'Rackspace'),(273259,26,26,'2012-06-01 19:31:08','2012-06-01 15:59:07','    Proxy logging content-length fix\n    \n    Change-Id: Iad2f12b3db44378c1369481c567b3d13b9a4b75f\n',31,10,'Rackspace'),(273260,869,869,'2012-06-01 15:27:36','2012-06-01 15:24:21','    Fix starvation in object server with fast clients.\n    \n    When an object server was handling concurrent GET or POST requests\n    from very fast clients, it would starve other connected clients. The\n    greenthreads responsible for servicing the fast clients would hog the\n    processor and only rarely yield to another greenthread.\n    \n    The reason this happens for GET requests is found in\n    eventlet.greenio.GreenSocket, in the send() method. When you call\n    .send(data) on a GreenSocket, it immediately calls .send(data) on its\n    underlying real socket (socket._socketobject). If the real socket\n    accepts all the data, then GreenSocket.send() returns without yielding\n    to another greenthread. Only if the real socket failed to accept all\n    the data (either .send(data) < len(data) or by raising EWOULDBLOCK)\n    does the GreenSocket yield control.\n    \n    Under most workloads, this isn\'t a problem. The TCP connection to\n    client X can only consume data so quickly, and therefore the\n    greenthread serving client X will frequently encounter a full socket\n    buffer and yield control, so no clients starve. However, when there\'s\n    a lot of contention for a single object from a large number of fast\n    clients (e.g. on a LAN connected w/10Gb Ethernet), then one winds up\n    in a situation where reading from the disk is slower than writing to\n    the network, and so full socket buffers become rare, and therefore so\n    do context switches. The end result is that many clients time out\n    waiting for data.\n    \n    The situation for PUT requests is analogous; GreenSocket.recv() seldom\n    encounters EWOULDBLOCK, so greenthreads seldom yield.\n    \n    This patch calls eventlet.sleep() to yield control after each chunk,\n    preventing any one greenthread\'s IO from blocking the hub for very\n    long.\n    \n    This code has the flaw that it will greenthread-switch twice when a\n    send() or recv() does block, but since there isn\'t a way to find out\n    if a switch occurred or not, there\'s no way to avoid it. Since\n    greenlet switches are quite fast (faster than system calls, which the\n    object server does a lot of), this shouldn\'t have a significant\n    performance impact.\n    \n    Change-Id: I8549adfb4a198739b80979236c27b76df607eebf\n',26,5,'SwiftStack'),(273261,1405,1405,'2012-06-04 17:46:17','2012-06-01 16:39:35','    only allow methods which implement HTTP verbs to be called remotely\n    \n    This fixes 500 server crashes caused by requests such as:\n    \n    curl -X__init__ \"http://your-swift-object-server:6000/sda1/p/a/c/o\"\n    \n    Fixes bug 1005903\n    \n    Change-Id: I6c0ad39a29e07ce5f46b0fdbd11a53a9a1010a04\n',147,32,'SUSE'),(273262,132,132,'2012-06-04 14:58:51','2012-06-04 14:58:21','    Raise ClientException for invalid auth version.\n    \n    Fixes LP Bug #1008667.\n    \n    Change-Id: I1e767a804b617eff8a9700c3d98b2360c040933a\n',10,0,'Red Hat'),(273264,4067,4067,'2012-06-04 17:04:11','2012-06-04 17:04:11','    Added global catchall to account-reaper.\n    \n    bug 644075\n    \n    Change-Id: I75c73a42ddd8654a39a2fd82320941199bee4363\n',12,8,'Rackspace'),(273266,1405,1405,'2012-06-06 10:07:56','2012-06-04 13:27:39','    fix object replication on older rsync versions when using ipv4\n    \n    Fixes bug 987388\n    \n    Change-Id: I6eb5c45fe1f5844ad853a4ff9bc8fd23cc9abd5d\n',49,13,'SUSE'),(273267,26,26,'2012-06-03 03:23:51','2012-06-03 03:06:01','    Fixed bug with container reclaim/report race\n    \n    Before, a really lagged cluster might not get its final report for a\n    deleted container database sent to its corresponding account\n    database. In such a case, the container database file would be\n    permanently deleted while still leaving the container listed in the\n    account database, never to be updated since the actual container\n    database file was gone. The only way to fix such the situation before\n    was to recreate and redelete the container.\n    \n    Now, the container database file will not be permanently deleted\n    until it has sent its final report successfully to its corresponding\n    account database.\n    \n    Change-Id: I1f42202455e7ecb0533b84ce7f45fcc7b98aeaa3\n',52,12,'Rackspace'),(273269,250,250,'2012-06-07 17:07:18','2012-06-07 16:45:07','    Fix typos in source documentation\n    \n    metdata -> metadata\n    requets -> requests\n    \n    Change-Id: Idc3c67e6415532e64e1d04c767f64e1d50269f44\n',13,12,'SUSE'),(273270,211,211,'2012-06-07 16:36:49','2012-05-22 10:57:10','    Remove swift.common.client from here.\n    \n    - It has been to its own gerrit project.\n    - direct_client should follow next.\n    - Implements blueprint clientbindings.\n    \n    Change-Id: I3bb50c95eba81302bfec71cb7ce5288b85a41dc0\n',69,3535,'eNovance'),(273272,1,1,'2012-06-08 20:05:14','2012-06-08 19:59:26','    Align tox.ini and fix coverage jobs in jenkins.\n    \n    The jenkins coverage jobs expect there to be a .coverage file, so deleting\n    it is a bad idea. Also, coverage erase will do that for us.\n    While we\'re in there, update tox.ini and setup.cfg to the latest.\n    \n    Change-Id: Icd0a8fc66a5146e0d94f62a9f65a4536981d2916\n',23,33,'HP'),(273274,4067,4067,'2012-06-07 21:15:18','2012-06-06 19:57:04','    added printing of 404s to dispersion report; fixed small, unrelated bug\n    \n    also fixed bug where in error_log where identifier wasn\'t being set to anything meaningful, set it to the right thing\n    \n    bug 612722\n    \n    Change-Id: I53f237ea0db2a5b2b8979a7b41189faf1275e861\n',21,11,'Rackspace'),(273276,869,869,'2012-06-07 17:12:11','2012-06-07 16:39:56','    Make object server\'s caching more configurable.\n    \n    The object server had a constant KEEP_CACHE_SIZE = 5*1024*1024;\n    unauthenticated GET requests for files smaller than KEEP_CACHE_SIZE\n    would not evict the file from the kernel\'s buffer cache after it was\n    read from disk.\n    \n    Now that hardcoded constant is a configuration parameter\n    (\"keep_cache_size\"), and now there is also another parameter called\n    \"keep_cache_private\". If set, then both authenticated and\n    unauthenticated GET requests for small files will not evict the data\n    from the buffer cache. The default values are 5 MiB and False,\n    respectively, so the default behavior is the same.\n    \n    Bonus: the \"mb_per_sync\" parameter is now documented in the deployment\n    guide.\n    \n    Change-Id: I9a11dbe861f4c23535c6aa82a9111a6fe2db2a59\n',19,6,'SwiftStack'),(273278,26,26,'2012-06-13 01:56:43','2012-06-13 01:55:11','    Update swift-get-nodes to return fewer more_nodes\n    \n    Changed swift-get-nodes to just return up to replica_count of\n    more_nodes instead of all of them. When you have thousands of drives,\n    returning all possible handoff nodes is pretty crazy. :)\n    \n    Change-Id: I864e7243726ca3ef2ac08c4ab660a05789f37878\n',5,1,'Rackspace'),(273279,4067,4067,'2012-06-18 20:15:51','2012-06-05 21:32:25','    Made dispersion report work with any replica count other than 3.\n    \n    This changes the JSON output keys missing_one and missing_two to\n    missing_1 and missing_2 (if there are at least 2 replicas), drops\n    the missing_all key, and can add more missing_x keys depending on\n    the replica count. We will definitely need to post a prominent\n    notice of this change with the next release.\n    \n    bug 862816\n    \n    Change-Id: Ib747d944476638c33ee1d876b8f9db28953826e2\n',57,36,'Rackspace'),(273280,702,702,'2012-06-18 18:27:28','2012-06-18 18:15:24','    check disk failure before syncing for each partition\n    \n    If disk failure happens while object replication is ongoing,\n    object-replicator could replicate objects from other nodes to the root\n    file system.  It is because object-replicator does no mount check\n    (error check) at all after collect_jobs() is called, and it executes\n    rsync based on the old partition information in update().\n    \n    This change prevents many objects from being written to the root file\n    system wrongly and fixes bug 1014545.\n    \n    Change-Id: Icf740a2683e360df89eccb71b269977f294340b9\n',4,0,'independent'),(273282,4067,4067,'2012-06-07 20:19:31','2012-06-07 20:19:31','    Added config options for rate limiting of large object downloads.\n    \n    bug 786197\n    \n    Change-Id: Idd73986ca4550b20dff340df4acd12f3bfc01075\n',159,142,'Rackspace'),(273284,869,869,'2012-06-20 12:45:34','2012-06-20 12:38:58','    Make `swift-get-nodes -a` show all handoffs.\n    \n    Commit 95786e5 made swift-get-nodes only output N handoff nodes, where\n    N is the ring\'s replica count. This change leaves that behavior in\n    place as the default, but adds the option -a/--all to print all the\n    handoff nodes.\n    \n    This is handy if you\'re consuming the output with a script, e.g. if\n    you\'re doing some analysis of the distribution of primary+handoff\n    nodes for a particular set of things.\n    \n    Change-Id: Ie0253575bb21ccf25559a1c5fd20570a58a2d9fa\n',16,10,'SwiftStack'),(273285,5598,5598,'2012-06-19 15:38:56','2012-05-17 15:46:38','    Patch for Swift Solaris (Illumos) compability.\n    \n    * Add new configuration option log_address.\n    \n    Change-Id: I636bd4116687629c997b70a0d804b7ed4bc46032\n',122,12,'Nexenta'),(273287,26,26,'2012-06-13 15:11:32','2012-06-13 00:40:44','    Make proxy-logging more like eventlet.posthook\n    \n    The old use of Eventlet\'s posthook process meant that responses that\n    forgot to include content-length or transfer-encoding headers would\n    get one tacked on, if Eventlet could guess what was probably meant. I\n    added a bit of that logic into proxy-logging now as we saw some\n    errors resulting from this.\n    \n    Fixes Bug #1012714\n    \n    Change-Id: I671453eaf3704eab814ff12c4625ba7d749cc7ed\n',23,0,'Rackspace'),(273289,702,702,'2012-06-22 01:40:03','2012-06-22 01:34:39','    use sort_key to compare the number of partitions the device wants\n    \n    Fixes bug 1016140.\n    \n    Change-Id: I0c98561f58f80408064ea178c6d6e8889604cddb\n',1,1,'independent'),(273291,26,26,'2012-06-27 05:09:53','2012-06-27 05:01:55','    Fixes for probe tests\n    \n    Updated the imports and added a head_account to the \"is the cluster\n    started yet?\" checks. Hopefully this fixes the notorious timing\n    issues of these tests where auth answers requests just a bit before\n    the rest of the cluster is ready.\n    \n    Fixes bug 1014931\n    \n    Change-Id: Iea1d62db2317560371da49af5e94a0279b646294\n',13,7,'Rackspace'),(273293,211,3665,'2012-06-28 08:23:28','2012-06-18 23:40:50','    Use buffered gzip stream with python 2.7.\n    \n    - Fixes bug 898169.\n    - It\'s possible to make GzipFile inherits io.BufferedIOBase in python\n      2.6, but IMO it\'s better let people to use 2.7 if they really need\n      this feature.\n    \n    Change-Id: I4c6e4858e3f616af892e7f4fa6daae0f6ee31723\n',10,1,'independent'),(273294,132,132,'2012-06-22 13:05:53','2012-06-22 13:05:53','    Remove hard coded man page paths.\n    \n    Fixes LP Bug #1016656.\n    \n    Change-Id: I22455d27cb82830dabd4fb0677da26915a60eb85\n',1,117,'Red Hat'),(273296,3665,3665,'2012-06-29 06:58:41','2012-06-23 05:19:00','    Made ranged requests on large objects working correctly when size of manifest file is not 0 byte.\n    \n    Fixed bug 969411\n    \n    Ranged GET request checked wheter the object is large objects only when response is 416 Requested Range Not Satisfiable.\n    \n    All ranged GET requests should check the object is large object or not because size of the manifest file can be larger than 0.\n    \n    Change-Id: Ia3632252d6879a773be881149c10ce0f5ffbcd82\n',112,7,'independent'),(273297,480,480,'2012-06-13 09:06:57','2012-06-11 19:29:32','    swift-bench should be able to use auth version 2.0\n    \n    Fixes Bug #1011727\n    \n    Change-Id: I6681bd85a5ddb82a1059913ae90696e5994aa906\n',9,1,'Red Hat'),(273299,250,250,'2012-06-28 16:09:10','2012-06-28 16:09:10','    Remove ambiguity in memcache_servers documentation\n    \n    The documentation could be understood like the following:\n    memcache_servers from memcache.conf is always used if set, even if\n    memcache_servers in proxy-server.conf is set.\n    \n    This is clearly not the case, as proxy-server.conf has a higher priority\n    if it memcache_servers is set there.\n    \n    Change-Id: I967c7e80796a0e296c5c65bd097df1669d16203e\n',2,2,'SUSE'),(273301,26,26,'2012-06-28 23:25:27','2012-06-28 23:25:27','    Fixed bug 1011636 with segmented objects\n    \n    The X-Object-Manifest header value should be url encoded to allow for\n    \"special\" characters to be used. This fix decodes such encoding. A\n    corresponding fix to python-swiftclient (and any other clients) needs\n    to be made to url encode the header value when sending.\n    \n    I also fixed any pep8 1.3.1 violations I found in the test I modified\n    to verify this.\n    \n    Change-Id: I67f23dec1dc95ee37354dfdd9897f34758135ee6\n',144,69,'Rackspace'),(273303,26,26,'2012-07-03 19:04:40','2012-06-28 20:27:15','    FormPost logging bugfix and slight refactor\n    \n    In the interest of getting us to pep8 1.3.1 compliance I also fixed\n    all violations in the two files I was modifying anyway.\n    \n    Fixes bug 1019051\n    \n    Change-Id: I52eb7d59d2e2810a8cee2461f7ca869124e734e7\n',125,97,'Rackspace'),(273304,250,250,'2012-07-05 13:35:30','2012-06-19 12:11:06','    Validate devices and partitions to avoid directory traversals\n    \n    swift.common.utils.validate_device_partition is a new function to check\n    that a device and a partition are valid. This means that they don\'t\n    contain \'/\' and are not \'.\' or \'..\'.\n    \n    We use this new function every time we get devices and partitions from a\n    request.\n    \n    Fix bug 1005908\n    \n    Change-Id: Ia545ba8f877e85b4b576d6d7d09d890877ea6d34\n',67,5,'SUSE'),(273306,5599,5599,'2012-06-27 23:48:40','2012-06-22 04:47:52','    add UDP protocol support for logger\n    \n    When a syslog daemon fails and SysLogHandler cannot reconnect to\n    it, server processes (proxy, container, object, and more)\n    would start consuming 100 % CPU and stop responding to requests.\n    It is because the server process go into an infinite loop if they\n    fail to reconnect to /dev/log.\n    This problem happens only when using unix_sockets.\n    \n    This change enables us to use syslog without unix_sockets and fixes bug 780025.\n    \n    Change-Id: Ibcc99a1a148b1008036146bf3bd079a9be24982c\n',20,9,'NTT'),(273308,3665,3665,'2012-07-15 00:03:01','2012-06-06 03:39:53','    Adapt Swift for WebOb 1.2\n    \n    Based on PatchSet 3 of https://review.openstack.org/#/c/7569/ , make them to pass all funcional tests with both webob 1.x and 1.2.\n    \n    The additional following compatibility issues were addressed:\n     - Until patch for range header issue is merged into official webob release, testRangedGetsWithLWSinHeader() should skip test against webob 1.2\n    (https://github.com/Pylons/webob/commit/49c175aec2b5c134511dfea6564bfb1d37ab23a9)\n    \n     - common.constraints.check_utf8() can accept both utf8 str and unicode.\n    \n     - To convert unicode to utf-8 str if necessary.\n    \n     - Making proxy_logging can handle invalid utf-8 str\n    \n    bug 888371\n    bug 959881\n    \n    blueprint webob-support\n    \n    Change-Id: I00e5fd04cd1653259606a4ffdd4926db3c84c496\n',194,64,'independent'),(273309,5250,5250,'2012-07-13 17:48:37','2012-07-13 17:48:37','    Fix Dispersion report and swift-bench on saio\n    \n    We\'re still using saio:11000 in a few spots so a few things\n    don\'t work out of the box on the saio. Fixes bug #1024561\n    \n    Change-Id: I226de54c2785b0d0b681c8d0cc24260adbd3d663\n',4,4,'Rackspace'),(273311,5598,5598,'2012-07-19 01:24:02','2012-07-19 01:21:38','    Fix wrong assert in manager unit test, self._assert(len(m.servers), 4)\n    don\'t check that number of servers equal 4.\n    \n    Change-Id: I4a597eaf2b16b5b2cfc7fd706ac024357e9af2c2\n',1,1,'Nexenta'),(273312,250,250,'2012-07-19 14:13:47','2012-07-05 15:43:14','    Forbid substrings based on a regexp in name_filter middleware\n    \n    In comments from https://review.openstack.org/8798 it was raised that it\n    might make sense to forbid some substrings in the name_filter\n    middleware.\n    \n    There is now a new forbidden_regexp option for the name_filter\n    middleware to specify which substrings to forbid. The default is\n    \"/\\./|/\\.\\./|/\\.$|/\\.\\.$\" (or in a non-regexp language: the /./ and /../\n    substrings as well as strings ending with /. or /..).\n    \n    This can be useful for extra paranoia to avoid directory traversals\n    (bug 1005908), or for more general filtering.\n    \n    Change-Id: I39bf2de45b9dc7d3ca4d350d24b3f2276e958a62\n    DocImpact: new forbidden_regexp option for the name_filter middleware\n',53,1,'SUSE'),(273313,132,211,'2012-07-05 14:36:14','2012-06-20 16:37:30','    Move swift_auth middleware from keystone to swift.\n    \n    - Rename it to keystoneauth for consistenties.\n    - Implements blueprint keystone-middleware.\n    \n    Change-Id: I208fecdf3ee991694b4239f065032324d297fd35\n',631,0,'eNovance'),(273315,229,229,'2012-07-20 09:15:34','2012-07-20 09:15:34','    ensure that accessing the ring devs reloads the ring if necessary\n    \n    Change-Id: If5a6d32c40de02183a2eed6e2a32d62ba38df32d\n',25,5,'SwiftStack'),(273317,5598,5598,'2012-07-20 14:25:48','2012-07-19 23:16:52','    Fix problem with logger and libc loader\n    \n    If fallocate can\'t be loaded from libc, bit posix_fallocate loaded\n    user will Swift will log warning messages. So it will be better\n    to write log only if both version of fallocate can\'t be loaded.\n    \n    Change-Id: I2a9ffe4756e77b3010ccd82b33c208d6d9b9f7b7\n',8,4,'Nexenta'),(273319,5250,5250,'2012-07-23 16:44:06','2012-07-13 17:13:53','    Create and configure /var/cache/swift in SAIO\n    \n    Fixes bug #1024477\n    \n    Change-Id: Id09bbff6bb4a5d032727d3ca53b3276b4769d178\n',65,12,'Rackspace'),(273320,229,229,'2012-07-25 08:30:58','2012-07-25 08:30:58','    version bump to reflect current dev effort\n    \n    Change-Id: Ic2869ab7f728ed1a4d8b34c37f0540c582d7dbcc\n',1,1,'SwiftStack'),(273321,5598,5598,'2012-07-25 20:15:18','2012-07-25 20:14:27','    Fix typing in DiskFile put method comment\n    \n    Change-Id: I4a07ff105f2acc4174de0aef4e24cfcde323bea8\n',1,1,'Nexenta'),(273322,229,229,'2012-07-25 09:24:02','2012-06-22 11:44:23','    changelog for 1.6.0\n    \n    Change-Id: Ia97050ac2b0b438535f31a8eb400801c782160f9\n',58,4,'SwiftStack'),(273323,26,26,'2012-07-29 18:22:10','2012-07-29 18:17:14','    Fixed bug in staticweb with log_headers\n    \n    Change-Id: I7e5e254660e2ce35bc7fa95435db0a987d5acd0a\n',35,2,'Rackspace'),(273324,26,26,'2012-07-30 00:52:26','2012-07-29 17:22:18','    Logging improvements: handoffs and thread locals\n    \n    A warning log line is emitted whenever the proxy has to use a handoff\n    node. Monitoring these warnings can indicate a problem within your\n    cluster; however, you can disable these log lines by setting the\n    proxy conf\'s log_handoffs to false.\n    \n    While working on this, I also noticed why many proxy log lines did\n    not have txn_id and client_ip -- subcoroutines. Now the logger thread\n    locals are copied to the subcoroutines.\n    \n    Change-Id: I67af14b5c3d70f313922828a588ed239c620cdfa\n',89,9,'Rackspace'),(273326,229,229,'2012-07-29 19:12:46','2012-07-29 18:53:12','    updated changelog with patch from review\n    \n    Change-Id: I26337e4c2d755fe9af9bd148e89146dcc4b0f021\n',4,0,'SwiftStack'),(273327,26,26,'2012-07-31 02:33:28','2012-07-31 02:26:39','    Fixes regression with format=somethingelse\n    \n    The WebOb 1.2 support patch introduced a regression where an unknown\n    format= query used to just default back to plain but now returns a\n    400. This will break anyone that uses format=text for instance, or\n    anything else \"invalid\".\n    \n    Arguably, it makes the most sense to 400 in the case of an invalid\n    format requested, but since it is also a backwards compatibility\n    break, I recommend we keep the previous behavior. Retaining the\n    previous behavior seems less damaging than enforcing the new\n    behavior.\n    \n    Change-Id: I6db015b33a6f3ab239b8cb4a3562ebdba1f76590\n',17,14,'Rackspace'),(273328,26,26,'2012-07-31 04:27:20','2012-07-31 04:22:12','    Cleaner fix to format regression fix\n    \n    This ensures req.accepts is only assigned a valid content type.\n    \n    Change-Id: Idf19277959c516398d31f771cf42dec0733d1bc0\n',9,6,'Rackspace'),(273329,26,26,'2012-08-01 00:17:23','2012-08-01 00:16:12','    Fixed proxy logging.\n    \n    It wasn\'t logging the full path, depending on if WebOb\'s\n    path_info_pop had been called.\n    \n    Change-Id: I612d4cae7a4dc1bf5164356af329496245ad85dc\n',17,1,'Rackspace'),(273330,26,26,'2012-08-01 21:42:25','2012-08-01 21:07:32','    Updated use of iter_nodes for handoff logging\n    \n    Change-Id: I95a750613b01bdc4d64444d7e7fae8190760d697\n',22,10,'Rackspace'),(273331,26,26,'2012-08-02 18:26:48','2012-08-02 14:49:02','    Ensure parameters sent to db are utf8 strs\n    \n    Change-Id: I45952adfcfbc813477ee9966f05dcdeef23c683b\n',8,2,'Rackspace'),(273332,229,229,'2012-08-06 08:46:45','2012-08-06 08:46:45','    1.6.0 final = true\n    \n    Change-Id: I373f482e84a94b8ea03c54fc79564bb2333a5bfb\n',1,1,'SwiftStack'),(273333,229,229,'2012-07-25 09:28:17','2012-07-25 09:25:11','    1.6.1 version bump\n    \n    Change-Id: I683633ef1c7a5df7522299a85090f1ffda0c287a\n',1,1,'SwiftStack'),(273334,26,26,'2012-07-29 18:17:14','2012-07-29 18:17:14','    Fixed bug in staticweb with log_headers\n    \n    Change-Id: I7e5e254660e2ce35bc7fa95435db0a987d5acd0a\n',35,2,'Rackspace'),(273335,26,26,'2012-07-30 00:50:13','2012-07-29 17:22:18','    Logging improvements: handoffs and thread locals\n    \n    A warning log line is emitted whenever the proxy has to use a handoff\n    node. Monitoring these warnings can indicate a problem within your\n    cluster; however, you can disable these log lines by setting the\n    proxy conf\'s log_handoffs to false.\n    \n    While working on this, I also noticed why many proxy log lines did\n    not have txn_id and client_ip -- subcoroutines. Now the logger thread\n    locals are copied to the subcoroutines.\n    \n    Change-Id: Ibac086e1b985f566c068d083620287509de35da8\n',89,9,'Rackspace'),(273337,229,229,'2012-07-29 19:13:23','2012-07-29 18:55:19','    updated changelog with patch from review\n    \n    Change-Id: Ib2d54da92a3f7e7325998e3e52f562a1bf538c28\n',4,0,'SwiftStack'),(273338,26,26,'2012-07-31 02:26:39','2012-07-31 02:26:39','    Fixes regression with format=somethingelse\n    \n    The WebOb 1.2 support patch introduced a regression where an unknown\n    format= query used to just default back to plain but now returns a\n    400. This will break anyone that uses format=text for instance, or\n    anything else \"invalid\".\n    \n    Arguably, it makes the most sense to 400 in the case of an invalid\n    format requested, but since it is also a backwards compatibility\n    break, I recommend we keep the previous behavior. Retaining the\n    previous behavior seems less damaging than enforcing the new\n    behavior.\n    \n    Change-Id: I6db015b33a6f3ab239b8cb4a3562ebdba1f76590\n',17,14,'Rackspace'),(273339,26,26,'2012-07-31 04:22:12','2012-07-31 04:22:12','    Cleaner fix to format regression fix\n    \n    This ensures req.accepts is only assigned a valid content type.\n    \n    Change-Id: Idf19277959c516398d31f771cf42dec0733d1bc0\n',9,6,'Rackspace'),(273340,26,26,'2012-08-01 00:16:12','2012-08-01 00:16:12','    Fixed proxy logging.\n    \n    It wasn\'t logging the full path, depending on if WebOb\'s\n    path_info_pop had been called.\n    \n    Change-Id: I612d4cae7a4dc1bf5164356af329496245ad85dc\n',17,1,'Rackspace'),(273341,26,26,'2012-08-01 21:07:32','2012-08-01 21:07:32','    Updated use of iter_nodes for handoff logging\n    \n    Change-Id: I95a750613b01bdc4d64444d7e7fae8190760d697\n',22,10,'Rackspace'),(273342,26,26,'2012-08-02 14:49:02','2012-08-02 14:49:02','    Ensure parameters sent to db are utf8 strs\n    \n    Change-Id: I45952adfcfbc813477ee9966f05dcdeef23c683b\n',8,2,'Rackspace'),(273343,5250,5250,'2012-07-30 15:09:14','2012-07-30 15:09:14','    Report all unmounted drives\n    \n    - swift-recon cli now reports all unmounted drives.\n    - Fixes bug 1031060\n    \n    Change-Id: Ia9e6bbf05215879b602e9dcb77d007094c494dc1\n',4,2,'Rackspace'),(273345,1125,1125,'2012-08-06 09:11:07','2012-08-06 09:02:45','    all in one setup rc.local needs -p for mkdir command\n    \n    bug fixes for swift 1033089\n    Swift 1.6.0 All in One setup uses rc.local to create a set of\n    directories like the following:\n       /var/cache/swift /var/cache/swift2 /var/cache/swift3\n       /var/cache/swift4\n       /var/run/swift\n    without -p for mkdir command, when some of these directories\n    already exist, the rc.local fails so that the next set of\n    command won\'t execute. This causes swift fail to start because\n    of /var/run/swift does not exist. Adding -p to both mkdir\n    command solves this problem.\n    \n    Change-Id: Ia26c9a857723747008293c0631c9acc1b58eca7e\n',2,2,'IBM'),(273347,4056,4056,'2012-08-05 00:51:49','2012-08-05 00:51:49','    Use custom encoding for RingData, not pickle.\n    \n    Serialize RingData in a versioned, custom format which is a combination\n    of a JSON-encoded header and .tostring() dumps of the\n    replica2part2dev_id arrays.  This format deserializes hundreds of times\n    faster than rings serialized with Python 2.7\'s pickle (a significant\n    performance regression for ring loading between Python 2.6 and Python\n    2.7).  Fixes bug 1031954.\n    \n    swift.common.ring.ring.RingData is now responsible for serialization and\n    deserialization of its data via a new load() class method and save()\n    object method.  The new implementation is backward-compatible; if a ring\n    does not begin with a new-style magic string, it is assumed to be an\n    old-style pickle-dumped ring and is handled as before.  So new Swift\n    code can read old rings, but old Swift code will not be able to read\n    newly-serialized rings. THIS SHOULD BE MENTIONED PROMINENTLY IN THE\n    RELEASE NOTES.\n    \n    I didn\'t want to bite of more than necessary, so I didn\'t mess with\n    builder file serialization.\n    \n    Change-Id: I799b9a4c894d54fb16592443904ac055b2638e2d\n',129,54,'SwiftStack'),(273349,26,26,'2012-08-13 15:58:01','2012-08-13 15:58:01','    ring.py: Uses simplejson if avail and pep8 1.3.1\n    \n    Change-Id: I1f91a82da064c9f0e64779f4fa8951962678831b\n',8,4,'Rackspace'),(273350,5250,5250,'2012-08-17 13:03:48','2012-08-17 13:03:48','    Cleanup after LockTimeout\n    \n    - If lock_file encounters a LockTimeout a fd can be left behind\n    - Fixes bug 1038191\n    \n    Change-Id: Ib3f45d18aeeec91eedf0b4f0492664d33b4f57fa\n',4,4,'Rackspace'),(273351,229,229,'2012-08-07 16:26:38','2012-08-07 16:26:38','    update object versions docs\n    \n    Change-Id: I00bf2e20c2683d0440ca425461e0ab87197ee720\n',3,3,'SwiftStack'),(273353,226,226,'2012-08-03 11:47:39','2012-08-03 11:47:28','    To simulate the real workloads, the objects to be uploaded could be created in the random sizes, which are bounded (lower_object_size and upper_object_size) by the user inputs.\n    \n    Change-Id: I64647c5d613a0794f0807886a4833cd5c31c0c5e\n',7,0,'Zmanda'),(273355,702,702,'2012-08-10 15:08:02','2012-08-10 14:00:09','    handle exception correctly in _make_app_iter_reader\n    \n    _make_app_iter_reader uses a queue to pass read data to\n    _make_app_iter, and uses an empty string as a terminator.  The problem\n    is that it pushes the same terminator even if it fails to reads the\n    data.  If an exception happens before pushing all data to the queue,\n    _make_app_iter exits without yielding all data.  In that case,\n    proxy-server stops in the middle of sending data, and a client waits\n    for all data to come infinitely.\n    \n    This patch uses a boolean value for the terminator instead of an empty\n    string to distinguish the results, and raises an exception in the\n    error cases.  Fixes bug 890888.\n    \n    Change-Id: Ie4d48025843aa1bb600446da6f4fc49f82a440bf\n',10,3,'independent'),(273357,26,26,'2012-07-06 23:30:12','2012-06-30 20:23:24','    Updated probe tests\n    \n    The probe tests were woefully out of date with all the changes that\n    have ocurred since they were written. I\'ve updated most of them and\n    removed some that are hopeless outdated.\n    \n    I also greatly improved the timing issues (hopefully completely\n    solved them? I ran them 25 times with no problems) and made them pep8\n    1.3.1 safe.\n    \n    Change-Id: I8e9dbb6e7d6e04e293843b1dce1ded99d84e0348\n',497,793,'Rackspace'),(273359,26,26,'2012-08-06 20:53:24','2012-08-06 20:53:24','    Fixed bug where expirer would get confused by...\n    \n    Fixed bug where expirer would get confused by odd deletion times.\n    Since this has already rolled out, I just capped things at ten 9s, or\n    Sat Nov 20 17:46:39 2286. I can\'t wait for the Y2286 world panic. :/\n    \n    Change-Id: Iba10963faa344a418a1fa573d5c85f4ff864b574\n',39,0,'Rackspace'),(273361,4056,4056,'2012-08-20 16:43:45','2012-08-20 16:02:27','    A few misc. code cleanups.\n    \n    Fixed a couple config gets which weren\'t using TRUE_VALUES (hopefully\n    the last ones?).\n    \n    Removed a deprecated parameter from\n    swift.common.db.ContainerBroker.list_objects_iter() a \"TODO\" which dates\n    back to the original import of Swift into github.\n    \n    Also made AccountBroker.reclaim()\'s docstring match its arg names.\n    \n    Change-Id: I646bdd00a3693763b55a50ba210c7ed2ba1df4cd\n',7,7,'SwiftStack'),(273363,4056,4056,'2012-08-21 16:18:51','2012-08-21 14:54:12','    A couple minor tweaks to the SAIO guide.\n    \n    Added \"-p\" to mkdir cmds in a \"set -e\" script (/etc/rc.local).\n    \n    /var/log/swift gets owned by the group \"adm\", but isn\'t group writeable\n    by default, so the find/rm in \"resetswift\" fails.  So I added a chmod to\n    add group-write for that directory tree.\n    \n    Added commands for installing tox.\n    \n    Change-Id: Ic141491272a83a9233cd6a6a70c3ef74411f3f51\n',7,2,'SwiftStack'),(273365,24,24,'2012-08-21 14:43:30','2012-08-21 14:43:08','    Add nosehtmloutput as a test dependency.\n    \n    Adding nosehtmloutput as a test dependency allows nose to output its\n    results to an html file. This will be used by Jenkins to save logs on\n    a different server.\n    \n    Change-Id: I6bd4736e8cc4132db65bfe8cdfe1f3a388369fa8\n',1,0,'OpenStack Foundation'),(273367,4056,4056,'2012-08-21 12:09:28','2012-08-21 10:03:42','    Update docs for new ring serialization.\n    \n    The Admin Guide now contains information about the ring serialization\n    change (and importantly, how to downgrade, if necessary).\n    \n    Also added container-server conf var, \"allow_versions\" to the Deployment\n    Guide.\n    \n    Also changed description of proxy-server conf var,\n    \"max_containers_whitelist\" to say it contains \"account names\" not\n    \"account hashes\".\n    \n    Change-Id: Ib23c6118cc5195cc04765afd28e442e4c735f0d4\n',25,7,'SwiftStack'),(273369,2194,2194,'2012-08-22 12:20:30','2012-08-22 12:20:30','    Fix PEP8 issues.\n    \n    Fix a PEP8 issues in doc/source/conf.py to make the code pretty.\n    \n    Change-Id: I71d36ebb59d44ba145ca13e4f4827139f0466d78\n',2,2,'Shanghai Thinry Information Technology Co., Ltd'),(273371,5600,5600,'2012-08-21 15:51:24','2012-08-17 19:44:21','    Retuen a reasonable response to client.\n    \n    As we use the \'account_autocreate\' for auto-create accounts, we send a\n    request to HEAD an account which is just deleted(the account-reaper not\n    reclaim it immediately), the proxy-server will return \'HTTP 500 Internal\n    Server Error\'.\n    In my opinion, this is unreasonable, so I change the code in swift/proxy\n    /server.py for returning a reasonable response. I modified the code in\n    POST, GETorHEAD and account_info. At last, I modified some code in the\n    unittest test/unit/proxy/test_server.py.\n    \n    Change-Id: Ib057b387c9da073d707ffae49ead54206a8fb7dd\n    Fixes: Bug #1037889\n',44,12,'ZTE Corporation'),(273373,4056,4056,'2012-08-22 13:35:09','2012-08-17 17:00:50','    Add device name to *-replicator.removes for DBs\n    \n    To tell when replication for a device has finished, it\'s important to\n    know when the replicator is removing objects.  This was previously\n    handled for the object-replicator\n    (object-replicator.partition.delete.count.<device> and\n    object-replicator.partition.update.count.<device> metrics) but not the\n    account and container replicators.\n    \n    This patch extends the existing DB removal count metrics to make them\n    per-device.  The new metrics are:\n     account-replicator.removes.<device>\n     container-replicator.removes.<device>\n    \n    There\'s also a bonus refactoring and increased test coverage of the DB\n    replicator code.\n    \n    Change-Id: I2067317d4a5f8ad2a496834147954bdcdfc541c1\n',192,86,'SwiftStack'),(273375,5596,5596,'2012-08-22 13:09:35','2012-08-21 12:51:59','    make obj replicator locking more optimistic\n    \n    Basically, do all hashing in the replicator without a lock, then\n    lock briefly to rewrite the hashes file. Retry if someone else has\n    modified the hashes file in the mean time (which should be rare).\n    \n    Also, a little refactoring.\n    \n    Change-Id: I6257a53808d14b567bde70d2d18a9c58cb1e415a\n',117,69,'Rackspace'),(273377,5596,5596,'2012-08-23 12:44:03','2012-08-23 12:38:09','    split proxy controllers into individual modules\n    \n    This is a pretty mechanical change that moves proxy controller\n    classes to their own files.\n    \n    Change-Id: Iabb7bc134b07193e3bcc041a5c6890a0b95c2b55\n',2321,2245,'Rackspace'),(273379,4056,4056,'2012-08-23 17:20:08','2012-08-20 22:51:46','    Fix when rate_limit_after_segment kicks in.\n    \n    If rate_limit_after_segment was 10 in the proxy config, then after 10\n    segments were coughed up by _load_next_segment() with no calls to\n    sleep(), the 11th segment would not trigger a sleep() call.  The 12th\n    segment triggered a sleep(0) call, but it was only after the 13th\n    segment was loaded that an actual rate-limiting (non-zero) sleep got\n    called.\n    \n    With this patch, a rate_limit_after_segment of 10 will start sleeping\n    the correct amount after the 11th segment.\n    \n    Updated proxy-server.conf-sample with rate_limit_after_segment and\n    rate_limit_segments_per_sec.\n    \n    Change-Id: I937c366996e6d6ab47c614d6db470e3be9657c07\n',47,14,'SwiftStack'),(273380,5600,5600,'2012-08-27 09:55:06','2012-08-27 09:55:06','    Remove redefinition of import traceback\n    \n    Removed the redefinition of import in swift/object/server.py\n    Add my name in AUTHORS\n    \n    Change-Id: Ia74df662de08fc52b92b828978d96a22b5df5597\n',1,1,'ZTE Corporation'),(273382,229,229,'2012-08-28 10:25:33','2012-08-27 14:44:41','    fallocate call error handling\n    \n    fallocate() failures properly return HTTPInsufficientStorage from\n    object-server before reading from wsgi.input, allowing the proxy\n    server to error_limit that node.\n    \n    Change-Id: Idfc293bbab2cff1e508edf58045108ca1ef5cec1\n',45,5,'SwiftStack'),(273383,5601,5601,'2012-08-28 01:59:26','2012-08-24 20:20:14','    x-newest cleanup code with test. Fixes bug 1037337\n    \n    Change-Id: Ie99250250171246e8c13e8d8c8258101bd78cce4\n',67,17,'independent'),(273385,250,250,'2012-08-03 16:22:21','2012-06-21 14:37:41','    Do not use pickle for serialization in memcache, but JSON\n    \n    We don\'t want to use pickle as it can execute arbitrary code. JSON is\n    safer. However, note that it supports serialization for only some\n    specific subset of object types; this should be enough for what we need,\n    though.\n    \n    To avoid issues on upgrades (unability to read pickled values, and cache\n    poisoning for old servers not understanding JSON), we add a\n    memcache_serialization_support configuration option, with the following\n    values:\n    \n     0 = older, insecure pickle serialization\n     1 = json serialization but pickles can still be read (still insecure)\n     2 = json serialization only (secure and the default)\n    \n    To avoid an instant full cache flush, existing installations should\n    upgrade with 0, then set to 1 and reload, then after some time (24\n    hours) set to 2 and reload. Support for 0 and 1 will be removed in\n    future versions.\n    \n    Part of bug 1006414.\n    \n    Change-Id: Id7d6d547b103b4f23ebf5be98b88f09ec6027ce4\n',125,17,'SUSE'),(273387,10,4056,'2012-08-27 20:25:44','2012-08-25 16:02:45','    Misc. swift-bench improvements.\n    \n    swift-bench now honors the environment variables, ST_AUTH, ST_USER, and\n    ST_KEY like python-swiftclient does.\n    \n    Added --lower-object-size (or -l) command-line option which, if\n    specified, will turn a specified --object-size into --upper-object-size.\n    It will raise a ValueError if --object-size is not specified or is <=\n    --lower-object-size.\n    \n    BenchController how handles SIGINT (KeyboardInterrupt) similarly to the\n    swift command-line client: the first Ctrl-C will make it fast-track to\n    completion (no new PUT or GET operations are started, but everything PUT\n    is DELETE\'ed).  A second Ctrl-C will immediately exit.  The behavior for\n    SIGTERM is unchanged (a single SIGTERM will immediately terminate the\n    process).\n    \n    Added a sample configuration file for swift-bench, with documenting\n    comments.\n    \n    Change-Id: I6f394ad995300fc8af3d565d95c3b45559ee510a\n',112,18,'SwiftStack'),(273389,5600,5600,'2012-08-28 10:51:49','2012-08-28 10:51:49','    Remove the gettext wrapper of server_type.\n    \n    The gettext wrapper of server_type in controllers is used to translate\n    server_type in log. But the transfer_headers function which used to\n    filter the illegal metadata headers use the wrapped server_type. So, it\n    will cause problems that \'X-Account-Meta-\' and \'X-Container-Meta-\' would\n    be filtered when the language of operating system is not english, such\n    as Chinese or Japnese. So, I removed the wrapper.\n    \n    Change-Id: I7d47e67b4caf5d0be171a90740f9bb12fa2cba84\n    Fixes: Bug #1042142\n',4,4,'ZTE Corporation'),(273391,26,26,'2012-08-29 19:57:26','2012-08-29 19:57:26','    Added ability to disable fallocate\n    \n    Change-Id: Id8872c581ed23378a8e14cbf3bf049b5c0d21577\n',37,3,'Rackspace'),(273392,4056,4056,'2012-08-29 16:08:30','2012-08-19 17:44:43','    Upating proxy-server StatsD logging.\n    \n    Removed many StatsD logging calls in proxy-server and added\n    swift-informant-style catch-all logging in the proxy-logger middleware.\n    Many errors previously rolled into the \"proxy-server.<type>.errors\"\n    counter will now appear broken down by response code and with timing\n    data at: \"proxy-server.<type>.<verb>.<status>.timing\".  Also, bytes\n    transferred (sum of in + out) will be at:\n    \"proxy-server.<type>.<verb>.<status>.xfer\".  The proxy-logging\n    middleware can get its StatsD config from standard vars in [DEFAULT] or\n    from access_log_statsd_* config vars in its config section.\n    \n    Similarly to Swift Informant, request methods (\"verbs\") are filtered\n    using the new proxy-logging config var, \"log_statsd_valid_http_methods\"\n    which defaults to GET, HEAD, POST, PUT, DELETE, and COPY.  Requests with\n    methods not in this list use \"BAD_METHOD\" for <verb> in the metric name.\n    To avoid user error, access_log_statsd_valid_http_methods is also\n    accepted.\n    \n    Previously, proxy-server metrics used \"Account\", \"Container\", and\n    \"Object\" for the <type>, but these are now all lowercase.\n    \n    Updated the admin guide\'s StatsD docs to reflect the above changes and\n    also include the \"proxy-server.<type>.handoff_count\" and\n    \"proxy-server.<type>.handoff_all_count\" metrics.\n    \n    The proxy server now saves off the original req.method and proxy_logging\n    will use this if it can (both for request logging and as the \"<verb>\" in\n    the statsd timing metric).  This fixes bug 1025433.\n    \n    Removed some stale access_log_* related code in proxy/server.py.  Also\n    removed the BaseApplication/Application distinction as it\'s no longer\n    necessary.\n    \n    Fixed up the sample config files a bit (logging lines, mostly).\n    \n    Fixed typo in SAIO development guide.\n    \n    Got proxy_logging.py test coverage to 100%.\n    \n    Fixed proxy_logging.py for PEP8 v1.3.2.\n    \n    Enhanced test.unit.FakeLogger to track more calls to enable testing\n    StatsD metric calls.\n    \n    Change-Id: I45d94cb76450be96d66fcfab56359bdfdc3a2576\n',373,254,'SwiftStack'),(273393,229,229,'2012-08-31 14:22:56','2012-08-31 14:22:56','    bumped version to 1.7.0 to reflect current dev effort\n    \n    Change-Id: I5423c8bf11b14f862cb321583d91991177fce5eb\n',1,1,'SwiftStack'),(273394,5596,5596,'2012-09-02 23:55:53','2012-09-02 23:55:53','    use simplejson to serialize acct/cont results\n    \n    I did some benchmarking, and it\'s just a lot faster to use simplejson\n    to serialize account and container listings.\n    \n    Change-Id: Ib0f751d9a5b6f4020031e952986811f0be090cce\n',20,33,'Rackspace'),(273395,2195,2195,'2012-08-31 11:24:46','2012-08-31 11:24:46','    Fix PEP8 issues in ./test/unit/common .\n    \n    Fix some pep8 issues in\n           modified:   test_bufferedhttp.py\n           modified:   test_constraints.py\n           modified:   test_db.py\n           modified:   test_db_replicator.py\n           modified:   test_init.py\n    make the code looks pretty.\n    \n    Change-Id: I1c374b1ccd4f028c4e4b2e8194a6d1c201d50571\n',83,34,'independent'),(273397,26,26,'2012-09-04 14:41:12','2012-09-04 14:41:12','    Update swift.common.db to us swift.cmmn.utils.json\n    \n    Change-Id: Ib4baac7b8b24d7fd982c71591deda3a096f470f2\n',1,2,'Rackspace'),(273399,229,229,'2012-09-04 08:36:55','2012-08-31 14:21:39','    changelog and authors updates for 1.7 release\n    \n    Change-Id: Ie38e49915cfd233bcf00469f184cf8fce7424472\n',87,7,'SwiftStack'),(273400,229,229,'2012-09-04 09:32:33','2012-09-04 09:16:29','    1.7.1 version bump\n    \n    Change-Id: I3684a5694844dac282c0e4274b68525732c42637\n',1,1,'SwiftStack'),(273401,5601,5601,'2012-09-05 00:26:57','2012-08-28 04:15:28','    fix update_deleted directory creation. bug 1035274\n    \n    Change-Id: Ie3423ce90d906948a1ce2db0efe3da184e60f6e0\n',150,1,'independent'),(273402,1556,1556,'2012-09-04 15:43:38','2012-09-04 15:34:47','    Fall back to UDP if /dev/log does not exist.\n    \n    If /dev/log does not exist, swift.common.utils.get_logger would fail as\n    it only handles the situation where /dev/log isn\'t a socket.\n    \n    Fixes bug 1045820\n    \n    Change-Id: I2c33e0fa7f88f03d5b0495779832ed4de7c496da\n',2,1,'Cisco Systems'),(273404,10,4056,'2012-08-30 18:22:49','2012-08-25 23:02:53','    Can run swift-bench across multiple cores/servers.\n    \n    You run one or more swift-bench-client processes like this:\n        $ swift-bench-client 127.0.0.1 20001\n        $ swift-bench-client 127.0.0.1 20002\n    \n    Then you run swift-bench with a new option, --bench-clients (-b), which is\n    specified once for each swift-bench-client:\n        $ swift-bench -b 127.0.0.1:20001 -b 127.0.0.1:20002\n    \n    You get log lines from each client (interleaved) along with a final report\n    for all clients:\n        127.0.0.1:20002 swift-bench-server 2012-08-25 22:44:06,148 INFO Auth version: 1.0\n        127.0.0.1:20001 swift-bench-server 2012-08-25 22:44:06,148 INFO Auth version: 1.0\n        127.0.0.1:20001 swift-bench-server 2012-08-25 22:44:12,249 INFO 83 PUTS [0 failures], 41.5/s\n        127.0.0.1:20002 swift-bench-server 2012-08-25 22:44:14,430 INFO 74 PUTS [0 failures], 34.3/s\n        ...\n        127.0.0.1:20002 swift-bench-server 2012-08-25 22:45:18,942 INFO Auth version: 1.0\n        127.0.0.1:20002 swift-bench-server 2012-08-25 22:45:20,946 INFO 238 DEL [2 failures], 118.9/s\n        swift-bench 2012-08-25 22:45:27,549 INFO 2000 PUTS **FINAL** [0 failures], 56.8/s\n        swift-bench 2012-08-25 22:45:27,550 INFO 30000 GETS **FINAL** [50 failures], 974.6/s\n        swift-bench 2012-08-25 22:45:27,550 INFO 2000 DEL **FINAL** [20 failures], 237.1/s\n    \n    The concurrency, PUT count, and GET count config settings are divided by\n    the number of bench_clients.  In other words, the same volume of work is\n    attempted (vs. not specifying --bench-clients), but it can now span\n    servers and CPU cores.\n    \n    Benchmark containers are created (if use_proxy = yes) and deleted (if\n    delete = yes), with appropriate concurrency, in the initiating\n    swift-bench process, not any of the swift-bench-client processes.\n    \n    Change-Id: Idbf31a23093244ab357a9bf77e6031257774f24a\n',262,20,'SwiftStack'),(273406,5602,5602,'2012-09-06 14:28:55','2012-09-03 23:39:46','    fix some format\n    \n    fix some format according to pep8\n    \n    Change-Id: I8ceb266d92c8997f131fa4096aaa6cfd4d585aaa\n',64,56,'independent'),(273408,5602,5602,'2012-09-06 14:14:43','2012-09-03 23:30:52','    fix some format issure\n    \n    fir some format according to pep8\n    \n    Change-Id: Iec8f67ea2166c955732bd598661140d4cfce6d40\n',205,174,'independent'),(273410,5600,5600,'2012-09-05 09:34:06','2012-09-04 23:01:02','    Fix pep8 issues in test_memcached.py.\n    \n    Change-Id: Ieeee2411f84489ea106909e18e758fd170aa9bca\n',24,13,'ZTE Corporation'),(273412,10,4056,'2012-09-05 23:54:16','2012-09-04 13:59:26','    Obj replicator cleans up files where part dirs should be.\n    \n    If a partition directory was a file instead of a directory, the\n    object-replicator would attempt to listdir() it, raise an exception, and\n    try again next iteration.  This condition could arise after running\n    xfs_repair.\n    \n    Now, collect_jobs() will reap any partition directories which are\n    actually files.  Fixes bug 1045954.\n    \n    Change-Id: Id65d3eab2effd61c3f6b25250611c88c907b2a16\n',50,3,'SwiftStack'),(273414,5602,5602,'2012-09-07 12:11:35','2012-09-07 12:11:35','    Fix pep8 issues\n    \n    Fix pep8 issues in swift/obj/auditor.py\n    \n    Change-Id: Iae6fe2c7399fd52455d66ba57360e2f7d9e017f3\n',20,20,'independent'),(273416,5602,5602,'2012-09-07 12:20:20','2012-09-07 12:18:18','    Fix pep8 issues\n    \n    Fix pep8 issues in swift/obj/expirer.py\n    \n    Change-Id: Iba80aa5010f0c23e7fe1e5abc230a1c7f76687a8\n',12,11,'independent'),(273418,5602,5602,'2012-09-06 13:20:58','2012-09-05 12:09:02','    format some code according to pep8\n    \n    format some code according to pep8\n    	modified:   auditor.py\n    	modified:   reaper.py\n    	modified:   server.py\n    \n    Change-Id: Ic6d8e000c711d17dcd9047cfeee7876b23ff0605\n',59,47,'independent'),(273420,5250,5250,'2012-09-06 20:16:46','2012-09-05 12:37:09','    Breakout search_devs & add get_builder() for reuse\n    \n    This moves search_devs into RingBuilder to make it accessible to other utils\n    that need to search the builder. Along the same lines this also adds a\n    load() call to get a RingBuilder instance when working with the builder files.\n    \n    - This adds python-mock >= 0.7 as a dependency for unittests. On Ubuntu\n      10.04 you\'ll have to pip install it, on 12.04 you can apt-get install\n      it. Fedora 17+ should be able to yum install it.\n    - new pep8 compliance\n    - Fixed a small issue (undefined var) in swift-ring-builder when remove was\n    called but failed to find a match.\n    \n    Change-Id: I2e02684235aa2f4e901a00858ae037091594c545\n',227,136,'Rackspace'),(273422,229,229,'2012-09-07 11:18:42','2012-09-05 20:49:50','    swift constraints are now settable via config\n    \n    Change previously hard-coded constants into config variables. This\n    allows deployers to tune their cluster more specifically based on\n    their needs. For example, a deployment that uses direct swift access\n    for public content may need to set a larger header value constraint to\n    allow for the full object name to be represented in the Content-\n    Disposition header (which browsers check to determine the name of a\n    downloaded object).\n    \n    The new settings are set in the [swift-constraints] section of\n    /etc/swift/swift.conf. Comments were also added to this config file.\n    \n    Cleaned up swift/common/constraints.py to pass pep8 1.3.3\n    \n    Funtional tests now require constraints to be defined in /etc/test.conf or in\n    /etc/swift/swift.conf (in the case of running the functional tests against a\n    local swift cluster). To have any hope of tests passing, the defined\n    constraints must match the constraints on the tested cluster.\n    \n    Removed a ton of \"magic numbers\" in both unit and functional tests.\n    \n    Change-Id: Ie4588e052fd158314ddca6cd8fca9bc793311465\n',979,808,'SwiftStack'),(273424,4064,4064,'2012-09-10 15:12:39','2012-09-10 11:39:10','    obj replicator speed up\n    \n    Change-Id: If02b573353dedea9c2368ce4733fe97599229b2e\n',32,9,'Rackspace'),(273425,5596,5596,'2012-09-09 03:18:26','2012-09-07 11:44:19','    container_info returns a dict\n    \n    This change refactors container_info to return a dict instead of a tuple\n    with 6 (and counting...) values.\n    \n    Also adds container size to cached info.\n    \n    Change-Id: If68a06ab170504fbf07323354f3d0e073850493d\n',108,90,'Rackspace'),(273427,1548,1548,'2012-09-11 16:23:32','2012-09-11 14:22:11','    Adds Error Handling to swift-drive-audit for missing or unreadable /var/log/kern.log\n    \n    Fixes Bug 1049081\n    \n    Change-Id: If977080350cc5cdb6bc633b6af7d3c490ed23d46\n',20,14,'Rackspace'),(273429,229,229,'2012-09-12 11:15:25','2012-09-12 11:15:25','    added disable_fallocate info to docs\n    \n    Change-Id: I8130e258d77f47bfa28ecf79a51a6e34671ada22\n',11,0,'SwiftStack'),(273430,229,229,'2012-09-13 20:59:41','2012-09-12 21:44:44','    new more helpful README\n    \n    Change-Id: Ie5e88178e061955aea8759e5451a2d33ccc76511\n',83,17,'SwiftStack'),(273431,229,229,'2012-09-12 09:00:10','2012-09-12 08:46:50','    added errno.EINVAL check to fallocate\n    \n    On some systems (eg Illumos), posix_fallocate() returns\n    EINVAL when the underlying filesystem doesn\'t support the\n    operation. On Linux, the fallocate() call returns\n    EOPNOTSUPP.\n    \n    The need for this patch was revealed by Victor Rodionov\n    <victor.rodionov@nexenta.com>.\n    \n    Change-Id: I06fa9d49e7ec4084135843b7e0c91948dc098d27\n',2,1,'SwiftStack'),(273433,132,132,'2012-09-14 20:42:05','2012-09-14 20:42:05','    Add README.md to the tarball.\n    \n    Fixes LP Bug #1051125\n    \n    Change-Id: If1f96e1d759276cafd5378b4e74b0dbcb1fa2358\n',1,1,'Red Hat'),(273434,5250,5250,'2012-09-14 16:11:50','2012-09-14 16:09:23','    builder.add_devs gets next id if not provided\n    \n    Have builder.add_devs get the next id to use when adding a new device\n    if its not specified in the dict.\n    \n    Change-Id: I5a0defab43f5cfc5d997080bfd8563bfe72368ad\n',20,11,'Rackspace'),(273436,26,26,'2012-09-18 18:24:47','2012-09-18 18:24:47','    Fix bug where serialization_format is ignored\n    \n    Change-Id: I5a5ac8b5f18e077105ab12e9b1f0ccafac3983f7\n',12,2,'Rackspace'),(273438,229,229,'2012-09-18 15:45:40','2012-09-18 15:23:52','    1.7.2. changelog and version bump to 1.7.3-dev\n    \n    Change-Id: Id398b4c0764ca0995cec03c5f0ea6198ef877ade\n',6,1,'SwiftStack'),(273439,5146,5146,'2012-09-21 11:06:18','2012-09-21 11:05:11','    Only set TCP_KEEPIDLE where supported\n    \n    Resolves an issue preventing Swift from starting on BSD-based platforms\n    that do not have this TCP flag (FreeBSD, OSX/Darwin, OpenBSD); identical\n    to Glance bug 879195, change I2f062a34, Glance commit efcdac36\n    (originally reported and patched by Brian Waldon).\n    \n    Change-Id: Ifd696fe1080464d060e608c075ad0c113baab5ab\n',2,1,'IBM'),(273440,5146,5146,'2012-09-21 14:17:59','2012-09-21 11:17:35','    Gracefully handle stdin flush failure on BSD\n    \n    Catches an IOError that is thrown when starting Swift on BSD-based\n    platforms, as the underlying system call to flush returns errno 9 (bad\n    file descriptor), whereas on Linux it succeeds.\n    \n    Change-Id: Ic143d2fe6c3e1e0b39794958b40b0f5efdc17c06\n',6,1,'IBM'),(273442,4056,4056,'2012-09-25 11:22:11','2012-09-25 11:22:11','    Restore old SIGPIPE handler in a proxy server test.\n    \n    I think not doing this was setting the SIGPIPE handler to signal.SIG_DFL\n    instead of the Python default of signal.SIG_IGN.  This could cause other\n    tests which make a client stop reading before all data \"chunks\" are read\n    to fail harder than they should (i.e. the SIGPIPE there is benign and\n    even expected--the other side of the socket really did get closed\n    early).\n    \n    Change-Id: I946a1913714a34ec677b701a2b5724bc8b715f70\n',2,2,'SwiftStack'),(273443,26,26,'2012-09-25 19:23:31','2012-09-25 19:23:31','    Fixed leak on 499s\n    \n    This fixes an issue where Request objects (and related objects) were\n    not getting garbage collected when a 499 (client disconnect) occurred\n    for responses that still would have had more than the proxy server\'s\n    client chunk size left to send.\n    \n    Fixed bug #1055834\n    \n    Change-Id: Ib7b5fffe970dcdec60b90a9bdcd67c49b68fb914\n',85,30,'Rackspace'),(273444,229,229,'2012-09-25 14:37:45','2012-09-25 14:37:45','    updated with 1.7.5 version bump and changelog update\n    \n    Change-Id: I04be779539b2bff76e2f614f50ddba2592fe4a36\n',5,1,'SwiftStack'),(273445,5602,5602,'2012-09-18 16:16:24','2012-09-10 23:10:04','    replace a value set with utils.TRUE_VALUES\n    \n    replace a value set with utils.TRUE_VALUES, and fix some pep8 issues\n    \n    Change-Id: If4db41d0d538afddee0d78449d229ce319c5efba\n',63,45,'independent'),(273447,5596,5596,'2012-09-27 15:19:27','2012-09-19 11:32:47','    base controller GETorHEAD refactor\n    \n    simplify, reduce the amount of code\n    \n    Change-Id: I443a43030291f35a0b283cdd036cb09ec2ef9444\n',55,76,'Rackspace'),(273448,5146,5146,'2012-09-28 10:01:03','2012-09-21 11:35:59','    Fix errors with fdatasync on BSD platforms\n    \n    Abstracts fdatasync/fsync/fcntl into an FsyncWrapper to determine, the\n    first time it is used, which fsync-like call is supported on the host\n    platform:\n    \n     - Linux: use fdatasync(fd) as Swift already does today.\n     - Darwin: use fcntl(fd, F_FULLFSYNC), since Darwin provides the\n       F_FULLFSYNC flag when you wish to fsync data you care about, ensuring\n       that it is written to disk and not simply a buffer.\n     - BSD/Other: use fsync for non-Darwin BSDs and as a fallback for other\n       platforms.\n    \n    Change-Id: Ibcfdeef7843b2f10cf8a17a6b989038ea2364376\n',46,3,'IBM'),(273450,4064,4064,'2012-09-28 12:24:15','2012-09-28 12:24:15','    allow replicator run_once to check specific devices/partitions\n    \n    Change-Id: If45f77fda269ae6e251579542e70eb71bd11fe2a\n',59,4,'Rackspace'),(273452,4064,4064,'2012-10-02 10:42:28','2012-10-02 10:42:28','    catch no such file in hash_suffix\n    \n    Change-Id: I70ee55d12b1ca91fdfe4891c3f82ab0f832f15d3\n',1,1,'Rackspace'),(273454,4056,4056,'2012-10-02 09:05:22','2012-10-01 21:43:34','    Allow underscores in account/user in tempauth via encoding.\n    \n    This patch introduces a new user format to tempauth which starts with\n    \"user64_\" and in which the account and user are base64 encoded (sans\n    padding equal signs):\n    \n    user64_<account_b64>_<user_b64> = <key> [group] [group] [...] [storage_url]\n    \n    This allows unambiguous parsing and adds the ability to have a user or\n    account name containing underscores.\n    \n    The handling of tempauth configuration is fully backward compatible and\n    this only adds new, optional functionality.\n    \n    Also beefed up unit tests to get full coverage of the user parsing code\n    in tempauth\'s __init__().\n    \n    Change-Id: Id06304934ab8055a28921f2e1aa3c58a2036d8f8\n',87,7,'SwiftStack'),(273456,4056,4056,'2012-10-03 08:28:36','2012-10-03 08:28:36','    Warn when killing fails with EPERM\n    \n    Have swift-init warn when the running user doesn\'t have permissions to\n    signal processes.  Fixes bug 1017494.\n    \n    Change-Id: Icb9048ab36f1ca73bb93b11c9c2aed882d99dfa7\n',12,0,'SwiftStack'),(273457,5596,5596,'2012-09-28 14:48:48','2012-09-04 14:02:19','    local WSGI Request and Response classes\n    \n    This change replaces WebOb with a mostly compatible local library,\n    swift.common.swob.  Subtle changes to WebOb\'s API over the years have been a\n    huge headache.  Swift doesn\'t even run on the current version.\n    \n    There are a few incompatibilities to simplify the implementation/interface:\n     * It only implements the header properties we use.  More can be easily added.\n     * Casts header values to str on assignment.\n     * Response classes (\"HTTPNotFound\") are no longer subclasses, but partials\n       on Response, so things like isinstance no longer work on them.\n     * Unlike newer webob versions, will never return unicode objects.\n    \n    Change-Id: I76617a0903ee2286b25a821b3c935c86ff95233f\n',1448,225,'Rackspace'),(273459,4160,4160,'2012-10-04 00:48:25','2012-10-04 00:48:25','    close_swift_conn is a method of swift.proxy.controllers.base.Controller, not function\n    \n    Change-Id: I84dd7bc2fc5ebd1190a7184f42fc5ecf5fd7b4d3\n',1,1,'Nexenta'),(273461,4160,4160,'2012-10-04 02:47:22','2012-10-04 02:47:22','    cleanup double repeated response.headers[\'X-Timestamp\'] = file.metadata[\'X-Timestamp\']\n    in swift.obj.server.HEAD\n    \n    Change-Id: Ie7cf853319589db7c48836dd5d7fd5e68cb009cd\n',0,1,'Nexenta'),(273462,5250,5250,'2012-10-05 15:56:34','2012-10-05 15:56:34','    add support for custom log handlers\n    \n    Add a hook to get_logger to run custom functions to add custom log\n    handlers or the like.\n    \n    Change-Id: Ib04b12939dcac7e4ad6453dea9795682044c6ae0\n',34,0,'Rackspace'),(273464,4160,4160,'2012-10-09 01:37:46','2012-10-06 16:46:06','    fix typing in swift/common.db, swift/container/server.db\n    \n    Change-Id: I5efb3712faa7d159be2d86913fa5fbdf09b7f98f\n',2,2,'Nexenta'),(273465,5596,5596,'2012-10-08 14:20:00','2012-10-08 14:20:00','    remove configobj from deps\n    \n    Change-Id: Ie566e712ba0d3dca543e99efbdb576b19623e73c\n',5,6,'Rackspace'),(273467,4067,4067,'2012-10-05 18:57:24','2012-10-02 18:25:24','    internal client unicode paths\n    \n    made internal client handle unicode path parts by adding make_path method\n    fixed pep8 problems in internal client and its test\n    moved internal client unit test file to correct directory\n    \n    Change-Id: Id1c81c9cb0db05342e4e8a8393db93552fda4647\n',939,862,'Rackspace'),(273469,138,138,'2012-10-09 09:58:06','2012-10-09 04:30:28','    Fixing alterations to sys.path\n    \n    Fixes bug 1064249\n    \n    sys.path should be extended not appended to\n    \n    Change-Id: I3404a50b16b843b47f5082676029a4dd3b03f812\n',1,1,'Red Hat'),(273471,4064,4064,'2012-10-09 09:19:29','2012-10-08 15:45:40','    fix swob for make_pre_authed_request\n    \n    Change-Id: Ic263f4a77a0aa0eb40078772a567eb41a60e40f7\n',22,5,'Rackspace'),(273473,4056,4056,'2012-10-07 15:53:08','2012-10-03 14:20:52','    Fix two edge cases with Range: header\n    \n    This fixes swob to handle \"Range: bytes=-X\" where X > len(content); ex.\n    \"Range: bytes=-17\" when the object has 10 bytes. Based on the RFC, the\n    range is satisfiable and all bytes should be returned.\n    \n    It also fixes \"Range: bytes=-0\" to be, correctly, not satisfiable.  In\n    addition, this case\'s response has Content-Length: 0 and has a zero-byte\n    body.\n    \n    It also fixes an existing regression in swob for the case\n    \"Range: bytes=100-\" for a body of length < 100 (Content-Length was\n    negative and the body was returned).\n    \n    The relevant RFC is 2616, section 14.35.1.\n    \n    Change-Id: Ib3dc672e083173eb970c10801283813623f26e0e\n',91,8,'SwiftStack'),(273475,1175,1175,'2012-10-11 10:16:35','2012-10-07 14:28:41','    Allows removal of ACLs\n    \n    fixes bug 1049017\n    \n    As per the bug report, the -remove- form of deletion only works with\n     meta headers and not with x-container-read and x-container-write.\n    \n    This patch by Yukihiro KAWADA detects the container acls and sends\n    them through to the backend empty like the other metadata values.\n    \n    patch2 extends metadata-helper in ContainerController tests so that\n    the new functionality can be tested.\n    \n    patch3 changes the k.lower().startswith() commands for read/write to\n    a single k.lower - thanks David :)\n    \n    patch4 fixes PEP8\n    \n    patch5 fixes more than two hundred pep8 errors. Except one,\n     where the pep8 tool complains of overindent, or underindent\n    depending on the position on the line. No idea how to fix that one.\n    \n    patch6 fixes the remaining pep8 error - thanks Darrell\n    \n    Change-Id: I36c2dd72b4636136c5ce7db414bf2b61501090ad\n',492,388,'NEC'),(273477,4067,4067,'2012-10-11 15:37:56','2012-10-09 18:48:12','    fixed internal client things\n    \n    _get_metadata() should only look for metadata on 200 family http status codes\n    \n    in the path_parts() in the internal client test file should return distinct unicode strings\n    with spaces for account, container, and obj\n    \n    Change-Id: I74e335d3b73a59092a0eec06539f4931420061dd\n',23,3,'Rackspace'),(273479,869,869,'2012-10-12 12:38:33','2012-10-11 14:04:02','    Honor sample_rate in StatsD logging.\n    \n    It\'s there to let administrators turn down the barrage of stats data\n    that StatsD must cope with, but it wasn\'t actually honored. Worse, if\n    the sample rate was set to e.g. 0.2, the stats would all be multiplied\n    by its inverse, e.g. 2. This patch actually drops packets when\n    sample_rate < 1, so you get correct measurements.\n    \n    Fortunately, the default sample rate is 1 (i.e. drop nothing), and\n    multiplying by 1/1 doesn\'t change anything, so stats with the default\n    sample rate of 1.0 are, and have been, just fine.\n    \n    Fixes bug 1065643.\n    \n    Also, make the two touched files compliant with pep8 v1.3.3.\n    \n    Change-Id: I66663144009ae4c9ee96f6a111745d8f5d2f5ca3\n',92,38,'SwiftStack'),(273480,4160,4160,'2012-10-12 16:53:10','2012-10-12 16:46:48','    fix bug with swob.Request accept property\n    \n    Change-Id: I2c1246b9bbd1d3ab22c2a035b735d937dd90da11\n',12,1,'Nexenta'),(273482,1175,1175,'2012-10-13 12:04:25','2012-10-13 00:15:18','    Random pep8 fixes!\n    \n    This patch merely fixes a selection of files to the point where\n    pep8 1.3.3 is happy. Most of the errors are indentation related to\n    continued lines (E126, E127, E128), bracket positions (E124) and the\n    use of backslash (E502).\n    \n    Patch 2 fixes David\'s comments regarding backslash and an odd comment\n     - thanks David!\n    \n    Change-Id: I4fbd77ecf5395743cb96acb95fa946c322c16560\n',65,52,'NEC'),(273484,229,229,'2012-10-18 12:37:50','2012-10-18 12:37:50','    removed duplicate in AUTHORS file\n    \n    Change-Id: Ia430637f24d883ee166cb6529dde03049cc06120\n',0,1,'SwiftStack'),(273485,5601,5601,'2012-10-12 08:17:57','2012-10-12 06:59:14','    fix empty body getter bug 1067923\n    \n    Change-Id: Ifd609f305ee878c39ea4e6840ed8fa9369595cfa\n',7,0,'independent'),(273487,1505,1505,'2012-10-18 11:24:18','2012-10-10 11:38:02','    Relax mount point name checking.\n    \n    In general, Linux does not care about what a mount point is named as\n    long as it is a vaild directory name (no / or null characters).\n    However, that is too relaxed for swift, which will pass that mount\n    point name around as part of url path construction all over the\n    place.  To make sure that the mount point name was sane from that POV,\n    Swift was using isalnum to verify that the mount point name was sane,\n    which is overly restrictive.\n    \n    This patch replaces that test with a test that verifies that the name\n    has no characters that need to be URL encoded.\n    \n    The specific use case this enables is allowing mount points to be\n    named according to the UUID of the filesystem that is being mounted,\n    which will make Swift more robust in the face of device name instability.\n    \n    Change-Id: I4d49b21c1783e97c16d3f394c2171f1f80eea058\n',7,1,'Dell'),(273489,26,26,'2012-10-19 00:50:25','2012-10-19 00:50:25','    Remove replication prioritization\n    \n    Turns out this prioritization causes stampedes right after capacity\n    additions (especially on smaller clusters), which means the things it\n    prioritizes don\'t get done for several passes anyway, which means the\n    prioritization isn\'t solving the problem it was designed to do, and\n    it causes non-productive load spikes instead. :/\n    \n    Getting rid of the prioritization doesn\'t make things go any slower\n    overall, could make things actually go faster since there are less\n    collisions, and evens out the load.\n    \n    Change-Id: I4938bcd12d9a21fad635cfe772897e4c151f8a95\n',0,2,'Rackspace'),(273491,4064,4064,'2012-10-15 14:21:02','2012-10-15 14:21:02','    do not dump_recon_cache on limited obj replic\n    \n    Change-Id: I38e38607ba9c5cf331c216e4c81582d23c58eeca\n',4,3,'Rackspace'),(273493,869,869,'2012-10-16 11:17:11','2012-10-15 11:32:26','    Make StatsD tests less flaky.\n    \n    There have been a bunch of Jenkins failures lately where the StatsD\n    tests fail because they can\'t bind to their desired port. There\'s\n    nothing special about the particular port they\'re using, so now we let\n    the kernel pick an available one for us.\n    \n    This also lets us get rid of a sleep() in the test that looked like an\n    attempt to alleviate EADDRINUSE errors, so now in the happy case, the\n    tests are a few fractions of a second faster.\n    \n    Change-Id: Idee11349254107a59643539b1566f3588eee7ef4\n',2,3,'SwiftStack'),(273495,4160,4160,'2012-10-22 16:56:30','2012-10-15 19:00:36','    path_qs for swob.Request\n    \n    Add path_qs property to swob.Request. First of all this property\n    has webob.Request, also this property can be used in swift3 middleware\n    for generate canonical string, if webob will be replaced in swift3 with\n    swob (https://github.com/vitoordaz/swift3/commit/2b36fbd477f6573108100ec85a1594877adeaacb).\n    \n    Change-Id: Idf58096baaf7830dd0d624ea6c72eda1eb91ff0d\n',16,0,'Nexenta'),(273496,869,869,'2012-10-14 08:02:09','2012-10-14 08:02:09','    Fix version requirement for mock library.\n    \n    One of the tests uses mock.call, which is only available in version\n    0.8.0 and up.\n    \n    Fixes bug 1066274.\n    \n    Change-Id: I77e4de0908f93326992fc4d4af4a7e54e60b5585\n',1,1,'SwiftStack'),(273498,216,216,'2012-10-22 18:55:15','2012-10-22 18:54:44','    Add OpenStack trove classifier for PyPI\n    \n    Add trove classifier to have swift listed among the\n    other OpenStack-related projets on PyPI to reserve\n    the name, even though we won\'t release packages there.\n    \n    Change-Id: I2c6cd2e37ea55d2bc2ddbba813ee2a190b1c90a9\n    Signed-off-by: Doug Hellmann <doug.hellmann@dreamhost.com>\n',1,0,'Red Hat'),(273500,5603,5603,'2012-10-23 00:35:09','2012-10-23 00:23:43','    Fixes Ilegal chunk encoding by the test_client\n    \n    test_client sends a wrong size indication when testing\n    chunked data.\n    For example instead of sending:\n       5\\r\\nabcde\\r\\n (which is inline with the standard)\n    The client would send:\n       0x5\\r\\nabcde\\r\\n\n    \n    On branch bp/wsgi-application-interface-2\n      modified:   test/functional/swift_test_client.py\n    \n    Change-Id: I7597dcd24adade009aead66f67674f361f3fe4fa\n    Fixes: Bug #1070036\n    Implements: Blueprint wsgi-application-interface\n',1,1,'IBM'),(273502,869,869,'2012-10-23 10:27:21','2012-10-18 14:49:46','    Track unlinks of async_pendings.\n    \n    It\'s not sufficient to just look at swift.object-updater.successes to\n    see the async_pending unlink rate. There are two different spots where\n    unlinks happen: one when an async_pending has been successfully\n    processed, and another when the updater notices multiple\n    async_pendings for the same object. Both events are now tracked under\n    the same name: swift.object-updater.unlinks.\n    \n    FakeLogger has now sprouted a couple of convenience methods for\n    testing logged metrics.\n    \n    Fixed pep8 1.3.3\'s complaints in the files this diff touches.\n    \n    Also: bonus speling and, grammar fixes in the admin guide.\n    \n    Change-Id: I8c1493784adbe24ba2b5512615e87669b3d94505\n',79,38,'SwiftStack'),(273504,5603,5603,'2012-10-23 09:36:51','2012-10-23 09:30:03','    Two MIME types sent during test\n    \n    The directory tests TestContainerPathsEnv creates directorys during SetUp while indicating duplicate application internet media type (MIME) via the Content-Type header.\n    \n    E.g the output on the line using \'nosetests -v test.functional.tests:TestContainerPaths.testContainerListing\' includes:\n    \n    Host: 127.0.0.1:8080\n    Accept-Encoding: identity\n    Content-Type: application/octet-stream\n    Content-Length: 0\n    content-type: application/directory\n    X-Auth-Token: AUTH_tkd40f5550289d4d60af75bb1b6c6067be\n    \n    On branch bp/wsgi-application-interface-3\n       modified:   test/functional/tests.py\n    Fixes: Bug #1068499\n    Implements Blueprint  	wsgi-application-interface\n    \n    Change-Id: I49c5d1f73fff3c06d4be18b20c7209eff4e1326c\n',2,2,'IBM'),(273506,5579,5579,'2012-10-23 14:48:59','2012-10-11 16:52:26','    Adding CORS support\n    \n    Change-Id: I894473994cdfea0996ad16e7619aff421f604abc\n',341,68,'independent'),(273508,5603,5603,'2012-10-23 20:39:50','2012-10-23 09:48:24','    Remove utf-8 in metadata and http header names\n    \n    RFC2616 implicitly allows transferring utf-8 in\n    headers (vals) but not in header names (keys)\n    \n    Swift functional tests includes testing for utf-8\n    header names (keys) which is non aligned with the standard.\n    This seem to be the case when testing file metadata.\n    File metadata keys are than transferred as part of\n    the http header keys (header names) as\n          X-Object-Meta-<metadata_key>=metadata_name.\n    \n    As a result metadata_keys in swift must be composed from\n    a subset of ASCII characters - alpha numerics,\n    some punctuation, not a lot else* and cannot be utf-8.\n    \n    On branch bp/wsgi-application-interface-4\n    modified:   test/functional/tests.py\n    \n    Change-Id: I1932e9d4ead83089e8a31a06d28a54f5625efb9c\n    Fixes: bug 1068026\n    Implements: blueprint wsgi-application-interface\n',6,6,'IBM'),(273510,229,229,'2012-10-25 09:26:00','2012-10-18 12:08:38','    fix config parsing in swift-bench -x\n    \n    This patch ensures that the command-line arg format (boolean)\n    doesn\'t conflict with the conf file format (string) and the\n    proper action is taken.\n    \n    Change-Id: I3284096e1a9478897e1c3246ab190b46d2590243\n',7,2,'SwiftStack'),(273512,26,26,'2012-10-25 19:42:56','2012-10-25 19:17:57','    Db reclamation should remove empty suffix dirs\n    \n    When a db is reclaimed it removes the hash dir the db files are in,\n    but it does not try to remove the parent suffix dir though it might\n    be empty now. This eventually leads to a bunch of empty suffix dirs\n    lying around. This patch fixes that by attempting to remove the\n    parent suffix dir after a hash dir reclamation.\n    \n    Here\'s a quick script to see how bad a given drive might be:\n    \n    import os, os.path, sys\n    if len(sys.argv) != 2:\n        sys.exit(\'%s <mount-point>\' % sys.argv[0])\n    in_use = 0\n    empty = 0\n    containers = os.path.join(sys.argv[1], \'containers\')\n    for p in os.listdir(containers):\n        partition = os.path.join(containers, p)\n        for s in os.listdir(partition):\n            suffix = os.path.join(partition, s)\n            if os.listdir(suffix):\n                in_use += 1\n            else:\n                empty += 1\n    print in_use, \'in use,\', empty, \'empty,\', \'%.02f%%\' % (\n        100.0 * empty / (in_use + empty)), \'empty\'\n    \n    And here\'s a quick script to clean up a drive:\n    NOTE THAT I HAVEN\'T ACTUALLY RUN THIS ON A LIVE NODE YET!\n    \n    import errno, os, os.path, sys\n    if len(sys.argv) != 2:\n        sys.exit(\'%s <mount-point>\' % sys.argv[0])\n    containers = os.path.join(sys.argv[1], \'containers\')\n    for p in os.listdir(containers):\n        partition = os.path.join(containers, p)\n        for s in os.listdir(partition):\n            suffix = os.path.join(partition, s)\n            try:\n                os.rmdir(suffix)\n            except OSError, err:\n                if err.errno not in (errno.ENOENT, errno.ENOTEMPTY):\n                    print err\n    \n    Change-Id: I2e6463a4cd40597fc236ebe3e73b4b31347f2309\n',56,15,'Rackspace'),(273514,26,26,'2012-10-25 17:47:01','2012-10-25 17:47:01','    Added partition option to swift-get-nodes\n    \n    Sometimes you just want to know what machines a given partition\n    should be on, or what handoffs that partition would use if needed.\n    We\'ve been meaning to add this option to swift-get-nodes for quite\n    some time, but I just finally got to it.\n    \n    Example: swift-get-nodes /etc/swift/object.ring.gz -p 123\n    \n    I tried to leave as much of the existing swift-get-nodes unaltered,\n    so the output isn\'t exactly distilled to just what you\'d need for\n    getting a partition\'s nodes. But it should suffice for what it is, an\n    admin tool.\n    \n    Change-Id: I438400ddc0eecbf9c48266e7f38a2e4f0765f374\n',30,5,'Rackspace'),(273516,869,869,'2012-10-26 10:11:22','2012-10-26 10:11:22','    Allow unsetting of X-Container-Sync-To header.\n    \n    Fixes bug 1071790.\n    \n    Change-Id: Ic0509190b9994e7d983bcf20daa64a650cc974cb\n',4,1,'SwiftStack'),(273517,5250,5250,'2012-10-26 17:59:42','2012-10-26 14:56:10','    Extended documentation for using custom loggers\n    \n    Change-Id: I78a5c109c9440df752e390698502f57d4392fb67\n',105,48,'Rackspace'),(273519,869,869,'2012-10-24 17:16:11','2012-10-24 17:16:11','    Remove double GET on range requests.\n    \n    The proxy server\'s ObjectController was performing multiple GET\n    requests to the object server when processing requests with Range\n    headers. This was a workaround for a bug in the proxy server\'s\n    Controller.GETorHEAD_base method where a response code of 416 from the\n    object server was incorrectly treated as a bad response from the\n    backend, the same way a 404 or a 5xx would be.\n    \n    A 416 (Requested Range Not Satisfiable) from the object server is now\n    considered a good response. Since the response headers from the object\n    server already include the X-Object-Manifest header, there\'s no need\n    to make a second request (sans Range header) to see if the object is a\n    manifest.\n    \n    Bonus fix: updated message for status 416 to match RFC2616.\n    \n    Bonus fix 2: removed a leftover debugging print() in\n    test/unit/proxy/test_server.py.\n    \n    Fixes bug 1065869.\n    \n    Change-Id: I156af0b463f02ef19a8cfe37092544a599d89b78\n',29,26,'SwiftStack'),(273521,5603,5603,'2012-10-29 22:06:34','2012-10-23 10:07:53','    Fix non standard 100-continue behaviour\n    \n    Swift proxy server, when communicating with\n    the back-end servers ALWAYS sends 100-continue.\n    Even if the length headers indicate that there\n    is no body (content-length: 0).\n    This behavior is not inline with the standard.\n    RFC2616:8.2.3 disallows 100-continue\n            for req.content_length==0\n    \n    This fix removes 100-continue during PUT requests\n    without a body while maintining the ability for\n    handoff in case of faliure.\n    \n    On branch bp/wsgi-application-interface-5\n       modified:   swift/proxy/controllers/obj.py\n    \n    Fixes: Bug #1070025\n    Implements Blueprint:  	wsgi-application-interface\n    \n    Change-Id: Ia4eb8b886a74968cca4e8bde208641b37f2c104c\n',80,8,'IBM'),(273522,26,26,'2012-10-30 15:54:05','2012-10-30 15:40:41','    Fixed bugs re: make_pre_authed* and SCRIPT_NAME\n    \n    There were bugs with SCRIPT_NAME and\n    swift.common.wsgi.make_pre_authed* functions.\n    \n    1) SCRIPT_NAME wasn\'t copied with PATH_INFO, which it should\'ve been.\n    2) When a new path was given, SCRIPT_NAME wasn\'t set to an empty\n       string but just omitted, which is allowed by spec, but really\n       should be set.\n    \n    For completeness, if SCRIPT_NAME doesn\'t exist in the source env, it\n    will be created in the new env, but as an empty string.\n    \n    Change-Id: Ifbc27ed8ff357038c54df4d37de46cfd5e31372e\n',21,2,'Rackspace'),(273523,229,229,'2012-10-29 13:59:01','2012-10-19 13:50:57','    changed TRUE_VALUES references to utils.config_true_value() call\n    \n    cleaned up pep8 (v1.3.3) in all files this patch touches\n    \n    Change-Id: I30e8314dfdc23fb70ab83741a548db9905dfccff\n',445,377,'SwiftStack'),(273525,4056,1020,'2012-11-01 16:45:35','2012-11-01 14:52:21','    Handle down object servers in container-sync\n    \n    If an object server is down, container-sync stops syncing the container\n    even if the it gets object copies from \"up\" obejct servers.\n    \n    Bug 1069910\n    \n    In case the git history gets mangled, this fix was done almost entirely\n    by Donagh McCabe <donagh.mccabe@hp.com>.\n    \n    Change-Id: Ieeadcfeb4e880fe5f08e284d7c12492bf7a29460\n',5,2,'HP'),(273527,1124,1124,'2012-11-01 20:45:30','2012-11-01 20:45:11','    blueprint Multi-range support implementation\n    \n    This change adds multi range retrieval to OpenStack Swift. For non-\n    segmented data object, a client can use HTTP Range header to specify\n    multiple ranges to retrieve sections of the data object.\n    \n    This implementation currently does not support segmented data object\n    multi range retrieval. When a client sends a multi range request\n    against a segmented data object, Swift will return HTTP status code\n    200. Support for segmented data multi range retrieval will be added\n    in near future.\n    \n    This implementation is to bring Swift closer to CDMI multi range\n    data retrieval standard. Once support for segemented data multi\n    range is added, Swift will be compliant with CDMI standard in\n    this area.\n    \n    DocImpact\n    \n    Change-Id: I4ed1fb0a0a93c037ddb2f551ea62afe447945107\n',459,90,'IBM'),(273529,4056,5603,'2012-11-02 10:48:57','2012-10-23 17:05:40','    Separate wsgi init from web-front-end activation\n    \n    Separate the request processor initialization steps\n        Load common settings from conf\n        Set the logger\n        Load the request processor\n    from the web front end server application step\n    \n    On branch bp/wsgi-application-interface-7\n       modified:   swift/common/wsgi.py\n    \n    Implements Blueprint:   wsgi-application-interface\n    \n    Change-Id: I25fabad8846cd644e4bf1e1bd9c2e568512e12e5\n',47,25,'IBM'),(273531,26,26,'2012-10-30 17:40:42','2012-10-25 18:27:16','    dispersion report option to output missing parts\n    \n    Adds a -p option to swift-dispersion-report that will output the\n    partitions missing copies to standard error. Another thing we\'ve been\n    meaning to add for forever. It\'s useful when you want to do some\n    further research on whether a partition truly has fewer copies or if\n    they\'re just somewhere else in the cluster due to a ring change, for\n    instance.\n    \n    DocImpact\n    \n    Change-Id: I5e47aa5818483ecc34b39ef6f8cd83ad312ed9a0\n',36,8,'Rackspace'),(273533,869,869,'2012-11-02 11:21:24','2012-11-02 11:21:24','    Make multipart/byteranges boundary always length 32.\n    \n    Due to a lack of zero-padding in a format string, there was a 1/16\n    chance that the length of the randomly-generated boundary string was\n    less than 32. This didn\'t affect client downloads, but it did give the\n    unit tests a 1/16 chance of failing (there\'s a [0-9a-f]{32} regex in a\n    test).\n    \n    Now we left-zero-pad the boundary string to length 32, and the test\n    consistently passes.\n    \n    Change-Id: I4ee98dab127e5674e59b078d8090470ec783e0b0\n',1,1,'SwiftStack'),(273535,229,4059,'2012-11-02 11:49:33','2012-11-01 00:05:42','    Allow object-expirer to delete the last version of an object\n    \n    Fix bug 1067677\n    \n    When we delete a versioned object, the last version will be poped out from the\n    versiones container. When a versioned object is expired and deleted by object-\n    expirer, the last version is restored but remains in the versions container\n    instead of getting deleted. The reason is object-expirer will set\n    \'X-If-Delete- At\' header when deleteing an object. However this is for the\n    current version - not for the last version. When the object-server is trying\n    to delete the last version, the transaction will fail with error:\n    X-If-Delete-At and X-Delete-At do not match. Delete the \'X-If-Delete-At\'\n    field in the later built delete request would help to solve this issue.\n    \n    This patch, without the test, was first proposed by\n    Zhou Yuan <yuan.zhou@intel.com>.\n    \n    Change-Id: I62c97e6a0f140888497e189129825865fb6f7966\n',44,2,'Intel'),(273537,5596,5596,'2012-11-01 18:46:47','2012-11-01 16:14:58','    re-use headers_to_container_info on container GET\n    \n    Currently, a container\'s info can be cached without cors data intact after\n    a container GET.\n    \n    I made headers_to_container_info a function instead of a method and I crammed\n    all container metadata into container_info.\n    This is so e.g. staticweb can eventually re-use the same container info cache.\n    \n    Fix pep8 in swift/proxy/controllers/container.py\n    \n    Change-Id: I4bbb042dde79afac48395efc38bd80f0ff240e1f\n',95,42,'Rackspace'),(273539,869,869,'2012-11-02 13:19:39','2012-11-02 13:19:39','    Remove dead code in swob.Response.__init__.\n    \n    self.status would have been \"200 OK\", not 200, so the branch was never\n    taken. self.status_int would have been 200.\n    \n    This looked like part of an attempt to honor the Range header in GET\n    requests. However, when I changed the code to check if self.status_int\n    == 200, the behavior gets weird. In the case of a GET request w/Range\n    header, the status gets changed from a 200 (from the underlying\n    app/middleware stack) into a 206. However, the response body isn\'t\n    actually changed to be of the right length. The net result is a\n    response w/status \"206 Partial Content\" that actually contains the\n    full content.\n    \n    RFC 2616 section 14.35.2 says \"A server MAY ignore the Range header.\"\n    The right thing to do is either (a) return a 206 with actual partial\n    content, or (b) ignore the Range header. For object GETs, there\'s\n    already code to do (a) [see commit ce274b3]. For other GETs, we should\n    ignore the Range header instead of returning a Frankenresponse.\n    \n    This code is dead, and rightly so; let\'s bury it six feet deep in the\n    bit bucket.\n    \n    Fixes bug 1068279.\n    \n    Change-Id: Id648dfda9cba45012b5da097a235598fbd97c8b0\n',0,2,'SwiftStack'),(273541,24,24,'2012-11-02 16:56:18','2012-11-02 16:56:18','    Use pypi for python-swiftclient dependency.\n    \n    Using github as a package source is less reliable in the Jenkins test\n    framework than using pypi. This is because the Jenkins test framework\n    has a local pypi mirror.\n    \n    Change-Id: Ia904d39ce70f5c2bd7d6edb9172f8226131074e2\n',1,3,'OpenStack Foundation'),(273542,869,869,'2012-11-02 15:39:59','2012-11-02 15:39:59','    Split swob.content_range_header() into two methods.\n    \n    content_range_header() took an optional parameter \'value_only\'. If\n    true, it returned just the header value; if false, the whole header.\n    At all the call sites, value_only was either a hardcoded True or\n    False.\n    \n    Instead, let\'s have two methods (one for the full header, one for the\n    header value) and just call the right one.\n    \n    Change-Id: I3aa03aca233437e9bdbed7edf9622756e19b4c49\n',11,15,'SwiftStack'),(273544,5596,5596,'2012-11-05 12:59:16','2012-11-02 12:02:02','    Set content-type on account/container head\n    \n    Change-Id: Ib54fa5adb7539bebfbd6644064be9d7f4d7af9db\n',114,2,'Rackspace'),(273546,229,229,'2012-11-05 20:15:21','2012-11-02 16:46:38','    Better RFC support for OPTIONS and CORS preflight requests\n    \n    Ensures that the Allow header is set for 405 responses from the proxy,\n    as per RFC 2616.\n    \n    CORS preflight requests now require both the Origin and Access-\n    Control-Request-Method headers to get a successful (200) response. The\n    draft spec defines errors as a response with a non-200 status code.\n    This patch sets the CORS error response code to 401 (Not Authorized).\n    A later patch may choose to make this configurable.\n    \n    There is some ambiguity between RFC 2616 and the CORS draft spec\n    around what to do when a CORS request is made but the cluster has no\n    CORS information about the requested resource. This patch chooses to\n    return an error in this case because it is what would be simplest for\n    CORS client apps.\n    \n    Further improvements to the OPTIONS verb not included in this patch\n     include support of more top-level resources (eg / or /v1/) or\n    sending the configured constraints in the reponse body.\n    \n    Change-Id: I40be059e8bbf3737dafc4e6fefa7598d05669c60\n',205,51,'SwiftStack'),(273548,229,229,'2012-11-06 15:13:01','2012-11-06 15:13:01','    add OPTIONS to proxy_logging configs and docs\n    \n    Change-Id: I77e1d7fdcf217826402beeb7d583e3c7279c416c\n',6,5,'SwiftStack'),(273549,4056,5596,'2012-11-06 15:39:25','2012-11-06 02:44:43','    statsd timing refactor\n    \n    Change-Id: I99d9ddfbcad0f88e75c49235c8317ea97237d4e4\n',182,229,'Rackspace'),(273551,229,229,'2012-11-06 18:42:07','2012-11-05 12:58:14','    updated for 1.7.5 release\n    \n    Change-Id: Iee286fbe1a6b797955579bedfb2a80095c055cd8\n',56,1,'SwiftStack'),(273552,229,214,'2012-11-09 14:01:13','2012-11-07 15:57:12','    Fixed swift-bench when using -b and a conf file\n    \n    Change-Id: Ifab46a1cb0b78ca7e86d95fd78ea6c8ce0d4304b\n',2,1,'SwiftStack'),(273553,229,26,'2012-11-09 14:01:42','2012-11-07 21:49:26','    Fixed bugs with internal client and object expirer\n    \n    These bug fixes are lumped together because they all caused problems\n    with the object expirer doing its job.\n    \n    There was a bug with the internal client doing listings that happened\n    to run across a Unicode object name for use as a marker.\n    \n    There was a bug with the object expirer not utf8 encoding object\n    names it got from json listings, causing deletes to fail.\n    \n    There was a bug with the object expirer url quoting object names when\n    calling the internal client\'s make_request, when make_request already\n    handles that.\n    \n    Change-Id: I1cee0de01ac570e975ee181bcc65a2d48f0719cf\n',70,14,'Rackspace'),(273554,229,869,'2012-11-09 14:02:03','2012-11-07 13:36:35','    Use computed size on object PUT, not fstat.\n    \n    The object server knows the size of the file on disk already since\n    it\'s counted the bytes as they were written out. There\'s no need to go\n    ask the filesystem.\n    \n    This also lets object PUTs work when the filesystem is some crazy,\n    non-POSIX thing that doesn\'t always give the right answers from\n    fstat(). See bug 904723 for a case when this happened.\n    \n    Fixes bug 904723.\n    \n    Change-Id: I7b62af55b6aac54b310ab1373364755eba667198\n',1,1,'SwiftStack'),(273555,229,5596,'2012-11-09 14:02:22','2012-11-08 15:12:33','    charset for default responses\n    \n    Set a utf-8 charset on default text/html responses.\n    \n    Change-Id: Icc9d6efdd7040b83de069d2ae6cba76c937bc2d0\n',3,3,'Rackspace'),(273556,229,5596,'2012-11-09 14:02:39','2012-11-08 14:17:40','    use Host: for location rewrites\n    \n    If the Host header is available, use it for making relative URLs absolute.\n    Otherwise, continue using SERVER_NAME.\n    \n    Change-Id: Ib25d542b154d8a74081e1d766e8da1ee240e1247\n',75,5,'Rackspace'),(273557,229,5596,'2012-11-09 14:03:02','2012-11-09 10:11:08','    give swob default content-type\n    \n    This should fix up the few remaining API regressions from swob, by giving all\n    responses a default content-type of \"text/html; charset=UTF-8\".\n    \n    Change-Id: I7e7f7cbf46d543c7f6d965d74b06eef3d88c83b4\n',39,3,'Rackspace'),(273558,229,869,'2012-11-09 14:03:17','2012-11-08 15:22:01','    Make DELETE requests to expired objects return 404.\n    \n    It is already the case that a DELETE of a deleted object results in a\n    404, and GET/HEAD/POSTs to both expired and deleted objects result in\n    404s. However, a DELETE of an expired object resulted in a 202. This\n    change makes it consistent with the other verbs.\n    \n    Fixes bug 1076245.\n    \n    Change-Id: I5f4f0df17fed93929c00c4cbd00579e70aa82201\n',37,14,'SwiftStack'),(273559,229,229,'2012-11-09 14:53:00','2012-11-09 14:39:39','    fix error with setting max age and incorrect tests\n    \n    Change-Id: Iada5b83b3bbeb6dddd3181928152a775031792f5\n',6,6,'SwiftStack'),(273560,26,869,'2012-11-10 00:48:12','2012-11-08 11:13:21','    Make swift-bench use less memory with large object sizes.\n    \n    Before, swift-bench would create a string of the right size and pass\n    that to [direct_]put_object. Uploading 5 GB objects w/concurrency of\n    4? Hope you\'ve got a spare 20 GB of RAM in that machine.\n    \n    Now it lazily generates chunks (of size 64 KiB) to send. In my limited\n    testing, this keeps RAM usage low while not impacting speed.\n    \n    There\'s backwards-compatibility code in\n    direct_client.direct_put_object for any callers who are still passing\n    in strings. There aren\'t any such in Swift\'s codebase, though. All one\n    of those callers now pass an iterable.\n    \n    Fixes bug 911925.\n    \n    Change-Id: I40669fc00c7fb6699d8fb514e1be9b69436eca42\n',42,5,'SwiftStack'),(273561,229,229,'2012-11-13 07:43:43','2012-11-13 07:43:43','    1.7.5 final version\n    \n    Change-Id: I1bbeab7fbfb68aa49b1ae38e7e75826254b8a391\n',1,1,'SwiftStack'),(273562,229,229,'2012-11-06 19:38:26','2012-11-06 19:38:26','    1.7.6 version bump\n    \n    Change-Id: Ifc29d286a3e435fd16c1dec8b5afb7b331a89b77\n',1,1,'SwiftStack'),(273563,214,214,'2012-11-07 16:12:04','2012-11-07 15:57:12','    Fixed swift-bench when using -b and a conf file\n    \n    Change-Id: I72448cd8578b53a658f151354a26066772e4b9ec\n',2,1,'SwiftStack'),(273564,26,26,'2012-11-08 00:05:35','2012-11-07 21:49:26','    Fixed bugs with internal client and object expirer\n    \n    These bug fixes are lumped together because they all caused problems\n    with the object expirer doing its job.\n    \n    There was a bug with the internal client doing listings that happened\n    to run across a Unicode object name for use as a marker.\n    \n    There was a bug with the object expirer not utf8 encoding object\n    names it got from json listings, causing deletes to fail.\n    \n    There was a bug with the object expirer url quoting object names when\n    calling the internal client\'s make_request, when make_request already\n    handles that.\n    \n    Change-Id: I29fdd351fd60c8e63874b44d604c5fdff35169d4\n',70,14,'Rackspace'),(273566,869,869,'2012-11-07 13:36:35','2012-11-07 13:36:35','    Use computed size on object PUT, not fstat.\n    \n    The object server knows the size of the file on disk already since\n    it\'s counted the bytes as they were written out. There\'s no need to go\n    ask the filesystem.\n    \n    This also lets object PUTs work when the filesystem is some crazy,\n    non-POSIX thing that doesn\'t always give the right answers from\n    fstat(). See bug 904723 for a case when this happened.\n    \n    Fixes bug 904723.\n    \n    Change-Id: Ibdf44ea991e0cc4f9e0997cc9ff566cb0eac5332\n',1,1,'SwiftStack'),(273568,5596,5596,'2012-11-08 15:23:04','2012-11-08 15:12:33','    charset for default responses\n    \n    Set a utf-8 charset on default text/html responses.\n    \n    Change-Id: Ic5f661bd475dca83763d4b55419ad031279e3ba1\n',3,3,'Rackspace'),(273569,5596,5596,'2012-11-08 15:16:19','2012-11-08 14:17:40','    use Host: for location rewrites\n    \n    If the Host header is available, use it for making relative URLs absolute.\n    Otherwise, continue using SERVER_NAME.\n    \n    Change-Id: Ifc028264ad1b122a2d5dff9d5528cb369090429f\n',75,5,'Rackspace'),(273571,5596,5596,'2012-11-09 10:44:26','2012-11-09 10:11:08','    give swob default content-type\n    \n    This should fix up the few remaining API regressions from swob, by giving all\n    responses a default content-type of \"text/html; charset=UTF-8\".\n    \n    Change-Id: Ib3b859e63c5e8c4af6f7fe535947402b5df57399\n',39,3,'Rackspace'),(273572,869,869,'2012-11-08 15:27:24','2012-11-08 15:22:01','    Make DELETE requests to expired objects return 404.\n    \n    It is already the case that a DELETE of a deleted object results in a\n    404, and GET/HEAD/POSTs to both expired and deleted objects result in\n    404s. However, a DELETE of an expired object resulted in a 202. This\n    change makes it consistent with the other verbs.\n    \n    Fixes bug 1076245.\n    \n    Change-Id: I793e62d72461a4fb9fb3404e10658ddcc4c3a7a6\n',37,14,'SwiftStack'),(273574,869,869,'2012-11-09 11:10:00','2012-11-08 11:13:21','    Make swift-bench use less memory with large object sizes.\n    \n    Before, swift-bench would create a string of the right size and pass\n    that to [direct_]put_object. Uploading 5 GB objects w/concurrency of\n    4? Hope you\'ve got a spare 20 GB of RAM in that machine.\n    \n    Now it lazily generates chunks (of size 64 KiB) to send. In my limited\n    testing, this keeps RAM usage low while not impacting speed.\n    \n    There\'s backwards-compatibility code in\n    direct_client.direct_put_object for any callers who are still passing\n    in strings. There aren\'t any such in Swift\'s codebase, though. All one\n    of those callers now pass an iterable.\n    \n    Fixes bug 911925.\n    \n    Change-Id: I40669fc00c7fb6699d8fb514e1be9b69436eca42\n',42,5,'SwiftStack'),(273576,229,229,'2012-11-09 14:45:12','2012-11-09 14:39:39','    fix error with setting max age and incorrect tests\n    \n    Change-Id: I3f0db3b70ea5df323597b556682c2d1fb28afe53\n',6,6,'SwiftStack'),(273578,5604,5604,'2012-11-11 00:15:39','2012-11-11 00:15:39','    fix bug1039861, remove license header in doc/source/conf.py.\n    \n    Change-Id: Iab43ac342faf3722ccab1ed034f08752dbbfaae1\n',0,14,'independent'),(273579,4116,4116,'2012-11-12 23:15:10','2012-11-12 23:10:08','    patch utils.HASH_PATH_SUFFIX in proxy unittests\n    \n    Most of the test files set the HASH_PATH_SUFFIX so you can run the test\n    file stand alone.  This change made it easier for me to run specific\n    proxy tests separately.\n    \n    Change-Id: I87d70367dac7f240a2b6779649f8a02cf324ae0f\n',2,0,'independent'),(273580,5600,5600,'2012-11-14 14:10:00','2012-11-13 00:53:20','    fix bug in deleting account memcache.\n    \n    Every request of container and object will invoke account_info() or\n    container_info() to query the meta of account and container. The meta\n    will be cached in memcache with the key \'account/{$account}\' or\n    \'container/{$container}\', So, if any request to update account and\n    container, we should delete the cache. But in the cache deletion of\n    account, it use the wrong key \'account/v1/{$account}\'. This could lead\n    to inconsistency of account meta.\n    \n    Change-Id: Ied116a58a2d5866ac76d75ae50f21277d66e5755\n',7,4,'ZTE Corporation'),(273581,26,26,'2012-11-10 16:39:25','2012-11-10 16:39:25','    Better TempAuth storage URL guessing\n    \n    I know it\'s just TempAuth, but bug #959953 just caught my eye as\n    something interesting to solve.\n    \n    This does a best guess on the storage URL to return for a given\n    request. It allows $HOST to be used in the storage URL configuration,\n    where $HOST will resolve to scheme://host:port. It bases the scheme\n    on how the server is running or on storage_url_scheme if set. The\n    host:port comes from the request\'s Host header if it exists, and\n    falls back to the WSGI SERVER_NAME:SERVER_PORT otherwise.\n    \n    Fixes: bug #959953\n    DocImpact\n    \n    Change-Id: Ia494bcb99a04490911ee8d2cb8b12a94e77820c5\n',153,47,'Rackspace'),(273583,869,869,'2012-11-12 15:02:04','2012-11-12 15:02:04','    Fix 500 on GET of many-segment manifest.\n    \n    The proxy_logging middleware was asserting that the response contained\n    either a Content-Length header or a Transfer-Encoding header. If not,\n    it would either add one (if app_iter was a list) or blow up\n    (otherwise). This blowing up is observable on a GET request to a\n    manifest object that references more than\n    swift.common.constraints.CONTAINER_LISTING_LIMIT segments.\n    \n    If a response makes it up to eventlet.wsgi without a Content-Length\n    header, then a \"Transfer-Encoding: chunked\" header is automatically\n    stuffed into the response by eventlet. Therefore, it\'s not an error\n    for a response to not have a Content-Length header, and proxy_logging\n    should just let it happen.\n    \n    Fixes bug 1078113.\n    \n    Change-Id: I3751a8ae14dc68bab546f2746b61267a5115e252\n',0,23,'SwiftStack'),(273585,869,869,'2012-11-13 13:06:48','2012-11-09 18:01:34','    Remove outdated Debian packaging guide.\n    \n    There are 3 sections in there, all useless.\n    \n    Section 1 tells you how to install Swift packages from the swift-core\n    PPA. However, the latest version there is ancient.\n    \n    Section 2 tells you how to build your own Swift packages. However, it\n    talks about getting the source code from the \"debian\" branch in bzr,\n    which is obviously really old.\n    \n    Section 3 tells you how to take the packages from section 2 and\n    install them. This isn\'t too out-of-date, but since section 2 doesn\'t\n    work any more, section 3 is useless.\n    \n    Since stale docs are worse than no docs, there\'s no current\n    information in this document, and bringing it up-to-date requires a\n    whole pile of work, I\'ve chosen to delete it entirely.\n    \n    Also pulled out a couple references to the PPA elsewhere.\n    \n    Fixes bug 917385.\n    Fixes bug 1026145.\n    \n    Change-Id: I510bd8619531fe110419e5488bd20d3602868d66\n',2,144,'SwiftStack'),(273587,26,26,'2012-11-15 21:44:14','2012-11-14 02:53:14','    Refactor db_replicator\'s roundrobin_datadirs\n    \n    roundrobin_datadirs was returning any .db file at any depth in the\n    accounts/containers structure. Since xfs corruption can cause such\n    files to appear in odd places at times (only happened on one drive of\n    ours so far, but still...), I\'ve refactored this function to only\n    return .db files at the proper depth.\n    \n    Change-Id: Id06ef6584941f8a572e286f69dfa3d96fe451355\n',197,26,'Rackspace'),(273589,211,211,'2012-11-16 12:30:28','2012-11-16 12:30:28','    Updating doc reflecting the move of auth_token.\n    \n    The auth_token middleware has moved, updating the doc.\n    \n    Change-Id: I8133b876a53d61bf94169cf08c8b1fa6bbf9681a\n',2,2,'eNovance'),(273591,826,826,'2012-11-15 21:57:06','2012-11-15 21:57:06','    Refactor http_connect() to use http_connect_raw()\n    \n    Change-Id: I889c5eecf860cc947763c5d79148419f9741a2c2\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',2,15,'Red Hat'),(273593,229,229,'2012-11-15 13:18:38','2012-11-13 16:07:16','    change catch_errors to use WSGIContext\n    \n    The current catch_errors (ie without this patch) relinquishes control\n    before the underlying middleware/app has been evaluated. This results\n    in not catching errors in the stack when they occur in either the\n    start_response or in generating the first chunk sent to the client of\n    the underlying stack.\n    \n    Change-Id: Iecd21e4fc7e30fa20239d011f69216354b50baf1\n',52,23,'SwiftStack'),(273595,826,826,'2012-11-16 14:57:36','2012-11-16 00:09:14','    Use a delta timeout for memcache where possible\n    \n    We use a delta timeout value for timeouts under 30 days (in seconds)\n    since that is the limit which the memcached protocols will recognize a\n    timeout as a delta. Greater than 30 days and it interprets it as an\n    absolute time in seconds since the epoch.\n    \n    This helps to address an often difficult-to-debug problem of time\n    drift between memcache clients and the memcache servers. Prior to this\n    change, if a client\'s time drifts behind the servers, short timeouts\n    run the danger of not being cached at all. If a client\'s time drifts\n    ahead of the servers, short timeouts run the danger of persisting too\n    long. Using delta\'s avoids this affect. For absolute timeouts 30 days\n    or more in the future small time drifts between clients and servers\n    are inconsequential.\n    \n    See also bug 1076148 (https://bugs.launchpad.net/swift/+bug/1076148).\n    \n    This also fixes incr and decr to handle timeout values in the same way\n    timeouts are handled for set operations.\n    \n    Change-Id: Ie36dbcedfe9b4db9f77ed4ea9b70ff86c5773310\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',52,6,'Red Hat'),(273597,5596,5596,'2012-11-14 03:12:21','2012-11-14 03:12:21','    check response status in WSGIContext._app_call\n    \n    Only re-chain response iter if start_response hasn\'t been called yet.\n    \n    Change-Id: I9670f49419104fb8f949e6edc12d9047d1289cde\n',5,1,'Rackspace'),(273599,826,826,'2012-11-15 08:58:26','2012-11-13 08:32:38','    Refactor DiskFile to hide temp file names and exts\n    \n    This set of changes reworks the DiskFile class to remove the \"extension\"\n    parameter from the put() method, offering the new put_metadata() method with\n    an optional tombstone keyword boolean, and changes the mkstemp method to only\n    return the file descriptor.\n    \n    Reviewing the code it was found that the temporary file name created as a\n    result of calling DiskFile.mkstemp() was never used by the caller, but the\n    caller was responsible for passing it back to the DiskFile.put() method. That\n    seems like too much information is exposed to the caller, when all the caller\n    requires is the file descriptor to write data into it.\n    \n    Upon further review, the mkstemp() method was used in three places: PUT, POST\n    and DELETE method handling. Of those three cases, only PUT requires the file\n    descriptor, since it is responsible for writing the object contents. For POST\n    and DELETE, DiskFile only needs to associate metadata with the correct file\n    name. We abstract the pattern that those two use (once we also refactor the\n    code to move the fetch of the delete-at metadata, and subsequent\n    delete-at-update initiation, from under the mkstemp context) by adding the new\n    put_metadata() method.\n    \n    As a result, the DiskFile class is then free to do whatever file system\n    operations it must to meet the API, without the caller having to know more\n    than just how to write data to a file descriptor. Note that DiskFile itself\n    key\'d off of the \'.ts\' and \'.meta\' extensions for its operations, and for that\n    to work properly, the caller had to know to use those correctly. With this\n    change, the caller has no knowledge of how the file system is being used to\n    accomplish data and metadata storage.\n    \n    See also Question 213796 at:\n        https://answers.launchpad.net/swift/+question/213796\n    \n    Change-Id: I267f68e64391ba627b2a13682393bec62600159d\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',66,35,'Red Hat'),(273601,869,869,'2012-11-16 18:47:06','2012-11-16 17:05:37','    Remove IP-based container-sync ACLs from auth middlewares.\n    \n    The determination of the client IP looked at the X-Cluster-Client-Ip\n    and X-Forwarded-For headers in the incoming HTTP request. This is\n    trivially spoofable by a malicious client, so there\'s no security\n    gained by having the check there.\n    \n    Worse, having the check there provides a false sense of security to\n    cluster operators. It sounds like it\'s based on the client IP, so an\n    attacker would have to do IP spoofing to defeat it. However, it\'s\n    really just a shared secret, and there\'s already a secret key set\n    up. Basically, it looks like 2-factor auth (IP+key), but it\'s really\n    1-factor (key).\n    \n    Now, the one case where this might provide some security is where the\n    Swift cluster is behind an external load balancer that strips off the\n    X-Cluster-Client-Ip and X-Forwarded-For headers and substitutes its\n    own. I don\'t think it\'s worth the tradeoff, hence this commit.\n    \n    Fixes bug 1068420 for very small values of \"fixes\".\n    \n    DocImpact\n    \n    Change-Id: I2bef64c2e1e4df8a612a5531a35721202deb6964\n',2,49,'SwiftStack'),(273602,869,869,'2012-11-16 13:12:58','2012-11-12 18:45:26','    Fix lazy-listing of object segments.\n    \n    When responding to a GET request for a manifest, it was intended that\n    the proxy server lazily fetch the pieces of the container\n    listing. That way, a single client request doesn\'t immediately turn\n    into a bunch of requests to backends. The additional requests should\n    only get made if the client is putting in the work of receiving the\n    object body.\n    \n    However, commit 156f27c accidentally changed this so that all the\n    pieces of the container listing are eagerly fetched up-front. Better\n    yet, if an object has more than CONTAINER_LISTING_LIMIT (default\n    10,000) segments, the container listing is then fetched a second time,\n    albeit lazily, while streaming out the response.\n    \n    This commit restores the laziness and adds tests for it.\n    \n    Change-Id: I49840a7059e6f999ce19199ecb10cdb77358526b\n',171,14,'SwiftStack'),(273604,229,229,'2012-11-20 14:16:17','2012-11-20 14:14:03','    pep8 utils.py\n    \n    Change-Id: I0466fd2a462e94e5a1e0f88adf901de9f5ac131d\n',1,1,'SwiftStack'),(273605,229,229,'2012-11-20 14:51:55','2012-11-20 14:14:16','    pep8 middleware\n    \n    Change-Id: Ieef65f05e66b12347752c0e02648858e3242d8e7\n',56,45,'SwiftStack'),(273607,869,869,'2012-11-21 11:23:15','2012-11-21 11:08:37','    Add CONTRIBUTING file.\n    \n    If the CONTRIBUTING[.md] file exists, Github will show a link to it to\n    anyone who files an issue on Github or opens a pull request on\n    Github. We don\'t want people to do that, so this file points people at\n    the OpenStack wiki page with instructions on how to contribute\n    properly. This should cut down on the number of pull requests and\n    Github issues that we then have to spend our valuable time ignoring.\n    \n    See also <https://github.com/blog/1184-contributing-guidelines>.\n    \n    Change-Id: Icd23b65c642c5ae748ca1f7f397e2c8d63173492\n',12,0,'SwiftStack'),(273608,229,229,'2012-11-20 14:21:14','2012-11-20 14:13:49','    pep8 direct client\n    \n    Change-Id: I1ed6afe4336c238044174c93ae1e0078fbcef971\n',64,63,'SwiftStack'),(273610,229,229,'2012-11-20 14:32:37','2012-11-20 14:13:34','    pep8 db.py\n    \n    Change-Id: I2ae277b6f435f56549560684697486b56d24d46d\n',35,30,'SwiftStack'),(273612,5605,5605,'2012-11-27 10:39:12','2012-11-27 10:39:12','    Replace hard-coded test accounts with user-configured values\n    \n    Change-Id: I824ba5f231e252b923abc895f757137855a93d3a\n',3,3,'SoftLayer'),(273613,229,229,'2012-11-27 09:49:56','2012-11-19 14:17:14','    added GoLang binding and CDMI to associated projects\n    \n    Change-Id: I720a0e0e886d25eec52556e8ce93bf9c49f6b452\n',2,0,'SwiftStack'),(273615,869,869,'2012-11-26 18:15:21','2012-11-26 18:15:21','    Upgrade pep8 to 1.3.3.\n    \n    This required a bunch of whitespace-poking of the scripts in bin, but\n    that\'s all. Now every file in swift/ and bin/ is pep8-1.3.3-compliant,\n    so hopefully we can be done with this pep8 stuff for a good long time.\n    \n    Change-Id: I44fdb41d219c57400a4c396ab7eb0ffa9dcd8db8\n',80,73,'SwiftStack'),(273617,26,26,'2012-11-28 00:08:26','2012-11-28 00:08:26','    Fix bug with swob.Request.path_info_pop\n    \n    path_info_pop didn\'t behave as the webob one did with single segment\n    paths like /one and with root-only paths /\n    \n    Now it should.\n    \n    Change-Id: Ib88344de386ab9e8975e7f48c1afc47731992ee2\n',15,1,'Rackspace'),(273619,5606,5606,'2012-11-19 23:09:17','2012-11-16 18:51:22','    Fix for container sync not syncing last rowid\n    \n    Bug 1079439\n    \n    Change-Id: I1985a7176f34931ecb0f24c0289f18df5e934598\n',3,3,'HP'),(273621,132,132,'2012-11-28 16:08:05','2012-11-28 16:08:05','    Updates to use new keystoneclient middleware.\n    \n    Updates the proxy-server.conf-sample and docs to use\n    the new Keystoneclient middleware class name.\n    \n    Change-Id: I3727f7b7328a2513347b8ef257c270126df36d7b\n',2,2,'Red Hat'),(273623,26,26,'2012-11-30 21:31:21','2012-11-30 21:31:21','    Swob bugfixes; for ? in names specifically\n    \n    It was discovered that uploading items with ? in their names (encoded\n    with %3F of course) made Swob fail in that it trimmed off everything\n    after the ? as if it were a query string.\n    \n    Change-Id: Ie686db9a2177aafad2e77c307ffc3f446646fbb5\n',9,2,'Rackspace'),(273624,869,869,'2012-11-21 14:59:26','2012-11-21 14:57:21','    Improve container-sync docs.\n    \n    Two improvements: first, document that the container-sync process\n    connects to the remote cluster\'s proxy server, so outbound\n    connectivity is required.\n    \n    Second, rewrite the behind-the-scenes container-sync example and add\n    some ASCII-art diagrams.\n    \n    Fixes bug 1068430.\n    \n    Bonus fix of docstring in wsgi.py to squelch a sphinx warning.\n    \n    Change-Id: I85bd56c2bd14431e13f7c57a43852777f14014fb\n',86,37,'SwiftStack'),(273626,26,26,'2012-11-29 22:18:18','2012-11-28 16:33:24','    Added --top option to swift-recon -d\n    \n    When showing the disk usage dispersion graph it is often useful to\n    know what those top full drives are so you can do further research.\n    Now you can run \'swift-recon -d --top 10\' to list the top ten devices\n    by fullness after the usual dispersion graph.\n    \n    Change-Id: I7ddb2141e55e0613f69750fabe544940192c2d48\n',19,2,'Rackspace'),(273628,5596,5596,'2012-12-03 11:42:37','2012-11-29 13:29:00','    406 if we can\'t satisfy Accept\n    \n    The container and account servers should respond with 406 if the Accept header\n    isn\'t satisfiable.  This behavior is defined in RFC 2616 section 14.1.\n    \n    Change-Id: I8a67ccafe33dc70ef4f7794686a54fbc8581f4dc\n',74,71,'Rackspace'),(273630,826,826,'2012-12-04 11:17:38','2012-12-04 11:17:38','    Ignore pycscope files\n    \n    Change-Id: I5fe38f28896d086e56ba9e718b02227d87dd4a2d\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',1,0,'Red Hat'),(273631,4056,4056,'2012-12-04 09:14:27','2012-12-03 16:05:44','    Allow optional, temporary healthcheck failure.\n    \n    A deployer may want to remove a Swift node from a load balancer for\n    maintenance or upgrade.  This patch provides an optional mechanism for\n    this.  The healthcheck filter config can specify \"disable_path\" which is\n    a filesystem path.  If a file is present at that location, the\n    healthcheck middleware returns a 503 with a body of \"DISABLED BY FILE\".\n    \n    So a deployer can configure \"disable_path\" and then touch that\n    filesystem path, wait for the proxy to be removed from the load balancer\n    pool, perform maintenance/upgrade, and then remove the \"disable_path\"\n    file.\n    \n    Also cleaned up the conf file man pages a bit.\n    \n    Change-Id: I1759c78c74910a54c720f298d4d8e6fa57a4dab4\n',485,357,'SwiftStack'),(273633,232,232,'2012-12-04 12:13:27','2012-11-30 16:08:17','    drop_privileges should also set HOME\n    \n    E.g. if HOME is not set, swift-proxy will create the\n    keystone_signing file not in HOME but in /root.\n    This is because the swift user doesn\'t have a shell\n    in /etc/passwd and so it doesn\'t set environment variables\n    when impersonating.\n    \n    Change-Id: I3013007e0dadf6ddccc176e142b7c78c5d63a351\n',3,0,'Mirantis'),(273635,2400,2400,'2012-11-30 13:53:00','2012-11-30 11:58:36','    bp/cross-tenant-acls: allow tenantId:user, tenantName:user, and *:user ALCs\n    \n    Change-Id: I7cfe77b3f03172814814f2e2bae04a3ae184efb0\n',49,11,'SUSE'),(273637,5250,5250,'2012-12-09 18:20:08','2012-12-03 16:12:10','    Add dispersion report flags to limit reports\n    \n    - Add two optional flags that let you limit swift-dispersion-report to only\n    reporting on containers OR objects.\n    - Also make dispersion.conf and swift-dispersion-report manpages\n      current.\n    \n    DocImpact\n    \n    Change-Id: Iad56133cad261241db27d0e2103098e3c2f3c245\n',57,11,'Rackspace'),(273639,4116,4116,'2012-12-07 14:47:08','2012-11-26 12:39:46','    Add config of server start timeouts for probetests\n    \n    Currently the timeout for a wsgi server successfully binding to a port\n    and for a probetest background service to finish starting are hard coded\n    to 30 seconds.  While a reasonable default for most configurations, a\n    small virtualized environment may need a little more time in order for\n    probe tests to complete successfully.\n    \n    This patch adds a \'bind_timeout\' option to the DEFAULT section of the\n    main wsgi servers\' config.  Also a new [probe_test] section and\n    \'check_server_timeout\' option to test.conf\n    \n    DocImpact\n    \n    Change-Id: Ibcaff153c7633bbf32e460fd9dbf04932eddb56f\n',27,8,'independent'),(273641,4116,4116,'2012-12-06 22:34:28','2012-11-26 12:28:33','    capture resetswift output in probetests\n    \n    This change makes the dots prettier during probetests\n    \n    When calling the resetswift script, the probetests will use subprocess\n    to redirect stderr to stdout and capture stdout into a buffer.  We print\n    the captured buffer from resetswift\'s combined stdout/stderr and let\n    nosetests stdout capturing handle printing the output for debug only if a\n    test fails.\n    \n    Change-Id: I022512f2ef5a4c43b0e49264bad1bca98c1f0299\n',4,2,'independent'),(273643,4533,4533,'2012-12-10 10:22:09','2012-12-06 15:09:53','    Add config option to turn eventlet debug on/off\n    \n    By default, this will be turned off.  This will cause eventlet to not\n    print stack traces to stderr which can be very annoying on production\n    systems.  It is still recommended to turn it on for development or\n    debuging purposes.\n    \n    DocImpact\n    Change-Id: I5e5b902d3d9ed85f784549e53f2ee2fc87cbe2e5\n',31,0,'Rackspace'),(273645,4116,4116,'2012-12-07 14:08:49','2012-11-26 09:58:09','    Allow dot test runners from any dir\n    \n    Currently the .*test files in the source tree root seem to assume you\'re\n    in that directory when you run them.  This change should work exactly\n    the same except for removing that restriction.\n    \n    Change-Id: I9b037016490dd6d5b515cb2c3cad2f99ee40bb6d\n',7,5,'independent'),(273647,4056,4056,'2012-12-11 15:32:09','2012-12-11 15:32:09','    Avoid infinite recursion in swift.obj.replicator.get_hashes.\n    \n    Fixes bug 1089140.\n    \n    Turns out that if an exception bails out of the pickle loading (eg.\n    zero-byte hahes_file), the if clause to determine whether or not to\n    write out a fresh hashes_file can evaluate to false, leading to an\n    infinite loop.\n    \n    This patch fixes this infinite loop generally, by ensuring that if any\n    exception is thrown, a new hashes_file is written.\n    \n    Change-Id: I344c5f8e261ce7c667bdafe1687263a4150b21dc\n',23,1,'SwiftStack'),(273648,657,657,'2012-12-13 11:13:50','2012-12-03 14:14:02','    Add a license header to functionalnosetests\n    \n    Change-Id: I413d8bb9cbdea1f67ab2649ab0cc4a05a7a65883\n',60,0,'SUSE'),(273649,4075,4116,'2012-12-14 10:03:04','2012-12-09 09:00:34','    document correct config in dispersion-report help\n    \n    The --help message of swift-dispersion-report used to say\n    /etc/swift/stats.conf instead of the correct and consistent\n    /etc/swift/dispersion.conf - this change updates that\n    commandline help message.\n    \n    Change-Id: I69ad64d31bb86eb0d36fcf5b17aa8bf42f646ed1\n',4,3,'independent'),(273652,4533,4533,'2012-12-12 17:31:04','2012-12-12 16:24:52','    Fix needed for keystone middleware logging\n    \n    This is required for a fix in keystone middleware to log to the proxy\n    logs.  Since the keystone middleware doesn\'t initialize the log with\n    swift.commong.utils.config_logger, it doesn\'t have the server and\n    transaction id setup.  This is required to fix bug #1089664\n    \n    Change-Id: Icbb44076495a4d56065445c7a4d972ebede5d1e0\n',5,0,'Rackspace'),(273654,4064,4064,'2012-12-17 09:45:46','2012-12-17 09:45:46','    one dot, 5% increase in coverage\n    \n    Change-Id: I1a2d603be983aa3291d22f7258437ee264e6c559\n',2,2,'Rackspace'),(273655,26,26,'2012-12-17 23:09:07','2012-12-17 23:06:22','    Added override for swift-init\'s KILL_WAIT\n    \n    You can now give swift-init a -k N (or --kill-wait N) option to\n    override the default 15 second wait for a process to die after\n    sending it the die signal. This is useful for boxes that are awfully\n    slow for whatever reason.\n    \n    DocImpact\n    \n    Change-Id: I328ec254f6e0ee1cd423c1d062ba4c5331bd8337\n',10,4,'Rackspace'),(273656,26,26,'2012-12-18 01:18:57','2012-12-18 01:18:57','    Made 507s report drive, if known.\n    \n    This functionality was lost with the swob change, but is back now.\n    \n    Change-Id: I13b3154080a7c601235711b274e4899efb6adc93\n',18,1,'Rackspace'),(273658,65,65,'2012-12-12 11:18:45','2012-12-04 12:38:26','    Use install_requires in setup.py\n    \n    Using install_requires makes sure that if some code is using Swift internal\n    and wants to require Swift, all its dependencies have been already pulled.\n    This is really useful on test automation for example, otherwise, code might\n    be failing because on of the module listed in pip-requires is not instaled.\n    \n    Also, we change the pip-requires files to use >= rather than ==, so the\n    requirements are easily fulfiled with distribution provided packages.\n    \n    Change-Id: I65814bcd8ce798da21a5c17b4d5916a23f59e962\n    Signed-off-by: Julien Danjou <julien@danjou.info>\n',11,7,'Red Hat'),(273660,1807,1807,'2012-12-18 17:30:10','2012-12-18 17:29:16','    Refactor Ring::get_nodes() and Ring::get_part_nodes()\n    \n    Add a _get_part_nodes() method in Ring class, then call it in Ring::get_nodes() and Ring::get_part_nodes().\n    \n    In order to reduce duplicate codes.\n    \n    Change-Id: Id92f8dfd08388305638a2ba2ab64e77545c14cba\n',7,6,'99cloud'),(273662,132,132,'2012-12-19 12:48:27','2012-12-19 12:48:27','    Convert LICENSE to use unix style line endings.\n    \n    Ran dos2unix on LICENSE to convert to unit style line endings.\n    This makes building packages which contain the LICENSE file\n    a bit nicer... and matches other LICENSE files under the openstack\n    umbrella which have unix style line endings as well.\n    \n    Change-Id: Id724d1ba402a590725a2d200f5e0599bce696e5a\n',202,202,'Red Hat'),(273663,5596,5596,'2012-12-19 14:10:07','2012-12-19 14:10:07','    suggest fallocate instead of dd in saio\n    \n    Change-Id: I4d5ba8e58216749c2858dc1c0b8225b3619a7287\n',2,2,'Rackspace'),(273664,4533,4533,'2012-12-19 17:54:06','2012-12-19 17:54:06','    Fixes console logging with non-swift middleware\n    \n    Fixes logging if logging to the console with non-swift middleware (such\n    as keystone) enabled.  This also fixes issues with swift in devstack\n    \n    Change-Id: Ib8b691b62b657a6d4ecdb1648d1fc2f3a0479982\n',4,3,'Rackspace'),(273666,5596,5596,'2012-12-20 13:35:45','2012-12-20 13:35:19','    Revert \"suggest fallocate instead of dd in saio\"\n    \n    Change-Id: I3742c4580d920e09de434e86b75b134c62f1732e\n',2,2,'Rackspace'),(273668,65,65,'2012-12-20 15:46:28','2012-12-20 15:39:08','    Move InputProxy to utils\n    \n    This class is being used at least by Ceilometer in its Swift middleware, and\n    since it\'s a general one anyway, it looks good to move it to common.utils.\n    \n    This is a follow-up to Chmouel suggestion in\n    https://review.openstack.org/#/c/18231\n    \n    Change-Id: I8d0ed8600c4152b91be9a88a3b396c3967d0add2\n    Signed-off-by: Julien Danjou <julien@danjou.info>\n',42,41,'Red Hat'),(273670,26,26,'2012-12-21 19:40:49','2012-12-21 19:24:16','    Fix for subtle bug from 5c8f9c52e3f2944f01cea621326532e058a225f7\n    \n    Change-Id: If2bd1d4a850936b2e575a96073c116a8b9522602\n',23,4,'Rackspace'),(273672,5596,5596,'2012-12-20 20:12:50','2012-12-20 20:10:07','    saio truncate instead of dd (for reals)\n    \n    Changing that complex dd to a functionally equivalent truncate that\'s easier\n    to read and modify.\n    \n    DocImpact\n    \n    Change-Id: I64404318364608e62a1d80f6a0550271eb4cd03a\n',2,2,'Rackspace'),(273674,229,229,'2013-01-03 08:59:46','2012-12-26 13:41:46','    Functional tests use x-auth-token rather than x-storage-token\n    \n    This change allows other auth systems to test against the functests but not\n    require them to support x-storage-token (which was deprecated before swift\n    was even open-sourced). All other places in the code where x-storage-token is\n    used is only to populate x-auth-token if x-auth-token doesn\'t already exist.\n    \n    Change-Id: Ie903d0f7135fc643353b74a61c14becf7dfc4d9d\n',1,1,'SwiftStack'),(273675,259,259,'2013-01-03 18:41:02','2013-01-02 12:20:02','    Check whether poll is available or not and let eventlet chose the best\n    hub when it isn\'t.\n    \n    Change-Id: I5fb05a71e8c62d84cee1da9ea05f67ffbad18b9d\n',30,4,'independent'),(273677,4064,4064,'2013-01-04 13:48:15','2013-01-04 11:09:29','    Allow actual paths to work for swift-get-nodes\n    \n    Change-Id: I29f9ab73c8ca2a3c52247fb92ef951dd5b5246cb\n',7,0,'Rackspace'),(273679,26,26,'2013-01-10 23:07:02','2013-01-10 23:07:02','    Fixed version req for netifaces to 0.5\n    \n    Change-Id: Ic1c67ced0169658c9aa7f78ed09bf24863cc9fb6\n',1,1,'Rackspace'),(273680,26,26,'2013-01-12 06:54:17','2013-01-12 06:54:17','    Reject names with NULL characters\n    \n    Unfortunately, SQLite truncates strings with null characters.\n    Additionally, XML pretty much hates them too.\n    \n    Change-Id: Id9a8eaa27b841db6350d6959c202d3e3d6462b35\n',43,12,'Rackspace'),(273682,26,26,'2013-01-12 05:49:14','2013-01-12 04:30:16','    swift-recon: Added oldest and most recent repl\n    \n    I\'ve been doing this with cluster-wide log searches for far too long.\n    This adds support for reporting the oldest replication pass\n    completion as well as the most recent. This is quite useful for\n    finding those odd replicators that have hung up for some reason and\n    need intervention.\n    \n    Change-Id: I7fd7260eca162d6b085f3e82aaa3cf90670f2d53\n',105,15,'Rackspace'),(273684,5607,5607,'2013-01-14 18:38:49','2013-01-10 16:46:48','    Make object-auditor to use one logger\n    \n    This commit makes that AuditorWorker gets a logger from ObjectAuditor class\n    (instead of creating new one) so the auditor uses minimum unix-sockets.\n    \n    Fixes: bug #1089215\n    Change-Id: Ia47d862cbe7505db821784b01fcce6f22196e79f\n',10,10,'KT Corporation'),(273686,211,211,'2013-01-12 23:37:25','2013-01-12 23:37:25','    Add container-sync to container-server.conf doc.\n    \n    - In howto install multi nodes container-sync was not included in the\n      config example.\n    \n    Change-Id: I2682d47c5cae28ff321ba03d70dae2fea00c276f\n',2,0,'eNovance'),(273688,4056,4056,'2013-01-13 23:34:20','2013-01-13 23:26:33','    Some optimizations for ring rebalancing.\n    \n    For a part-power 18 ring with a small number of devices (12), this drops\n    \"swift-ring-builder ... rebalance\" from ~7.2 seconds to ~3.6s on OS X\n    with Python 2.7 (2.7 GHz i7 processor).\n    \n    Under the profiler, that part-power 18 rebalance now spends only\n    slightly more time rebalancing the ring than it does writing out the\n    results.\n    \n    I haven\'t done more extensive before/after comparison with larger\n    numbers of devices and larger part-power values...\n    \n    Change-Id: I25735bc71da2f11617cc436d4f8e0c4f3f82bfec\n',35,10,'SwiftStack'),(273690,4117,4117,'2013-01-09 09:58:36','2013-01-09 09:58:36','    consistency and grammatical tweaks\n    \n    Change-Id: I0a1dc9e07f246db3e294f5c62f4ffbd3560b0afd\n',6,5,'Rackspace'),(273692,26,26,'2013-01-12 07:25:15','2013-01-12 07:25:15','    Fixed bug in object replicator\n    \n    If the object replicator couldn\'t create a device\'s object directory\n    (due to permissions or whatever) it wouldn\'t do any work at all. This\n    fixes that.\n    \n    Change-Id: I6a30439d036b29c9cfdb660428d13668e0dc8632\n',26,1,'Rackspace'),(273694,4064,4064,'2013-01-14 13:57:16','2012-12-20 14:53:29','    swob refactors needed for sos\n    \n    Change-Id: I839c2af9e524f712e6fbeb8bf74d860af1d243e2\n',41,27,'Rackspace'),(273696,4056,4056,'2013-01-10 13:15:31','2013-01-10 13:08:22','    Fix HEAD request response when request not given to response.\n    \n    If a middleware (swift3, I\'m looking at you), doesn\'t pass a Request\n    object into the Response constructor, Response._response_iter cannot\n    know to send zero bytes in the body of the HEAD response.\n    \n    This patch fixes this usage of swob by making Response.__call__\n    helpfully reify self.request from env if it wasn\'t already set by the\n    Response object\'s constructor.\n    \n    This fixes a bug in swift3 + swob-enabled-Swift where HEAD requests to\n    swift3 resulted in a response with a body in violation of the relevant\n    RFC and confusing clients.\n    \n    Thanks to kostecky for finding the bug and describing it accurately.\n    \n    Change-Id: I2bdb098052b161e1cddf1e4e482ab4dfafeb18c0\n',20,0,'SwiftStack'),(273698,4064,4064,'2013-01-16 10:00:18','2013-01-16 10:00:18','    get swob.Request.blank to parse path\n    \n    Change-Id: I3327c915b3b868bb1829103adb718632e58b1b4a\n',35,11,'Rackspace'),(273700,229,229,'2013-01-18 08:42:47','2013-01-14 21:41:11','    authors and changelog update for swift 1.7.6\n    \n    Change-Id: Iad00e51fb17c9e829bd5ba7b56a0d24253cfe8b2\n',54,1,'SwiftStack'),(273701,239,239,'2013-01-22 14:28:29','2013-01-22 14:28:29','    Final Swift 1.7.6 versioning\n    \n    Mark FINAL=True as we release Swift 1.7.6. Should not be approved\n    until 1.7.6 is cleared for release by its PTL !\n    \n    Change-Id: Icd002d96b76c13a4744f39990e614e5cf08afff2\n',1,1,'OpenStack Foundation'),(273702,229,229,'2013-01-18 08:47:16','2013-01-18 08:47:16','    version bump to 1.7.7-dev\n    \n    I expect the next release to actually be 1.8, but to prevent issues\n    if we decide to release 1.7.7, I\'m only moving the rev number.\n    \n    Change-Id: Ia9e05c5f036b8fbf67972470f240e84f7595223a\n',1,1,'SwiftStack'),(273704,40,40,'2013-01-21 18:12:17','2013-01-10 15:08:10','    Add --run-dir switch to swift-init\n    \n    - Add ability to specify an alternative run_dir than the default\n      /var/run/swift.\n    - DocImpact\n    \n    Change-Id: I17677588f2c8da563b7fec2dc4fdc52da87126ed\n',78,43,'eNovance'),(273706,869,869,'2013-01-21 15:38:31','2013-01-21 15:38:31','    Fix superfluous GET requests in swift-bench.\n    \n    If you specified num_gets = 0 for a benchmarking run (say, if you\'re\n    benchmarking PUT rate), you\'d still get each swift-bench-client\n    process doing 1 GET request. Now you don\'t.\n    \n    This should also fix the case where you\'ve got more objects than\n    swift-bench-client processes, for example when you\'re uploading a few\n    large objects and then doing lots of parallel GETs of those\n    objects. Now you\'ll get the number requested, not\n    max(number-requested, number-of-bench-clients).\n    \n    Change-Id: Ied9eb733dd9af51a3c6af8b815ad6cff0ff746b7\n',7,3,'SwiftStack'),(273707,5599,5599,'2013-01-21 20:50:46','2013-01-05 23:56:59','    prevent irregular auth_prefix config in tempauth\n    \n    Tempauth handles a authorization request by request path.\n    If a request\'s path start with auth_prefix, tempauth middleware\n    handles that request to authorization method.\n    Therefore, when configuring auth_prefix to \'/\', all requests\n    handle to authorization method.\n    \n    This change enables tempauth to prevent invalid auth_prefix\n    config \'/\' and similar empty auth_prefix in initialization method.\n    \n    Fixes bug #1096538.\n    \n    Change-Id: I20b157e2a0809c17409fc65a8eff0858fe4aff29\n',6,1,'NTT'),(273709,869,869,'2013-01-22 18:56:48','2013-01-22 18:56:48','    Validate numericness of ports in builder files.\n    \n    You can\'t really goof this up using bin/swift-ring-builder, but if you\n    have code that uses swift.common.ring.RingBuilder directly, you can\n    stuff e.g. \"6002\" in where you mean 6002, resulting in some fairly\n    baffling failures. (Yes, I have done this.)\n    \n    Change-Id: I87b7b7066b9ea2ce6f82255605da99cf0d283689\n',12,1,'SwiftStack'),(273710,229,229,'2013-01-22 15:24:06','2013-01-22 15:24:06','    Update auto-generated docs\n    \n    Removed sidebar with broken (static) links referencing out-of-date docs.\n    \n    Added an external link to the Swift API docs\n    \n    fixes bug #1025099\n    \n    Change-Id: I7f3106175b84b1063f74aa6c5693ab1e422cdb59\n',3,4,'SwiftStack'),(273712,869,869,'2013-01-22 18:41:08','2013-01-22 18:41:08','    Add more command-line options to swift-bench.\n    \n    These settings:\n      1. are already exposed via config file\n      2. were not exposed as command-line options, and\n      3. are things I wanted on the command line while benchmarking recently.\n    \n    I didn\'t include short options for --(get|put|delete)-concurrency\n    since I couldn\'t think of good single-letter ones, and optparse won\'t\n    take \"-gc\", \"-pc\", or \"-dc\".\n    \n    Change-Id: I0bd7c7ae2892244eed37b8c10c9357dc7e1190d3\n',11,1,'SwiftStack'),(273714,4740,4740,'2013-01-23 19:31:18','2013-01-15 19:31:42','    Add handler for CORS \"actual requests\"\n    \n    Fix for bug 1095130\n    \n    * Added a wrapper function around public methods to handle\n      CORS actual requests. These requests need to return some\n      extra headers to be valid responses to a CORS request.\n      Access-Control-Expose-Headers and Access-Control-Allow-Origin.\n    \n    * Added support for the CORS header Access-Control-Expose-Headers.\n    \n    * Some refactoring of the OPTIONS method so the\n      \"is_origin_allowed\" logic can be reused.\n    \n    * Added a little extra detail to the CORS documentation.\n    \n    DocImpact\n    \n    Change-Id: I68538e472a900775427f21a8a59e738a83dcc8bc\n',447,64,'NEC'),(273716,869,869,'2013-01-14 12:38:46','2012-12-12 17:47:04','    Allow for multiple X-(Account|Container)-* headers.\n    \n    When the number of account/container or container/object replicas are\n    different, Swift had a few misbehaviors. This commit fixes them.\n    \n    * On an object PUT/POST/DELETE, if there were 3 object replicas and\n      only 2 container replicas, then only 2 requests would be made to\n      object servers. Now, 3 requests will be made, but the third won\'t\n      have any X-Container-* headers in it.\n    \n    * On an object PUT/POST/DELETE, if there were 3 object replicas and 4\n      container replicas, then only 3/4 container servers would receive\n      immediate updates; the fourth would be ignored. Now one of the\n      object servers will receive multiple (comma-separated) values in the\n      X-Container-* headers and it will attempt to contact both of them.\n    \n      One side effect is that multiple async_pendings may be written for\n      updates to the same object. They\'ll have differing timestamps,\n      though, so all but the newest will be deleted unread. To trigger\n      this behavior, you have to have more container replicas than object\n      replicas, 2 or more of the container servers must be down, and the\n      headers sent to one object server must reference 2 or more down\n      container servers; it\'s unlikely enough and the consequences are so\n      minor that it didn\'t seem worth fixing.\n    \n    The situation with account/containers is analogous, only without the\n    async_pendings.\n    \n    Change-Id: I98bc2de93fb6b2346d6de1d764213d7563653e8d\n',713,82,'SwiftStack'),(273718,4064,4064,'2013-01-24 12:34:56','2013-01-24 12:34:56','    Bulk Requests: auto extract archive and bulk delete middleware.\n    \n    Fix small problem in ratelimiting middleware.\n    \n    DocImpact\n    \n    Change-Id: Ide3e0b9f4887626c30cae0b97eb7e2237b1df3ed\n',1020,6,'Rackspace'),(273719,5250,5250,'2013-01-25 08:00:33','2013-01-25 08:00:33','    Add optional locking to swift-ring-builder\n    \n    If invoked as \'swift-ring-builder-safe\' the directory containing the builder\n    file provided will be locked (via lock_parent_directory()). This provides a\n    small safe guard against multiple instances of the swift-ring-builder (or\n    other utilities that observe this lock) from attempting to write to or read\n    the builder/ring files while operations are in progress.\n    \n    This is particularly useful in environments where ring management has been\n    automated (via Chef or custom solutions) but the operator still occasionally\n    needs to manually interact with the ring.\n    \n    DocImpact\n    \n    Change-Id: Ia362744a8151a91bfb586d01da582906726852e6\n',27,3,'Rackspace'),(273720,5608,5608,'2013-01-28 10:20:31','2013-01-26 13:11:06','    Handle access_log_headers in proxy_logging\n    \n     * in etc/proxy-server.conf-sample, there is an access_log_headers directive in proxy_logging middleware.\n       but current code doesn\'t handle it. This patch enables proxy_logging to handle access_log_headers.\n    \n    Change-Id: I03337ccc4f48625af3f578ed543da992d3eec2bd\n',3,1,'independent'),(273722,40,40,'2013-01-24 12:36:35','2013-01-18 12:21:23','    Fix keystoneauth with OPTIONS headers (eg: CORS)\n    \n    - Fixes bug 1101143.\n    \n    Change-Id: I2a82269e4aed2c8926e0aa736c38120784e25de2\n',24,1,'eNovance'),(273724,5596,5596,'2013-01-25 00:38:32','2013-01-24 15:21:41','    Add wsgify and split_path utilities to swob\n    \n    And refactor some of the code to use them.\n    \n    Remove unused imports.\n    \n    Change-Id: Ica479c10247fa85c740bb99cf7d1db7fbb1b2c80\n',147,58,'Rackspace'),(273726,5609,5609,'2013-01-29 20:07:26','2013-01-25 02:11:19','    Added fallocate_reserve option\n    \n    Some systems behave badly when they completely run out of space. To\n    alleviate this problem, you can set the fallocate_reserve conf value\n    to a number of bytes to \"reserve\" on each disk. When the disk free\n    space falls at or below this amount, fallocate calls will fail, even\n    if the underlying OS fallocate call would succeed. For example, a\n    fallocate_reserve of 5368709120 (5G) would make all fallocate calls\n    fail, even for zero-byte files, when the disk free space falls under\n    5G.\n    \n    The default fallocate_reserve is 0, meaning \"no reserve\", and so the\n    software behaves exactly as it always has unless you set this conf\n    value to something non-zero.\n    \n    Also fixed ring builder\'s search_devs doc bugs.\n    \n    Related: To get rsync to do the same, see\n    https://github.com/rackspace/cloudfiles-rsync\n    Specifically, see this patch:\n    https://github.com/rackspace/cloudfiles-rsync/blob/master/debian/patches/limit-fs-fullness.diff\n    \n    DocImpact\n    \n    Change-Id: I8db176ae0ca5b41c9bcfeb7cb8abb31c2e614527\n',218,20,'Rackspace'),(273728,5609,5609,'2013-01-31 18:30:10','2013-01-31 18:13:19','    Remove tempauth allowed_sync_hosts conf option\n    \n    Seems we missed these references when committing\n    357b12dc2ba7b19c66196a573ccb2489d2104b93\n    \n    DocImpact\n    \n    Change-Id: Ia226ce1d63e52769bc067d50ec4704cea4e11c5c\n',0,5,'Rackspace'),(273729,1,1,'2013-02-01 07:50:17','2013-01-30 16:33:28','    Cleanup based on pyflakes.\n    \n    pyflakes itself can\'t be used in any automated gating way, because there are\n    two sets of false errors it raises. However, as an exercise, cleaning up the\n    \'valid\' ones uncovered three actual bugs. The other changes (mostly unused\n    variables) are included here for fun.\n    \n    Command run: pyflakes swift | grep -v \"undefined name \'_\'\"\n    \n    Change-Id: I18696bf047dedad1a9fdbde3463e214fba95f7c6\n',74,89,'HP'),(273731,4104,4104,'2013-01-29 17:08:20','2013-01-29 16:23:46','    Allow rebalance to take a seed.\n    \n    Passing a seed into rebalance makes the rebalance deterministic\n    which allows us to generate identical rings across disparate\n    nodes without having to copy the ring files around.\n    \n    Change-Id: Ie5ae46ac030e61284bc501fdef9d77eeb5243afd\n',51,8,'Piston Cloud Computing, Inc.'),(273733,869,869,'2013-01-31 16:55:10','2013-01-31 15:12:09','    Deterministic, repeatable serialization for rings.\n    \n    The (account|container|object).ring.gz files contain, among other\n    things, a JSON-encoded dictionary. This change simply makes the JSON\n    serializer sort the keys of that dictionary so that two\n    Python-identical rings will result in two bytewise-identical ring\n    files. Also, to get repeatable compression, we lock down the timestamp\n    in the gzip output stream to a fixed value. (There\'s a timestamp value\n    in a gzip stream header; by default, gzip.GzipFile sticks time.time()\n    in there.)\n    \n    This only works on Python 2.7; on 2.6, the \'mtime\' argument to\n    gzip.GzipFile() is unsupported. Don\'t worry, serialization still works\n    on 2.6. It just doesn\'t always produce the same bytes for the same\n    ring.\n    \n    Change-Id: Ide446413d0aeb78536883933fd0caf440b8f54ad\n',36,2,'SwiftStack'),(273735,4056,4056,'2013-02-01 22:33:38','2013-01-15 08:32:07','    Optimize the ring builder\'s _reassign_parts() method.\n    \n    Another ring builder optimization.  Profiling revealed hotspots in many\n    calls to min() and list.sort() in _reassign_parts().  That method didn\'t\n    get exercised in my last optimization pass because that pass targeted a\n    rebalance where nothing really moved around.\n    \n    This time, I wrote a script which created a fresh ring, added a bunch of\n    devices, did the initial balance, deleted some devices, balanced, and\n    added some more back in.\n    \n    Results from homebrew Python 2.7.3 on OS X 10.8.2 Macbook Pro\n    (bare-metal):\n    \n     BEFORE:\n     Using part-power = 18, adding 600 devices, removing 100, then adding 300 more...\n     NOT Profiling to \'initial_balance.prof\'\n       wall-time delta: 131.33s\n     NOT Profiling to \'deleting_200_rebalance.prof\'\n       wall-time delta: 25.67s\n     NOT Profiling to \'first_rebalance.prof\'\n       wall-time delta: 62.00s\n    \n     AFTER:\n     Using part-power = 18, adding 600 devices, removing 100, then adding 300 more...\n     NOT Profiling to \'initial_balance.prof\'\n       wall-time delta: 28.04s\n     NOT Profiling to \'deleting_200_rebalance.prof\'\n       wall-time delta: 9.35s\n     NOT Profiling to \'first_rebalance.prof\'\n       wall-time delta: 16.41s\n    \n    The driver script I used is available here:\n    https://gist.github.com/adb982aec6f0709f1273\n    \n    Change-Id: I17e270acb12b5e4d4bbb1e34d8867dea90678961\n',84,36,'SwiftStack'),(273736,5596,5596,'2013-02-05 06:03:38','2013-01-31 21:53:47','    Basic container quotas\n    \n    Add a new middleware implementing some basic container quotas.\n    \n    Quotas are subject to several limitations: eventual consistency, the timeliness\n    of the cached container_info (60 second ttl by default), and it’s unable to\n    reject chunked transfer uploads that exceed the quota (though once the quota\n    is exceeded, new chunked transfers will be refused).\n    \n    However, they get most of the way to container quotas fairly inexpensively.\n    \n    Quotas are set by adding meta values to the container, and are validated when\n    set:\n    \n      X-Container-Meta-Quota-Bytes: Maximum size of the container, in bytes.\n      X-Container-Meta-Quota-Count: Maximum object count of the container.\n    \n    DocImpact\n    \n    Change-Id: I77cfbf6dc231a2e522bd67328e4c082424a93eee\n',317,4,'Rackspace'),(273738,998,998,'2013-02-02 09:55:33','2013-01-31 14:26:46','    Fixes \'not in\' operator usage\n    \n    Fixes bug 1110150\n    \n    Change-Id: I6c48553564b1809a7ae5de9f778d93dccbe157ae\n',5,5,'Intel'),(273740,5610,5610,'2013-01-23 09:36:37','2013-01-23 09:36:37','    Fixed bug in domain_remap and cname_lookup middleware\n    \n    If domain_remap and cname_lookup received request which has no host header,\n    then returns 500 error. This fixes that problem.\n    \n    Change-Id: Ibb457e9b4cb21181d8243858c04ce255365690da\n    Fixes: bug #1100632\n',28,2,'Kakao Corp.'),(273742,4064,4064,'2013-02-07 11:11:32','2013-02-07 11:11:32','    Change the flag set to specify bulk delete and expand archives from a HTTP\n    header to a query parameter.\n    \n    This is needed because query parameters show up in proxy logs and headers do\n    not. With this change it will be easy to determine from any log line that gets\n    created from the original request (of which there is currently none) that the\n    request was a bulk action.\n    \n    Note: This is not backwards compatible with the previous method of setting a\n    header. Because the bulk middleware has not been included in an openstack swift\n    release this should be fine.\n    \n    Change-Id: I0297fa2de9e491bf0b8c430c0781e2e12316ed4b\n',21,19,'Rackspace'),(273744,40,40,'2013-01-24 10:48:29','2013-01-24 10:46:41','    Deprecate is_admin feature.\n    \n    - This has been confusing since the beginning of keystoneauth.\n    - Do not remove the feature but just print a large warning when\n      used.\n    \n    Change-Id: I13990d7ab6760bb6479cf4f0717067522e1ef920\n',3,7,'eNovance'),(273746,760,760,'2013-01-31 16:10:37','2013-01-23 09:58:28','    Allow change the endpoint_type when use swift-dispersion tools\n    \n    Fixes bug 1102319\n    DocImpact\n    \n    Change-Id: I8fb0417ab9468e97ed01a6cb1e262630905e7f29\n',17,4,'eNovance'),(273748,5611,5611,'2013-02-09 11:11:05','2013-02-09 00:21:51','    minor development doc changes\n    \n    Reviewed development saio and guidelines while installing\n    a new dev and test node.\n    \n    Change-Id: I59238a4d43fa08a89be14f43681ad4693f1261dd\n',20,24,'IBM'),(273749,5609,5609,'2013-02-08 20:19:48','2013-02-08 20:19:48','    Fixed some swift-recon typos\n    \n    Change-Id: Ibe4b59a90b82742b70b00353d22aedd972bbeb59\n',4,4,'Rackspace'),(273751,4067,4067,'2013-02-04 19:59:38','2013-02-04 19:59:38','    Made internal client handle failed requests better\n    \n    In two places, the internal client was not doing what it should with failed requests.\n    \n    Change-Id: I49e566108fe920d85ca60fe76d24debe8ec7ffad\n',50,4,'Rackspace'),(273753,4064,4064,'2013-02-11 09:22:25','2013-02-06 10:57:17','    Use a doubled proxy-logging instead of each middleware handling it\n    differently (if at all)\n    \n    Adding a swift.source to wsgi pre_auth funcs and all middleware that makes\n    subrequests to proxy server.\n    \n    NOTE: This change will result in a change in the number of proxy logs made for\n    staticweb, formpost, tempurl, and any other middleware that performs sub\n    requests (including swauth and SOS).\n    \n    Please see docs for details.\n    \n    DocImpact\n    \n    Change-Id: I80cf2806add1c3d34054147e2515944be340455b\n',119,292,'Rackspace'),(273755,1173,1173,'2013-02-11 16:32:33','2013-01-03 10:10:26','    Replaces Copyright statements for LLC with Foundation, removes date.\n    \n    	Replaced GA code for cross-domain tracking.\n    \n    Patchset addresses reviewer\'s comments\n    and follows new guidance from Foundation:\n    http://wiki.openstack.org/Documentation/Copyright\n    \n    Adds current year to each Sphinx-built page.\n    \n    Addresses only the docs copyright attribution, not code files.\n    \n    Change-Id: Ib90fd1c92c8fafce2db821bc2b17cef1377cfc1e\n',79,56,'Rackspace'),(273757,40,40,'2013-02-11 21:44:53','2013-01-25 14:27:08','    Add generated keystone documentation to misc.rst.\n    \n    - Change a bit the formatting of the documention as well.\n    - Fix WARNING: Title underline too short. in misc.rst.\n    \n    Change-Id: I2f4e36bcb5e01e984f0af0152bc5b3b9f7e942ce\n',15,6,'eNovance'),(273759,652,652,'2013-02-12 16:39:40','2013-02-12 15:38:40','    Fix spelling mistakes\n    \n    git ls-files | misspellings -f -\n    Source: https://github.com/lyda/misspell-check\n    \n    Change-Id: I4132e6a276e44e2a8985238358533d315ee8d9c4\n',25,24,'HP'),(273760,4056,4056,'2013-01-19 15:25:27','2013-01-19 15:25:27','    Make statsd sample rate behave better.\n    \n    As Dieter pointed out in bug 1090495\n    (https://bugs.launchpad.net/swift/+bug/1090495), the volume of metrics\n    can vary wildly between StatsD metrics.\n    \n    This patch implements a partial solution by reducing the sample_rate\n    used for known high-volume metrics (operational experience will need to\n    inform this over time) and introducing a new tunable,\n    log_statsd_sample_rate_factor which is multiplied by the sample_rate for\n    every statsd stat.  This tunable can be used to reduce StatsD traffic\n    proportionally for all metrics and is intended to replace\n    log_statsd_default_sample_rate, which is left alone for\n    backward-compatibility, should anyone be using it.\n    \n    This patch also includes a drive-by fix for log_udp_port which wasn\'t\n    being converted to an int (I didn\'t verify that actually causes trouble\n    in SysLogHandler(), but it\'s definitely an improvement regardles).\n    \n    Change-Id: Id404636e3629f6431cf1c4e64a143959750a3c23\n',183,55,'SwiftStack'),(273762,2206,2206,'2013-02-13 10:01:33','2013-02-12 21:35:53','    log message in exception level when path encoding errors happen.\n    \n    Original code is kind of except-pass. This will ignore the error\n    occurs in process of encoding path. And if such error happened\n    without any information in logs, developer have to debug in a\n    long distance from error stack. That\'s wasting time, so there\n    should be a logging message here.\n    \n    Fixes: bug #1123048\n    Change-Id: I7941b524e936241fb8d62fad5ad90de3daffe5e7\n',2,2,'Huawei'),(273764,4064,4064,'2013-02-13 12:05:25','2013-02-13 12:04:21','    fix large objects with unicode\n    \n    Change-Id: I2a088e6cfe354d18cb2107a42bc626c2e7822e42\n',15,5,'Rackspace'),(273766,1125,1125,'2013-02-13 13:56:04','2013-02-13 13:54:51','    Swift MemcacheRing (set) interface is incompatible fixes\n    \n    This patch fixes the Swift MemcacheRing set and set_multi\n    interface incompatible problem with python memcache. The fix\n    added two extra named parameters to both set and set_multi\n    method. When only time or timeout parameter is present, then one\n    of the value will be used. When both time and timeout are present,\n    the time parameter will be used.\n    \n    Named parameter min_compress_len is added for pure compatibility\n    purposes. The current implementation ignores this parameter.\n    \n    To make swift memcached methods all consistent cross the board,\n    method incr and decr have also been changed to include a new\n    named parameter time.\n    \n    In future OpenStack releases, the named parameter timeout will be\n    removed, keep the named parameter timeout around for now is\n    to make sure that mismatched releases between client and server\n    will still work.\n    \n    From now on, when a call is made to set, set_multi, decr, incr\n    by using timeout parametner, a warning message will be logged to\n    indicate the deprecation of the parameter.\n    \n    Fixes: bug #1095730\n    Change-Id: I07af784a54d7d79395fc3265e74145f92f38a893\n',89,38,'IBM'),(273769,4063,4063,'2013-02-12 13:34:49','2012-11-19 13:02:34','    Change in swift-drive-audit handling log rotation.\n    \n    Change supports kern.log rotation in order to avoid loss\n    of significant information.\n    \n    There is a year change functionality added as kern.log\n    does not keep record of year.\n    \n    There is also backwards function added which allows\n    reading logs from the back to the front, speeding up the\n    execution along with the unit test for it\n    \n    Fixes Bug 1080682\n    \n    Change-Id: I93436c405aff5625396514000cab774b66022dd0\n',109,15,'HP'),(273771,42,42,'2013-02-18 10:54:27','2013-02-18 10:54:27','    Documentation fixups\n    \n    These are mostly cosmetic fixes for irritating imperfections:\n    - \"separated with commas\" was duplicated, leave just one\n    - extra whitespace here and there, man pages are not PEP8, drop\n    - weird extra commas, drop\n    - Fedora logs to /var/log/messages\n    - \"drive is has failed\", drop \"is\"\n    \n    Change-Id: I5ceba2e61b16db4855d76c92cbc83663b9b2a0da\n',9,11,'Red Hat'),(273773,4056,4056,'2013-02-13 15:58:57','2013-01-19 10:57:14','    Adds first-byte latency timings for GET requests.\n    \n    This was an oustanding TODO for StatsD Swift metrics.  A new timing\n    metric is tracked for (only) GET requests for accounts, containers,\n    and objects:\n    \n      proxy-server.<req_type>.GET.<status_int>.first-byte.timing\n    \n    Also updated StatsD documentation in the Admin Guide to clarify that\n    timing metrics are sent in units of milliseconds.\n    \n    Change-Id: I5bb781c06cefcb5280f4fb1112a526c029fe0c20\n',211,72,'SwiftStack'),(273775,869,869,'2013-02-25 14:48:06','2013-02-25 14:48:06','    Fix descriptions in sample configs.\n    \n    Change-Id: I7aca3c6cafd9391031f7a10cc233f99e81ee0393\n',3,3,'SwiftStack'),(273776,4059,4059,'2013-02-20 13:54:59','2013-02-19 13:14:32','    Adding speed limit options for DB auditor\n    \n    Fix bug 1129760\n    \n    Without speed limit, DB auditor will likely consume high CPU% on\n    storage node. That will highly impact the cluster\'s performance.\n    \n    This patch adds two options for account/container auditor:\n     - containers_per_second: Maximum containers audited per second\n     - accounts_per_second: Maximum accounts audited per second\n    \n    DocImpact\n    \n    Change-Id: I9faa506438185a83ca77db4906969328624d015f\n',32,10,'Intel'),(273778,40,40,'2013-02-16 23:32:27','2013-02-08 11:48:26','    Account and container info fixes and improvement.\n    \n    - Fixes bug 1119282.\n    - Allow middleware accessing metadata of an account without having to\n      store it separately in a new memcache namespace.\n    - Add tests for get_container_info that was previously missed.\n    - Add get_account_info method based on get_container_info, a function\n      for other middleware to query accounts.\n    - Rename container_info[\'count\'] as container_info[\'object_count\'].\n    \n    Change-Id: I43787916c7a812cb08d278edf45370521f12c912\n',197,21,'eNovance'),(273780,5612,5612,'2013-02-26 21:42:06','2013-02-18 18:49:23','    Account Server: Refactor HEAD request handler\n    \n    Deleted unused container checks. As method\n    swift::common::db::AccountBroker::get_container_timestamp becomes\n    unused, it is deleted too, along with the corresponding tests.\n    \n    Change-Id: I61de4549b0abd7103226d6a13f1d9844abaa92d3\n',3,51,'independent'),(273782,2206,2206,'2013-02-24 20:04:30','2013-02-24 19:52:15','    Improve bin/swift-account-audit\n    \n    1.Correct the usage of initializing a Ring object.\n    2.Fix typo.\n    3.Align lines of print_status part. (keep origin author mind)\n    \n    note: Adam Kijak has commited it at early time, but didn\'t put it\n          in Gerrit. I import his commit and send it in right Workflow.\n    \n    Fixes: bug #1131901\n    \n    Change-Id: If56316cc424045f7df662d60088382f7fd40e8b1\n',8,9,'Huawei'),(273784,2206,2206,'2013-02-25 23:08:55','2013-02-25 22:52:39','    Correct docstring for swift.common.ring.utils.build_tier_tree and add\n    unit test for it.\n    \n    Some mistakes is in original docstring of that method. There\'s no unit\n    test for two methods in swift.common.ring.utils.\n    \n    Fixes: bug #1070621\n    \n    Change-Id: I6f4f211ea67d7fb8ccfe659f30bb0f5d394aca6b\n',86,8,'Huawei'),(273786,229,229,'2013-02-19 10:25:25','2013-02-07 22:07:18','    timing-based affinity sorting for primary replicas\n    \n    This changes the way primary replicas can be sorted on GET requests.\n    Previously, replicas were shuffled. Now, if configured, the replicas\n    are sorted based on the most recent connection time data to that node.\n    This patch adds a config value that changes the sorting method.\n    \n    get_more_nodes() (ie handoffs) is unaffected by this patch because\n    sorting by affinity would break the durability provided by the current\n    as-unique-as-possible handoff selection.\n    \n    Timing data is collected for each node each time the proxy makes a\n    connection to that node (IP address). If timing data for a node doesn\'t\n    exist, then it is assumed at -1 (ie will sort earlier) so that timing\n    data can be collected for that node.\n    \n    Change-Id: I837fa21c3a566b10cce33eb75788665e1d01cd8a\n',100,20,'SwiftStack'),(273788,2206,2206,'2013-02-27 01:43:43','2013-02-19 14:05:58','    Add debug level logs for TempAuth.authorize.\n    \n    The function authorize in tempauth.py and keysthoneauth.py is very\n    important and frequently called in swift. But authorize in tempauth\n    seems hard to debug with nearly no logs here.\n    \n    Change-Id: I3300a5a8d02743ff76e2ff86c51338ca24ddddcb\n    Fixes: bug #1129769\n',27,0,'Huawei'),(273790,40,40,'2013-02-21 22:58:27','2013-02-21 22:58:27','    Add cache=swift.cache for authtoken example.\n    \n    - Things swill go badly with swift if we leave the default to authtoken\n      to use its own memcache cache connection based python-memcache c based\n      binding.\n    \n    Change-Id: I293b875acdcb06e5a7a0cfa9a9bb5d7678675da0\n',2,0,'eNovance'),(273792,42,42,'2013-02-26 12:41:27','2013-02-26 12:41:27','    Move the swift.1 manpage to python-swiftclient\n    \n    When someone split away python-swiftclient, he left behind the\n    client manpage.\n    \n    Apparently all we need now is to delete it from swift and\n    add it to python-swiftclient. Except that of course the releases\n    have to be synchronized somehow or else files conflict.\n    \n    Change-Id: I8b5f7b5557c28818048d8941df36473dacfb1d57\n',0,128,'Red Hat'),(273794,4064,4064,'2013-02-27 09:36:08','2013-02-27 09:36:08','    Adding a quick note to helper functions so its clear what they do and\n    they don\'t get misused.\n    \n    Change-Id: Ie0292df9d9e565ccd608b6b61ead57dfff1d3797\n',4,0,'Rackspace'),(273795,4533,4533,'2013-02-27 15:08:46','2013-02-27 15:08:46','    Updating classifiers status to stable and clean up\n    \n    Change-Id: I72943a9575b873cef1bf193f197b390b544ed6bf\n',3,1,'Rackspace'),(273796,5609,5609,'2013-02-27 06:38:58','2013-02-26 18:38:09','    Force log entries to be one line\n    \n    Different versions of syslog-ng and probably other syslog services\n    handle multi line log messages differently and sometimes quite\n    poorly. This patch collapses multi line log messages into single\n    lines before sending them on to syslog.\n    \n    It\'s just a copy of what was already in Python\'s logging.Formatter\n    but altered to replace the newlines with #012. I used #012 since\n    that\'s a convention we\'ve already used elsewhere in Swift.\n    \n    Change-Id: I8d0509b7cf48e45c2cf6480b51c67eec5bc94fe2\n',22,1,'Rackspace'),(273798,40,40,'2013-02-21 14:05:25','2013-02-21 14:02:51','    Add tests on keystone for invalid path requests.\n    \n    - Add missing tests to make it coverage to 100%.\n    \n    Change-Id: Ic182ad379e2c48cc4151b2532c509bd62d44bd00\n',13,1,'eNovance'),(273800,40,40,'2013-02-20 18:08:58','2013-02-20 18:08:58','    Allow acl with a valid token.\n    \n    - When a user as a valid token it would go to authorize but the acl\n      check was after the reseller_check and due fail. Check this before\n      reseller_check and add a test for it.\n    - Fixes bug 1020722.\n    \n    Change-Id: Iaff9f35f5ee690e9b729c36d05fb9adf3368dc79\n',13,5,'eNovance'),(273802,5596,5596,'2013-02-27 17:43:19','2013-02-26 02:37:11','    make swift fsync\n    \n    Swift never fsyncs, it only fdatasyncs.  That is dumb, we have important\n    metadata we need to save.  Also, the code was weird and had no tests.\n    \n    Change-Id: I6ec875c14560820b686266a28043a2b7631781e9\n',72,36,'Rackspace'),(273804,5609,5609,'2013-02-19 19:55:50','2013-02-19 19:08:45','    Fixed formpost QUERY_STRING bugs.\n    \n    Ensures that any QUERY_STRING to FormPost is not passed onward.\n    Handles a redirect with a query string properly.\n    \n    Change-Id: If0a7d9b0a17314c6cd3852175362d4633f828d81\n',131,9,'Rackspace'),(273806,5609,5609,'2013-03-01 15:47:20','2013-02-25 02:25:58','    TempURL filename options; bug fixes\n    \n    - Prior to this commit, a Content-Disposition header was always set\n      on responses to GET requests, with the filename based on the object\n      name. Now, the header will only be set for 2xx responses and the\n      filename can be overridden with a filename query parameter on the\n      request.\n    \n    - Fixed a bug where all query parameters on the request were being\n      passed down the WSGI pipeline. Now, just the query parameters\n      useful in log-based debugging are included. This becomes important\n      with things like the Bulk middleware that act upon query\n      parameters.\n    \n    - Fixed bug where the Content-Disposition header wasn\'t following RFC\n      spec.\n    \n    DocImpact\n    \n    Change-Id: I66ad809321dcdd03444324973c8b76869e3b0c8e\n',80,16,'Rackspace'),(273808,5613,5613,'2013-03-01 13:22:35','2013-03-01 13:22:35','    Remove reduant check of list.\n    \n    Remove len() check and parenthesis.\n    \n    Fixes Bug #1136893\n    \n    Change-Id: Ib47ec4890c2f6a50e316a7fef204ef818c6c4d6e\n',1,1,'Intel'),(273810,869,869,'2013-02-22 15:03:10','2012-11-09 10:32:07','    Make rings\' replica counts adjustable.\n    \n    Example:\n    \n    $ swift-ring-builder account.builder set_replicas 4\n    $ swift-ring-builder rebalance\n    \n    This is a prerequisite for supporting globally-distributed clusters,\n    as operators of such clusters will probably want at least as many\n    replicas as they have regions. Therefore, adding a region requires\n    adding a replica. Similarly, removing a region lets an operator remove\n    a replica and save some money on disks.\n    \n    In order to not hose clusters with lots of data, swift-ring-builder\n    now allows for setting of fractional replicas. Thus, one can gradually\n    increase the replica count at a rate that does not adversely affect\n    cluster performance.\n    \n    Example:\n    \n    $ swift-ring-builder object.builder set_replicas 3.01\n    $ swift-ring-builder object.builder rebalance\n    <distribute rings and wait>\n    \n    $ swift-ring-builder object.builder set_replicas 3.02\n    $ swift-ring-builder object.builder rebalance\n    <distribute rings and wait>...\n    \n    Obviously, fractional replicas are nonsensical for a single\n    partition. A fractional replica count is for the whole ring, not for\n    any individual partition, and indicates the average number of replicas\n    of each partition. For example, a replica count of 3.2 means that 20%\n    of partitions have 4 replicas and 80% have 3 replicas.\n    \n    Changes do not take effect until after the ring is rebalanced. Thus,\n    if you mean to go from 3 replicas to 3.01 but you accidentally type\n    2.01, no data is lost.\n    \n    Additionally, \'swift-ring-builder X.builder create\' can now take a\n    decimal argument for the number of replicas.\n    \n    DocImpact\n    \n    Change-Id: I12b34dacf60350a297a46be493d5d171580243ff\n',309,49,'SwiftStack'),(273812,26,26,'2013-03-04 08:52:24','2013-03-04 08:52:24','    Updated get_more_nodes algorithm\n    \n    The handoff nodes will try to be in zones other than the primary\n    zones, will take into account the device weights, and will usually\n    keep the same sequences of handoffs even with ring changes.\n    \n    On a real ring test the old get_more_nodes placed data mostly evenly\n    across zones, which is a problem for differently weighted zones. But\n    the real problem was that the extra partitions given to each device\n    was 0% to 0.77% with only 46.05% of the candidate devices getting\n    anything. Some of the devices increased in effective weight over 50%\n    in the test.\n    \n    The new get_more_nodes placed closer to what the zone weights were\n    and the extra partitions given to each device was 0% to 0.24% with\n    90.58% of the candidate devices getting something. The worst off\n    device only increased in effective weight by 10.71%.\n    \n    Change-Id: Iffb133a22db69074acaa2b90854cbfa92e4c2b9e\n',307,86,'Rackspace'),(273813,4064,4064,'2013-03-01 16:46:10','2013-02-13 12:31:55','    Static Large Object Support\n    \n    DocImpact\n    \n    Change-Id: I7edaa5e44208ab451f7f7566b64bb571b8eea1f9\n',1342,139,'Rackspace'),(273815,1125,1125,'2013-03-05 11:59:14','2013-03-05 11:58:42','    David Hadas email address has been changed.\n    \n    Change-Id: Ic3e9ad50f123eecb4abbe91340b0acff4a2d580c\n',1,1,'IBM'),(273816,4062,4062,'2013-02-28 02:52:06','2013-02-24 00:02:32','    Added per disk PUT timing monitoring support.\n    \n    Fixes bug 1104708\n    \n    There could be severe performance drop for swift is one disk of one\n    storage node is problematic due to the tragic state of async disk I/O.\n    \n    This patch provided PUT timing per kB transfered (ms/kB) monitoring\n    support for each non-zero-byte request of each disk and report to\n    statsD for alert.\n    -adding \"object-server.PUT.<device>.timing\" metrics for object-server.\n    \n    DocImpact.\n    \n    Change-Id: Ie94bddad28e8be52e71683bf6c9db988664abe47\n',17,0,'IBM'),(273818,869,869,'2013-03-05 18:15:09','2013-03-05 15:22:41','    Fix misspelled variable name\n    \n    Change-Id: Ied6ed3cad16e9797df73a05f3df3ac9cc64299e0\n',2,2,'SwiftStack'),(273819,869,869,'2013-03-05 13:28:12','2013-03-05 13:19:04','    Spread handoffs out better around zones.\n    \n    Before, you\'d get your 3* primary nodes in 3 different zones, and then\n    get_more_nodes would give you everything it could from a non-primary\n    zone, and then finish up with stuff from the primary zones. It would\n    sort of look like this:\n    \n    P: device in a primary node\'s zone\n    N: device not in a primary node\'s zone\n    \n    PPPNNNNNNNNNNNNNNNNNNN...NNNNNNNNNPPP...PPPPPP\n    \n    (The first three Ps are the primary nodes; they don\'t actually come\n    out of get_more_nodes(), but they\'re included for clarity.)\n    \n    Now, the first few handoffs from get_more_nodes are in non-primary\n    zones, but only one per zone, and then the rest of the handoffs ignore\n    zones. It\'s still sampling the ring, so it\'s still taking weights into\n    consideration, but the zone distribution is more even early in the\n    handoff chain. It looks like this, assuming 10 zones:\n    \n    P: device in a primary node\'s zone\n    N: device not in a primary node\'s zone\n    D: zone doesn\'t matter\n    \n    PPPNNNNNNNDDDDDDDDDDD...DDD\n    \n    * or whatever your replica count is\n    \n    Change-Id: I31d2a2bc2cd6038386a2df85cd4fa37ccf2f650e\n',69,62,'SwiftStack'),(273821,822,822,'2013-03-07 01:38:21','2013-02-01 22:50:21','    Support listing endpoints for an object.\n    \n    Implements blueprint list-endpoints.\n    \n    DocImpact: new middleware list_endpoints.\n    \n    Change-Id: I0c4911ff726abd4cb8ce2b6245c99786ad46b410\n',367,0,'Mirantis'),(273822,5611,5611,'2013-03-07 01:32:16','2013-03-04 23:38:48','    Support tests for Apache\n    \n    Add support for functional tests that work with Apache web front end\n    \n    Change-Id: I72358a12016eeccc842d834461dbebaa188aa117\n    Implements: blueprint wsgi-application-interface\n',241,24,'IBM'),(273824,5596,5596,'2013-03-07 01:34:46','2013-02-27 15:26:27','    simplify the chexor function\n    \n    Replace all that map(operator) nonsense.\n    \n    It changes the error raised on invalid hashes, but we don\'t handle that\n    anywhere, and it shouldn\'t ever happen in real life.\n    \n    Change-Id: Ib8cb549fac05e0b2725b4ea295326ac0c5e1f035\n',3,7,'Rackspace'),(273826,869,869,'2013-03-07 14:44:03','2013-03-07 14:43:12','    Fix some unreadable code.\n    \n    I thought it was readable back when I wrote it; turns out it\'s\n    not. Oops.\n    \n    Change-Id: I1e1020935356522d6e07409aa867a5ffc8919787\n    Bonus: remove unused import.\n',8,4,'SwiftStack'),(273827,5614,5614,'2013-03-08 14:31:35','2013-03-04 17:53:44','    Account quotas\n    \n    Add a new middleware implementing account quotas.\n    \n    This middleware blocks write requests (PUT, POST) if a given quota (in bytes)\n    is exceeded while DELETE requests are still allowed.\n    \n    Quotas are stored in the x-account-meta-quota-bytes metadata entry.\n    Write requests to this metadata setting are only allowed for resellers.\n    \n    Change-Id: I57fd7c6209f34cc79d4bab72d500d43ba2a62083\n',271,2,'Red Hat'),(273829,4063,4063,'2013-03-08 16:38:11','2013-03-08 16:25:13','    Add exception to swift-drive-audit if no date in line.\n    \n    Sometimes there is no date at the beginning of a line in kern.log.\n    Although it does not happen often, there should be a check ensuring\n    the program doesn\'t crash in case it happens.\n    \n    Added try-except block surrounding parsing string to date format.\n    \n    Change-Id: I44a101266582eea2199189a006afa1037a9bd4ea\n    Fixes: bug #1152658\n',5,2,'HP'),(273830,26,26,'2013-03-12 19:15:35','2013-03-12 19:15:35','    Fixed bug with account_info\n    \n    There was a bug where account_info wasn\'t converting the\n    container_count value to an int. Causes max container count cap to\n    get hit pretty quick since \'0\' > 0.\n    \n    Change-Id: Ibfc6eebbff5a00aaebb47e9731dd053b60e3caa4\n',36,3,'Rackspace'),(273831,869,869,'2013-03-13 10:00:58','2013-03-04 17:05:43','    Add a region tier to Swift\'s ring.\n    \n    The region is one level above the zone; it is intended to represent a\n    chunk of machines that is distant from others with respect to\n    bandwidth and latency.\n    \n    Old rings will default to having all their devices in region 1. Since\n    everything is in the same region by default, the ring builder will\n    simply distribute across zones as it did before, so your partition\n    assignment won\'t move because of this change. If you start adding\n    devices in other regions, of course, the assignment will change to\n    take that into account.\n    \n    swift-ring-builder still accepts the same syntax as before, but will\n    default added devices to region 1 if no region is specified.\n    \n    Examples:\n    \n    $ swift-ring-builder foo.builder add r2z1-1.2.3.4:555/sda\n    \n    $ swift-ring-builder foo.builder add r1z3-1.2.3.4:555/sda\n    \n    $ swift-ring-builder foo.builder add z3-1.2.3.4:555/sda\n    \n    Also, some updates to ring-overview doc.\n    \n    Change-Id: Ifefbb839cdcf033e6c9201fadca95224c7303a29\n',591,366,'SwiftStack'),(273832,869,869,'2013-03-13 13:34:19','2013-03-13 13:34:19','    Fix swift-ring-builder\'s list_parts command.\n    \n    I broke it in 7548cb9 when a ring\'s replica count changed from an int\n    to a float.\n    \n    Change-Id: I49fa7e2961a09daad0c96e19cf1e39fec248d998\n',5,3,'SwiftStack'),(273834,239,239,'2013-03-13 11:35:42','2013-03-13 11:35:42','    Add missing CONTRIBUTING.md to source tarball\n    \n    Fixes MANIFEST.in to include missing CONTRIBUTING.md into source\n    code tarballs.\n    \n    Change-Id: I81876adad14e0f1b2211d39ec6471e35f5464120\n',1,1,'OpenStack Foundation'),(273836,4064,4064,'2013-03-13 13:43:19','2013-03-13 13:43:19','    Remove check for valid Origin for the \"actual request\".\n    \n    The only place in the spec that I could see the Origin being checked was\n    during the pre-flight OPTIONS request. If it gets to the actual request\n    let auth decide. Please correct me if this is wrong.\n    \n    Change-Id: Ic31b71746ec056091c7778ebff3db7becc32bd9c\n',0,51,'Rackspace'),(273838,5614,5614,'2013-03-10 19:21:13','2013-03-08 19:33:27','    Add tests and doc entry for request.environ[reseller_request]\n    \n    The recent account_quotas (https://review.openstack.org/23434)\n    patch added a new setting request.environ[reseller_request].\n    This patch adds tests for tempauth and keystoneauth as well as\n    an updated overview_auth.rst.\n    \n    Change-Id: Icdb7ec9948ae7424b0721fc51a143782b2fdc5a6\n',28,0,'Red Hat'),(273840,799,5615,'2013-03-16 12:41:14','2013-03-16 12:16:54','    Fix format device\n    \n    Change-Id: Icef35175682c11a406ef85accc6c6e1acbf89f4d\n',4,4,'Mirantis'),(273842,869,869,'2013-03-14 18:49:30','2013-03-14 18:49:30','    Fix crash in swift-ring-builder\'s list_parts command.\n    \n    If you run list_parts against a builder that has never been\n    rebalanced, you\'d get a crash. Now you don\'t.\n    \n    To reproduce:\n    \n    $ swift-ring-builder foo.builder create 8 3 1\n    $ swift-ring-builder foo.builder add r1z1-1.2.3.4:6000/sda 100\n    $ swift-ring-builder foo.builder list_parts z1\n    \n    Change-Id: Ic3edffab0c5c2e9551a2f89ddb881153f0b07db7\n',4,0,'SwiftStack'),(273844,1125,1125,'2013-03-18 13:57:40','2013-03-18 13:57:19','    Instruction for multi node setup misses /var/run/swift creation\n    \n    Multiple Server Swift Installation (Ubuntu) instruction does not\n    indicate that the directory /var/run/swift needs to be created.\n    That directory actually needs to be created and the ownship needs\n    to be changed to the user/group which swift service runs under.\n    \n    This patch will fix the document and gives the steps how to create\n    the directory and set the ownership right. It also gives instruction\n    on how the script can be added so that swift services can be resarted\n    after system reboots.\n    \n    Change-Id: Id61aa67cc0d6f66d749701e6ea824b1ff3b2c478\n    Fixes: bug #1156631\n',9,0,'IBM'),(273846,1125,1125,'2013-03-18 09:04:50','2013-03-18 09:04:13','    swift-ring-builder blows up when not supported command requested.\n    \n    swift-ring-builder uses outdated unbounded class method to handle\n    not supported command. It worked for python 2.6 or older but not\n    for python 2.7 or newer. This patch fixes the problem.\n    \n    Change-Id: I7dbc681ef6be44f6d79ff93189ccca13c51eab74\n    Fixes: bug #1154882\n',2,2,'IBM'),(273848,42,42,'2013-03-10 18:52:10','2013-03-10 18:52:10','    Permit functional tests against Swift with Keystone\n    \n    While poking at such problems with authentication other than swauth\n    it was useful to allow stock functional tests running back-to-back\n    at two clusters, with tempauth and Keystone.\n    \n    When running the legacy tests, this version packs account into user\n    the way it was down previously. This way we do not need to repack\n    them before every call to get_auth. The downside is additional work\n    to be done when setting ACLs.\n    \n    Change-Id: Ieb1d9227cb88977ecd2c39825039bc4be8afae0b\n',85,59,'Red Hat'),(273850,869,869,'2013-03-17 15:58:06','2013-03-17 15:58:06','    Small clarification to swift-recon section of admin guide.\n    \n    Apparently the use of port 6030 was causing some confusion.\n    \n    Fixes bug 1095474.\n    \n    Change-Id: I0cc71f4733ad91694e015a9b75c3eda080aca6fb\n',7,2,'SwiftStack'),(273852,2206,2206,'2013-03-09 13:43:54','2013-03-09 03:13:18','    Give friendly notification in swift-get-nodes\n    \n    Hard coding of \'/srv/node\' maybe drive to some errors. But it seems\n    unfixable (please see talks in bug report). To avoid erros as we can,\n    showing a friendly notification to let user set their own device\n    location works better than hard coding directly.\n    \n    Change-Id: I45d749dd52af8d3b051dfe98dbb9d71a5a374f97\n    Fixes: bug #907908\n',8,5,'Huawei'),(273854,869,869,'2013-03-18 09:50:45','2013-03-17 15:07:20','    Basic ring builder validation.\n    \n    This prevents people from creating bogus ring builder files.\n    \n    Example: \"swift-ring-builder object.builder create 33 0.9 -4\".\n    \n    Fixes bug 924577.\n    \n    Change-Id: I7bfc04f7fa5f55f70a4eaae96c414f6b2872e283\n',23,1,'SwiftStack'),(273856,229,229,'2013-03-18 20:15:24','2013-03-17 21:51:04','    AUTHORS/CHANGELOG uploades for the next release\n    \n    also bumped the dev version to 1.8.0 to reflect the\n    current dev target\n    \n    Change-Id: Ib05cb4f0616c0d297ce5cd7073af766c7a4300d9\n',93,4,'SwiftStack'),(273857,229,229,'2013-03-18 22:30:04','2013-03-18 22:30:04','    version bump for 1.8.1\n    \n    first commit for openstack havana\n    \n    Change-Id: If9fe0fb73c676d5f6d1ed53ccfa300faa0aad8db\n',1,1,'SwiftStack'),(273858,5611,5611,'2013-03-08 22:28:06','2013-02-27 00:49:51','    Improved container-sync resiliency\n    \n    container-sync now skips faulty objects in the first and second rounds.\n    All replicas try in the second round.\n    No server will give up until the faulty object suceeds\n    \n    Fixes: bug #1068423\n    \n    Change-Id: I0defc174b2ce3796a6acf410a2d2eae138e8193d\n',43,34,'IBM'),(273860,2206,2206,'2013-03-19 16:26:22','2013-03-18 13:15:09','    Use role in insensitive case in keystoneauth.\n    \n    Using insensitive case could tolerate human error. For example,\n    user maybe set like this \"operator_roles = Admin, swiftoperator\"\n    \n    - also fix a mistake in test, [\'admin\'] is correct value for roles, not\n      \'admin\' (it will be looped as [\'a\', \'d\', \'m\', \'i\', \'n\'])\n    - add test for insensitive cases\n    \n    Fixes: bug #1013120\n    Change-Id: I56d71da8bc503e48e92dd743692ba6fc237f029e\n',19,6,'Huawei'),(273861,4064,4064,'2013-03-19 11:48:14','2013-03-19 11:48:14','    fix stupid bug with bulk delete max items\n    \n    Change-Id: I52160b5e7480112d536c45dd4b0b10a808adcdcd\n',10,4,'Rackspace'),(273863,4066,4066,'2013-03-18 18:01:16','2013-03-18 18:01:16','    increase unit test coverage on account server\n    \n    Change-Id: Id728a17180f4ee2e31edaef0af6d26446b6014c2\n',131,1,'independent'),(273865,869,869,'2013-03-20 16:56:52','2013-03-20 16:56:52','    Fix misspelled variable.\n    \n    Change-Id: I243de23d5acee135113dc81fca6244d651a2d9a8\n',3,3,'SwiftStack'),(273867,1020,1020,'2013-03-21 13:05:31','2013-03-21 12:59:13','    Fix for attempted COPY of objects gt MAX_FILE_SIZE\n    \n    If X-Copy-From is a manifest object, it can be bigger than MAX_FILE_SIZE.\n    Currently this fails with 503. It should be 413.\n    \n    Bug #1158279\n    \n    Change-Id: I7ec16088046c84e42d5be9c865e1338eb07845b6\n',44,0,'HP'),(273868,1125,1125,'2013-03-21 09:45:13','2013-03-21 09:45:13','    instruction command was not documented in right format.\n    \n    Instructions for a Multiple Server Swift Installation (Ubuntu) doc\n    for creating /var/run/swift and changing owner command were not\n    using the right format. Missing two colons.\n    \n    Change-Id: Ie23007a0da498373fbfb137c7edb3d80813c6ba5\n    Fixes: bug #1158310\n',1,1,'IBM'),(273870,4064,4064,'2013-03-21 09:56:54','2013-03-21 08:13:00','    Fix bugs in bulk and slo and small doc change.\n    \n    Added 411 responses in bulk and slo when needed.\n    \n    Make X-Static-Large-Object an illegal header with slo installed- somehow\n    that got lost with some refactor I did.\n    \n    Change-Id: I986c1656658f874172860469624118cc63bff9bc\n',27,8,'Rackspace'),(273872,5610,5610,'2013-03-21 11:35:11','2013-03-21 11:35:11','    Fix for unicode issues in staticweb\n    \n    When prefix or subdir is unicode, it fails.\n    Fixes: bug #1158092\n    \n    Change-Id: I966a7a198a5ca5ea152872c94240e8c2ebe57d36\n',67,16,'Kakao Corp.'),(273874,5611,5611,'2013-03-22 19:41:55','2013-03-20 01:35:41','    Add support for Hash Prefix\n    \n    A new configuration parameter is added to /etc/swift/swift.conf\n    [swift-hash]\n    swift_hash_path_prefix = \'random unique string\'\n    \n    New installations are advised to set this parameter to a random secret,\n    which would not be disclosed ouside the organization.\n    The same secret needs to be used by all swift servers of the same cluster.\n    \n    Existing installations should set this parameter to an empty string\n    (the default)\n    \n    DocImpact\n    \n    Fixes: Bug #1157454\n    \n    Change-Id: I63b10d0b7d6dd3f74e0f10bb41b5f240fa03578a\n',55,18,'IBM'),(273875,4066,4066,'2013-03-22 19:49:47','2013-03-20 19:26:45','    additional unit test coverage for container/server.py\n    \n    Change-Id: Id510cceb88f062f921450a5d25d7c97b7ca5943b\n',401,179,'independent'),(273876,4064,4064,'2013-03-26 09:40:03','2013-03-26 09:40:03','    Fixing SLO range requests\n    \n    Change-Id: I355e99c971cfe8f7f8dedcd8f9f08c97079863cc\n',3,7,'Rackspace'),(273877,4067,4067,'2013-03-26 20:42:26','2013-03-26 20:42:26','    fixed some minor things in tests that pyflakes complained about\n    \n    Change-Id: Ifeab56a964630bcf941e932fcbe39e6572e62975\n',98,151,'Rackspace'),(273878,229,229,'2013-03-28 21:01:49','2013-03-28 21:01:49','    updated AUTHORS and CHANGELOG\n    \n    These updates are to reflect the changes that have been\n    backported into the 1.8.0 release candidate.\n    \n    Change-Id: I9b2abb9809fa6715a427dc0dbe0474aba140a596\n',6,0,'SwiftStack'),(273879,4067,4067,'2013-03-28 18:49:28','2013-03-26 20:47:15','    fixes some problems pyflakes complains about\n    \n    Change-Id: I1eb16fa595b0b1d97ae14279b8aa25bd2740f511\n',8,11,'Rackspace'),(273881,4064,4064,'2013-04-01 10:19:35','2013-04-01 10:19:35','    Dynamic Large Object sleeps too much\n    \n    DLO is supposed to sleep 1 second per segment after 10 (default) initial\n    segments are loaded to prevent abuse of the system. Currently, if the user\n    did a range request to the 11th segment the 1 sec delay would start immediately\n    on the 11th segment because the skipped segments were counted as initial\n    segments. This path fixes that.\n    \n    Change-Id: I53bbc24af54921ddc04d9cb3b704366b51b3f740\n',46,6,'Rackspace'),(273883,2206,2206,'2013-03-17 01:59:40','2013-03-17 01:59:40','    Change logger name to module itself instead of root\n    \n    Using root logger will make public module log failed by unknow keyword.\n    Just change the logger name to module itself could dismiss this impact.\n    And disable logger.propagate could prevent double outputing.\n    \n    Change-Id: I18696d124ebac9ca970d502558972e51de759097\n    Fixes: bug #1105133\n',2,1,'Huawei'),(273885,5616,5616,'2013-04-02 15:55:56','2013-04-02 15:52:08','    Change setup.cfg style.\n    \n    Change-Id: I466470237ddd317740eb99bd55af7e7a50270ae3\n    Fixes: bug #1163258\n',3,3,'Mirantis'),(273887,4064,4064,'2013-04-01 13:16:46','2013-04-01 13:16:46','    SLO multipart-manifest=get returns incorrect Content-Type\n    \n    Change-Id: I657c9f7a7555d90ccfa7e6ff0f5f3fcbd7eada1d\n',54,0,'Rackspace'),(273889,2664,2664,'2013-03-22 17:02:13','2013-03-22 17:02:13','    Fix reading xattrs in object-server\'s unittests.\n    \n    Use for reading metadata in unit tests function from object-server.\n    \n    Change-Id: I2bfeb76fdd775442a0e614fef740b0987fba4a22\n    Fixes: bug #1079131\n',5,9,'Mirantis'),(273891,869,869,'2013-03-28 12:03:58','2013-03-28 12:03:58','    Fix container-server sorting for manifest listings.\n    \n    The current code will always contact the container server for the\n    first replica of the container; this fixes it to use the same\n    backend-sort as all the other places in the proxy that talk to\n    backends.\n    \n    Change-Id: If1c168b95bfc5cd120036869f3066549b7a1000a\n',1,1,'SwiftStack'),(273893,5614,5614,'2013-04-03 15:10:42','2013-04-03 10:29:50','    Update documentation for account_quota middleware\n    \n    Change-Id: I3dc7930ee2a1eb26b1f60e83fce2bc1bea0a8b0f\n',41,24,'Red Hat'),(273895,10,1125,'2013-04-04 20:39:01','2013-03-26 14:56:44','    directory /var/cache/swift /srv/node should be created.\n    \n    For multiple node swift cluster setup, these directories should be\n    created in the setup steps. Otherwise, when start up storage servers\n    there will be errors. The error messages won\'t tell if it is because\n    of missing the directory.\n    \n    Change-Id: I67d74abb7743b76739b5e747d6dcbd3214b00774\n    Fixes: bug #1158519\n',15,3,'IBM'),(273896,26,26,'2013-04-04 20:37:23','2013-04-04 16:44:22','    Allow a configurable set of TempURL methods\n    \n    Folks have actually been asking for this. I think they\'re sending a\n    DELETE TempURL to someone way ahead of time and the someone issues it\n    when they\'re ready. Honestly, I\'m not entirely sure of the use case,\n    but having the set of methods configurable wouldn\'t hurt.\n    \n    Change-Id: Ibdb48f8a72077b045eeedddfae4c0a1f56098d7a\n',26,8,'Rackspace'),(273898,4067,4067,'2013-04-04 18:45:24','2013-04-04 18:45:24','    add unit tests for db_replicator\n    \n    Change-Id: I9002fa193a51f40523e7936e3117a2f3f2b2f7f8\n',123,4,'Rackspace'),(273900,5611,5611,'2013-04-09 23:20:33','2013-03-22 09:00:40','    objects md5-collisions\n    \n    This patch identifies md5 collisions on objects and sends a 403\n    from the object server.\n    \n    Credits for originating this fix are to Michael Factor.\n    \n    Change-Id: I4f1b32183e2be6bbea56eaff86b9a4c7f440804a\n    Fix: Bug #1157454\n',76,3,'IBM'),(273901,5583,5583,'2013-04-10 06:37:32','2013-03-25 11:27:36','    Adding a new optional variable called trans_id_suffix\n    \n    The trans_id_suffix (default is empty) would be appended to the swift transaction\n    id allowing one to easily figure out from which cluster that X-Trans-Id\n    belongs to. This is very useful when one is managing more than one swift\n    cluster. Also updated sample and manpage to reflect the changes.\n    \n    Change-Id: Icdf63643e9c1bde36a9ef5e3f41ee9fb20e55f5d\n',31,5,'Rackspace'),(273903,4064,4064,'2013-04-08 11:22:20','2013-04-03 14:15:26','    Bug in SLO with multipart-manifest=get content type.\n    \n    In trying to override the content-type for the convenience\n    call I broke COPYs and POSTs for SLO. yaaa...\n    \n    Change-Id: Ifbcda6d2dd0ee43e43d62e58a90301e7afd05e27\n',51,0,'Rackspace'),(273905,229,229,'2013-04-11 10:42:31','2013-04-11 10:42:31','    fix email address\n    \n    Change-Id: I784a9a5b45fd39420543ff0fb56b0f6d04684f3a\n',2,1,'SwiftStack'),(273907,5611,5611,'2013-04-10 21:41:59','2013-04-10 18:14:21','    Account Quota Correction\n    \n    account_quota middleware fails to check if account_info exists\n    after retrieving it.\n    \n    Change-Id: I1aa492d3bd713a6bf27e18ef4ec2e29f4cfb694d\n    Fixes: Bug #1167389\n',31,0,'IBM'),(273909,799,799,'2013-04-12 12:40:27','2013-04-11 10:05:00','    Refactoring format_device function\n    \n    * Algorithm format_device was changed for simplicity extension new\n      ip addresses parameters.\n    * Some prints outputs was replacement by function format_device.\n    \n    Change-Id: I8565d42fcdb62eeb398c4432bb6f499c27c05cf6\n',14,25,'Mirantis'),(273911,229,229,'2013-04-11 22:55:52','2013-04-11 22:55:49','    fix probe tests to work in a VM using mount_check\n    \n    If mount_check is true (ie an SAIO with \"real \"devices, not loopback),\n    then the servers will correctly return 507 when given a nonsense path.\n    The first element is treated as a drive path, and that path isn\'t\n    mounted. This patch adds 507 as a valid status response to the server\n    check.\n    \n    Change-Id: I1d1bb0ab78fd9ea17323635da7e686182fbdbf13\n',3,1,'SwiftStack'),(273913,799,799,'2013-04-11 09:32:56','2013-04-11 09:11:10','    Correcting output of swift-ring-builder\n    \n    Indent swift-ring-builder output was changed according\n    with old style (before implementation of region tier).\n    \n    Change-Id: I0d1cc7acdc5baf86f343745aea6fc2120838fd36\n',2,2,'Mirantis'),(273915,26,26,'2013-04-08 20:48:32','2013-04-06 01:35:58','    Refactored lists of nodes to contact for requests\n    \n    Extensive refactor here to consolidate what nodes are contacted for\n    any request. This consolidation means reads will contact the same set\n    of nodes that writes would, giving a very good chance that\n    read-your-write behavior will succeed. This also means that writes\n    will not necessarily try all nodes in the cluster as it would\n    previously, which really wasn\'t desirable anyway. (If you really want\n    that, you can set request_node_count to a really big number, but\n    understand that also means reads will contact every node looking for\n    something that might not exist.)\n    \n    * Added a request_node_count proxy-server conf value that allows\n      control of how many nodes are contacted for a normal request.\n    \n    In proxy.controllers.base.Controller:\n    \n    * Got rid of error_increment since it was only used in one spot by\n      another method and just served to confuse.\n    \n    * Made error_occurred also log the device name.\n    \n    * Made error_limit require an error message and also documented a bit\n      better.\n    \n    * Changed iter_nodes to just take a ring and a partition and yield\n      all the nodes itself so it could control the number of nodes used\n      in a given request. Also happens to consolidate where sort_nodes is\n      called.\n    \n    * Updated account_info and container_info to use all nodes from\n      iter_nodes and to call error_occurred appropriately.\n    \n    * Updated GETorHEAD_base to not track attempts on its own and just\n      stop when iter_nodes tells it to stop. Also, it doesn\'t take the\n      nodes to contact anymore; instead it takes the ring and gets the\n      nodes from iter_nodes itself.\n    \n    Elsewhere:\n    \n    * Ring now has a get_part method.\n    \n    * Made changes to reflect all of the above.\n    \n    Change-Id: I37f76c99286b6456311abf25167cd0485bfcafac\n',180,105,'Rackspace'),(273917,251,40,'2013-04-05 21:12:15','2013-03-16 09:40:38','    Allow all headers requested for CORS.\n    \n    - We allow all headers requested in preflight request. The CORS\n      specification does leave the door open for this, as mentioned in\n      http://www.w3.org/TR/cors/#resource-preflight-requests\n      Note: Since the list of headers can be unbounded\n      simply returning headers can be enough.\n    - This is a followup to review:\n      https://review.openstack.org/#/c/24415/.\n    - Fixes bug 1155034.\n    \n    Change-Id: If7b8f2f3a581c5209892d1ccc9f06ddb8fac92dd\n',23,29,'eNovance'),(273919,26,26,'2013-04-15 22:12:52','2013-04-15 22:12:23','    Expirer now quotes names when deleting\n    \n    Change-Id: I5c615c6f32967510f09b783b1ba7089119f1d8bd\n',17,1,'Rackspace'),(273921,2206,2206,'2013-03-17 07:30:00','2013-03-17 07:30:00','    Add x-remove-versions-location for feature: disable versioning\n    \n    We can set x-versions-location empty to remove this header in API, but\n    to keep consistent, we should allow x-remove-versions-location too. The\n    usage is post \"x-remove-versions-locaion: x\", just like ACL remove\n    headers.\n    \n    Fixed: bug #1107592\n    \n    Change-Id: I1271eec6401d4a0e8c1a7c2d63aeb8dfef00bf6d\n',45,4,'Huawei'),(273923,4064,4064,'2013-04-12 14:36:45','2013-04-11 12:52:33','    slobjects can not be made of other slobjects\n    \n    Change-Id: Ib500f5fc2e890c3d23641350815a910168bcd543\n',92,18,'Rackspace'),(273925,4064,4064,'2013-04-17 07:03:46','2013-04-17 07:03:46','    fix slo docs\n    \n    Change-Id: I49f8c272457547d8aae853986573549828d2503a\n',3,2,'Rackspace'),(273927,826,826,'2013-04-18 14:36:52','2013-04-18 14:31:58','    Drop cache after fsync\n    \n    Drop the cache (fadvise) after calling fsync to avoid redundant work\n    in the kernel visiting pages that are dirty. By dropping cache after\n    fsync(), the pages will be clean so can be easily removed from the\n    cache.\n    \n    Change-Id: I3013d2ac1e27bbe43e58a81638d04805f5e2ae6e\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',11,1,'Red Hat'),(273928,26,26,'2013-04-19 09:43:31','2013-04-19 09:43:31','    Extra safety on account-level DELETE\n    \n    I just noticed tonight when adding a bunch of stuff to Swiftly that\n    the Bulk Delete middleware uses an account-level DELETE request,\n    albeit with a query parameter of bulk-delete. But, one typo and,\n    assuming the cluster supports it and you have access, whoops, you\n    just marked the account for deletion!\n    \n    I put a bit of extra safety on the account deletion by requiring it\n    to have an empty query string.\n    \n    Change-Id: Ib5df11193b04eff69d14185bd9d0607169131e7f\n',28,0,'Rackspace'),(273929,4160,4160,'2013-04-22 01:31:53','2013-04-22 01:23:39','    fix dict duplicated key\n    remove duplicated key from swift-bench bin; and also add .idea to gitignore\n    \n    Change-Id: I31360489716d03324b8d2bb1c51e282393069c13\n',2,2,'Nexenta'),(273930,26,26,'2013-04-20 04:26:21','2013-04-20 04:16:57','    Made colons quote-safe in logs; mainly for ipv6\n    \n    Previous logging made a mess of ipv6 addresses. This just makes the\n    colon quote-safe so it passes through unscathed. The logs will still\n    be backward compatible because unquote don\'t care:\n    \n        $ python\n        >>> from urllib import quote, unquote\n        >>> quote(\'2001:db8:85a3:8d3:1319:8a2e:370:7348\')\n        \'2001%3Adb8%3A85a3%3A8d3%3A1319%3A8a2e%3A370%3A7348\'\n        >>> unquote(quote(\'2001:db8:85a3:8d3:1319:8a2e:370:7348\'))\n        \'2001:db8:85a3:8d3:1319:8a2e:370:7348\'\n        >>> quote(\'2001:db8:85a3:8d3:1319:8a2e:370:7348\', \'/:\')\n        \'2001:db8:85a3:8d3:1319:8a2e:370:7348\'\n        >>> unquote(quote(\'2001:db8:85a3:8d3:1319:8a2e:370:7348\', \'/:\'))\n        \'2001:db8:85a3:8d3:1319:8a2e:370:7348\'\n    \n    Change-Id: Ia13a9bc8a320cde5c56034a7f0b645913428bf21\n',22,2,'Rackspace'),(273932,42,42,'2013-04-22 11:31:21','2013-04-22 11:31:21','    Add auth_version to dispersion.conf.5\n    \n    The lack of any documentation for the auth_version was observed\n    by Red Hat QA, see rhbz#955247.\n    \n    Change-Id: I0afc04d848082a80480724bdbf99031e4b99e38e\n',2,0,'Red Hat'),(273934,5611,5611,'2013-04-22 19:32:45','2013-04-22 19:32:18','    Fixing /etc/swift.conf-sample to include\n    swift_hash_path_prefix\n    \n    Change-Id: I60f5f3d4083937a03ecb7ed531185c617ea08016\n',5,4,'IBM'),(273936,3037,3037,'2013-04-24 10:40:41','2013-04-24 09:32:31','    copy X-Delete-At unless X-Fresh-Metadata: true is supplied on an object copy\n    \n    Current codes will copy metadata headers when x-fresh-metadata:false, we\n    still need copy \"x-delete-at\" header and ensure expiring work at the same\n    time.\n    \n    Change-Id: Ie31326b5f7b565e51e5aa249279bc1786f7bc847\n    Fixes: bug #1067528\n',50,20,'Huawei'),(273938,1020,1020,'2013-04-23 13:52:34','2013-03-25 18:48:25','    Add crossdomain.xml middleware\n    \n    Allows client-side technologies such as Flash, Java and Silverlight running\n    on web pages served elsewhere to interact with the Swift API.\n    \n    Bug #1159960\n    \n    Change-Id: I7d0533a0aaf189ac452abbd983469acb064fdca4\n',232,0,'HP'),(273940,826,826,'2013-04-23 16:09:13','2013-04-18 17:58:08','    Push fallocate() down into mkstemp(); use known size\n    \n    Towards defining the DiskFile class, or something like it, as an API\n    for the low level disk acesses, we push the fallocate() system call\n    down into the DiskFile.mkstemp() method. This allows another\n    implementation of DiskFile to decide to use or not use fallocate().\n    \n    Change-Id: Ib4d2ee1f971e4e20e53ca4b41892c5e44ecc88d5\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',94,78,'Red Hat'),(273942,869,869,'2013-04-24 14:01:56','2013-04-24 14:01:56','    Make it easier to debug badly broken tests.\n    \n    If you manage to break a proxy server so badly that it can\'t even\n    return headers, then in test/unit/proxy/test_server.py,\n    readuntil2crlfs() will spin forever, killing your laptop battery and\n    providing zero help figuring out what\'s wrong.\n    \n    This test-only change makes it so that, should readuntil2crlfs() run\n    out of data before getting its two CRLFs, it raises an exception that\n    tells you what it did manage to get, and does so in a finite amount of\n    time.\n    \n    Change-Id: Ieacd18ce7f4d35a4960100d5fc3a0f910cb406ac\n',2,0,'SwiftStack'),(273944,5611,5611,'2013-04-25 00:41:34','2013-04-24 10:10:32','    Improved autocreate testing\n    \n    Increase testing coverage and make some of the test more accurate\n    (Some of the tests included too many responses from the account\n    servers that were not used by the test)\n    \n    Change-Id: Ide2e0fcb89d5905e70d3111f7ac57b1cff23a99c\n    Fixes: Bug #1172152\n',90,30,'IBM'),(273946,26,26,'2013-04-29 13:56:44','2013-04-20 03:34:48','    Included time inside trans_id\n    \n    Including the time inside the trans_id can be very useful for knowing\n    which logs to scan. I made this so the trans_id will still be the\n    same length (the randomness of the remaining uuid4 should be enough\n    for this use). I also added a convenience function for retreiving the\n    time information from a trans_id.\n    \n    If you\'re wondering why I just didn\'t use uuid1 that embeds the time,\n    it\'s because it also embeds uuid.getnode() which \"The first time this\n    runs, it may launch a separate program, which could be quite slow.\"\n    We could supply our own getnode value, but then we have to guarantee\n    its uniqueness, yada yada yada.\n    \n    Change-Id: Ie33caf1e839fd1a21b01a928a8b301126bef7396\n',56,6,'Rackspace'),(273948,826,826,'2013-04-26 10:29:57','2013-04-19 14:15:15','    Add the max_clients parameter to bound clients\n    \n    The new max_clients parameter allows one full control over the maximum\n    number of client requests that will be handled by a given worker for\n    any of the proxy, account, container or object servers.\n    \n    Lowering the number of clients handled per worker, and raising the\n    number of workers can lessen the impact that a CPU intensive, or\n    blocking, request can have on other requests served by the same\n    worker.\n    \n    If the maximum number of clients is set to one, then a given worker\n    will not perform another accept(2) call while processing, allowing\n    other workers a chance to process it.\n    \n    DocImpact\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n    \n    Change-Id: Ic01430f7a6c5ff48d7aa349dc86a5f8ac463a420\n',122,26,'Red Hat'),(273950,4064,4064,'2013-04-24 13:41:14','2013-04-24 12:46:13','    Container info memcache change broke ratelimiting.\n    \n    Change-Id: I6379db52a75ed40080dd220f7fa72bcaffd0953c\n',8,3,'Rackspace'),(273952,5146,5146,'2013-04-30 11:24:40','2013-04-30 11:07:34','    Uses None instead of mutable lists for function param defaults\n    \n    Addressing bug 1174809, changes use of mutable lists as as default\n    arguments and defaults them within the function. Otherwise, those\n    defaults can be unexpectedly persisted with the function between\n    invocations and erupt into mass hysteria on the streets.\n    \n    To my knowledge there aren\'t known cases of the current use causing\n    specific issues, but even stylistically needs addressing to avoid\n    problems in the future. I couldn\'t find any comments or related\n    historical commit messages indicating the current use is meant to take\n    advantage of this behavior in Python.\n    \n    Change-Id: I4a89afada08b2ce220724f585631a9e2072bf1bd\n    Fixes: bug 1174809\n',13,2,'IBM'),(273953,5146,5146,'2013-04-30 15:36:48','2013-04-30 15:36:48','    Uses None instead of mutable dicts for default function arguments\n    \n    Forgot to update dicts with changeset I4a89afad, which updated lists.\n    \n    Change-Id: Ieca71b9c90ee5dae83a43f6851b6b8b2924bcb8e\n    Fixes: bug 1174809\n',15,5,'IBM'),(273954,1,1,'2013-05-01 14:19:38','2013-04-28 18:32:12','    Update to flake8 instead of pep8.\n    \n    Change-Id: I3d4a31111c3044da06611405ce80f208ef8a0ce3\n',38,30,'HP'),(273956,826,826,'2013-05-01 22:25:08','2013-05-01 22:25:08','    Rename \"file\" to \"disk_file\"\n    \n    Broke this out into a separate commit since adding five characters\n    caused a few lines to get re-wrapped, adding more diffs.\n    \n    See John\'s comment from Patch Set #3 for the motivation for this\n    change in review https://review.openstack.org/27149.\n    \n    Change-Id: I1edf2cb468dcda0b781569161ada6e4016c1141c\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',73,69,'Red Hat'),(273957,4075,4075,'2013-04-30 00:17:46','2013-03-25 16:34:43','    conf.d support\n    \n    Allow Swift daemons and servers to optionally accept a directory as the\n    configuration parameter.  Directory based configuration leverages\n    ConfigParser\'s native multi-file support.  Files ending in \'.conf\' in the\n    given directory are parsed in lexicographical order.  Filenames starting with\n    \'.\' are ignored.  A mixture of file and directory configuration paths is not\n    supported - if the configuration path is a file behavior is unchanged.\n    \n     * update swift-init to search for conf.d paths when building servers\n        (e.g. /etc/swift/proxy-server.conf.d/)\n     * new script swift-config can be used to inspect the cumulative configuration\n     * pull a little bit of code out of run_wsgi and test separately\n     * fix example config bug for the proxy servers client_disconnect option\n     * added section on directory based configuration to deployment guide\n    \n    DocImpact\n    \n    Implements: blueprint confd\n    Change-Id: I89b0f48e538117f28590cf6698401f74ef58003b\n',699,73,'Rackspace'),(273959,826,826,'2013-04-22 12:23:23','2013-04-19 00:10:38','    Add an explicit unit test for handling content-length: 0\n    \n    Change-Id: I3568d4dc1900e6ddb4860589ca6a7b7039cc8c2d\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',18,0,'Red Hat'),(273961,729,729,'2013-05-03 17:48:31','2013-04-24 18:07:01','    Skip cname_lookup when host is an IP address\n    \n    cname_lookup cannot resolve IP addresses as CNAME records, and therefore\n    should not attempt to resolve the host in that case. The middleware is\n    skipped when the host is an IP address.\n    \n    Change-Id: I6961ec205e771116ace1ebcb8c088f3116eb38f0\n    Fixes: bug #1172289\n',24,0,'Red Hat'),(273962,5610,5610,'2013-04-26 16:36:08','2013-04-23 16:09:57','    Fix rebalance for zero weighted devices.\n    \n    If we set device\'s weight to zero, currently balance will be set\n    special value(999.99) until zero weighted device return all\n    its partitions. So we cannot check balance has changed.\n    Thus we need to check balance or last_balance is special value.\n    \n    Change-Id: I5b7db8b8e48db0c4771c51a764bda689869817d5\n    Fixes: bug #1171731\n',19,10,'Kakao Corp.'),(273964,4067,4067,'2013-05-01 21:16:18','2013-05-01 21:16:18','    Adds chunk_size to CompressingFileReader.\n    \n    Before when iterating using this object, the call to the underlying file object\n    was made without a chunk_size.  This is bad because this would cause the entire\n    contents of the file to be read.\n    \n    Change-Id: I9956e5d2d693a6260252fff331d4f78f70179a6c\n',5,2,'Rackspace'),(273966,5617,5617,'2013-05-07 19:33:37','2013-05-02 19:14:49','    Fixed issue with use of delimiter in container queries.\n    \n    Currently if you have a container with objects named\n    x/y and x0 and you use delimiter=/ in your query, x0\n    will be excluded from the results. This patch resolves\n    this problem.\n    \n    To replicate the original issue, create a container\n    called \'test\' with the following objects:\n    \n    x/y\n    x0\n    x1\n    \n    Then do a GET with \'accnt/test?delimiter=/\' and the\n    following is returned:\n    \n    x/\n    x1\n    \n    i.e. x0 is missing from output.\n    \n    Change-Id: If196e3075612b121ef8da4a9128167d00a248c27\n',51,9,'Canonical'),(273967,4064,4064,'2013-05-07 14:08:27','2013-05-07 13:44:14','    have tempurl allow OPTIONS requests\n    \n    Change-Id: I431cac1e9818a335ff8d20288ab6acf39d6b6d5e\n',10,0,'Rackspace'),(273969,5611,5611,'2013-05-06 19:21:53','2013-05-05 22:07:42','    Doc changes for new pip-requirements\n    \n    dnspython was added recently to the list of requirments.\n    \n    This patch completes the change:\n    1. The new requirement is documented\n    2. The need for tox --recreate is documented\n    (assuming there is no way to automate 2 above)\n    \n    Change-Id: I49f0cb4b01b79dd7cf4329984a2f8416378ebe19\n    Fixes: Bug #1176627\n',10,4,'IBM'),(273971,10,869,'2013-05-07 22:25:43','2013-05-02 14:53:48','    Allow 2 TempURL keys per account.\n    \n    This allows users to rotate their TempURL keys without invalidating\n    all existing signed URLs. This is handy if you have multiple systems\n    generating signed URLs, but you want to change your keys for some\n    reason (e.g. keys compromised, company policy, general paranoia).\n    \n    Both the first and second keys are optional, so existing accounts\'\n    signed URLs will continue to work as before.\n    \n    This commit does change the memcache key used to store the fetched\n    TempURL keys. This is because we were storing the old key as a string\n    in memcached, but the new one is a list of keys. Since the key cache\n    lifetime here is only 60 seconds, it doesn\'t seem like too big a deal\n    to completely flush the TempURL cache.\n    \n    Also, this commit adds caching of a negative TempURL result. If the\n    account HEAD reveals no TempURL keys at all, that result is now stored\n    for 60 seconds the same way that a positive result would be.\n    \n    Change-Id: I40a02bd607283fbce11aa52a9bb8a5846ab17f5e\n',117,53,'SwiftStack'),(273973,10,826,'2013-05-13 17:39:02','2012-11-15 16:34:45','    Enhance log msg to report referer and user-agent\n    \n    Enhance internally logged messages to report referer and user-agent.\n    \n    Pass the referering URL and METHOD between internal servers (when\n    known), and set the user-agent to be the server type (obj-server,\n    container-server, proxy-server, obj-updater, obj-replicator,\n    container-updater, direct-client, etc.) with the process PID. In\n    conjunction with the transaction ID, it helps to track down which PID\n    from a given system was responsible for initiating the request and\n    what that server was working on to make this request.\n    \n    This has been helpful in tracking down interactions between object,\n    container and account servers.\n    \n    We also take things a bit further performaing a bit of refactoring to\n    consolidate calls to transfer_headers() now that we have a helper\n    method for constructing them.\n    \n    Finally we performed further changes to avoid header key duplication\n    due to string literal header key values and the various objects\n    representing headers for requests and responses. See below for more\n    details.\n    \n    ====\n    \n    Header Keys\n    \n    There seems to be a bit of a problem with the case of the various\n    string literals used for header keys and the interchangable way\n    standard Python dictionaries, HeaderKeyDict() and HeaderEnvironProxy()\n    objects are used.\n    \n    If one is not careful, a header object of some sort (one that does not\n    normalize its keys, and that is not necessarily a dictionary) can be\n    constructed containing header keys which differ only by the case of\n    their string literals. E.g.:\n    \n       { \'x-trans-id\': \'1234\', \'X-Trans-Id\': \'5678\' }\n    \n    Such an object, when passed to http_connect() will result in an\n    on-the-wire header where the key values are merged together, comma\n    separated, that looks something like:\n    \n       HTTP_X_TRANS_ID: 1234,5678\n    \n    For some headers in some contexts, this is behavior is desirable. For\n    example, one can also use a list of tuples which enumerate the multiple\n    values a single header should have.\n    \n    However, in almost all of the contexts used in the code base, this is\n    not desirable.\n    \n    This behavior arises from a combination of factors:\n    \n       1. Header strings are not constants and different lower-case and\n          title-case header strings values are used interchangably in the\n          code at times\n    \n          It might be worth the effort to make a pass through the code to\n          stop using string literals and use constants instead, but there\n          are plusses and minuses to doing that, so this was not attempted\n          in this effort\n    \n       2. HeaderEnvironProxy() objects report their keys in \".title()\"\n          case, but normalize all other key references to the form\n          expected by the Request class\'s environ field\n    \n          swob.Request.headers fields are HeaderEnvironProxy() objects.\n    \n       3. HeaderKeyDict() objects report their keys in \".lower()\" case,\n          and normalize all other key references to \".lower()\" case\n    \n          swob.Response.headers fields are HeaderKeyDict() objects.\n    \n    Depending on which object is used and how it is used, one can end up\n    with such a mismatch.\n    \n    This commit takes the following steps as a (PROPOSED) solution:\n    \n       1. Change HeaderKeyDict() to normalize using \".title()\" case to\n          match HeaderEnvironProxy()\n    \n       2. Replace standard python dictionary objects with HeaderKeyDict()\n          objects where possible\n    \n          This gives us an object that normalizes key references to avoid\n          fixing the code to normalize the string literals.\n    \n       3. Fix up a few places to use title case string literals to match\n          the new defaults\n    \n    Change-Id: Ied56a1df83ffac793ee85e796424d7d20f18f469\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',459,274,'Red Hat'),(273974,4067,4067,'2013-05-13 19:17:31','2013-05-02 18:28:14','    Fix obscure double url bug in container quota middleware\n    \n    With the container quota middleware on, if you made a request similar to the\n    following one you\'d get a 500 response.\n    \n    curl -i -X PUT -H \'X-Auth-Token: token\'\n    http://127.0.0.1:8080/v1/AUTH_testhttp://something/something_else\n    \n    (Note the double url.)\n    \n    This was due to a mismatch in how split_path() was called in the middleware and\n    in the get_container_info().\n    \n    This change fixes that mismatch and the bug.\n    \n    Change-Id: Ie42ab585b942b7201e13b02a0c706532952aac60\n',10,2,'Rackspace'),(273976,826,826,'2013-05-14 12:07:21','2013-05-14 12:02:59','    Perform mount check after REST params valid on PUT\n    \n    All the other methods (POST, GET, HEAD, DELETE and REPLICATE) first\n    validate the REST parameters and headers before performing the mount\n    check. Do the same for PUT.\n    \n    Change-Id: I6e5f34cc65b57662b7f88224ca0e1501787e0f43\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',2,2,'Red Hat'),(273977,4064,4064,'2013-05-08 10:00:21','2013-04-30 14:45:46','    Refactor Bulk middleware to handle long running requests\n    \n    Change-Id: I8ea0ff86518d453597faae44ec3918298e2d5147\n',330,227,'Rackspace'),(273979,799,799,'2013-04-21 18:14:42','2012-12-17 06:39:25','    Implementation of replication servers\n    \n    Support separate replication ip address:\n    - Added new function in utils. This function provides ability\n      to select separate IP address for replication service.\n    - Db_replicator and object replicators were changed.\n      Replication process uses new function now.\n    \n    Replication network parameters:\n    - Replication network fields (replication_ip, replication_port)\n      support was added to device dictionary in swift-ring-builder script.\n    - Changes were made to support new fields in search, show and set_info\n      functions.\n    \n    Implementation of replication servers:\n    - Separate replication servers use the same code as normal replication\n      servers, but with replication_server parameter = True.  When using a\n      separate replication network, the non-replication servers set\n      replication_server = False.  When there is no separate replication\n      network (the default case), replication_server is not included in the config.\n    \n    DocImpact\n    Change-Id: Ie9af5bdcdf9241c355e36053ca4adfe49dc35bd0\n    Implements: blueprint dedicated-replication-network\n',1648,107,'Mirantis'),(273981,283,283,'2013-05-15 17:04:03','2013-04-24 23:05:28','    Metadata retrieving from sqlite must be str for key\n    \n    Encode metadata key as utf8 if key is unicode when\n    retriving it from sqlite database.\n    \n    Change-Id: I4ba11543d1bed17098b5e52dd768c75b403188a1\n    Fixes: bug #1172202\n',89,0,'eNovance'),(273983,869,869,'2013-05-03 14:08:08','2013-05-03 14:08:08','    Skip IPv6 addresses in cname_lookup middleware.\n    \n    It already skips IPv4 addresses, and since IPv6 is the future of the\n    Internet*, we should probably do the right thing with those too.\n    \n    * IPv6: Just two years away for over fifteen years!\n    \n    Change-Id: I54f1db4e936fd38d05ac8b5c709efba76525b9d2\n',11,3,'SwiftStack'),(273985,869,869,'2013-05-15 16:53:17','2013-05-15 16:53:17','    Remove dead code.\n    \n    While it is true that one *could* call ContainerBroker.get_info() with\n    include_metadata=True, it is also true that nobody actually does.\n    \n    It\'s also true that the code path taken when include_metadata=True is\n    broken in the case of non-ASCII metadata keys\n    (e.g. X-Container-Meta-☃: snowman), so leaving it around is just\n    asking for future pain.\n    \n    Change-Id: I4931add4b8fb7c4f57820e52f182c21040d8db10\n',7,19,'SwiftStack'),(273987,5611,5611,'2013-05-16 20:54:05','2013-04-24 21:58:15','    Autocreate cleanups\n    \n    Autocreate was messy - now cleaned.\n    Auto-create now occurs at account POST, and container PUT only.\n    A method for autocreation was added\n    Autocreation was removed from account_info and container_info.\n    \n    Fake-it as if the account exists on account HEAD and account GET.\n    \n    Return 404 on everything else when the account does not exist.\n    \n    Fix: Bug #1172223\n    Fix: Bug #1179140\n    Change-Id: Iac54c1438eb09883fbc29a1ad2ac2245b95efc92\n',149,148,'IBM'),(273989,26,26,'2013-05-11 21:48:00','2013-05-11 19:51:03','    Moved some code out of swift.obj.replicator\n    \n    This will be needed in future replication work to avoid circular\n    imports.\n    \n    I used swift.obj.base as the module name just because we seemed to\n    avoid putting code in __init__.py files so far and I didn\'t want to\n    buck the trend.\n    \n    I would love to see other obj things like *_metadata and DiskFile\n    move into swift.obj.base as well and swift.obj.server just be the\n    WSGI server logic, but I\'ll leave that for the future.\n    \n    I have changed the tests as little as possible (just the references\n    to where they get the code to test) to show the refactor has not\n    broken anything. I did add a test for tpool_reraise since there was\n    none before.\n    \n    There will be a follow on patch for moving the tests to their new\n    location(s). I figured I\'d wait to put the bikes in the shed until\n    everyone\'s done painting it.\n    \n    Change-Id: I32b4ac88be21eb76c877d3f4cc1e6ac33304835b\n',261,223,'Rackspace'),(273991,26,26,'2013-05-17 14:27:13','2013-05-17 14:25:29','    Moved tests for moved obj.base code\n    \n    Follow-on to https://review.openstack.org/#/c/28895/\n    \n    Moved the tests for the code that was moved to obj.base and also made\n    the new test file flake8 compliant.\n    \n    Change-Id: I4be718927b6cd2de8efe32f8e54b458a4e05291b\n',294,194,'Rackspace'),(273992,4056,4056,'2013-05-11 13:37:16','2013-05-08 14:43:56','    Don\'t delete containers when they weren\'t created.\n    \n    When swift-bench is run in direct mode, don\'t try to delete the\n    containers which weren\'t created.\n    \n    Fixes bug 1177960.\n    \n    Change-Id: Ice07e8729bb776e2b215894cf95fb80b64167a8d\n',3,2,'SwiftStack'),(273994,4056,4056,'2013-05-11 14:31:42','2013-05-11 14:31:42','    Fix two documentation warnings.\n    \n    The crossdomain doc was named *.xml instead of *.rst causing it to not\n    get built or included in the toctree where it was supposed to.\n    \n    The apache deployment guide wasn\'t linked to from anywhere, so I added\n    it under the normal deployment guide.\n    \n    Change-Id: I817a1f2ca1ed7913e8ea5155cc1fac07caf0b637\n',56,55,'SwiftStack'),(273996,826,826,'2013-05-20 17:29:20','2013-05-20 17:29:20','    Set TZ environment variable to avoid a stat call\n    \n    By setting the TZ environment variable for the WSGI process we avoid\n    the stat(\"/etc/localtime\") on every request handled that logs using\n    strftime().\n    \n    Change-Id: Ifc78236a99ed193a42389e383d062b38f57a5a31\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',6,0,'Red Hat'),(273998,5615,5615,'2013-05-16 19:49:00','2013-05-16 19:38:42','    Add ability to save builder data to a disk file\n    \n    Instances of the RingBuilder class can store its data to a disk file by\n    the save method and load it by the load method.\n    \n    blueprint argparse-in-swift-ring-builder\n    \n    Change-Id: I69fdf0693ca9f520d235a795ecdd2da310dcd5d3\n',75,20,'Mirantis'),(274000,5618,5618,'2013-05-17 09:54:52','2013-05-16 22:51:43','    Move common code into a separate function.\n    \n    test_get_valid and test_get_valid_key2 test tempurl with a\n    single key and two keys respectively. This change moves common code\n    for these tests into a separate function.\n    \n    Change-Id: Ifee211285e27df03d041a4c357b7c1f0c96ed6a8\n',12,19,'Maginatics'),(274002,826,826,'2013-05-20 22:31:03','2013-05-20 22:29:52','    Add unit tests to ensure TZ variable remains set\n    \n    See review https://review.openstack.org/29836.\n    \n    Change-Id: I8ec80202789707f723abfe93ccc9cf1e677e4dc6\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',25,12,'Red Hat'),(274004,869,869,'2013-05-21 13:19:38','2013-05-14 13:04:01','    Fix ValueError from handoff logging.\n    \n    If you have StatsD logging turned on, then the iterator returned by\n    Ring.get_part_nodes() will emit StatsD packets when it yields a\n    handoff node. That network IO may make eventlet trampoline to another\n    greenthread before returning from next(). Now, if that other\n    greenthread tries to call next() on that same iterator, it blows up\n    with a ValueError.\n    \n    Any socket IO inside a generator\'s next() method can cause this. It\'s\n    easiest to reproduce with StatsD logging turned on, but logging to\n    syslog can trigger it too.\n    \n    You can see this happen sometimes in the proxy\'s make_requests method\n    if two of the primary nodes are down. Greenthread A goes into next()\n    to get a handoff node, then sends a StatsD packet, and so eventlet\n    trampolines to Greenthread B. Now, Greenthread B also calls next() to\n    get a handoff node, and dies with a ValueError.\n    \n    This commit wraps up concurrently-accessed iter_nodes() iterators in a\n    new thing called a GreenthreadSafeIterator that serializes access.\n    \n    Bug 1180110\n    Change-Id: I8fe13d7295c056a2cab9e084f5966078a49bdc13\n',98,4,'SwiftStack'),(274005,4064,4064,'2013-05-21 10:59:44','2013-05-07 09:40:53','    close socket on exceptions\n    \n    Change-Id: I0dee7c109d32e6325845df9ba6e1fbf23a2d1b89\n',31,8,'Rackspace'),(274007,10,826,'2013-05-22 16:01:22','2013-04-18 20:42:36','    Hide the file descriptor and disk write methodology for PUTs\n    \n    Towards moving the DiskFile class into place as the API definition for\n    pluggable DiskFile backends, we hide the file descriptor and the\n    method of writing data to disks. The mkstemp() method has been renamed\n    to writer(), and no longer returns an fd, but a new object that\n    encapsulates the state tracked for writes. This new object is then\n    used directly to perform the reminder of the write operations and\n    application of required semantics.\n    \n    Change-Id: Ib37ed37b34a2ce6b442d69f83ca011c918114434\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',190,166,'Red Hat'),(274008,1020,1020,'2013-05-22 15:07:17','2013-05-20 16:52:54','    account-reaper warns if not making progress\n    \n    DocImpact\n    If account reaper has not managed to clean out an account after a long\n    period, it prints a message to the log (you can search your system looking\n    for such messages). Introduce reap_warn_after config variable to determine\n    when to emit the message (defaults to 30 days).\n    \n    Also fix bug 1181995 (edge case where object name is an empty string)\n    \n    Change-Id: Ic0dfee04742d06b6a51b59f302d7a272d7c1de92\n',34,1,'HP'),(274010,2664,2664,'2013-05-21 23:21:50','2013-05-21 18:57:17','    Fix problem with changing class attribute\n    \n    Attribute get_repl_missing_table in FakeBroker class was changed in\n    test_replicate_object_quarantine function and not returned back. That\'s\n    why next test cases takes not expexted values from FakeBroker.\n    \n    fixes bug 1180354\n    Change-Id: Iba55255771e6483832c7782fcbe331e20e818f4e\n',30,24,'Mirantis'),(274012,26,26,'2013-05-23 20:06:28','2013-05-23 19:49:34','    Put some comments in places we get asked about a lot\n    \n    Change-Id: If932b82f4e225cfdda21f47e4215c6f4c59dae4a\n',38,0,'Rackspace'),(274013,4533,4533,'2013-05-23 22:41:04','2013-05-23 22:41:04','    Fixed probetests\n    \n    * Fixed issue with running probetests with the latest update\n      of python-swiftclient that removed eventlet\n    * Fixed issue with replication server tests to not require hard\n      coded paths\n    \n    Change-Id: Ibbf727ae99c0f3893ae58e270e2f879a1f618e49\n',103,88,'Rackspace'),(274015,5615,5615,'2013-05-24 17:12:34','2013-05-16 16:58:03','    Move parse search logic outside from builder\n    \n    Dramatic part of RingBuilder.search_devs which parse a complex format\n    of a search device string moved to the swift-ring-builder script.\n    Instead, the search_devs has a simple interface to search devices.\n    \n    blueprint argparse-in-swift-ring-builder\n    \n    Change-Id: If3dd77b297b474fb9a058e4693fef2dfb11fca3d\n',213,154,'Mirantis'),(274016,5583,5583,'2013-05-23 15:06:12','2013-05-22 14:33:44','    Retrieve the swift version with recon\n    \n    Adding a \'/recon/version\' in order to get the swift version\n    \n    Change-Id: I7b7ddbe70abb87c6a3b1010ddefa09d0acc09710\n',15,0,'Rackspace'),(274018,733,733,'2013-05-28 07:26:46','2013-05-28 07:22:42','    Made tests use a JSON parser in liue of eval.\n    \n    The results that are being parsed are really JSON, so using a JSON parser is\n    more semantically correct; in addition using eval anywhere can set a bad\n    example.\n    \n    Change-Id: Idcd55400b2571aba0f2f377cf66a3cbf4d3af960\n',4,4,'Rackspace'),(274019,5615,5615,'2013-05-24 17:34:24','2013-05-16 18:44:41','    RingBuilder.add_dev returns device id\n    \n    When added a new devices into builder the add_dev function returns it\n    unique id.\n    \n    blueprint argparse-in-swift-ring-builder\n    \n    Change-Id: I57080bb625e812f6cea71199df907a44b332b552\n',13,8,'Mirantis'),(274021,869,869,'2013-05-29 21:19:32','2013-05-29 18:55:10','    In TempURL, cache \"no keys\" for a shorter time.\n    \n    In other places in the codebase, we cache a negative result for less\n    time (usually a tenth) than we cache a positive result. This commit\n    makes TempURL do the same.\n    \n    This creates a slightly nicer experience for someone trying to set up\n    TempURL; if they get the initial key setup wrong, try it, then fix it,\n    it now takes only 6 seconds until they can use signed URLs, not\n    60. That\'s a short enough time that they may not even notice the\n    caching of no keys.\n    \n    Change-Id: I521f023e7cddaecd07f0ce32aedd4059bd0b8ec4\n',43,1,'SwiftStack'),(274022,26,26,'2013-05-29 15:06:25','2013-05-29 15:02:06','    Subtle change to tempurl content-disposition names\n    \n    If an object name ends with a /, the content-disposition filename for\n    a tempurl ended up as an empty string. This fix just strips any\n    trailing slashes before calling basename.\n    \n    Also, I added a test to verify that if the filename is passed as an\n    overriding query parameter, that it is used in full, no rstripping,\n    no basenaming.\n    \n    Change-Id: I37725b6ded04ed3b91cdb21132490fd857276e2f\n',40,2,'Rackspace'),(274024,826,826,'2013-05-29 00:48:53','2013-05-25 16:30:07','    Move parameter checking before disk accesses\n    \n    For HEAD and GET requests on both containers and accounts APIs we now\n    perform parameter checking before we access the database. The unit\n    tests were updated to show that the parameter checking is performed\n    before accesses are performed.\n    \n    Change-Id: Ieb753316cdccabf45022e3d83522d87d34aa6b0e\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',106,78,'Red Hat'),(274026,10,5611,'2013-05-24 19:26:10','2013-05-02 22:50:41','    Handle DB creation race condition\n    \n    Till now if a race occurs on a request to a DB when it is\n    first created, the loosing party die with 500...\n    ... and an error stating a race is in the log file.\n    \n    Both removed by simply accepting the fact that the DB is in fact\n    created by someone else - just less work for us to do... ;)\n    \n    Fixes Bug #1051998\n    \n    Change-Id: I8e29bf362edf2b1a84f9bffa39c04d5b3dc241b2\n',46,12,'IBM'),(274028,826,826,'2013-05-25 21:05:56','2013-04-19 00:10:38','    Rework to support RFC 2616 Sec 4.4 Message Length\n    \n    RFC 2616 Sec 4.4 Message Length describes how the content-length and\n    transfer-encoding headers interact. Basically, if chunked transfer\n    encoding is used, the content-length header value is ignored and if\n    the content-length header is present, and the request is not using\n    chunked transfer-encoding, then the content-length must match the body\n    length.\n    \n    The only Transfer-Coding value we support in the Transfer-Encoding\n    header (to date) is \"chunked\". RFC 2616 Sec 14.41 specifies that if\n    \"multiple encodings have been applied to an entity, the\n    transfer-codings MUST be listed in the order in which they were\n    applied.\" Since we only supported \"chunked\". If the Transfer-Encoding\n    header value has multiple transfer-codings, we return a 501 (Not\n    Implemented) (see RFC 2616 Sec 3.6) without checking if chunked is the\n    last one specified. Finally, if transfer-encoding is anything but\n    \"chunked\", we return a 400 (Bad Request) to the client.\n    \n    This patch adds a new method, message_length, to the swob request\n    object which will apply an algorithm based on RFC 2616 Sec 4.4\n    leveraging the existing content_length property.\n    \n    In addition to these changes, the proxy server will now notice when\n    the message length specified by the content-length header is greater\n    than the configured object maximum size and fail the request with a\n    413, \"Request Entity Too Large\", before reading the entire body.\n    \n    This work flows from https://review.openstack.org/27152.\n    \n    Change-Id: I5d2a30b89092680dee9d946e1aafd017eaaef8c0\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',325,17,'Red Hat'),(274030,26,26,'2013-05-31 13:19:24','2013-05-31 13:09:26','    Replaced <exc>.message with str(<exc>)\n    \n    Change-Id: I9a030b84dafe2b2300e8735052f6f15f34bc7aa7\n',8,8,'Rackspace'),(274031,26,26,'2013-05-31 00:29:12','2013-05-31 00:27:09','    Mock SysLogHandler for proxy/test_server.py\n    \n    Our tests get rather grabby with file descriptors, mostly due to the\n    SysLogHandler. In recent work I\'m doing, my additional tests put\n    things just over the 1024 limit and tests would start to fail\n    somewhat randomly. This alleviates the problem by mocking out one of\n    the bigger users of SysLogHandler, proxy/test_server.py. If you want\n    to verify this has an impact, you can put the following in your\n    proxy/test_server.py\'s overall teardown method and try it with and\n    without the mocking:\n    \n        import subprocess\n        print >>sys.stderr, \'%s OPEN FILES\' % len(subprocess.Popen(\n            [\'lsof\'], stdout=subprocess.PIPE).communicate()[0].split(\'\\n\'))\n    \n    Change-Id: I1bd3efe46ee69d09a32c5a964f04e36e46506446\n',4,1,'Rackspace'),(274033,10,2219,'2013-05-30 22:14:01','2013-05-29 22:03:40','    Rename requires files to standard names.\n    \n    Rename tools/pip-requires to requirements.txt and tools/test-requires\n    to test-requirements.txt. These are standard files, and tools in the\n    general world are growing intelligence about them.\n    \n    Change-Id: Ib3e50a811868e2969923d978ee00c4f92682aa1c\n    Fixes: bug #1179008\n',23,23,'independent'),(274035,5615,5615,'2013-06-03 19:26:20','2013-06-02 00:43:26','    Add requirements files to the source distribution\n    \n    Also remove the tools directory, since it is no longer used, now that\n    https://review.openstack.org/30887 is merged, which renamed the\n    requirements files to requirements.txt and test-requirements.txt.\n    \n    Fixes bug 1186625\n    \n    Change-Id: Icf1ef1d2d83140420163c25257d4802282063cfa\n',1,1,'Mirantis'),(274036,869,869,'2013-05-30 17:43:03','2013-05-23 18:53:51','    Fix faked-out account GET for JSON and XML.\n    \n    If account autocreation is on and the proxy receives a GET request for\n    a nonexistent account, it\'ll fake up a response that makes it look as\n    if the account exists, but without reifying that account into sqlite\n    DB files.\n    \n    That faked-out response was just fine as long as you wanted a\n    text/plain response, but it didn\'t handle the case of format=json or\n    format=xml; in those cases, the response would still be\n    text/plain. This can break clients, and certainly causes crashes in\n    swift3. Now, those responses match as closely as possible.\n    \n    The code for generating an account-listing response has been pulled\n    into (the new) swift.account.utils module, and both the fake response\n    and the real response use it, thus ensuring that they can\'t\n    accidentally diverge. There\'s also a new probe test for that\n    non-divergence.\n    \n    Also, cleaned up a redundant matching of the Accept header in the code\n    for generating the account listing.\n    \n    Note that some of the added tests here pass with or without this code\n    change; they were added because the code I was changing (parts of the\n    real account GET) wasn\'t covered by tests.\n    \n    Bug 1183169\n    \n    Change-Id: I2a3b8e5d9053e4d0280a320f31efa7c90c94bb06\n',325,71,'SwiftStack'),(274038,5619,5619,'2013-05-31 15:57:19','2013-03-11 11:15:41','    implement an rsync_bwlimit setting for object replicator\n    \n    Change-Id: I8789d6e4d22de83db9a2760d51a94eb56a48c3b5\n',6,0,'independent'),(274040,826,826,'2013-06-04 10:14:18','2013-05-31 11:30:17','    Change to use dash instead of slash\n    \n    There is no known way to embed slashes into container names, even when\n    using URL escape sequences. Since it would seem that the more common\n    case would be some other character, we validate using a dash (\'-\')\n    character as the delimiter.\n    \n    It should also be noted that the documentation for container listing,\n    found here:\n    http://docs.openstack.org/api/openstack-object-storage/1.0/content/s_listcontainers.html,\n    does not describe the use of the prefix or delimiter parameters.\n    \n    DocImpact\n    \n    Change-Id: Ie467a4181c6f64b24c82c72b70a37183d443dee1\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',67,67,'Red Hat'),(274042,2206,2206,'2013-06-07 11:40:08','2013-06-06 17:59:31','    Remove <cond> and <val1> or <val2> systax\n    \n    Use <val1> if <cond> else <val2> instead.\n    There\'re more talks:\n    [0] http://stackoverflow.com/questions/394809/ternary-conditional-operator-in-python\n    [1] http://www.python.org/dev/peps/pep-0308/\n    \n    Fixes bug 1188111\n    \n    Change-Id: I485e674317faf319a26ab30c2c193d8464a7e46e\n',4,4,'UnitedStack'),(274043,42,42,'2013-06-06 19:41:13','2013-06-06 19:41:13','    Improve config samples\n    \n    - Add proxy-logging to multinode. We had it since Folsom and people\n      still forget it, resulting in missing logs.\n    - Use correct name, for ease hit with \'*\' in vi at least.\n    \n    Admittedly trivial changes, which I meant to hold until Leah\'s major\n    doc improvement lands, but I\'m tired of keeping stuff like this in\n    my working repo.\n    \n    Change-Id: I44f80c51d6d7329a9b696e67fcb8a895db63e497\n',5,2,'Red Hat'),(274045,869,869,'2013-06-06 15:35:19','2013-06-06 15:35:19','    Make sample configs more readable.\n    \n    Inject some empty lines to avoid the wall-of-text effect and to make\n    it a little clearer which descriptions go with which options.\n    \n    Change-Id: I58914b83dad76ea5ca330903a246bee7ffaeba83\n',113,0,'SwiftStack'),(274047,42,42,'2013-06-06 08:32:55','2013-06-06 08:32:55','    Restore loadapp checking\n    \n    This problem surfaced when Red Hat QA started installing Grizzly\n    and hit a regression from Folsom. If something is wrong with\n    permissions (it may be SElinux, or any other problem), the servers\n    in 1.8.0 enter a loop, spamming logs with huge tracebacks at a rate\n    of a one to two each second, depending how many workers are there.\n    In 1.7.4, the server exited with an error message.\n    \n    The offending commit is 9efa9be167b972a234ecccd9ba37bdd8a949381e,\n    \"Separate wsgi init from web-front-end activation\". It relocates\n    the probing invocation of loadapp() in front of drop_privileges().\n    But in such case, it runs as root and thus may succeed while the\n    rest of the server fails.\n    \n    The fix is to return loadapp to the place it was in Folsom. Since\n    the init_request_processor() is used when running under Apache,\n    preserve that API too.\n    \n    Change-Id: I166332eb9375229aefed6b9c3ef1a992a3e4efd0\n',22,13,'Red Hat'),(274049,26,26,'2013-06-08 20:00:32','2013-06-03 23:50:05','    Fixed Bug 1187200\n    \n    See Bug 1187200 for a full description of the problem.\n    \n    Part 1:\n    \n    X-Delete-At-Container added to X-Delete-At-* info\n    \n    This fixes the bug by passing the expiring-objects-account\'s\n    container name onward to the backend object servers. This is in case\n    the object servers\' expiring_objects_container_divisor happens to be\n    different than the proxy server\'s, we want to make sure the host,\n    partition, and device match up with the container name. Different\n    container names would be fine, but not with mismatched host,\n    partition, and device info.\n    \n    Part 2:\n    \n    The db_replicator now double checks the disk path\'s partition against\n    the partition the ring gives back. If they don\'t match, it logs the\n    problem but continues to replicate the database to where it should be\n    and, on success to all proper nodes, removes the local out of place\n    database.\n    \n    Bug 1187200\n    \n    Change-Id: Id0873a3f2198ce285fe0b0c777738eff38bc2438\n',241,43,'Rackspace'),(274051,869,869,'2013-06-10 16:51:47','2013-06-06 18:01:35','    Local read affinity for GET/HEAD requests.\n    \n    Now you can configure the proxy server to read from \"local\" primary\n    nodes first, where \"local\" is governed by the newly-introduced\n    \"read_affinity\" setting in the proxy config. This is desirable when\n    the network links between regions/zones are of varying capacities; in\n    such a case, it\'s a good idea to prefer fetching data from closer\n    backends.\n    \n    The new setting looks like rN[zM]=P, where N is the region number, M\n    is the optional zone number, and P is the priority. Multiple values\n    can be specified by separating them with commas. The priority for\n    nodes that don\'t match anything is a very large number, so they\'ll\n    sort last.\n    \n    This only affects the ordering of the primary nodes; it doesn\'t affect\n    handoffs at all. Further, while the primary nodes are reordered for\n    all requests, it only matters for GET/HEAD requests since handling the\n    other verbs ends up making concurrent requests to *all* the primary\n    nodes, so ordering is irrelevant.\n    \n    Note that the default proxy config does not have this setting turned\n    on, so the default configuration\'s behavior is unaffected.\n    \n    blueprint multi-region\n    \n    Change-Id: Iea4cd367ed37fe5ee69b63234541d358d29963a4\n',164,21,'SwiftStack'),(274053,826,826,'2013-06-10 13:43:05','2013-06-04 16:45:42','    Add non-slash delimiter tests\n    \n    Also expand the logic following the select statement in\n    list_objects_iter and list_containers_iter to document the state\n    following the prefix and delimiter tests.\n    \n    Also remove doc strings which obscure test names when run with\n    \"./.unittests\" script.\n    \n    Performance Note:\n    \n    The following simple python program illustrates the performance\n    advantage of not attempting to invoke startswith() method of a string\n    when we know the argument is an empty string.\n    \n        import time\n    \n        curs = []\n        for i in range(10000):\n            curs.append([\'nameofthing%d\'%(i), 1, 2, 3, 4])\n    \n        beg = time.time()\n        for i in range(1000):\n            x = [r for r in curs]\n        end = time.time()\n        print \"without: %.2f\" % (end - beg)\n    \n        beg = time.time()\n        for i in range(1000):\n            y = [r for r in curs if r[0].startswith(\'\')]\n        end = time.time()\n        print \"with: %.2f\" % (end - beg)\n    \n        # Output:\n        # $ python ~/test_startswith.py\n        # without: 0.60\n        # with: 2.73\n    \n    Change-Id: I1ac72cd7932953b0efe7db8ff591829b985b8d73\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',246,28,'Red Hat'),(274055,5611,5611,'2013-06-11 17:45:06','2013-06-10 13:18:42','    Tempauth - remove change made to HTTP_X_AUTH_TOKEN\n    \n    tempauth changes HTTP_X_AUTH_TOKEN although not required by function\n    preventing swift extendability.\n    (prevents other middleware to rely on HTTP_X_AUTH_TOKEN representing\n    the token sent by the client).\n    \n    Change-Id: I7ed6f9b5d0a5a203326a3912ef27cf29d2d4e9ce\n    Fixes: Bug #1189410\n',4,5,'IBM'),(274057,869,869,'2013-06-07 13:06:04','2013-03-19 22:27:21','    Use threadpools in the object server for performance.\n    \n    Without a (per-disk) threadpool, requests to a slow disk would affect\n    all clients by blocking the entire eventlet reactor on\n    read/write/etc. The slower the disk, the worse the performance. On an\n    object server, you frequently have at least one slow disk due to\n    auditing and replication activity sucking up all the available IO. By\n    kicking those blocking calls out to a separate OS thread, we let the\n    eventlet reactor make progress in other greenthreads, and by having a\n    per-disk pool, we ensure that one slow disk can\'t suck up all the\n    resources of an entire object server.\n    \n    There were a few blocking calls that were done with eventlet.tpool,\n    but that\'s a fixed-size global threadpool, so I moved them to the\n    per-disk threadpools. If the object server is configured not to use\n    per-disk threadpools, (i.e. threads_per_disk = 0, which is the\n    default), those call sites will still ultimately end up using\n    eventlet.tpool.execute. You won\'t end up blocking a whole object\n    server while waiting for a huge fsync.\n    \n    If you decide not to use threadpools, the only extra overhead should\n    be a few extra Python function calls here and there. This is\n    accomplished by setting threads_per_disk = 0 in the config.\n    \n    blueprint concurrent-disk-io\n    Change-Id: I490f8753d926fdcee3a0c65c5aaf715bc2b7c290\n',345,53,'SwiftStack'),(274059,4067,4067,'2013-06-07 20:49:47','2013-05-01 21:11:25','    Add parallelism to object expirer daemon.\n    \n    Two types of parallelism are added:\n    \n    - concurrency to speed up what a single process does\n    - a way to run multiple daemons to work on different parts of the work\n    \n    DocImpact\n    \n    Change-Id: I48997f68eb2fd8de19a5ee8b9fcdf76dde2ba0ab\n',297,54,'Rackspace'),(274061,5611,5611,'2013-06-08 14:20:37','2013-03-30 15:55:29','    get_info - removes duplicate code (Take 3)\n    \n    Consolidate the different ways in which info of account/container\n    is gathered, cached, used, updated, etc.\n    \n    This refactoring increases code reuse and is a basis for later\n    addition of account ACLs.\n    Changing the get_info users is left for future.\n    This staged approach ensures the behaviour is unchanged.\n    \n    Change-Id: I67b58030d3f9e3bc86bcd7ece0f1dc693c4e08c3\n    Fixes: Bug #1162199\n',809,380,'IBM'),(274063,40,40,'2013-06-12 13:12:57','2013-06-12 13:10:08','    Fix functional tests with keystone.\n    \n    - Make sure storage_url is string and not unicode or the unicode\n      no_safe_quote test will not get this nicely.\n    - Fixes bug 1190190.\n    \n    Change-Id: I945f2b94f2063b836c10131fa4bd57938ed48f3c\n',5,1,'eNovance'),(274065,2206,2206,'2013-06-09 01:16:49','2013-06-09 01:14:23','    Add UT for checking special chars in object name\n    \n    Add special chars could help checking quote/unquote, encode/decode\n    problems. Those two is one of most common mistakes.\n    \n    Change-Id: Ife1c0b481f08c1666d62b4fb51b7fdcdfdbf2ba6\n',48,0,'UnitedStack'),(274067,2206,2206,'2013-06-13 11:55:03','2013-06-08 16:01:50','    Improve SAIO deploy document.\n    \n    improving points:\n    1. Remove yum install swift in Fedora; Use installing from source for\n    both Ubuntu and Fedora.\n    2. Explain you could use all users including root, your own guest. An\n    d the points developer have to care.\n    \n    Change-Id: Id6d683441bd790a21734624e29eb7c98bb40de85\n    Fixes: bug #1126389\n',8,7,'UnitedStack'),(274069,40,40,'2013-06-12 21:02:08','2013-06-12 16:26:23','    Fix formpost with queries without user_agent.\n    \n    - Fixes bug 1190220.\n    \n    Change-Id: I3d46cc8f26ce9970dacb82bc5243b3528788c785\n',27,2,'eNovance'),(274071,3,733,'2013-06-13 15:38:16','2013-05-27 02:07:39','    Checked user input in XML responses.\n    \n    Fixes bug 1183884.\n    \n    * swift/account/utils.py: Escape account name in XML listings.\n    \n    Change-Id: I2392d012ddeec05a267c3dcf14748112316096f3\n',1,1,'Rackspace'),(274072,26,26,'2013-06-13 15:14:35','2013-06-13 15:14:35','    Added logging of x-delete-at values\n    \n    Added logging of the x-delete-at value for object PUTs and POSTs and\n    made the additional log field generic for other similar use cases.\n    \n    Logging the x-delete-at is useful because otherwise you might never\n    know why an object \"disappeared\" just by looking at saved proxy logs.\n    You\'d see a successful PUT of the object followed some time by a GET\n    that 404s. If you still have the other logs, you could track down\n    what happened; but, at least with our clusters, we keep proxy logs\n    forever but only keep the other logs for a short while.\n    \n    Change-Id: Ida559abcf8dc5666e2a7eea250a67d1c4b28b1be\n',56,1,'Rackspace'),(274074,42,42,'2013-06-13 18:29:06','2013-06-13 18:28:00','    Remove Lucid/ppa instructions from SAIO guide\n    \n    Lucid won\'t EOL until May of 2014; but I stopped trusting that ppa a long time\n    ago. Besides with the requires for dnspython and mock where they\'re at you\n    almost can\'t install swift from source on any stock distro and expect tests to\n    pass with system packages - so we\'re looking at pypi for depends regardless.\n    \n    While I\'m in there:\n    \n    * more explanation of <your-user-name> and a helpful find/sed for configs\n    * group the \"setup ~/.bashrc\" stuff with the \"setup ~/bin\" stuff\n    * some updates/fixes from my experience installing on CentOS\n    * remove region warnings from remakerings\n    \n    Change-Id: Ie2e6b06959ab699d853e07e5b7e8cda7036a44fe\n',95,71,'Red Hat'),(274075,869,869,'2013-06-13 18:13:57','2013-06-13 11:13:36','    Better escaping for GET /v1/a?format=xml.\n    \n    Commit 8f9b135 fixed a bug where an XML attribute could have arbitrary\n    characters jammed into it, resulting in a document with arbitrary\n    tags... and it did remove the ability to get an arbitrary XML document\n    out of the object server. However, it left a couple of ways to get a\n    malformed XML document, one example of which is an account named \".\n    \n    This fixes up the remaining ways and ensures you always get a\n    well-formed XML document in the account-listing response. Also, it\n    adds a unit test for the escaping of the container name; this was\n    already working, just untested.\n    \n    If you look in the discussion for bug 1183884, you\'ll see that the\n    review comments there are basically \"seems good, but could use a unit\n    test\". (The astute reader will note that I am one of the guilty\n    parties in that review.)\n    \n    I found this bug while writing the missing unit test.\n    \n    The moral of this story is left as an exercise for the reader.\n    \n    Fixes bug 1183884 harder.\n    \n    Change-Id: I84b24dd930ba1bb6c4f674f8d3996639dedbce15\n',38,1,'SwiftStack'),(274077,4056,4056,'2013-06-08 10:55:41','2013-06-08 10:55:41','    Fix ring validate with device prior to rebalance.\n    \n    A builder file with some devices added but before rebalance() is called\n    should be invalid (in the sense that validate() raises\n    RingValidationError instead of TypeError).\n    \n    Change-Id: I5538239db4b2fde83be2390014504e35ccd7c0d3\n',9,0,'SwiftStack'),(274079,869,869,'2013-06-12 15:55:47','2013-06-12 15:50:13','    Fix 503 on account/container HEAD w/invalid format.\n    \n    A HEAD request to /v1/a[/c]?format=%FF would result in a 503 since\n    there was an unhandled UnicodeDecodeError. Now it doesn\'t.\n    \n    bug 1190395\n    \n    Change-Id: I4d8ec677092617391fe154a25f22d919536a72a5\n',28,4,'SwiftStack'),(274081,26,26,'2013-06-14 16:18:20','2013-06-14 15:29:08','    More xml fixes\n    \n    subdir elements now have their names quoteattr\n    \n    Change-Id: I37faf164e339deacb6555db94196135debe22a6c\n',51,8,'Rackspace'),(274083,4533,4533,'2013-06-14 15:19:28','2013-06-14 15:19:28','    Fixed some minor doc building errors\n    \n    Change-Id: I91709c3fc6e937fdb31b418ac98fe5a67265cea7\n',5,3,'Rackspace'),(274085,5606,5606,'2013-06-06 20:56:08','2013-05-10 20:50:56','    Treat directory objects as not found\n    \n    Make StaticWeb search for an index file rather than returning a 0-byte\n    object.\n    \n    Add new StaticWeb header to identify a directory marker object:\n    X-Container-Meta-Web-Directory-Type (default to application/directory)\n    so user can specify the content type for directory marker objects.\n    This required requesting the container headers earlier in the code and\n    clearing the value of _error for non-404 errors.\n    \n    Add unit tests for directory object scenarios.\n    Fix end tags in an unrelated HTML block.\n    \n    Bug 1178817\n    \n    DocImpact\n    \n    Change-Id: I561f00c099feaa82fd658f5050bd90c76717da24\n',153,31,'HP'),(274087,826,826,'2013-06-10 10:30:40','2013-06-02 21:28:56','    Add branch coverage reporting\n    \n    Except where the python-nose package version does not support the\n    \"--cover-branches\" option.\n    \n    Change-Id: I9ea6452d9834b3ac414e14e628002f593dd4b8c8\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',9,4,'Red Hat'),(274089,820,820,'2013-06-18 18:05:28','2013-06-18 18:05:28','    Optional TCP_KEEPIDLE in unit tests\n    \n    Allows to run unit tests on BSD-based platforms. The commit\n    da99c339 that solved the problem doesn\'t contain fixes of unit\n    tests.\n    \n    Change-Id: Iff1771c1cbb37c30a888cd1da4fca5636e5797e7\n',4,3,'Mirantis'),(274091,5611,5611,'2013-06-09 12:54:32','2013-06-09 12:54:32','    Swift tests for unicode headers\n    \n    Swift functional tests sends ilegal headers (unicode) and expects\n    these headers to be processed by Swift.\n    \n    Apache2 seem to remove such headers which is a sound behavior for\n    illegal headers.\n    \n    This change restrict the test tpo exist only for swift integral\n    web front end. For future it is advised to disallow such behaviour.\n    For example it is suggested to make the decission that in future APIs\n    illegal headers are removed rather than processed.\n    \n    Change-Id: Ibf548f474de3f06a2687f8f4812beaeaf81ab216\n    Fixes: Bug #1189123\n',34,31,'IBM'),(274093,869,869,'2013-06-19 11:44:47','2013-06-18 10:32:40','    Make TempURL more cache-efficient.\n    \n    So, there\'s two cases here. In one case, we have memcache enabled;\n    account info gets cached in the usual place, and tempurl keys get\n    cached separately. In the other case, we have no cache. In neither\n    case is anything gained by having TempURL cache keys separately from\n    the account info.\n    \n    This commit removes TempURL\'s custom caching logic and makes it rely\n    on get_account_info() instead.\n    \n    Benefits include:\n     * immediate visibility of new keys on account POST\n     * less data in the cache per account --> more stuff fits in cache\n     * less code for bugs to hide in\n    \n    Change-Id: Idb0b6c165da14196b4c79149c546f0159b54edcb\n',59,198,'SwiftStack'),(274095,229,229,'2013-06-19 15:30:48','2013-06-19 15:30:48','    version bump to 1.9.0 to reflect current dev target\n    \n    Change-Id: Ia0a1b36ae90ed895dcc9876c016aaf261ad56674\n',1,1,'SwiftStack'),(274096,2206,2206,'2013-06-19 23:45:38','2013-06-19 01:02:37','    Add max_header_size to swift.conf-sample and relative UT\n    \n    1. Add explanation of MAX_HEADER_SIZE into swift.conf-sample as same as\n    other settings in swift.conf. Especially point out the default size of\n    header line in eventlet is 8192 which is the main reason why we set 8192\n    for MAX_HEADER_SIZE in swift.\n    \n    2. Add some unit tests to check valid settings in swift.conf. Test cases\n    in test_constraints use /etc/swift/swift.conf if exists, and if any\n    wrong settings are in it (MAX_META_VALE > MAX_META_OVERALL_SIZE), swift\'s\n    unit test must fail. These new unit tests is used in this case.\n    \n    Change-Id: I7bb21951d46050163c1b7bceac8d49302b9209f7\n',18,3,'UnitedStack'),(274098,2206,2206,'2013-06-20 17:58:50','2013-06-20 17:56:07','    update .gitignore\n    \n    Ignore build/ directory, which is auto-created when running `python\n    setup.py bdist` like dist/ directory.\n    \n    Change-Id: Ie58936320d995e4e81f8929128475e538665bde8\n',1,0,'UnitedStack'),(274100,5596,5596,'2013-06-20 01:04:53','2013-06-20 01:04:53','    use get_container_info for staticweb\n    \n    Update staticweb to use get_container_info instead of its own memcache entry.\n    \n    Change-Id: I59bc0d94b9e45f3d5776a5462f53b82ab78101d4\n',73,145,'Rackspace'),(274102,650,650,'2013-06-01 19:21:58','2013-06-01 19:21:07','    python3: Introduce py33 to tox.ini\n    \n    Introduce py33 to tox.ini to make testing with\n    python3 easier.\n    \n    Change-Id: Id5c76d58551af4671f30ace85bdbbf5803a58368\n    Signed-off-by: Chuck Short <chuck.short@canonical.com>\n',1,1,'Canonical'),(274104,5611,5611,'2013-06-20 21:56:21','2013-06-20 13:21:47','    Add example Apache config files\n    \n    This patch is needed in 1.9 as a dependency for adding swift/apache\n    to devstack.\n    zhang-hare is working in parallel on a devstack patch that depend\n    on this patch.\n    \n    As part of this patch we add examples dir.\n    In this dir we add template config files that can be used either by\n    a script (as will be done by devstack) or serve a an example to the\n    admin.\n    \n    Apache2 vhost files were added under examples/apache2\n    Wsgi files were added under examples/wsgi\n    \n    Fixes: Bug #1191388\n    \n    Change-Id: If90e38a0ba36f6b59016d4a1374f4100f0bbee7b\n',151,0,'IBM'),(274106,869,869,'2013-06-10 14:09:27','2013-03-07 18:51:46','    Add \"normal\", optparse-style options to swift-ring-builder add.\n    \n    The old format is still present and works just like it did before, so\n    your existing scripts won\'t break.\n    \n    New format pros:\n     * it\'s readable even for Swift newcomers\n     * it\'s easy to extend\n     * it\'s familiar to anyone who\'s used a Unix command line\n     * we don\'t have to maintain the parser\n    \n    New format cons:\n     * you can\'t add multiple devices in one go\n    \n    Old format pros:\n     * you can add many devices with one command\n     * it\'s compact\n    \n    Old format cons:\n     * it confuses newcomers\n     * \"wait, is that zone dash IP colon port slash device, or zone slash\n       IP dash port colon meta underscore device?\" Just try walking\n       someone through adding a device over voice chat.\n     * it\'s annoying to add new fields\n    \n    Note that this only affects the command \"swift-ring-builder\n    <builderfile> add\". Other swift-ring-builder commands are unchanged.\n    \n    DocImpact\n    \n    Change-Id: I034b7f79eb6f4d81a5c4da193e1358741441c5b5\n',197,115,'SwiftStack'),(274108,26,26,'2013-06-19 18:21:52','2013-06-19 15:14:13','    Added utils.FileLikeIter\n    \n    A really simple version of this was in container sync already, and I\n    needed a more complete version for work I\'m doing, and I noticed\n    https://review.openstack.org/#/c/33405/ was also making use of it.\n    So, here\'s a more full version.\n    \n    If https://review.openstack.org/#/c/33405/ lands before this, I\'ll\n    update it accordingly.\n    \n    Change-Id: Iba66b6a97f65e312e04fdba273e8f4ad1d3e1594\n',241,41,'Rackspace'),(274110,4064,4064,'2013-06-19 07:45:46','2013-06-17 14:58:46','    bulk response Content-Type does not match request Accept header\n    \n    Change-Id: Ieceed3837466c45bc2790b09cd56ae95f43dba2e\n',47,27,'Rackspace'),(274112,869,869,'2013-06-21 17:37:06','2013-06-21 17:12:49','    Clean up some remnants of StaticWeb\'s and TempURL\'s custom caching.\n    \n    As of e499b91, these config values and functions are unused in StaticWeb.\n    \n    As of 2e155e5, the comment in TempURL is false.\n    \n    Change-Id: I75b631ece8a9a6075c406765361629c549c449f6\n',0,26,'SwiftStack'),(274113,869,869,'2013-06-10 17:31:46','2013-06-10 17:31:46','    Stop getting useless bytes on manifest Range requests.\n    \n    If you make a range request for a manifest object, then the proxy can\n    retrieve more data than it actually needs from the object server. It\n    sends the right bytes to the client, and then spends a bunch of time\n    reading and discarding bytes it doesn\'t need.\n    \n    Example:\n    \n       file start  	       	       	       	       	       file end\n           |	range start	  range end		  |\n           v	     v         	       v       	       	  v\n           [--------------------------------------------------]\n    \n    The proxy would send a request to the object server with \"Range:\n    bytes=${range start}-\", and so the object server responds with all the\n    bytes from range start to file end. This needlessly transfers all the\n    bytes from range end to file end, as none of those are sent to the\n    client.\n    \n    This commit fixes the sent Range header to only request the bytes\n    needed.\n    \n    Change-Id: Ie8d4ee2c5e67c08795ac2d39d1df7d11856621a9\n',64,21,'SwiftStack'),(274115,2206,2206,'2013-06-13 13:25:25','2013-03-26 13:20:09','    Improve swift\'s keystoneauth ACL support\n    \n    Below three bug reports talk about one thing.\n    Current keystoneauth ACL supports as:\n    \n    tenant_name:user_id         ok\n    tenant_name:user_name       no\n    tenant_name:*               no\n    tenant_id:user_id           ok\n    tenant_id:user_name         no\n    tenant_id:*                 no\n    *:user_id                   ok\n    *:user_name                 no\n    *:*                         no\n    \n    This patch will make all of above work fine.\n    Applying (tenant/user)name could let user put or get their data in a\n    more readable way. The tenant_name:* and *:user_name is suitable for\n    many usage.\n    \n    note: to keep compatibility here add a new keystone.identity just for\n    authorize() itself and leave env[\'keystone.identity\'] to other\n    middlerwares.\n    \n    Fixes: bug #1020709\n    Fixes: bug #1075362\n    Fixes: bug #1155389\n    Change-Id: I9354dedaad875117f6a9072c67e9ecf69bfca77e\n',98,47,'Huawei'),(274117,5620,5620,'2013-06-24 16:44:32','2013-06-22 13:39:53','    Use object name from request in bulk Errors\n    \n    This will allow users to more easily match the failed objects in Errors\n    for bulk delete requests to the object names they provided in the request.\n    For extract Errors, it reports the failed path from the tar archive.\n    \n    DocImpact\n    \n    Change-Id: I084057810fc4fb7fdac05494cc6fec2cbf81bb9d\n',116,58,'independent'),(274118,869,869,'2013-06-24 10:58:22','2013-06-21 16:04:18','    Fix swift-dispersion-report.\n    \n    Fixes bug 1180680.\n    \n    Change-Id: I1c0eaa6f934f73853e832a8e468e1b8369a21117\n',33,40,'SwiftStack'),(274120,2206,2206,'2013-06-25 10:24:26','2013-06-24 16:48:07','    Add sample rsyslog.conf.\n    \n    Give users a sample rsyslog.conf to manage their logs easily based on\n    LOCAL0 swift used. In this patch I offer some choices to output logs\n    via commnet lines or uncomment.\n    \n    Change-Id: I2fe150a6e3d164a989c3520c0b7f032897a71f18\n',35,0,'UnitedStack'),(274122,869,869,'2013-06-12 16:24:26','2013-06-07 09:49:34','    Refactor DiskFile instantiation in object server.\n    \n    DiskFile() takes a lot of arguments whose value is the same on every\n    instantiation, so I pulled that stuff out into a utility method. No\n    functionality change is intended.\n    \n    Change-Id: I259df5602bed60d6cb48e07d6d9e58e8320ee12a\n',15,26,'SwiftStack'),(274124,869,869,'2013-06-23 22:04:56','2013-06-13 11:24:29','    Local write affinity for object PUT requests.\n    \n    The proxy can now be configured to prefer local object servers for PUT\n    requests, where \"local\" is governed by the \"write_affinity\". The\n    \"write_affinity_node_count\" setting controls how many local object\n    servers to try before giving up and going on to remote ones.\n    \n    I chose to simply re-order the object servers instead of filtering out\n    nonlocal ones so that, if all of the local ones are down, clients can\n    still get successful responses (just slower).\n    \n    The goal is to trade availability for throughput. By writing to local\n    object servers across fast LAN links, clients get better throughput\n    than if the object servers were far away over slow WAN links. The\n    downside, of course, is that data availability (not durability) may\n    suffer when drives fail.\n    \n    The default configuration has no write affinity in it, so the default\n    behavior is unchanged.\n    \n    Added some words about these settings to the admin guide.\n    \n    DocImpact\n    \n    Change-Id: I09a0bd00524544ff627a3bccdcdc48f40720a86e\n',485,13,'SwiftStack'),(274126,5611,5611,'2013-06-26 08:33:23','2013-06-26 08:23:00','    Deleted account respond as non existing accounts\n    \n    Currently clients can not distinguish between non existing accounts\n    (which can be created) and accounts marked for deletion, which has\n    not yet been reaped and therefore cannot be re-created until reaped.\n    \n    Following this patch, if an account is marked as deleted but hasn\'t\n    been reaped and is still on disk, responses will include a status\n    header:\n        \'X-Account-Status\' = \'Deleted\'\n    \n    Fixes:Bug #1188609\n    Change-Id: Ibd39965ae3f5d45fd78f130e0e31f5a0141a8633\n',105,21,'IBM'),(274127,229,229,'2013-06-25 21:41:28','2013-06-23 23:43:24','    updated changelog and authors update for 1.9.0 release\n    \n    Change-Id: I61ffbaba01aba86d61e4f3d988b5abeee8f07813\n',92,2,'SwiftStack'),(274129,229,229,'2013-07-01 22:40:37','2013-07-01 22:40:37','    1.9.0 final=True\n    \n    Change-Id: I2e67008b905c3cd47d89d915aebd3443675f18a9\n',1,1,'SwiftStack'),(274130,229,229,'2012-09-12 11:12:46','2012-09-12 11:01:59','    added disable_fallocate info to docs\n    \n    Change-Id: I1ee554c7d5f27e076036f561112adfff2571eda6\n',11,0,'SwiftStack'),(274131,229,229,'2012-09-12 14:10:07','2012-09-12 14:10:07','    final versioning for 1.7.0\n    \n    Change-Id: I29a8c09df38666c945b66ac5d5c6423507c13a26\n',1,1,'SwiftStack'),(274132,229,229,'2012-09-18 15:22:24','2012-09-18 15:18:38','    backported memcache serialization config bug\n    \n    Change-Id: I8ab630f2a72dc5d5359fac21eeb59590e39b6b45\n',18,3,'SwiftStack'),(274133,229,4056,'2012-09-25 14:33:45','2012-09-25 11:22:11','    Restore old SIGPIPE handler in a proxy server test.\n    \n    I think not doing this was setting the SIGPIPE handler to signal.SIG_DFL\n    instead of the Python default of signal.SIG_IGN.  This could cause other\n    tests which make a client stop reading before all data \"chunks\" are read\n    to fail harder than they should (i.e. the SIGPIPE there is benign and\n    even expected--the other side of the socket really did get closed\n    early).\n    \n    Fixed leak on 499s\n    \n    This fixes an issue where Request objects (and related objects) were\n    not getting garbage collected when a 499 (client disconnect) occurred\n    for responses that still would have had more than the proxy server\'s\n    client chunk size left to send.\n    \n    Fixed bug #1055834\n    \n    Change-Id: I40266a0874cd2142c90f26b9f030d534286fc6da\n',92,33,'SwiftStack'),(274134,239,239,'2012-10-01 17:36:17','2012-10-01 17:36:17','    Bump next version to 1.7.4.1\n    \n    Open stable/folsom by bumping next version to 1.7.4.1.\n    \n    Change-Id: I68cf664b25b946095657f972a2550ad903ea9d86\n',1,1,'OpenStack Foundation'),(274135,639,24,'2013-01-28 11:28:41','2012-11-02 16:56:18','    Use pypi for python-swiftclient dependency.\n    \n    Using github as a package source is less reliable in the Jenkins test\n    framework than using pypi. This is because the Jenkins test framework\n    has a local pypi mirror.\n    \n    Change-Id: Ia904d39ce70f5c2bd7d6edb9172f8226131074e2\n',1,3,'OpenStack Foundation'),(274136,3,733,'2013-06-13 15:59:16','2013-05-27 02:07:39','    Check user input in XML responses.\n    \n    Fixes bug 1183884.\n    \n    * swift/account/server.py: Escape account name in XML listings.\n    \n    Change-Id: I33f25aa02c96a72cb54c9d7ebd916d06a8a69edf\n',1,1,'Rackspace'),(274137,239,826,'2013-08-07 17:09:15','2013-07-26 15:36:14','    Fix handling of DELETE obj reqs with old timestamp\n    \n    The DELETE object REST API was creating tombstone files with old\n    timestamps, potentially filling up the disk, as well as sending\n    container updates.\n    \n    Here we now make DELETEs with a request timestamp return a 409 (HTTP\n    Conflict) if a data file exists with a newer timestamp, only creating\n    tombstones if they have a newer timestamp.\n    \n    The key fix is to actually read the timestamp metadata from an\n    existing tombstone file (thanks to Pete Zaitcev for catching this),\n    and then only create tombstone files with newer timestamps.\n    \n    We also prevent PUT and POST operations using old timestamps as well.\n    \n    Change-Id: I631957029d17c6578bca5779367df5144ba01fc9\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',228,31,'Red Hat'),(274138,229,229,'2013-06-25 23:00:31','2013-06-25 23:00:31','    version bump to 1.9.1\n    \n    Change-Id: If04c88f7e686f4b4709c5b68351ebbbea97d12bd\n',1,1,'SwiftStack'),(274140,869,869,'2013-06-25 23:18:57','2013-06-25 23:18:57','    Remove dead code and tests for staticweb.\n    \n    Dead since e499b91.\n    \n    Change-Id: I3c571ae471eb4a0b95772b19eac90183cfc7fe22\n',0,39,'SwiftStack'),(274142,4059,4059,'2013-06-22 16:15:29','2013-06-18 15:07:59','    Adding unit tests for direct client\n    \n     - Added simple unit tests for direct client\n     - Implemented chunked put in direct_put_object\n    \n    Change-Id: Icec1019b5157fae33e2fd36a7fc3b9c0cc15afec\n',344,8,'Intel'),(274144,4533,4533,'2013-06-26 15:52:18','2013-06-26 15:52:18','    Change ring partition size for SAIO\n    \n    Making this smaller (10 instead of 18) can make some of the tests run\n    faster and makes rebuilding of the rings faster.\n    \n    Change-Id: Ibe46011d8e6a6482d39b3a20ac9c091d9fbc6ef7\n',3,3,'Rackspace'),(274145,4064,4064,'2013-06-26 09:44:33','2013-05-17 14:35:08','    Allow SLOs to be made up of other SLOs\n    \n    We\'ve gone back and forth about this. In the initial commit, it couldn\'t\n    possibly work because you wouldn\'t be able to get the Etags to match. Then it\n    was expressly disallowed with a custom error message, and now its allowed. The\n    reason we\'re allowing it is that 1,000 segments isn\'t enough for some use cases\n    and we decided its better than just upping the number of allowed segments. The\n    code to make it work isn\'t all that complicated and it allows for virtually\n    unlimited SLO object size. There is also a new configurable limit on the\n    maximum connection time for both SLOs and DLOs defaulting to 1 day. This will\n    hopefully alleviate worries about infinite requests. Think I\'ll leave the\n    python-swift client support for nested SLOs to somebody else though :).\n    \n    DocImpact\n    \n    Change-Id: Id16187481b37e716d2bd09bdbab8cc87537e3ddd\n',282,98,'Rackspace'),(274147,2206,2206,'2013-06-26 23:35:16','2013-06-25 16:43:37','    TempAuth: don\'t return 401/403 if .r without .rlistings\n    \n    When checking referer (.r, .rlistings), tempauth return 401/403 if \'.r\'\n    exists without \'.rlistings\' or obj. Actually it should skip this kind of\n    authorizing and check the following authorizing.\n    \n    And remove some unnecessary lines\n    \n    Change-Id: Ib60e59b7c80331a699cb5c3496f948cf32135d0b\n',7,6,'UnitedStack'),(274149,869,869,'2013-06-26 11:44:48','2013-06-25 22:56:27','    Make formpost work with multiple tempurl keys.\n    \n    Formpost wouldn\'t look at X-Account-Meta-Temp-URL-Key-2 for signature\n    validation, which was confusing to users. Now it does, and there\'s a\n    utility function that formpost and tempurl both use to help prevent\n    divergence in the future.\n    \n    Also removed formpost\'s custom cache-lookup logic. Formpost was\n    looking for tempurl keys in memcache, but it\'s been broken since\n    commit 21343ab (2013-05-02) when tempurl changed its memcache keys, so\n    the lookup would always miss. (Since tempurl started storing *lists*\n    of keys, formpost would have choked on the new data, so that oversight\n    was the only thing keeping formpost working at all.)\n    \n    Now formpost just uses the same get_account_info() call as everyone\n    else does, so it gets all the benefits of the new caching framework.\n    \n    Change-Id: I426d8f2882ebe3ce373de604b9ff18846f5999e3\n',143,131,'SwiftStack'),(274151,1407,1407,'2013-06-28 00:28:26','2013-06-21 11:48:05','    Add test for swift.common.utils.lock_file\n    \n    Change-Id: Id03f130ad7016b11b740050b7aadf879773d5a5f\n',43,1,'Canonical'),(274153,4533,4533,'2013-06-28 19:52:17','2013-06-28 14:40:54','    Update docs to use default XFS inode size\n    \n    In past couple of years, the XFS team has greatly improved inode use in\n    xfs.  With more recent kernels, there is no performance penalty for\n    using the default inode size, and a smaller inode size gives us\n    improvements in other areas where disk access is involved.\n    \n    DocImpact\n    \n    Change-Id: Ie9da53a6e8bf43d1d02881befbb52595462c9f2e\n',23,11,'Rackspace'),(274155,289,289,'2013-06-28 15:27:33','2013-06-28 13:55:38','    docfix apache2 now supports client chunked encodin\n    \n    As reported in the documentation bug, the apache deployment guide\'s\n    reference to apache2 mod_wsgi not supporting client chunked encoding\n    has become outdated. It now supports this feature, using an optional\n    parameter.\n    \n    Updated the paragraph in question to reflect this\n    \n    patchset 2 mentions the WSGIChunkedRequest variable and adds it\n    to the sample configs - On by default. Feedback welcome\n    \n    fixes bug 1194935\n    \n    Change-Id: I07c5c8506ac34e1e0e08fa6d961babde2f9b7367\n',8,3,'OpenStack Foundation'),(274157,4064,4064,'2013-07-01 12:04:26','2013-07-01 11:49:13','    adding copyright notice\n    \n    Change-Id: Ic2c79d52770208c22b39cb2b00f2f8a6a86e8aa7\n',1,0,'Rackspace'),(274158,229,229,'2013-07-01 13:40:37','2013-07-01 13:40:37','    small cleanup to associated projects page\n    \n    Change-Id: I5d6d6d6c32b6573474288897f6fa174b6f150183\n',9,11,'SwiftStack'),(274160,4064,4064,'2013-07-02 13:41:18','2013-07-01 14:58:35','    Record some simple object stats in the object auditor\n    \n    Change-Id: I043a80c38091f59ce6707730363a4b43b29ae6ec\n',36,2,'Rackspace'),(274162,869,869,'2013-07-03 17:45:20','2013-07-03 17:45:20','    Fix flaky test.\n    \n    test_DELETE_x_container_headers_with_more_container_replicas() would\n    sometimes fail, and it\'s because a test helper method was defaulting\n    to sorting the captured headers by X-Container-Partition. Well, in\n    tests we use FakeRing, and the partition is always 1, so that sorting\n    didn\'t buy us much. Now the sorting is done by X-Container-Device,\n    which actually differs meaningfully.\n    \n    Change-Id: Ibe5b2fcd3f23280ed2caaa703111a98861331866\n',3,3,'SwiftStack'),(274163,10,5611,'2013-07-02 22:18:32','2013-07-02 22:18:32','    Revert \"docfix apache2 now supports client chunked encodin\"\n    \n    This reverts commit 68cb91097b75a92237bd90caffcd405c3e83cb53\n    \n    Just so this is not get forgotten in the tree...\n    \n    We are using daemon mode and chunked is not supported in this mode.\n',3,8,'IBM'),(274165,4067,4067,'2013-07-09 20:27:52','2013-07-09 20:27:52','    make internal client metadata methods return dicts with lower case keys\n    \n    Change-Id: I19ced30b6e92133766310f8e41286202607c5b4c\n',7,6,'Rackspace'),(274166,40,40,'2013-07-08 13:32:28','2013-07-08 13:30:17','    Make keystoneauth reseller_prefix check for _\n    \n    - Automatically add underscore if there wasn\'t one already.\n    - This makes consistent with tempauth.\n    - Fixes bug 1198878.\n    - This should probably need to be mentioned in the release changelog for\n      upgrades.\n    \n    Change-Id: Ia82f14f82c380c7ed2ddd190116f1493e410cfbe\n',13,4,'eNovance'),(274168,869,869,'2013-07-01 16:09:36','2013-06-28 11:54:35','    Extract quorum-size calculation to utility method.\n    \n    The behavior\'s the same as before; this just makes the code (IMHO) a\n    little easier to read.\n    \n    Change-Id: Ie54d836d81af7410057219f60b72b840c9ce51b9\n',27,7,'SwiftStack'),(274170,563,563,'2013-07-15 11:41:58','2013-06-20 20:36:59','    Start using Hacking\n    \n    Instead of blacklisting Hacking globally,\n    only blacklist those that currently occur frequently\n    (for a later followup patch), and fix the rest. In\n    detail:\n    \n    H101  Use TODO(NAME)\n    H201  no \'except:\' at least use \'except Exception:\'\n    H231  octal number 022 should be written as 0o22\n    H401  docstring should not start with a space\n    H701  Empty localization string\n    \n    Change-Id: Ib3b3d56b68d1cf15d3b67ac9749fcbdb876dc52a\n',31,31,'SUSE'),(274171,40,40,'2013-07-15 17:14:16','2013-07-15 17:14:16','    Add documentation about flake8+hacking.\n    \n    - Fixes bug 1201431.\n    \n    Change-Id: If025a41caf3a629b9efb4d67c53c423796d37a91\n',22,4,'eNovance'),(274172,10,826,'2013-07-15 21:07:08','2013-07-01 17:40:47','    Fix unit tests to properly marked deleted files\n    \n    The unit tests were playing fast and loose with the tombstone marker,\n    where the test framework was setting up a DiskFile object which had\n    its data written to the .ts file, not the .data file. This behavior\n    did not reflect how the interfaces to DiskFile were supposed to\n    work.\n    \n    Change-Id: Idd6e8882e062ba2e13489f14189223ab4158677c\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',13,8,'Red Hat'),(274173,2664,2664,'2013-07-12 11:38:17','2013-05-23 20:16:21','    Move replication allow method to decorators\n    \n    Remove logic of allowed methods list from object, container and account\n    servers. Instead of it add replicator decorator to utils and use new\n    decorator for REPLICATE methods in object/account/container servers.\n    This decorator mark method as special for usfor use only by the\n    replication.\n    \n    If the option replication_server is not used, then this mechanism is not\n    enabled. If the replicaton_server option is set (not None) then the\n    respective server is a replicator (option value is True) and should use\n    ONLY the methods marked for replication server using the decorator, or\n    it is a normal server type and should NOT use methods marked for the\n    replication server.\n    \n    Change-Id: I1041b31413cd0c39000317cc57a8c27816e1dfe8\n',111,135,'Mirantis'),(274175,826,826,'2013-07-15 17:29:42','2013-06-25 15:16:35','    Refactor auditors to rely on expected gen names\n    \n    Refactor the various auditors to rely on the audit_location_generator\n    yielding tuples containing paths with the expected suffix.\n    \n    We also fix the exception handling for container_sync to not expect a\n    broker object (since the act of creating a broker object can raise an\n    exception).\n    \n    For the object auditor we removed an unneeded check for disk_file\n    since get_data_file_size() will raise DiskFileNotExist under the same\n    condition (raises code coverage slightly).\n    \n    Change-Id: I11d405e629063177ef21543b75e9076da1a03b61\n',56,39,'Red Hat'),(274177,4075,4075,'2013-07-18 08:00:14','2013-07-17 16:32:35','    Forklift the DiskFile interface into it\'s own module\n    \n     * new module swift.obj.diskfile\n    \n    I parameterized two constants from obj.server into the DiskFile\'s __init__\n    \n     * DATADIR -> obj_dir\n     * DISALLOWED_HEADERS -> disallowed_metadata_keys\n    \n    I\'m not sure if this is the right long term abstraction but for now it avoids\n    circular imports.\n    \n    Change-Id: I3962202c07c4b2fbfc26f9776c8a5c96292ae199\n',883,803,'Rackspace'),(274178,2664,2664,'2013-07-02 17:03:28','2013-05-15 12:58:57','    Refactor and add tests for db_replicator\n    \n    * Create class for testing _repl_to_not and replicate_object fuctions to\n      prevent duplication code by adding all preparation into setUp function.\n    * Move existed test function which testin _repl_to_not and\n      replicate_object into created classes.\n    * Add tests for replicate_object and _repl_to_node functions.\n    \n    Change-Id: I75ac7c6f0230e71bfb24328e44c33734b520b4cd\n',113,16,'Mirantis'),(274180,733,733,'2013-07-18 17:29:14','2013-07-18 17:29:14','    Ensure that files are always closed in the tests.\n    \n    A failure to close files in a timely fassion means\n    that data is not necessarily written immediately\n    on Pythons which do not use reference counting\n    (e.g. PyPy).\n    \n    Change-Id: I5d363249676032a025a22a67275c2eed3151b264\n',21,18,'Rackspace'),(274182,733,733,'2013-07-19 06:53:48','2013-07-19 06:53:48','    Remove list comprehension where the result is unused.\n    \n    Using a list comprehension here makes the code less\n    readable, and is also slower (since it has to allocate\n    and grow a list that is unused).\n    \n    Change-Id: I74cc9d2cf2e271a2c45d45cc5ea777189c02eacb\n',2,1,'Rackspace'),(274183,733,733,'2013-07-19 14:50:37','2013-07-19 14:50:37','    Close SQLite cursors when creating functions.\n    \n    If the cursors are not closed, then when\n    create_function is called, if they are not\n    GC\'d then create_function will fail. On Pythons\n    without reference counting (e.g. PyPy) they\n    will not be GC\'d immediately.\n    \n    Change-Id: I39210616d323691ccb745149f24430a7a61382ec\n',10,8,'Rackspace'),(274184,826,826,'2013-07-22 10:07:05','2013-07-18 16:06:15','    Remove unused exceptions\n    \n    Change-Id: Ib9fe1b52733ffa5b919c2a524a4f3ad7baef09a5\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',0,8,'Red Hat'),(274185,733,733,'2013-07-20 16:08:53','2013-07-20 13:44:11','    Ensure that files in tests are closed.\n    \n    This is needed on Pythons which do not have\n    reference counting GCs (e.g. PyPy).\n    \n    Change-Id: I5a613e832e9a7a149b3e9317c053c3048f34afcb\n',60,42,'Rackspace'),(274187,869,869,'2013-07-19 11:22:35','2013-07-18 16:33:01','    Accept valid Accept headers in swob.\n    \n    \"Accept: application/xml; charset=UTF-8\" is totally valid, and has an\n    implicit q (quality) value of 1.0, just the same as \"Accept: text/xml\"\n    does.\n    \n    Also, you can say things like:\n    Accept: text/xml; charset=UTF-8; q=0.9; anglebrackets=\"are awesome\"\n    with as many arbitrary extensions as you want.\n    \n    See RFC 2616 sections 14.1 Accept and 2.2 Basic Rules for details.\n    \n    Fixes bug 1202453.\n    \n    Change-Id: I18e6d0ee3fd6f9d889275ee8335e711c729b7171\n',36,7,'SwiftStack'),(274189,40,40,'2013-07-03 16:33:20','2013-05-15 10:48:31','    Don\'t allow users to delete their own account.\n    \n    - In keystoneauth we allowed authenticated users to delete their own\n      account we are disallowing that and only allow users with reseller\n      admin to do that for its own or for the others.\n    - Fixes bug 1177526.\n    \n    Change-Id: I825c5a968e8eae0991915056825fe0e0c195647e\n',32,1,'eNovance'),(274191,4083,4083,'2013-07-15 14:35:01','2013-07-05 13:18:16','    Fix make_pre_authed_request function to not fail when path arg is None.\n    \n    The default value for the path arg to the function is None. However, if\n    the path arg is not set or is set to None an exception is generated when\n    the path value is passed to urllib.unquote(). The function doc states that\n    if path is not provided then the value in the env is used, so fix is to\n    implement this behaviour.\n    \n    Change-Id: I085124acb6ef3cecb2375bb97d27996e0c6fd36e\n    Fixes: bug #1198149\n',40,0,'HP'),(274193,733,733,'2013-07-22 16:10:37','2013-07-22 14:59:30','    Ensure that files are always closed explicitly.\n    \n    This is needed on Pythons without reference\n    counting garbage collectors (e.g. PyPy).\n    \n    Change-Id: Ieb563ace9f65a4ad204b01be32bf7a9d5f226005\n',4,3,'Rackspace'),(274195,5611,5611,'2013-07-18 00:00:46','2013-07-18 00:00:46','    Fix the way possibly_quarantine reraises an exception\n    \n    Fixes Bug #1202386\n    \n    Change-Id: I8585d8442c7ccf538b819b036192b28c1f13847b\n',1,1,'IBM'),(274197,5596,5596,'2013-07-22 21:12:22','2013-07-22 21:12:22','    fix unit tests in 2.6 by using closing(GzipFile)\n    \n    Python 2.6 doesn\'t support using GzipFile as a context manager.\n    \n    Change-Id: Ic12b5a916bc89ae8d4480879723201c1715285af\n',7,4,'Rackspace'),(274198,733,733,'2013-07-22 15:27:54','2013-07-22 15:27:54','    Corrected a number of style violations in the tests.\n    \n    Change-Id: Ib5e81ad0476c56cf84d222d67f55b8db3eb0249e\n',7,8,'Rackspace'),(274200,3037,3037,'2013-07-20 09:52:56','2013-07-20 09:52:56','    Add \'Z\' into isoformat for UTC time\n    \n    Based on this http://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators.\n    A isofomt of time need a \'Z\' for UTC time zone, or none for local time zone\n    \n    request on GET /<version>/<account>/<container>?format=json still output a\n    UTC time without \'Z\'\n    \n    fixes bug #1169287\n    Change-Id: Ib599b5ec8fd223878ec18df7c1ec8d952fc2630a\n',12,10,'UnitedStack'),(274202,826,826,'2013-07-22 10:05:37','2013-07-19 11:34:12','    Remove extra lstat() calls from check_mount\n    \n    The os.path.exists call performs an lstat, but os.path.ismount already\n    performs the same check. However, it performs a separate lstat() call\n    to check for a symlink, which we remove as well, cutting the number\n    performed in half.\n    \n    Sample program to be straced for comparison:\n    \n    from swift.common.constraints import check_mount\n    import os\n    os.write(1, \"Starting\\n\")\n    if check_mount(\"/\", \"tmp\"):\n        os.write(1, \"Mounted\\n\")\n    \n    Here is the output of a check on a mounted file system (common case)\n    using the new method:\n    \n    ---- strace new ----\n    write(1, \"Starting\\n\", 9) = 9\n    lstat(\"/tmp\", {st_mode=S_IFDIR|S_ISVTX|0777, st_size=8460, ...}) = 0\n    lstat(\"/tmp/..\", {st_mode=S_IFDIR|0555, st_size=4096, ...}) = 0\n    write(1, \"Mounted\\n\", 8) = 8\n    \n    ---- strace old ----\n    write(1, \"Starting\\n\", 9) = 9\n    stat(\"/tmp\", {st_mode=S_IFDIR|S_ISVTX|0777, st_size=8460, ...}) = 0\n    lstat(\"/tmp\", {st_mode=S_IFDIR|S_ISVTX|0777, st_size=8460, ...}) = 0\n    lstat(\"/tmp\", {st_mode=S_IFDIR|S_ISVTX|0777, st_size=8460, ...}) = 0\n    lstat(\"/tmp/..\", {st_mode=S_IFDIR|0555, st_size=4096, ...}) = 0\n    write(1, \"Mounted\\n\", 8) = 8\n    \n    Change-Id: I027c862a2b7d9ff99d7f61bd43ccc0825dba525c\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',259,71,'Red Hat'),(274204,826,826,'2013-07-22 10:07:45','2013-07-17 17:41:41','    Move the mount checking into DiskFile constructor\n    \n    Move the mount checking into the DiskFile object constructor. The\n    REPLICATE method does not use the DiskFile object currently, so that\n    method still has to perform its own mount check.\n    \n    We also refactored the DiskFile exceptions a bit for a hierarchy.\n    \n    Change-Id: Idcbb5a912d8c7d956dac96ff523c1cf1163c98a6\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',55,29,'Red Hat'),(274206,2206,2206,'2013-07-23 13:46:51','2013-07-23 13:46:51','    Add notes for /srv/node in swift-object-info\n    \n    \'devices\' is set in object-server.conf on each node, not in ring data,\n    and the things printed here is just for watching not for running, so\n    just leave a note here. (this https://review.openstack.org/#/c/23951/\n    is used for running, so just a note is not enough)\n    \n    mark this commit as bug fixing is because this script is the last place\n    using /srv/node but not from conf as Chmouel said.\n    \n    fixes import change on read_metadata\n    fixes bug #885006\n    Change-Id: I727ec2d01c093af61fd3895e5701d87ef67cd9ff\n',4,1,'UnitedStack'),(274208,869,869,'2013-07-23 15:30:11','2013-07-22 16:14:59','    Fix bulk\'s unit tests on Mac OS.\n    \n    Turns out if your $TMPDIR is really long\n    (e.g. /var/folders/vq/n32yszdn4s76z6l8dxklmwdh0000gn/T/, which is 50\n    characters), then the test that drops stuff into $TMPDIR and adds it\n    to a tarball and uploads it will fail due to every added file\'s name\n    being too long.\n    \n    Change-Id: I8fcab2d95091f72b831b906bfc87a36d8be12631\n',7,2,'SwiftStack'),(274210,42,42,'2013-07-20 18:58:40','2013-07-20 18:58:40','    Make stale_reads_ok an argument of __init__\n    \n    Actually, stale_reads_ok is already an argument, but for some\n    reason it was not used anywhere in the code. So, just use it.\n    We borrow the existing code from the object server, which uses\n    setdefault(). We don\'t really need it, and could simply use\n    kwargs[\'stale_reads_ok\']=stale_reads_ok, but let\'s keep the\n    divergencies down.\n    \n    This was prompted by the desire to document the API of DB Broker\n    for the LFS work, and finding that documenting magical assignments\n    was a pain.\n    \n    Change-Id: Id8f83358ad7709f0df826fbc520b3dfba026a2f1\n',17,13,'Red Hat'),(274212,5621,5621,'2013-07-23 15:40:05','2013-07-21 12:18:24','    Unified format of boolean params in conf files\n    \n    In swift conf files, boolean options use different\n    format: some use true/false, and some use True/False.\n    This patch is aim to using lowcase true/false to unify\n    boolean params formats in swift conf files.\n    \n    Fix Bug #1203421\n    \n    Change-Id: I3e1bfc6e43231f51e0710aa54869f3774ee896b1\n',17,17,'UnitedStack'),(274214,5251,5251,'2013-07-24 16:11:03','2013-07-24 15:58:55','    Make sure users can\'t remove their account quotas\n    \n    Protect X-Remove-Account-Meta-Quota-Bytes same as X-Account-Meta-Quota-Bytes\n    \n    Fixes bug 1204110\n    \n    Change-Id: Ibac5b555f50b1fe41b2999c0d5776d90f9c9f3d1\n',27,0,'SwiftStack'),(274215,733,733,'2013-07-24 10:18:47','2013-07-23 16:41:45','    Corrected many style violations in the tests.\n    \n    I focussed primarily on F-category violations, they are all but all fixed with\n    this patch.\n    \n    Change-Id: I343f6945c97984ed1093bc347b6def6994297041\n',200,238,'Rackspace'),(274217,283,283,'2013-07-22 16:43:10','2013-07-22 16:43:10','    Tempurl md use of split_path in _get_account\n    \n    Code refactoring in _get_account method by\n    using split_path from common.utils.\n    \n    Change-Id: I7a04c7135b18f28673dd551a25bad679c89e2c31\n',7,9,'eNovance'),(274219,3037,3037,'2013-07-25 19:55:59','2013-07-25 19:53:29','    fix name \'recon_container\' to \'rcache\'\n    \n    self.recon_container is called before assigned. Accounding the context\n    codes, this is used to store somehing like self.rcache. So I guess the\n    name of \'recon_container\' is a mistake, and change it to \'rcache\'\n    (we could look at other places using dump_recon_cache)\n    \n    Also add unit tests\n    \n    fixes bug #1201958\n    \n    Change-Id: I3a6e3d22ba1dbffc4309bc22ff37873b4a3f09b3\n',99,6,'UnitedStack'),(274220,869,869,'2013-07-24 16:59:45','2013-07-24 12:55:25','    Catch swob responses that are raised.\n    \n    This lets us get rid of some really repetitive exception conversion\n    code, like everybody that called common.utils.get_param() had to catch\n    a UnicodeDecodeError and turn that into returning HTTPBadRequest. Now\n    get_param() just raises HTTPBadRequest directly, and the __call__\n    methods in the account/container/object servers catch and return\n    it. All that \"except UnicodeDecodeError\" stuff goes away.\n    \n    Refactored the path splitting and device validation in the object\n    server too.\n    \n    There are other things that can benefit from this as well, but this\n    patch is big enough.\n    \n    Change-Id: I2be96ef757d04bfd6af180cd9c92393c841db21f\n',179,172,'SwiftStack'),(274222,3037,3037,'2013-07-20 08:40:42','2013-07-20 08:40:42','    remove assert syntax\n    \n    assert is not a good tool for checking common mistakes, but could be\n    used test conditions that `should never happen` (there\'re many talks\n    about it)\n    \n    Change-Id: Iccf9710008293465bb9bb59e65f0ed77d7910688\n',2,1,'UnitedStack'),(274224,826,826,'2013-07-25 16:48:38','2013-07-25 16:48:38','    Ignore coverage HTML directory and MANIFEST.\n    \n    Change-Id: I5286cd1b066da11eef98dbfea9252366ca3ffd9c\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',2,0,'Red Hat'),(274226,42,42,'2013-07-25 18:18:46','2013-07-25 18:18:46','    Unify _commit_puts for accounts and containers\n    \n    The _commit_puts method is exactly the same in AccountBroker and\n    ContainerBroker, except for what it puts on the list pending records.\n    It seems to be easy to factor out without victimizing the code\n    clarity unduly.\n    \n    We also factor common checking for LockTimeout: not so much for\n    any code savings, but to underscore that all these little segments\n    really are the same, so a reader does not need to prove uniformity\n    every time.\n    \n    Change-Id: Idf9b553a3cf28de3c8803aaa47cf9a2be6817f00\n',83,125,'Red Hat'),(274227,40,40,'2013-07-17 15:46:03','2013-07-17 15:46:03','    Add bulk middleware to proxy-server.conf-sample\n    \n    - Fixes bug 1201844.\n    \n    Change-Id: I8eed54d0a17a0c6b746ed616634fc9adb89e5f37\n',1,1,'eNovance'),(274229,5583,5583,'2013-07-23 07:24:29','2013-06-28 14:51:15','    Configuration options for error regex and log file in the config now\n    \n    Making it possible for one to overwrite the default set of regexes\n    used to search for device block errors in the log file. Also making\n    the log file naming pattern configurable by setting them in the\n    drive-audit.conf file.\n    \n    Updating \"Detecting Failed Drives\" section on the admin guide as well.\n    \n    Change-Id: I7bd3acffed196da3e09db4c9dcbb48a20bdd1cf0\n',64,24,'Rackspace'),(274231,5325,5325,'2013-07-09 09:29:07','2013-06-28 08:51:24','    Allow floating point value for dispersion_coverage\n    \n    For systems with very large numbers of partitions, 1% dispersion\n    coverage may simply be too much/take too long. This fix allows <1\n    values to be used for dispersion_coverage.\n    \n    DocImpact\n    \n    Change-Id: I5ed35b69754d55a410e66e658b3854de57c7666b\n',6,7,'HP'),(274233,5599,5599,'2013-07-24 18:46:15','2013-07-23 19:28:08','    Fix incorrect status handling at staticweb\n    \n    Staticweb middleware always searchs html\n    for error response when response status code\n    is not redirect.\n    It causes swift to return error response\n    even if the request succeeded.\n    (e.g. When finding index.html with 200,\n          staticweb returns 200error.html\n          if it exist)\n    \n    This patch modifies the constraint on response\n    status and fix bug 1204319.\n    \n    Fixes bug #1204319.\n    \n    Change-Id: Ib83c303917da7fb94999f2d4d35063b450d0e992\n',15,1,'NTT'),(274235,733,733,'2013-07-29 14:56:50','2013-07-19 20:07:27','    Encode unicode from JSON before using it as a string.\n    \n    Right now this code fails when used with a JSON\n    decoder that always produces unicode. This isn\'t\n    usually the case with CPython, where simplejson\n    is used most of the time, however with the stdlib\n    JSON library (as used on PyPy), this code fails.\n    \n    Change-Id: Ib2343243f40194d5b2784551a807c7f58970a6e9\n',36,15,'Rackspace'),(274236,733,733,'2013-07-27 21:34:35','2013-07-27 21:10:37','    Removed unnecessary monkeypatching of __builtin__\n    \n    Replaced it with explicitly importing the gettext function, which is\n    significantly more readable.\n    \n    Change-Id: Ia0a7edcf685fb6e4052a8290367b233169529ab8\n',36,7,'Rackspace'),(274238,733,733,'2013-07-30 10:00:09','2013-07-29 22:41:29','    When iterating over a range of a file, always close it\n    \n    This is needed on Pythons without reference counting garbage collectors (e.g.\n    PyPy).\n    \n    Change-Id: I1d06eb8fe08ee6eeb45caa47b653d6af0bb18267\n',18,8,'Rackspace'),(274239,4075,4075,'2013-07-18 22:57:18','2013-07-11 17:00:57','    Set default wsgi workers to cpu_count\n    \n    Change the default value of wsgi workers from 1 to auto.  The new default\n    value for workers in the proxy, container, account & object wsgi servers will\n    spawn as many workers per process as you have cpu cores.\n    \n    This will not be ideal for some configurations, but it\'s much more likely to\n    produce a successful out of the box deployment.\n    \n    Inspect the number of cpu_cores using python\'s multiprocessing when available.\n    Multiprocessing was added in python 2.6, but I know I\'ve compiled python\n    without it before on accident.  The cpu_count method seems to be pretty system\n    agnostic, but it says it can raise NotImplementedError or sometimes return 0.\n    \n    Add a new utility method \'config_auto_int_value\' to pull an integer out of the\n    config which has a dynamic default.\n    \n     * drive by s/container/proxy/ in proxy-server.conf.5\n     * fix misplaced max_clients in *-server.conf-sample\n     * update doc/development_saio to force workers = 1\n    \n    DocImpact\n    \n    Change-Id: Ifa563d22952c902ab8cbe1d339ba385413c54e95\n',184,65,'Rackspace'),(274241,42,42,'2013-07-29 19:12:10','2013-07-29 19:12:10','    Eliminate can_delete_db\n    \n    The method can_delete_db() appears to be not only unused, but has\n    always been so. I verified this going back to Austin release. It is\n    very strange that we never noticed it until now, but here it is.\n    \n    Change-Id: I4445c4b2c4721f880c9dbb1eac055c0601ae6372\n',0,23,'Red Hat'),(274243,1020,1020,'2013-07-30 09:37:27','2013-07-23 15:10:09','    Obscure the X-Auth-Token in proxy log\n    \n    The X-Auth-Token is sensitive data. If revealed to an unauthozied person,\n    they can now make requests against an account until the token expires.\n    \n    This implementation maintains current behavior (i.e, the token\n    is logged). Implementers can choose to set reveal_sensitive_prefix\n    to (e.g.) 12 so only first 12 characters of the token are logged.\n    Or, set to 0 to replace the token with \"...\".\n    \n    DocImpact\n    \n    Part of bug #1004114\n    \n    Change-Id: Iecefa843d8f9ef59b9dcf0860e7a4d0e186a6cb5\n',94,1,'HP'),(274245,4075,4075,'2013-07-19 01:39:42','2013-07-19 01:39:42','    Add option to make probetests more brittle\n    \n    Currently probetests take advantage of a number of assumptions about the SUT.\n    Unfortunately after some time with a working SAIO, configuration drift may\n    result in a system that is no longer compatible with these assumptions.  To\n    help weary developers more quickly identify the changes they\'ve made since\n    they last ran probetests successfully, some handy validators have been added\n    to test.probe.common\n    \n    Additionally a new option \'validate_rsync\' in test.conf, when enabled, will\n    run a series of up front validations during the setup of each probetest by\n    inspecting the ring, the mounted devices, and the rsync exports (\"modules\") in\n    order to ensure that when probetests fail the do so early and with specific\n    complaints.\n    \n    To preserve existing failures, the option is disabled by default.\n    \n    Change-Id: I2be11c7e67ccd0bc0589c360c170049b6288c152\n',65,4,'Rackspace'),(274247,4073,4073,'2013-07-30 15:11:00','2013-07-30 14:57:48','    fix(gitignore) : ignore *.egg and *.egg-info\n    \n    Change-Id: I9496dab9e8f779a7ae045bb73b2cf8e77bda0d30\n',2,1,'independent'),(274249,826,826,'2013-07-30 09:38:22','2013-07-29 15:49:37','    Merge object base module into diskfile.\n    \n    All of the module methods of the (now defunct) base module we really\n    concerned with the on-disk layout which is what the DiskFile module is\n    really about.\n    \n    Change-Id: I96e022c5f96e31537ced74139185851a2751701c\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',493,542,'Red Hat'),(274251,4064,4064,'2013-07-26 10:00:33','2013-07-26 10:00:33','    add utf-8 charset to multipart-manifest=get resp\n    \n    Change-Id: Ic06e8b07a4db4ccde633f3b56a49f198cdd467cb\n',2,0,'Rackspace'),(274253,10,2206,'2013-07-24 10:08:48','2013-07-15 15:43:56','    log return value before arguments when rsync error\n    \n    The arguments of rsync command seems too long. If some errors occur, it\n    is hard to debug. Moving return value of rsync command first could help\n    people at least know reason of rsync error by manuals.\n    \n    fixes bug #903406\n    \n    Change-Id: I1cac7bbca74824a6d47e6ceb9f654d4046fcbb9e\n',1,1,'UnitedStack'),(274255,4064,4064,'2013-07-30 15:17:38','2013-07-30 11:52:23','    Tell swift to figure out content type\n    \n    Be able to tell swift to figure out the content-type even if it is\n    sent because old client code / curl has trouble sending blank\n    content-type headers.\n    \n    Change-Id: Ie65ddf8993a19ea74e0b85a2ae56da84a617c19d\n',55,2,'Rackspace'),(274257,1020,1020,'2013-07-24 15:44:52','2013-07-22 18:15:51','    Return name of header larger than MAX_HEADER_SIZE\n    \n    Change-Id: I3130d8f8f0beebc8f92600f76b72cf64a3f12894\n',24,3,'HP'),(274259,26,26,'2013-08-01 13:09:13','2013-08-01 13:09:13','    Just a tiny doc fix for a Sphinx warning\n    \n    Change-Id: Iede31212065eafb94fd29a63103e1e73e2de770d\n',1,0,'Rackspace'),(274260,4075,2206,'2013-07-31 03:12:52','2013-07-31 11:50:06','    give value [] if disallowed_metadata_keys is None\n    \n    The default value of DiskFile.disallowed_metadata_keys is None. And it\n    will be iter in following codes even if it didn\'t get a new value. So\n    it is necessary to give Diskfile.disallowed_metadata_keys an empty list\n    in __init__ if the default value None is used.\n    \n    fixes bug #1206740\n    \n    Change-Id: I8454eba47b2c691166924356ab33b0235a800951\n',7,1,'UnitedStack'),(274262,40,40,'2013-07-31 10:07:26','2013-07-30 17:16:59','    Fake http_connect in test_replicator test\n    \n    - mock http_connect in replicator.test_delete_partition test to not\n      connect directly on 127.0.0.1 (which is not always avail on non\n      linuxies).\n    - Fixes bug 1203907\n    \n    Change-Id: I2622223c9fe5a3db2a113b6cd8d028a5db0915a7\n',9,7,'eNovance'),(274264,5596,5596,'2013-07-29 17:35:08','2013-07-23 14:54:51','    some container serialization cleanup\n    \n    Have json and xml use common record cleanup code.\n    Do a somewhat better job of parsing extensions from content-types.\n    Use a real XML serializer.\n    \n    Change-Id: I10e14dffd1da590b4fd180b4d33ab5de862e2b55\n',135,76,'Rackspace'),(274266,40,40,'2013-07-23 15:51:38','2013-07-11 17:19:25','    Remove duplicated code in direct_client.\n    \n    - Add a base function _get_direct_account_container to do the direct\n      account stuff instead of duplicating both methods.\n    \n    Change-Id: I12059a741dd22d0dde20012d1dbc4be9b8e90957\n',55,64,'eNovance'),(274268,42,42,'2013-07-31 16:05:05','2013-07-31 16:01:15','    Make pending_timeout an argument of __init__\n    \n    Just like stale_reads_ok, this was already an argument, end even\n    used by the replicator that way. We only make it used exclusively\n    this way, so that we can document it for LFS.\n    \n    Change-Id: Ib722093a476ec75d87917b37b40b77dcf2627330\n',13,10,'Red Hat'),(274270,1807,1807,'2013-08-03 07:06:00','2013-08-02 21:04:24','    Correct misspell in comments\n    \n    In file: test/functional/tests.py\n    \n    Change-Id: I4440123b95e38b40a7a0a5f1f031941f42c1085e\n',1,1,'99cloud'),(274272,3753,3753,'2013-08-05 09:57:50','2013-08-05 09:55:54','    Add swift-basicauth and better-staticweb to associated projects.\n    \n    As announced here:\n    http://openstack.markmail.org/thread/jjjbdpurhb5jwaxe\n    \n    Change-Id: I683c463745b34c003ecb79ba8261b94b9dc166b6\n',2,0,'CloudVPS'),(274273,40,40,'2013-08-05 09:30:26','2013-08-05 09:28:47','    Fix sphinx error in swift.common.utils\n    \n    - Error was swift/common/utils.py:docstring of\n      swift.common.utils.parse_content_type:7: ERROR: Unexpected\n      indentation.\n    - Closes-Bug: #1208396\n    \n    Change-Id: Ia0c095d1b0b202e99991aabdf96e12b52c922c5c\n',2,1,'eNovance'),(274275,250,250,'2013-08-05 22:44:12','2013-07-12 08:11:27','    Allow dispersion tools to use keystone server with insecure certificate\n    \n    The swift-dispersion-populate and swift-dispersion-report tools now\n    accept a --insecure option.\n    \n    Also, dispersion.conf now has a keystone_api_insecure option.\n    \n    Default is obviously to use the secure path.\n    \n    DocImpact\n    \n    Change-Id: I4000352e547d9ce5b08ade54e0c886281caff891\n',53,12,'SUSE'),(274277,42,42,'2013-08-05 20:38:01','2013-08-05 20:38:01','    Increase test coverage of swift/common/db.py\n    \n    The most low hanging fruit is _preallocate(). As it turns out,\n    we never excercise the calculations because we never give it\n    a file that exists.\n    \n    This version uses mock.patch everywhere.\n    \n    Change-Id: I5df03aff295d2a1bca252a02b3985a6bc3eecb26\n',19,8,'Red Hat'),(274278,826,826,'2013-08-06 12:44:42','2013-07-02 11:48:19','    Fix handling of DELETE obj reqs with old timestamp\n    \n    The DELETE object REST API was creating tombstone files with old\n    timestamps, potentially filling up the disk, as well as sending\n    container updates.\n    \n    Here we now make DELETEs with a request timestamp return a 409 (HTTP\n    Conflict) if a data file exists with a newer timestamp, only creating\n    tombstones if they have a newer timestamp.\n    \n    The key fix is to actually read the timestamp metadata from an\n    existing tombstone file (thanks to Pete Zaitcev for catching this),\n    and then only create tombstone files with newer timestamps.\n    \n    We also prevent PUT and POST operations using old timestamps as well.\n    \n    Change-Id: I631957029d17c6578bca5779367df5144ba01fc9\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',222,31,'Red Hat'),(274280,229,229,'2013-08-07 07:03:48','2013-08-06 11:20:32','    CHANGELOG and AUTHORS and .mailmap updates for 1.9.1\n    \n    Change-Id: I34b28ffd7971a99b727c5149bdddeb9c6020e1df\n',61,1,'SwiftStack'),(274282,229,229,'2013-08-12 20:33:42','2013-08-12 20:33:42','    finalize version for 1.9.1 release\n    \n    Change-Id: Id0e46d97dbdffbc7baee7f0f398bb9d9ca44dd26\n',1,1,'SwiftStack'),(274283,229,5611,'2013-03-26 23:00:07','2013-02-27 00:49:51','    Improved container-sync resiliency\n    \n    container-sync now skips faulty objects in the first and second rounds.\n    All replicas try in the second round.\n    No server will give up until the faulty object suceeds\n    \n    Fixes: bug #1068423\n    \n    Change-Id: I0defc174b2ce3796a6acf410a2d2eae138e8193d\n    (cherry picked from commit 8b140033f01333fbd6d41e2946db949ab6f92599)\n',43,34,'IBM'),(274284,229,2206,'2013-03-26 23:00:44','2013-03-18 13:15:09','    Use role in insensitive case in keystoneauth.\n    \n    Using insensitive case could tolerate human error. For example,\n    user maybe set like this \"operator_roles = Admin, swiftoperator\"\n    \n    - also fix a mistake in test, [\'admin\'] is correct value for roles, not\n      \'admin\' (it will be looped as [\'a\', \'d\', \'m\', \'i\', \'n\'])\n    - add test for insensitive cases\n    \n    Fixes: bug #1013120\n    Change-Id: I56d71da8bc503e48e92dd743692ba6fc237f029e\n    (cherry picked from commit 7dd966192a43f9937c3e9ac576708447634cdc00)\n',19,6,'Huawei'),(274286,229,4064,'2013-03-26 23:01:18','2013-03-19 11:48:14','    fix stupid bug with bulk delete max items\n    \n    Change-Id: I52160b5e7480112d536c45dd4b0b10a808adcdcd\n    (cherry picked from commit 1b150749f7a47f40f346213ea901fd439838c478)\n',10,4,'Rackspace'),(274288,229,4066,'2013-03-26 23:01:44','2013-03-18 18:01:16','    increase unit test coverage on account server\n    \n    Change-Id: Id728a17180f4ee2e31edaef0af6d26446b6014c2\n    (cherry picked from commit a5ba0d5edc3633557506d4abb160c39cde834d89)\n',131,1,'independent'),(274290,229,869,'2013-03-26 23:02:13','2013-03-20 16:56:52','    Fix misspelled variable.\n    \n    Change-Id: I243de23d5acee135113dc81fca6244d651a2d9a8\n    (cherry picked from commit 70aa7f90537916d374f57d8aafd408506f345e87)\n',3,3,'SwiftStack'),(274292,229,1020,'2013-03-26 23:02:35','2013-03-21 12:59:13','    Fix for attempted COPY of objects gt MAX_FILE_SIZE\n    \n    If X-Copy-From is a manifest object, it can be bigger than MAX_FILE_SIZE.\n    Currently this fails with 503. It should be 413.\n    \n    Bug #1158279\n    \n    Change-Id: I7ec16088046c84e42d5be9c865e1338eb07845b6\n    (cherry picked from commit 7df43237451a50d8eade94024cd97c50621ed38a)\n',44,0,'HP'),(274294,229,1125,'2013-03-26 23:02:58','2013-03-21 09:45:13','    instruction command was not documented in right format.\n    \n    Instructions for a Multiple Server Swift Installation (Ubuntu) doc\n    for creating /var/run/swift and changing owner command were not\n    using the right format. Missing two colons.\n    \n    Change-Id: Ie23007a0da498373fbfb137c7edb3d80813c6ba5\n    Fixes: bug #1158310\n    (cherry picked from commit c1dfe891e76b2b8ebb99efb71cf61aa81110348e)\n',1,1,'IBM'),(274296,229,4064,'2013-03-26 23:50:31','2013-03-21 08:13:00','    Fix bugs in bulk and slo and small doc change.\n    \n    Added 411 responses in bulk and slo when needed.\n    \n    Make X-Static-Large-Object an illegal header with slo installed- somehow\n    that got lost with some refactor I did.\n    \n    Change-Id: I986c1656658f874172860469624118cc63bff9bc\n    (cherry picked from commit 92e877ae51d3bbcb21278426e07eefe703c6ad30)\n',27,8,'Rackspace'),(274297,229,5610,'2013-03-28 20:39:15','2013-03-21 11:35:11','    Fix for unicode issues in staticweb\n    \n    When prefix or subdir is unicode, it fails.\n    Fixes: bug #1158092\n    \n    Change-Id: I966a7a198a5ca5ea152872c94240e8c2ebe57d36\n    (cherry picked from commit 05c8d61aebb39d8695c5b295ff399e87e4749540)\n',67,16,'Kakao Corp.'),(274298,229,5611,'2013-03-28 20:39:42','2013-03-20 01:35:41','    Add support for Hash Prefix\n    \n    A new configuration parameter is added to /etc/swift/swift.conf\n    [swift-hash]\n    swift_hash_path_prefix = \'random unique string\'\n    \n    New installations are advised to set this parameter to a random secret,\n    which would not be disclosed ouside the organization.\n    The same secret needs to be used by all swift servers of the same cluster.\n    \n    Existing installations should set this parameter to an empty string\n    (the default)\n    \n    DocImpact\n    \n    Fixes: Bug #1157454\n    \n    Change-Id: I63b10d0b7d6dd3f74e0f10bb41b5f240fa03578a\n    (cherry picked from commit a979c8007bf7376541c932c3e91d5ba1a95f4481)\n',55,18,'IBM'),(274300,229,4066,'2013-03-28 20:40:05','2013-03-20 19:26:45','    additional unit test coverage for container/server.py\n    \n    Change-Id: Id510cceb88f062f921450a5d25d7c97b7ca5943b\n    (cherry picked from commit 60489cdedd9f26d3b08851820a883ceea004aabc)\n',401,179,'independent'),(274302,229,4064,'2013-03-28 20:40:32','2013-03-26 09:40:03','    Fixing SLO range requests\n    \n    Change-Id: I355e99c971cfe8f7f8dedcd8f9f08c97079863cc\n    (cherry picked from commit d2d9a15ddf18ee6639829a2454b81c6876885f90)\n',3,7,'Rackspace'),(274304,229,229,'2013-03-28 21:03:41','2013-03-28 21:01:49','    updated AUTHORS and CHANGELOG\n    \n    These updates are to reflect the changes that have been\n    backported into the 1.8.0 release candidate.\n    \n    Change-Id: I9b2abb9809fa6715a427dc0dbe0474aba140a596\n    (cherry picked from commit 602bf524b8db31171e70c6a94a66c025d20f021c)\n',6,0,'SwiftStack'),(274306,239,239,'2013-03-19 16:32:01','2013-03-19 09:06:23','    Mark 1.8.0 \"Final\"\n    \n    Mark 1.8.0 \"Final\" for Grizzly release.\n    \n    Change-Id: Iead186725f5d56baae6f534681c9f90befcdd8d9\n',1,1,'OpenStack Foundation'),(274308,239,239,'2013-04-04 18:23:32','2013-04-04 18:23:32','    Bump \"next\" version on stable/grizzly to 1.8.0.1\n    \n    Change-Id: I4cf78259031e13a3605346bc1a4a8f3746634c3a\n',1,1,'OpenStack Foundation'),(274309,3,733,'2013-06-13 15:56:40','2013-05-27 02:07:39','    Check user input in XML responses.\n    \n    Fixes bug 1183884.\n    \n    * swift/account/server.py: Escape account name in XML listings.\n    \n    Change-Id: I7ba54631ed1349516132c00a53fae74f0b84ac37\n',1,1,'Rackspace'),(274310,239,826,'2013-08-07 17:08:27','2013-07-26 15:03:34','    Fix handling of DELETE obj reqs with old timestamp\n    \n    The DELETE object REST API was creating tombstone files with old\n    timestamps, potentially filling up the disk, as well as sending\n    container updates.\n    \n    Here we now make DELETEs with a request timestamp return a 409 (HTTP\n    Conflict) if a data file exists with a newer timestamp, only creating\n    tombstones if they have a newer timestamp.\n    \n    The key fix is to actually read the timestamp metadata from an\n    existing tombstone file (thanks to Pete Zaitcev for catching this),\n    and then only create tombstone files with newer timestamps.\n    \n    We also prevent PUT and POST operations using old timestamps as well.\n    \n    Change-Id: I631957029d17c6578bca5779367df5144ba01fc9\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',225,27,'Red Hat'),(274311,239,869,'2014-01-16 13:45:52','2014-01-16 13:45:52','    Use constant time comparison in tempURL\n    \n    Use constant time comparison when evaluating tempURL to avoid timing\n    attacks (CVE-2014-0006). This is the grizzly backport of the master\n    patch.\n    \n    Fixes bug 1265665\n    \n    Change-Id: I11e4ad83cc4077e52adf54a0bd0f9749294b2a48\n',4,3,'SwiftStack'),(274312,229,229,'2013-08-07 08:40:54','2013-08-07 08:40:54','    version bump to reflect current dev target\n    \n    Change-Id: I5db26319ba642c6447527f50c7316b8b5933871d\n',1,1,'SwiftStack'),(274314,40,40,'2013-08-06 13:04:07','2013-08-06 12:58:59','    Use /var/run/syslog on macosx for syslog tests.\n    \n    - This patch is based on zaictev review.\n    - Fixes bug 1206560.\n    \n    Change-Id: I41f3d485df41fe443784f803b276712405fe72c6\n',10,4,'eNovance'),(274316,1807,1807,'2013-08-06 19:29:20','2013-08-04 11:15:53','    Assignment to reserved built-in symbol\n    \n    Built-in symbol: file, format, range etc was re-assigned as local vars\n    in files: test/functional/swift_test_client.py and\n    test/functional/tests.py, rename these local vars.\n    \n    Fixes bug #1208078\n    \n    Change-Id: I627894cd722bd32cad231d534cbe97a0412c7cc9\n',348,333,'99cloud'),(274318,1,1,'2013-08-07 17:50:32','2013-08-04 16:10:49','    Add missing copyright license headers\n    \n    We\'re working on adding enforcement that things have appropriate\n    copyright license headers. In anticipation of that, fix the files that don\'t\n    have them.\n    \n    Change-Id: Ie0a9fd5eece5b6671ff4389b07b69ca29be7d017\n',99,0,'HP'),(274320,733,733,'2013-08-05 15:35:34','2013-08-05 15:35:34','    Ensure http_connect is mocked out in tests\n    \n    Otherwise this test will try to connect to several addresses that aren\'t\n    mapped. On Linux the entier 127.0.0.* block is mapped to localhost, so this\n    often isn\'t noticed, but on OS X only 127.0.0.1 is mapped by default.\n    \n    Change-Id: I44034d5006ff25e052afdb6599ab5838e4c5ae5b\n',6,2,'Rackspace'),(274322,312,312,'2013-08-05 15:53:07','2013-08-05 15:36:48','    Clarify staticweb configuration with keystone.\n    \n    Since staticweb works with anonymous requests by default, explictly\n    mention delay_auth_decision for the authtoken middleware in\n    /etc/swift/proxy-server.conf.\n    \n    Change-Id: I4879884b22224843cf9d4a50ba3359fac36957dc\n',8,5,'SUSE'),(274324,229,229,'2013-08-09 07:50:28','2013-08-09 07:50:28','    added a couple of java libraries to associated projects\n    \n    Change-Id: I7a554af509e8d9743a8416a051845c266e1fb9f6\n',2,0,'SwiftStack'),(274325,40,40,'2013-08-09 17:18:40','2013-08-09 17:16:36','    Add libcloud to associated_projects.\n    \n    Change-Id: I8778bbecc7ae5852cf789ae6b71191004f69861f\n',1,0,'eNovance'),(274326,733,733,'2013-08-12 16:29:06','2013-08-12 16:29:06','    Always close HTTP connections in the container updater.\n    \n    This is needed on Pythons (e.g. PyPy) which do not use reference\n    counting.\n    \n    Change-Id: Ib75a2e63bdd6b6bc726fb3dbf905d36f427aaf2f\n',2,0,'Rackspace'),(274327,733,733,'2013-08-12 22:31:32','2013-08-12 22:21:15','    Removed monkeypatching of __del__ in tests\n    \n    On PyPy adding __del__ to a class after it\'s constructed does not\n    work, instead implement the leakchecker in tests by using weakrefs,\n    which works everywhere.\n    \n    Change-Id: I873efb3e2f85f731d5836bf9bf06a21e939e8542\n',13,17,'Rackspace'),(274328,1807,1807,'2013-08-13 21:57:51','2013-08-13 21:57:51','    Rename loop var i in sub loop branch\n    \n    In file: test/functional/tests.py, TestFile::testMetadataOnPost()\n    \n    Fixes bug #1211783\n    \n    Change-Id: I501eabdde9858af4571a19ad6a43db94f33fda09\n',1,1,'99cloud'),(274330,5596,5596,'2013-08-13 15:54:19','2013-08-13 15:54:19','    memcache timeout parameter bug in get_info\n    \n    container and account info currently never expires from cache due to a\n    bug in get_info.\n    \n    Change-Id: Ia2b4dfa768d6017dd809cdd5f0568f4831f87ade\n',1,1,'Rackspace'),(274331,733,733,'2013-08-12 23:08:00','2013-08-12 23:08:00','    Sped up tests by using smaller files\n    \n    Switched one of the disk file tests to use a smaller file size for\n    testing. The larger size was not needed and accounted for ~3% of the\n    total test time by itself.\n    \n    Change-Id: Ie71a390117baa2d286122a46880a4558f50b83b9\n',1,1,'Rackspace'),(274333,2206,2206,'2013-08-15 12:32:47','2013-08-04 17:31:14','    Add unit test for account/auditor.py\n    \n    * Here lack tests for a long time; let\'s add tests for it.\n    * use mock module instead of monkeypatch in both account/test_auditor.py\n      and container/test_auditor.py\n    \n    Change-Id: I9ea23dc5034f7147629db59b1ef6cb491de9049f\n',108,13,'UnitedStack'),(274335,826,826,'2013-08-16 11:39:53','2013-08-15 22:54:26','    DiskFile logger argument is not a keyword\n    \n    This was broke somewhere pre-1.9.1.\n    \n    Change-Id: Ic9cc615e431fbf8b49e5350725d6974b1f82184e\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',1,2,'Red Hat'),(274336,4064,4064,'2013-07-26 07:12:42','2013-07-25 15:43:18','    return the SLO etag generated from the segment etags on PUT\n    \n    Change-Id: Idf742035da51170ea6a4d6278422ef307a46e121\n',77,36,'Rackspace'),(274338,4064,4064,'2013-07-31 14:21:33','2013-07-31 13:06:48','    Staticweb shortcut object 404s\n    \n    Right now static web checks to see if it should handle a\n    request and if it decides that it shouldn\'t, in all cases,\n    it lets the request pass through the pipeline normally.\n    After this change on \"x-web-mode: t\" obj requests where\n    staticweb is not setup and an object 404s it will just\n    return the 404 instead of letting the app send a duplicate\n    request to the object servers.\n    \n    Change-Id: I824f4b03f7546d26084fd51b97ea6e290169d22a\n',3,1,'Rackspace'),(274340,4075,26,'2013-08-15 16:42:58','2013-06-27 14:11:25','    Implements configurable swift_owner_headers\n    \n    These are headers that will be stripped unless the WSGI environment\n    contains a true value for \'swift_owner\'. The exact definition of a\n    swift_owner is up to the auth system in use, but usually indicates\n    administrative responsibilities.\n    \n    DocImpact\n    \n    Change-Id: I972772fbbd235414e00130ca663428e8750cabca\n',70,3,'Rackspace'),(274342,826,826,'2013-08-16 17:20:36','2013-08-16 17:13:00','    Some how DELETE not using _parse_path()\n    \n    It seems as this conversion was missed, as a git blame says the first\n    few lines of DELETE date all the way back to commit 001407b9 \"(creiht)\n    2010-07-12 Initial commit of Swift code\".\n    \n    While we were in here, we moved _parse_path() to a module method as\n    there appears to be need to keep it as an object controller method.\n    \n    We also fixed up as many of the tests that directly invoked the object\n    controller methods to use get_response(), addressing a few\n    inconsistencies along the way.\n    \n    Change-Id: If491c7129d61d6fc7d81401fbc3650c29ed80465\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',154,157,'Red Hat'),(274344,42,42,'2013-08-16 17:07:22','2013-08-16 17:04:00','    Unify DatabaseBroker.reclaim\n    \n    Both AccountBroker and ContainerBroker install their own reclaim()\n    methods, which are the same, modulo the table and column names.\n    Also, the parent reclaim() method is unused, except as a tramptoline\n    to test _reclaim().\n    \n    This patch gets rid of the unused code by moving it into the tests,\n    and unifies the reclaim() method in DatabaseBroker. We use the\n    same class parameters that are already in use elsewhere.\n    \n    The unused code was found when documenting the DB broker API for\n    the LFS. The unification fell out of reviews by Clay and Peter.\n    \n    Change-Id: Ic5e38a9e39dafe8e0bc062818151edece384f3b5\n',39,76,'Red Hat'),(274346,283,283,'2013-08-19 11:41:38','2013-08-19 11:41:38','    Use randomly named file for temporay file\n    \n    Use tempfile.mkstemp to generate temporary\n    file to avoid collision with an existing \'test\'\n    file in /tmp.\n    \n    Change-Id: Ic2f7f64ee9826afa6f04debd763e8c7a0eb25988\n    Fixes: bug #1213845\n',12,9,'eNovance'),(274347,40,40,'2013-08-08 11:41:57','2013-08-08 11:11:39','    Don\'t append %interface with ipv6 ips.\n    \n    - Since netifaces is appending a %interface (i.e: %eth0) at the end and\n      does not make a correct ipv6 address we are removing it.\n    - Improve the tests of whataremyips along the way.\n    \n    Closes-Bug: 1209443\n    Change-Id: I585e795083783009961b429607ca3f66b8d7ec30\n',39,2,'eNovance'),(274349,1,1,'2013-08-14 19:10:07','2013-05-11 15:35:37','    Migrate to pbr for build\n    \n    pbr is the libification of what was openstack.common.setup. If provides\n    the build information in a delcarative form, instead of as executable python\n    code, which works around the chicken and egg problem of needing setup\n    libraries present to run setup, but needing to run setup to tell if you\n    need setup libraries.\n    \n    One of the features that comes along with this is versioning based on\n    git tags. If the current revision is a signed git tag, then that is the\n    version of the package. If it is not, the version is equal to the most\n    recent git tag, plus a commit count, plus a git sha (similar to git\n    describe, but scrubbed for python version rules compliance)\n    \n    pbr updates are also part of the upcoming automation around ensuring\n    global requirements stay in sync.\n    \n    Closes-Bug: #1179007\n    Change-Id: Ia473960be7e8aa44f09d48cea72ed3c8845f82fa\n',116,154,'HP'),(274351,249,249,'2013-08-09 00:53:44','2013-08-08 22:47:16','    fix gettext calls to operate on uninterpolated strings\n    \n    The strings need to be interpolated after the gettext call,\n    so that the gettext() lookup works correctly\n    \n    Change-Id: Ibdb9044813f42039f7a87ca7e8fec20583aa61ae\n',3,3,'Red Hat'),(274353,3037,3037,'2013-08-16 00:17:08','2013-08-15 16:10:11','    clean temp dir in /tmp\n    \n    In unit tests, many test class use tempfile.mkdtemp in SetUp and\n    shutil.rmtree in tearDown.\n    \n    A common wrong case is putting test data in `testdir = os.join(mkdtemp() +\n    \'some_class\')` and `rmmtree(testdir)`. As a result, /tmp/xxx/some_class\n    was deleted, but /tmp/xxx is still leaved in system. So a proper fix is\n    `rmtree(os.path.dirname(testdir), ignore_errors=1)`\n    \n    fixes bug #1212583\n    \n    Change-Id: Iafbe3e11f16b51bdf49abce9e68eb01f25bc5df2\n',2,3,'UnitedStack'),(274355,869,869,'2013-08-07 15:58:23','2013-08-07 15:58:23','    Fix range GET w/If-None-Match.\n    \n    An object GET request with both If-None-Match: <Etag> and\n    Range: bytes=N-M should result in a 304 Not Modified if the Etag\n    matches. However, it was resulting in a 416 Requested Range Not\n    Satisfiable. This commit fixes that.\n    \n    The fix was to remove conditional_response=True from a request in the\n    proxy. As far as I can see, the only effect that\n    conditional_response=True has in swob is to enable range\n    checking. Since the object server handles all the range stuff, the\n    proxy shouldn\'t do it. Otherwise, you wind up with double-application\n    of the Range header, and that doesn\'t work very well.\n    \n    This is probably left over from the WebOb days.\n    \n    Fixes bug #1196805.\n    \n    Change-Id: I207f3839731b7503baa3fdbd7cd1cfe3e1b46f62\n',48,1,'SwiftStack'),(274357,4067,4067,'2013-08-21 19:38:24','2013-07-22 22:09:40','    Make the length of a line logged configurable\n    \n    Failed calls to rysnc can\n      result in very long log lines.\n    \n    These lines are\n      mostly made up\n    of file paths and are\n      not always useful.\n    \n    This change will\n      allow for reducing the\n    length of these\n      lines logged if desired.\n    \n    Change-Id: I9a28f19eadc07757da9d42b0d7be1ed82170d732\n',11,2,'Rackspace'),(274359,733,733,'2013-08-21 13:13:24','2013-08-21 13:13:24','    Don\'t silence errors in spawning processes\n    \n    Change-Id: I85eca76b5eef6b8eb04dfe070a24a9f05e19baa2\n',2,0,'Rackspace'),(274361,4064,4075,'2013-08-21 15:15:37','2013-07-31 02:57:59','    change .data vrs .meta file metadata filtering in obj.diskfile\n    \n    Add DATAFILE_SYSTEM_META to diskfile.py which is a set of\n    system-set metadata keys that cannot be changed with a POST.\n    \n    Fixes: bug #1214607\n    \n    Change-Id: I4bdfc1e4813a1d27fe726ba83481c6e7194aab7f\n',44,20,'Rackspace'),(274363,2206,2206,'2013-08-15 17:05:07','2013-08-15 17:05:07','    use testCase.assert instead of assert and try...except\n    \n    In unit tests, we should use: self.assertTrue or self.assertFalse\n    instead of \'assert xxx is True/False\', and use self.assertRaises instead\n    of \'try ... except ...\'\n    \n    fixes bug #1212602\n    \n    Change-Id: I25318eb59cd26a98afdce5495273e3b3266655a4\n',8,28,'UnitedStack'),(274365,733,733,'2013-08-19 15:50:03','2013-08-19 15:50:03','    Run a more GC iterations to make sure weakrefs are collected\n    \n    This is needed to make sure the weakref callback is fired under PyPy.\n    \n    Change-Id: I5d1b83186780ee6130463fe42fac58e411ad9f79\n',2,2,'Rackspace'),(274367,26,26,'2013-08-14 12:40:25','2013-08-14 12:40:25','    Added container listing ratelimiting\n    \n    Change-Id: If4e9cfe4e4c743de1f39704acf849164cf3f0bd0\n',217,103,'Rackspace'),(274369,5253,5253,'2013-08-24 17:26:01','2013-08-21 22:13:16','    Improve swift-bench performance\n    \n    Single-host bench controller should be monkey-patched to achieve\n    maximum concurrency.\n    \n    Change-Id: I77c63773edc7427d06c2fbfb67ededf36d9913d3\n',1,0,'independent'),(274370,869,869,'2013-08-16 15:45:45','2013-08-14 11:55:15','    Refactor how we pick listings\' content type.\n    \n    There were a few different places where we had some repeated code to\n    figure out what format an account or container listing response should\n    be in (text, JSON, or XML). Now that\'s been pulled into a single\n    function.\n    \n    As part of this, you can now raise HTTPException subclasses in proxy\n    controllers instead of laboriously plumbing error responses all the\n    way back up to swift.proxy.server.Application.handle_request(). This\n    lets us avoid certain ugly patterns, like the one where a method\n    returns a tuple of (x, y, z, error) and the caller has to see if it\n    got (value, value, value, None) or (None, None, None, errorvalue). Now\n    we can just raise the error.\n    \n    Change-Id: I316873df289160d526487ad116f6fbb9a575e3de\n',176,157,'SwiftStack'),(274372,869,869,'2013-08-26 19:00:46','2013-08-26 19:00:46','    Fix setdefault() for swob\'s HeaderKeyDict.\n    \n    You\'d think this would just work, given that HeaderKeyDict inherits\n    from dict and overrides the usual __thingy__ methods, but it\n    doesn\'t. It would work if you title-cased the key, but the whole point\n    of HeaderKeyDict is to do that for you.\n    \n    Change-Id: If5c22df0690a245d1dd02fa3a52fa135235fe60d\n',23,2,'SwiftStack'),(274374,869,869,'2013-08-27 09:39:02','2013-08-16 16:24:00','    Refactor path splitting and validation.\n    \n    The account, container, and object servers all do the same thing at\n    the top of GET/PUT/etc.: they split the path, validate that the first\n    two components are a good (device, partition) pair, and return a 400\n    if they\'re not. The object server already had a module-local helper\n    function for this, but the account and container servers just had\n    duplicate boilerplate code. Now it\'s all in one common helper.\n    \n    Change-Id: I9a20d37fc9e1a68b10149a7aa78cb9691fc04ea9\n',384,403,'SwiftStack'),(274375,4533,4533,'2013-08-28 15:40:16','2013-08-28 15:40:16','    Fix regression that causes Timeouts to return 500\n    \n    When the hacking changes were put in, one of the exceptions that were\n    fixed didn\'t also add a catch for Timeout, which causes certain timeouts\n    to cause a 500 return\n    \n    Change-Id: I7a9db200528303868d8a9ab05f35a70d99bfb118\n',1,1,'Rackspace'),(274376,826,826,'2013-08-28 07:49:21','2013-08-28 00:39:48','    Don\'t use float() when normalize_timestamp() does it.\n    \n    And add a comment to note for the curious when the current timestamp\n    will bump to 11 digits of seconds (which implies that one would no\n    longer be able to use string compare on timestamps of differing\n    length).\n    \n    Change-Id: I823e7659c41a54915d7c9c64c9161a29e79cd48c\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',7,3,'Red Hat'),(274378,826,826,'2013-08-28 22:17:16','2013-08-28 12:51:09','    Remove duplicate code for update_put_timestamp().\n    \n    Change-Id: I035283f30257961d6efb98f1bb65d27bf6a5bbf5\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',14,26,'Red Hat'),(274379,10,826,'2013-08-22 21:35:09','2013-07-12 13:27:56','    get rid of unlinkold\n    \n    We currently have two methods for cleaning up object directories - unlinkold in\n    the object server and hash_suffix in the replicator.\n    \n    This modifies the object server to reuse the more complete hash_suffix logic.\n    \n    Change-Id: Id2fd83caad979bfd446d52a775a1fa373a670cf1\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',82,62,'Red Hat'),(274381,4533,4533,'2013-08-28 21:55:26','2013-08-28 21:26:08','    Added test for timeout regression\n    \n    Change-Id: Ia0e5f1595d1b1f58e6c415d7397f33496576c944\n',27,1,'Rackspace'),(274383,869,869,'2013-08-28 17:40:37','2013-08-26 17:41:59','    Clean up some of the proxy unit tests.\n    \n    Since we\'ve got machinery to catch HTTPException errors that happens\n    after the proxy server\'s __call__ method but before the individual\n    GET()/POST()/etc. methods, we shouldn\'t just call\n    GET()/POST()/etc. Instead, we should use swob.Request\'s get_response()\n    method, or otherwise actually call the proxy application. That way we\n    can have the code raise HTTPBadRequest, but the test just gets a\n    plain old response with a 400 status code, just like you\'d expect.\n    \n    Earlier changes fixed some of the tests; this commit fixes some\n    more. In the interest of not having a gigantic diff, this only gets\n    about half the proxy\'s unit tests, and the others will be done in a\n    subsequent commit.\n    \n    Change-Id: Iaca32e74a8f4499440e655c207a1012e14486c74\n',83,117,'SwiftStack'),(274385,4075,4075,'2013-08-29 07:28:32','2013-08-28 23:29:18','    Add constructor args to swob.Request.blank\n    \n    I knew webob.Request.blank could take most of the attributes on the class as\n    kwargs to blank, so I went and looked how.  It seems to work ok and is pretty\n    nice.\n    \n    Change-Id: I72fae7c28f81c97768ee98b8ebcd69789a4c2e84\n',136,2,'Rackspace'),(274386,4078,4078,'2013-08-29 11:32:01','2013-08-16 16:55:39','    Clean up utf8ness quote\n    \n    Move common codes on utf8ness and quote to common/utils.py\n    \n    Change-Id: I91d98a06fa94ac608119a0d70adedc6d73337c64\n',34,50,'INTC'),(274388,10,5252,'2013-08-02 11:47:33','2013-07-19 14:32:55','    Add delay in swift-bench\n    \n    With enable write affinity, it\'s necessary to wait until\n    replication has moved things to their proper homes before\n    running delete request. With write affinity turned on, only\n    nodes in local region will get the object right after PUT request.\n    \n    Fix bug #1198926\n    \n    Change-Id: I3aa8933d45c47a010ae05561e12176479e7c9bcc\n',9,0,'Mirantis'),(274390,4075,4075,'2013-08-26 14:23:22','2013-08-26 14:23:22','    remove unused reference to resellers_conf\n    \n    Change-Id: I956f25f44b20f65c72beddb2cd49225bdecc8430\n',0,3,'Rackspace'),(274392,826,826,'2013-08-29 17:35:00','2013-08-28 18:21:45','    Refactor DiskFile init logic into multiple methods\n    \n    The DiskFile constructor needs to grow a bit in the future it is was\n    already considered \"large\" by some. This breaks the logic up into\n    three main parts:\n    \n      1. Determine if the object exists, fetching the on-disk file(s) to\n         use\n      2. Finish the object construction when we have a tombstone file\n      3. Finish the object construction when we have a regular data file,\n         and optionally a fast-POST metadata file\n    \n    We added a number of assertions as a way of documenting the expected\n    behavior of the loop that figures out the on-disk file to use, and a\n    set of unit tests to verify the loop works as expected.\n    \n    Change-Id: I1503b7561e280ded3222a09514edc59ac26dbc65\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',218,63,'Red Hat'),(274394,733,733,'2013-08-30 07:38:57','2013-08-30 07:38:57','    Defer computation of available methods until needed.\n    \n    In practice this data is almost only ever needed if we\'re throwing an\n    HTTPMethodNotAllowed error, so we can avoid computing on every single\n    request to the proxy server.\n    \n    Change-Id: I2abafa3aeb63ca6974dfcf6f31c864c049681f37\n',11,5,'Rackspace'),(274395,869,869,'2013-08-30 09:50:24','2013-08-30 09:47:11','    Small test cleanups from b63089d.\n    \n    There was nothing there worth holding up the review over, but there\n    were a couple little things in the test that confused me.\n    \n    Change-Id: I85c9c1bdb12de210c198d0d38404a1cf9f73adbb\n',48,48,'SwiftStack'),(274397,733,733,'2013-08-30 13:21:20','2013-08-30 13:21:20','    Two small performance improvements to header generation\n    \n    These both apply to the proxy servers:\n    \n    First, instead of consturction a dict just to use with `.update()` simply set a\n    set of keys in the headers dict.\n    \n    Second, generating the headers for proxy requests once, no matter how many\n    backend servers are accessed (instead of once per backend server), they all get\n    the same headers.\n    \n    Change-Id: Ib42bf7750e175a6ad9b777fa35655380feeafb93\n',5,6,'Rackspace'),(274399,229,4064,'2013-08-30 14:36:26','2013-07-23 15:00:13','    Allow users to extract tars to containers with ACLs set\n    \n    This fixes bug: https://bugs.launchpad.net/swift/+bug/1203182 (well\n    it should :) I don\'t have keystone installed but the same issue\n    existed with tempauth).\n    \n    Change-Id: I6f4045f484b27c0153a9244e0dbf2641cbc9e84e\n',60,32,'Rackspace'),(274400,826,826,'2013-09-01 15:12:12','2013-08-31 20:07:08','    Pep8 the probe tests (1 of 12)\n    \n    Change-Id: I20571816d9838e125a60a2775219b2f3cbb36ddd\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',13,11,'Red Hat'),(274401,4533,4533,'2013-08-30 19:36:26','2013-08-29 16:32:30','    Only set PYTHON_EGG_CACHE if it isn\'t already set\n    \n    Change-Id: I6503c80a236a1720562377d04313ee2688336c85\n',6,3,'Rackspace'),(274403,733,733,'2013-09-03 10:47:06','2013-09-03 10:47:06','    Made the HTTP comparisons slightly more idiomatic\n    \n    This way they are more obviously range tests\n    \n    Change-Id: Ia782a8f5ddb5958f9da828e2caadf0a8e3c3ff11\n',5,5,'Rackspace'),(274405,826,826,'2013-09-01 15:12:25','2013-08-31 20:25:25','    Pep8 the functional tests (2 of 12)\n    \n    Change-Id: Id8a9ae0c82052baccf8bdacd6aaeb76a76ad2ce1\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',20,22,'Red Hat'),(274407,4075,4075,'2013-08-31 07:11:17','2013-08-30 21:01:12','    Fix string format error in DiskFile close\n    \n    Add a \'get_lines_for_level\' method to FakeLogger in order to actually\n    validate the log line format string is valid for the given args.\n    \n    Change-Id: Ib2559ddf5c9d89e17c6ac08d26cc46a4193a2df2\n',21,3,'Rackspace'),(274409,4075,4075,'2013-08-31 07:15:30','2013-08-30 21:37:07','    Always format messages sent to FakeLogger\n    \n    Change-Id: I0268587cce0d47b69470b7c4f9224e180fb98f77\n',37,9,'Rackspace'),(274411,826,826,'2013-09-01 15:12:32','2013-08-31 20:56:39','    Pep8 the functionalnosetests tests (3 of 12)\n    \n    Change-Id: Ia88356d6d36d1c4914f706652aaac5c840a79f13\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',226,135,'Red Hat'),(274413,826,826,'2013-09-01 15:12:39','2013-08-31 22:36:58','    Pep8 unit test modules for hacking and one liners (4 of 12)\n    \n    Address all the \"hacking\" lines that are flagged, and all the modules\n    that just have one item flagged.\n    \n    Change-Id: I372a4bdf9c7748f73e38c4fd55e5954f1afade5b\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',77,97,'Red Hat'),(274415,4533,4533,'2013-08-30 20:09:26','2013-08-30 20:09:26','    Fix changes in XML that broke old clients\n    \n    Certain old clients that shall not be named do not like some of the\n    recent changes to the xml output for container listings.  This fixes\n    those changes.  If we want to change any of the xml output, then we\n    should do it in another API version.  I\'m not sure if any of these\n    changes in the XML were put in any documentation, but if they were, they\n    should be changed back.\n    \n    DocImpact\n    \n    Change-Id: I983332ca9d620a9a539be26bc6655df9b2ef87ed\n',16,14,'Rackspace'),(274417,826,826,'2013-09-01 15:12:48','2013-08-31 23:13:15','    Pep8 unit test modules w/ <= 10 violations (5 of 12)\n    \n    Change-Id: I8e82c14ada52d44df5a31e08982ac79cd7e5c969\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',152,106,'Red Hat'),(274419,826,826,'2013-09-01 16:12:42','2013-08-31 23:42:43','    Pep8 unit test modules w/ <= 20 violations (6 of 12)\n    \n    Change-Id: I7317beb97e1530cb18c62da55ccf4c64206ff362\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',233,136,'Red Hat'),(274421,826,826,'2013-09-01 16:12:50','2013-09-01 00:35:53','    Pep8 unit tests in middleware > 20 violations (7 of 12)\n    \n    Change-Id: I9dfae1a473a8212ef25dcc01e338d8bdade7ef4e\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',390,305,'Red Hat'),(274423,826,826,'2013-09-01 16:12:51','2013-09-01 01:14:40','    Pep8 remaining unit test modules in common (8 of 12)\n    \n    Change-Id: I6fa3291eeacb7ee5c095ad9bccbd33f027bf11e3\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',306,224,'Red Hat'),(274425,826,826,'2013-09-01 16:12:51','2013-09-01 01:30:36','    Pep8 container test_sync and test_diskfile (9 of 12)\n    \n    Change-Id: I469e3b75b6846fddb5e9d2b8317506129836d0a6\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',146,105,'Red Hat'),(274427,826,826,'2013-09-03 22:31:30','2013-09-03 22:31:30','    Rename param to avoid use of built-in name hash\n    \n    Change-Id: I505e8b15ca41c52cd4942a0a7dd34996a1849bb3\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',3,3,'Red Hat'),(274429,826,826,'2013-09-01 16:12:51','2013-09-01 01:54:03','    Pep8 account and proxy server unit tests (10 of 12)\n    \n    Change-Id: Ib83d164997b0d98be921c8b4857caa2429344aa4\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',224,170,'Red Hat'),(274431,826,826,'2013-09-04 22:25:55','2013-09-01 12:50:07','    Flake8 container test_server.py (11 of 12)\n    \n    Change-Id: Ie06ed2955838556d5399a49ba3599dfbca4f7512\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',5,1,'Red Hat'),(274432,826,826,'2013-09-04 23:35:46','2013-09-01 15:10:39','    Pep8 final two unit test modules and enforce (12 of 12)\n    \n    We also fix up any other pep8 failures that snuck in from merges along\n    the way.\n    \n    Change-Id: I4ea984780ac2eac458c98fe181684eef4e04beaf\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',924,635,'Red Hat'),(274433,229,229,'2013-09-05 12:27:18','2013-09-05 12:27:18','    add reseller_admin_role to sample config\n    \n    Change-Id: Ia8e62eef5af9e849e86c3ff14ce7f8aaa5f21abf\n',2,0,'SwiftStack'),(274435,826,826,'2013-09-05 19:47:06','2013-09-03 10:26:39','    Rename DiskFile.writer to create\n    \n    Change-Id: I3af71c64dd4c61e665fe128a0b5241fd87ba71e0\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',17,17,'Red Hat'),(274436,826,826,'2013-09-05 19:47:06','2013-09-03 10:34:23','    Add a delete() method to DiskFile\n    \n    In preparation for making the DiskFile class an abstraction layer for\n    the backend to all the object server REST API services, we add a\n    simple delete method which encapsulates the required behavior.\n    \n    Change-Id: I539ad53c297e4c572e2f93c2524188fb89b2db40\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',19,2,'Red Hat'),(274437,826,826,'2013-09-06 13:44:09','2013-09-03 16:34:09','    Remove reference to \'file\' built-in\n    \n    Change-Id: Ie79e8ede393e92824fd906df1ff1933193c00943\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',42,42,'Red Hat'),(274439,826,826,'2013-09-04 09:21:43','2013-09-04 09:21:43','    Refactor finalize_put as an object method\n    \n    Change-Id: Iec3f53c564505c29739bb5531a71a0a101f64193\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',21,20,'Red Hat'),(274441,733,733,'2013-08-30 14:30:39','2013-08-30 14:30:39','    Made the signature of HeaderKeyDict.__init__ match dict\'s\n    \n    Change-Id: I75dc6228bc39de44f58d7ae9beb8ca3bf24b100f\n',3,3,'Rackspace'),(274443,733,733,'2013-09-09 09:58:26','2013-09-09 09:58:26','    Don\'t stat the path in ``unlink_older_than``\n    \n    ``listdir`` already handles the ENOENT and returns an empty list in\n    that case.\n    \n    Change-Id: I597d7ffa9979f668a856519062839505d26129f2\n',7,8,'Rackspace'),(274444,563,563,'2013-09-07 10:26:57','2013-09-07 10:14:00','    Do not use locals() for string formatting (H501)\n    \n    Fixes a warning triggered by Hacking 0.7.x or newer. There\n    is no need to use a positional string formatting here, since\n    this is not going to be localized.\n    \n    Change-Id: Ie38d620aecb0b48cd113af45cc9ca0d61f8f8ff1\n',6,6,'SUSE'),(274446,563,563,'2013-09-07 10:50:54','2013-08-28 21:16:08','    Use Python 3.x compatible except construct\n    \n    except x,y: was deprected and is removed in Python 3.x.\n    Use \"except x as y:\" instead which works in any Python\n    version >= 2.6.\n    \n    Change-Id: I7008c74b807340f3457d3a0c8bd0b83f23169d14\n',175,175,'SUSE'),(274448,563,563,'2013-09-07 10:51:21','2013-08-30 23:56:55','    Move string expansion outside localisation (H702)\n    \n    String expansion should be done outside localisation call (_()),\n    otherwise there will never be a matching string found in the\n    catalogue.\n    \n    Also enable gating on this Hacking check (H702).\n    \n    Change-Id: Ie7c89fbfb52629e75d5e68e9afda8bcf50bf4cdd\n',14,12,'SUSE'),(274450,869,869,'2013-08-14 12:21:44','2013-08-13 14:54:16','    Fix unbalanced rings after initial creation.\n    \n    Sometimes you\'d make a ring that should have a good balance (~= 1),\n    but it would come out with a poor balance (>= 90). Rebalancing a\n    couple times would fix it, but it shouldn\'t be necessary to do that.\n    \n    This was due to a bug in the ring builder\'s rebalance() method where,\n    when placing a replica for a partition, it would pick *one of* the\n    tiers with the lowest number of replicas, but the choice was made\n    without regard to parts_wanted.  Now rebalancing pays attention to the\n    drives\' parts_wanted attributes, so the tier with the emptiest drive\n    gets the replica.\n    \n    (Also fixed a typo in a completely unrelated comment.)\n    \n    Change-Id: I1821f15170f0ed212b0ad7c81b97031540ab4460\n',54,18,'SwiftStack'),(274452,733,733,'2013-09-09 14:49:39','2013-09-09 14:49:39','    Fixed a suite that was over-indented\n    \n    Change-Id: I3d05b29e57b77c3751d9f5ff694085bd082e8eb1\n',3,3,'Rackspace'),(274454,826,826,'2013-09-06 18:11:35','2013-09-03 11:10:22','    Provide a method for retrieving on-disk metadata\n    \n    We hide the internal dictionary for the metadata providing a method to\n    retrieve it to abstract away the implementation details of how\n    DiskFile object provides and maintains that metadata.\n    \n    This is in anticipation of the DiskFile API refactoring.\n    \n    Change-Id: I1c0dc01a4680bd435512405e2d31fba24421720a\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',82,64,'Red Hat'),(274456,733,733,'2013-09-05 18:57:03','2013-09-04 16:00:44','    Perform fewer stat calls when doing auditing of objects\n    \n    Each `isdir` or `exists` call performs a stat, but that info is already\n    available from the exception if it doesn\'t exist in `listdir`.\n    \n    Change-Id: I831494e3dbc8fda62ab29431471566bdb8dc6d27\n',37,9,'Rackspace'),(274458,563,563,'2013-09-07 16:31:06','2013-09-07 16:29:15','    Add Apache 2.0 licensing headers\n    \n    Change-Id: I38fae2a78b2369a897b7f298c1aead9b963bf7c9\n',30,0,'SUSE'),(274460,5250,5250,'2013-09-05 18:39:00','2013-09-05 18:36:01','    Remove dupe account_audit when reporting stats\n    \n    - Remove duplicate account_audit call that happened once an hour when stats\n    where reported.\n    - And fixed a flake8 complaint\n    \n    Change-Id: Ide686c475f8648664e9cffdd696629cf6ba9f75c\n',2,3,'Rackspace'),(274462,229,4075,'2013-09-09 20:25:00','2013-07-30 11:44:11','    fix swift i18n\n    \n    Change-Id: I53cea28a6d7593a1b308dbcf77dddf7f40d76cb2\n',93,34,'Rackspace'),(274464,2206,2206,'2013-08-15 18:54:03','2013-07-16 16:28:32','    [tempauth] update token if its value changes or expires\n    \n    In current codes, tempauth token will be updated only when it expires. In\n    token\'s lifetime, any changes in tempauth config file doesn\'t update token,\n    which means if you update your config file and restart proxy server, the\n    role in runtime might not change. So a good fix is updating token when\n    it changes or expires.\n    \n    fixes bug #1201678\n    \n    Change-Id: Ieb080e87268e16d0a2e5896431aa41fcedc7a900\n',88,15,'UnitedStack'),(274466,826,826,'2013-09-10 07:29:01','2013-09-03 23:08:14','    Assume ETag is always in the metadata\n    \n    Currently the GET and HEAD calls always assume that the ETag is\n    present in the on-disk metadata, as they index the metadata dictionary\n    directly for the value to fill in the proper response header (a\n    KeyError would be thrown if missing and turn into a 503).\n    \n    The close code that handles quarantining checked to see if an ETag is\n    present in the metadata before making the comparison. However, a close\n    operation would never even be attempted if an ETag was not present,\n    since the response headers are filled in before the object is read.\n    \n    Change-Id: I5032251414eceb38079d235504cc9e589dea5f3e\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',1,2,'Red Hat'),(274467,42,42,'2013-09-10 13:30:28','2013-09-10 13:30:28','    Split backends off swift/common/db.py\n    \n    The main purpose of this patch is to lay the groundwork for allowing\n    the container and account servers to optionally use pluggable backend\n    implementations. The backend.py files will eventually be the module\n    where the backend APIs are defined via docstrings of this reference\n    implementation. The swift/common/db.py module will remain an internal\n    module used by the reference implementation.\n    \n    We have a raft of changes to docstrings staged for later, but this\n    patch takes care to relocate ContainerBroker and AccountBroker into\n    their new home intact.\n    \n    Change-Id: Ibab5c7605860ab768c8aa5a3161a705705689b04\n',2699,2572,'Red Hat'),(274469,283,283,'2013-09-11 10:02:29','2013-08-21 14:57:16','    Improve unittest coverage of account reaper\n    \n    Add more unittests for account_reaper in order to\n    improve code coverage.\n    \n    Fixes: bug #1210045\n    Change-Id: I73490f80ac70b814a0abc490dc932f2a86fca703\n',407,3,'eNovance'),(274470,5622,5622,'2013-09-11 09:21:23','2013-08-27 16:03:58','    Man page lintian errors and warnings\n    \n    Used groff to recreate the errors. I believe all the issues\n    except `binary-without-manpage` are solved. Would like\n    confirmation from someone using Lintian.\n    \n    Closes-Bug: #1210114\n    Change-Id: I533205c53efdb7cdf3645cc3e3dc487f9ee5640a\n',36,36,'VirtualBridges'),(274472,4075,4075,'2013-09-10 17:51:56','2013-08-30 18:08:24','    Remove keep_data_fp argument from DiskFile constructor\n    \n    All access to the data_file fp for DiskFile is moved after the new \"open\"\n    method.  This prepares to move some additional smarts into DiskFile and reduce\n    the surface area of the abstraction and the exposure of the underlying\n    implementation in the object-server.\n    \n    Future work:\n    \n     * Consolidate put_metadata to DiskWriter\n     * Add public \"update_metdata\" method to DiskFile\n     * Create DiskReader class to gather all access of methods under \"open\"\n    \n    Change-Id: I4de2f265bf099a810c5f1c14b5278d89bd0b382d\n',157,87,'Rackspace'),(274474,826,40,'2013-09-11 15:49:48','2013-08-06 14:15:48','    Fix sync test when localhost on port 80 is binded\n    \n    - When localhost:80 was binding the tests was trying to connect into it.\n    - To test you can simply run sudo python -m SimpleHTTPServer 80 which\n      should show :\n    \n      1.0.0.127.in-addr.arpa - - [06/Aug/2013 14:10:42] code 501, message Unsupported method (\'DELETE\')\n      1.0.0.127.in-addr.arpa - - [06/Aug/2013 14:10:42] \"DELETE /a/c/o HTTP/1.1\" 501 -\n    \n      (the test was passing since 501 would raise ClientException).\n      mock delete_object in the fourth test to fix that\n    - Refactor the code to use mock.patch as well.\n    \n    Closes-Bug: 1208802\n    Change-Id: I5ddd4ac3a97879f51cf5883fcfc0fe0f0adaeff6\n',76,72,'eNovance'),(274476,4075,4075,'2013-09-12 08:55:17','2013-09-11 22:42:19','    Ensure audit tests don\'t cause unwanted errors\n    \n    Because the audit code catches all Exceptions, bugs in the code, like\n    misspelled names, bad logic, can result in errors which don\'t cause\n    exceptions that kill the unit tests.\n    \n    Change-Id: Idb8e3b00a49863ab920161a46edb61a5c47fffe2\n',42,6,'Rackspace'),(274478,24,24,'2013-09-11 10:26:24','2013-09-10 15:56:09','    Verbose functional test request failures.\n    \n    * test/__init__.py: Put safe_repr import/implementation here so that it\n    is available to functional and unit tests.\n    \n    * test/functional/swift_test_client.py: When a request fails\n    record why that request failed, how many requests failed, and what the\n    request was when raising RequestError to aid in debugging. Makes use of\n    safe_repr from test/__init__.py.\n    \n    * test/unit/common/test_constraints.py: Remove implementation of\n    safe_repr and use the implementation in test/__init__.py.\n    \n    Change-Id: I6c957343fb4b8b95d3875fd5ca87b3cf28a5f47a\n',27,17,'OpenStack Foundation'),(274480,4075,4075,'2013-09-11 22:29:25','2013-09-11 12:44:23','    fix race in test_wait on busy server\n    \n    fix bug 1224208\n    \n    Change-Id: I83c673a87c31214a7c54b6399ca53512885e6bc3\n',1,1,'Rackspace'),(274482,42,42,'2013-09-11 19:46:34','2013-09-11 19:46:34','    Tinker with dockstrings in back-ends and related places\n    \n    Change-Id: If80509e2e19cec5d0b8c5cfccd15e6d893558de4\n',16,8,'Red Hat'),(274484,733,733,'2013-09-13 09:50:14','2013-09-13 09:50:14','    Use an existing local var rather than doing alookup\n    \n    This should make ``Ring.get_more_nodes`` microscopically faster.\n    \n    Change-Id: Ibf0988fe0630ad94ac0c04040766d89ef86d1488\n',1,1,'Rackspace'),(274485,4533,4533,'2013-09-13 15:44:07','2013-08-22 19:23:29','    Add handoffs_first and handoff_delete to obj-repl\n    \n    If handoffs_first is True, then the object replicator will give\n    partitions that are not supposed to be on the node priority.\n    \n    If handoff_delete is set to a number (n), then it will delete a handoff\n    partition if at least n replicas were successfully replicated\n    \n    Also fixed a couple of things in the object replicator unit tests and\n    added some more\n    \n    DocImpact\n    \n    Change-Id: Icb9968953cf467be2a52046fb16f4b84eb5604e4\n',163,6,'Rackspace'),(274487,733,733,'2013-09-13 10:36:54','2013-09-13 10:36:54','    Switched some relative imports to be absolute\n    \n    Implicit relative imports don\'t work on Python3, and are also prone to\n    several different classes of errors.\n    \n    Change-Id: I7b62e9bfbe9c0b1fc9876413e3139fda019a4e57\n',2,2,'Rackspace'),(274489,42,42,'2013-09-13 13:55:10','2013-09-13 13:55:10','    Use a local variable auditor_worker\n    \n    This patch is only a cleanup, but our code makes me rage every time\n    I read it. In short, we have a class with a variable self.auditor,\n    and we assign ObjectAuditor to it at some ties, AuditorWorker at\n    other times. So, whenever there\'s a mismerge or whatever, you cannot\n    tell if self.auditor.broker_class makes sense or not.\n    \n    Since all cases of using self.auditor as AuditorWorker are purely\n    local, just evict it to a local variable auditor_worker. Leave\n    self.auditor to represent ObjectAuditor, because it\'s used as\n    a class variable in places.\n    \n    Change-Id: I811b80ac6c69a4daacfed7a5918bc0b15761d72e\n',41,41,'Red Hat'),(274491,826,826,'2013-09-05 13:50:43','2013-09-04 22:25:28','    Add support for POST commit coverage runs\n    \n    Modeled on how keystone does it.\n    \n    Change-Id: Idad4f854f1bfb915a48ff69988553810a76accc0\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',7,0,'Red Hat'),(274493,733,733,'2013-09-13 15:40:32','2013-09-13 15:38:01','    Removed many unnecessary uses of dict.keys\n    \n    This has a few advantages: some of these locations will perform\n    slightly faster, it\'s minutely less code, and dict.keys has a different\n    behavior on Python 3. Also removes usage of dict.iterkeys, which is\n    identical to just iterating over the dict, except it doesn\'t exist on\n    Python 3 at all.\n    \n    Change-Id: Ia91e97232dc8d78cf63fa807de288fc25cf5425d\n',11,11,'Rackspace'),(274495,42,42,'2013-09-14 16:09:53','2013-09-14 16:09:53','    Supply correct arguments to __init__ of a base class\n    \n    Hopefuly this extra test case is not too inane and slows us\n    down for nothing. It is verified to fail with the old code.\n    \n    Change-Id: I604eca09f7f9ae044a8ad75284cd82a37325f99c\n',7,1,'Red Hat'),(274497,826,826,'2013-09-12 16:00:49','2013-09-12 16:00:49','    Remove unused method iter_devices_partition\n    \n    Change-Id: I69a14bcb92490abd3ad1070799bf1580a2dcaa92\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',0,26,'Red Hat'),(274499,4064,4064,'2013-09-12 08:07:59','2013-09-12 08:07:59','    remove useless if from slo\n    \n    Change-Id: Id232c6973dcb55c19233b6d517770e58c2737ba0\n',1,2,'Rackspace'),(274501,869,869,'2013-09-13 15:12:37','2013-09-13 13:26:41','    Optimizations to Ring.get_more_nodes()\n    \n    When we\'re looking for handoffs, we first try to span all the regions,\n    then zones, then devices. However, the search loops would always go\n    over a big subset of the ring, regardless of whether or not there was\n    anything left to find.\n    \n    In particular, this would result in long runtimes for the first call\n    to get_more_nodes() if you didn\'t have more regions than replicas, as\n    the region-search loop would chew through a ton of devices and not\n    find any (since there weren\'t any). Now we do a little arithmetic,\n    think about the pigeonhole principle a little bit, and bail out when\n    there\'s nothing left to find, rather than waiting until there\'s no\n    space left to search.\n    \n    Similar changes were made for the different-zone and different-device\n    search loops.\n    \n    On a 4800-device test ring (4 regions, 5 zones each, 20 node each, 12\n    drives each), the time to get all handoffs dropped to about 5% of its\n    previous value (a 95% improvement).\n    \n    More usefully, on a 1200-device test ring (same as above but only 1\n    region), the time to get just the first 6 handoffs dropped to about\n    0.01% of its original runtime, or a 10,000x speedup.\n    \n    Fixes bug 1225018.\n    \n    Change-Id: I4c77094186f0032a3e19a099a1a0e71b2ba06719\n',37,0,'SwiftStack'),(274503,283,283,'2013-09-10 17:12:46','2013-07-16 16:39:23','    Handle X-Copy-From header in account_quota mw\n    \n    Content length of the copied object\n    is checked before allowing the copy\n    request according to the account\n    quota set by Reseller.\n    \n    Fixes: bug #1200271\n    Change-Id: Ie4700f23466dd149ea5a497e6c72438cf52940fd\n',278,23,'eNovance'),(274505,826,826,'2013-09-17 17:32:04','2013-09-12 15:57:56','    Refactor common/utils methods to common/ondisk\n    \n    Place all the methods related to on-disk layout and / or configuration\n    into a new common module that can be shared by the various modules\n    using the same on-disk layout.\n    \n    Change-Id: I27ffd4665d5115ffdde649c48a4d18e12017e6a9\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',448,354,'Red Hat'),(274507,5623,5623,'2013-09-18 12:26:08','2013-09-17 12:24:29','    Add HTTPSeeOther(303) and HTTPTemporaryRedirect(307) to swob\n    \n    RFC 1945 and RFC 2068 specify that the client is not allowed to change the\n    method on the redirected request.  However, most existing user agent\n    implementations treat 302 as if it were a 303 response, performing a GET on\n    the Location field-value regardless of the original request method. The status\n    codes 303 and 307 have been added for servers that wish to make unambiguously\n    clear which kind of reaction is expected of the client.\n    \n    HTTP/1.1 RFC for 302: http://tools.ietf.org/html/rfc2616#section-10.3.4\n    HTTP/1.1 RFC for 307: http://tools.ietf.org/html/rfc2616#section-10.3.8\n    \n    Change-Id: I354e2f4f3e3eb6a1553b3d9c60b613d8f0c37531\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n',5,1,'Red Hat'),(274509,26,26,'2013-09-19 17:14:35','2013-09-19 17:14:35','    Fix probe tests\n    \n    Change-Id: I03573bf24baf031b1874c3ff2e2d89d34473c266\n',4,2,'Rackspace'),(274510,4067,4067,'2013-09-19 19:26:30','2013-09-17 19:24:24','    add seek() to CompressingFileReader\n    \n    Change-Id: I33d9119684497b53101db3bc380953e86bdf25f0\n',42,4,'Rackspace'),(274512,790,790,'2013-09-17 11:46:04','2013-09-17 11:46:04','    Add a user variable to templates\n    \n    This is a common configuration option and allows devstack (and others)\n    to configure a mod_wsgi user to run the daemon process.\n    \n    Change-Id: Idf134b3bc6b08e3c3a80dde8830d5a4f3da5a06c\n    Fixes: bug 1226346\n',12,5,'Red Hat'),(274514,453,453,'2013-09-20 23:52:56','2013-09-20 23:34:06','    Fix unsuitable assertTrue\n    \n    assertTrue accepts a parameter msg which will be printed when\n    assertion fails, usually msg is a str. This patch fixes unsuitable\n    usage of assertTrue which set msg to bool type True.\n    \n    Change-Id: I731f8ea553c935eba0e112ffded16f41a5ea86c0\n    Fixes-Bug: #1226374\n',2,2,'Huawei'),(274515,4064,4064,'2013-09-20 08:51:21','2013-09-10 09:01:32','    SLOs broken for range requests\n    \n    Change-Id: I21175a4be0cda9a8a98c425bff11c80895cd6d3e\n',270,97,'Rackspace'),(274517,26,26,'2013-09-19 21:05:46','2013-09-19 21:05:46','    Log x-copy-from when it could be useful\n    \n    Change-Id: Ia28a9b47213f848ab5ea59572e14ac710ed881e3\n',36,0,'Rackspace'),(274519,5620,5620,'2013-09-22 16:26:15','2013-08-01 14:50:03','    update SLO delete error handling\n    \n    * ensure all responses are 200 OK\n    * report missing sub-SLO manifests or other error messages in bulk\n      delete response\n    \n    Change-Id: Iaf88c94bc7114ff3c9751f9f31f8f748de911f8a\n',250,82,'independent'),(274521,869,869,'2013-09-25 10:21:56','2013-08-27 18:00:04','    Fix internal swift.source tracking.\n    \n    In 1.8.0 (Grizzly), your proxy logs would indicate which middleware\n    was responsible for an internal request, e.g. TU for tempurl or BD for\n    bulk delete. At some point, those all turned into GET_INFO, which does\n    not give you any idea which specific middleware was responsible, only\n    that it came from a get_account_info/get_container_info call.\n    \n    This commit puts it back to how it was in 1.8.0. Also, the\n    new-since-1.8.0 function get_object_info() got swift_source plumbing\n    added to it, so source tracking for the quota middlewares\'\n    get_object_info() calls will happen now too.\n    \n    Note that due to the new-since-1.8.0 in-environment caching of\n    account/container info, you may not see as many lines in the proxy log\n    as you would with 1.8.0. This is because there are actually fewer\n    internal requests being made.\n    \n    Change-Id: I2b2ff7823c612dc7ed7f268da979c4500bbbe911\n',51,19,'SwiftStack'),(274522,869,869,'2013-09-24 16:54:58','2013-09-24 16:20:28','    Update SAIO doc to have double proxy-logging in pipeline.\n    \n    Change-Id: I0a034ca1420761cbf4e35dcea1d9cd18a92f90bd\n',2,1,'SwiftStack'),(274524,2206,2206,'2013-09-27 15:27:59','2013-09-27 15:25:53','    improve bulk document\n    \n    This a very small change which just tell users request url of bulk\n    delete request. In original docstrings, it just states the request\n    parameters, request body and request method but not request url.\n    \n    Change-Id: I0bbc302a0e072910bb58e4814614d7f761433b10\n',5,5,'UnitedStack'),(274525,869,869,'2013-09-24 16:54:58','2013-09-24 16:43:33','    Install libffi-dev in SAIO docs.\n    \n    If you don\'t, then newer versions of xattr won\'t install, and since\n    our xattr requirement is simply \">= 0.4\" in requirements.txt, this\n    affects anyone setting up a new SAIO.\n    \n    This happened with xattr 0.7, which was released on 2013-07-19.\n    \n    Change-Id: Iaf335fa25a2908953d1fd218158ebedf5d01cc27\n',2,2,'SwiftStack'),(274527,4064,4064,'2013-09-26 11:17:18','2013-09-12 07:38:23','    bulk delete bug with trailing whitespace\n    \n    Change-Id: Ia48224a1a187a8ed6b0c9a3c72cac06f084a6fc8\n',9,7,'Rackspace'),(274529,826,826,'2013-09-24 02:29:54','2013-09-23 22:16:59','    Use created container in unit test\n    \n    Change-Id: I2573be1ac14f65b8008611edf940363b31c8d86e\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',2,2,'Red Hat'),(274531,5624,5624,'2013-09-24 15:15:00','2013-09-24 15:07:59','    Move location of HTTPException in swift_testing\n    \n    While doing some work around swiftclient Python 3 support, httplib\n    imports were changed to use six.moves in order to access httplib in Py2\n    and http.client in Py3. Tests related to those changes are failing\n    because these functional tests are depending on HTTPException being\n    a name in swiftclient.client. These tests should acces that name from\n    its canonical location in httplib (or, eventually, a Py3 friendly\n    location like six.moves).\n    \n    Change-Id: I6335d465574045daedab47e5fe23c415d171a83a\n',2,1,'Rackspace'),(274533,826,826,'2013-09-30 10:23:04','2013-09-26 15:47:36','    Fedora 19 updates\n    \n    Change-Id: I95138852e45aa7632218a7107e0e7ba1f6ef373c\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',42,9,'Red Hat'),(274535,4083,4083,'2013-09-27 10:10:55','2013-09-27 10:10:55','    Set path_info in sub_slo manifest GET requests\n    \n    The new_req Request object created for fetching\n    nested sub_slo manifests does not have its\n    path_info set to the sub_slo path before being\n    passed to GETorHEAD_base.\n    \n    The sub manifest GET works fine because\n    GETorHEAD_base uses its path argument\n    (not req.path) to set up its connection,\n    BUT if an exception is thrown,\n    GETorHEAD_base uses req.path to construct\n    the log message - so the exception log would\n    have the wrong path.\n    \n    Fixes bug 1231872\n    \n    Change-Id: I0f0f969958f814d8a7053440d9de4e50796169e4\n',2,1,'HP'),(274537,4533,4533,'2013-10-02 02:08:04','2013-09-04 22:20:44','    Pool memcache connections\n    \n    This creates a pool to each memcache server so that connections will not\n    grow without bound.  This also adds a proxy config\n    \"max_memcache_connections\" which can control how many connections are\n    available in the pool.\n    \n    A side effect of the change is that we had to change the memcache calls\n    that used noreply, and instead wait for the result of the request.\n    Leaving with noreply could cause a race condition (specifically in\n    account auto create), due to one request calling `memcache.del(key)` and\n    then `memcache.get(key)` with a different pooled connection.  If the\n    delete didn\'t complete fast enough, the get would return the old value\n    before it was deleted, and thus believe that the account was not\n    autocreated.\n    \n    ClaysMindExploded\n    DocImpact\n    Change-Id: I350720b7bba29e1453894d3d4105ac1ea232595b\n',212,105,'Rackspace'),(274539,869,869,'2013-10-02 09:57:34','2013-10-02 09:57:34','    Allow slightly older dnspython (>= 1.9.4).\n    \n    This has a couple benefits.\n    \n    First, it means Ubuntu Precise users can just install python-dnspython\n    from packages instead of having to pull one in from source. This\n    should also fix an install error with new SAIO boxes where running\n    \"python setup.py develop\" fails unless a satisfactory dnspython is\n    already installed.\n    \n    Second, it matches the dnspython dependency in the global\n    requirements. This means that the gates are already running with this\n    dnspython dependency, and it means our requirements.txt is one step\n    closer to being a subset of the global requirements.txt, which is\n    important to some people.\n    \n    Change-Id: I5d58f488e1e4c4139c9fb20d89f386cab1537e98\n',1,1,'SwiftStack'),(274541,5620,5620,'2013-09-29 15:22:05','2013-09-29 15:22:05','    Simplify object path when reporting SLO put errors\n    \n    When reporting errors for SLO PUT requests, use the object path from the\n    manifest without the \'/vrs/account\' prefix. This is a continuation of\n    the same changes made for SLO/bulk delete requests in 6768d5b.\n    \n    Change-Id: I40c90cccc1b7b5303d9f2b084dccb3be4f4448d8\n',11,10,'independent'),(274543,4075,4075,'2013-10-02 11:39:35','2013-10-02 11:39:35','    Add \"note\" box callouts to SAIO for user changes.\n    \n    The SAIO is purpously cut into two parts, so that you don\'t have to switch\n    back and forth between root and your unprivledged user.  Add some \"note\" box\n    callouts to highlight this changeover.\n    \n    Change-Id: I8b1a8f0539eac60d4121bdd4dab01df75ecca207\n',12,7,'Rackspace'),(274545,826,826,'2013-10-03 11:21:26','2013-10-02 23:52:30','    Remove sphinx build warnings\n    \n    Change-Id: Ic34bbd9cc65d96ea9b8434be7b54e5bcfae28b63\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',15,16,'Red Hat'),(274547,826,826,'2013-10-03 11:36:31','2013-10-02 23:58:13','    Fedora 19: need to use /etc/rc.d/rc.local\n    \n    Change-Id: I80e9a4c40ff99ec09a8eeef935447c6393ea78ec\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',2,0,'Red Hat'),(274549,563,563,'2013-10-02 21:27:40','2013-10-02 21:27:40','    assertEquals is deprecated, use assertEqual\n    \n    The very same functionality for fewer keystrokes.\n    \n    Change-Id: I8c9513412f398132db5636fdfb7bf8301e8443cf\n',379,379,'SUSE'),(274551,4075,4075,'2013-09-16 20:02:20','2013-09-16 17:06:09','    Fix default replication options for ring-builder add\n    \n    Change-Id: I957deeb0e711bfe7cd9d852726c77179a4613ee0\n',79,43,'Rackspace'),(274553,453,453,'2013-09-20 01:02:31','2013-09-20 01:00:54','    Change OpenStack LLC to Foundation\n    \n    Change-Id: I7c3df47c31759dbeb3105f8883e2688ada848d58\n    Closes-bug: #1214176\n',165,165,'Huawei'),(274555,826,826,'2013-10-07 11:18:28','2013-10-05 11:27:35','    Fix bad hash_path reference\n    \n    Mea culpa: these two scripts were missed in commit:\n    \n      https://review.openstack.org/46956\n    \n    Fixes bug 1235441\n    \n    Change-Id: I4303bc808448a79bddbb991526b0cca26150b392\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',2,2,'Red Hat'),(274557,869,869,'2013-10-02 15:57:24','2013-09-25 10:41:41','    Stop reading from object server when client disconnects.\n    \n    If a client were in the middle of an object GET request and then\n    disconnected, the proxy would wait a while (default 60s) and then time\n    out the connection. As part of the teardown for this, the proxy would\n    attempt to close the connection to the object server, then drain any\n    associated buffers. However, this didn\'t work particularly well,\n    resulting in the proxy reading the entire remainder of the object for\n    no gain.\n    \n    Now, the proxy closes the connection hard, by calling .close() on the\n    underlying socket._socket object. This is different from calling\n    .close() on a socket._socketobject object, which is what you get back\n    from socket.socket() and similar methods. Calling .close() on a\n    socket._socketobject simply decrements a reference counter on the\n    socket._socket, which has been observed in the past to result in\n    socket leaks when something holds onto a reference. However, calling\n    .close() on a socket._socket actually closes the socket regardless of\n    who else has a reference to it.\n    \n    I had to delete a test assertion that said the object server never got\n    SIGPIPE after a GET w/X-Newest. Well, you get a SIGPIPE when you write\n    to a closed socket, and now the proxy is actually closing the sockets\n    early, so now you *do* get a SIGPIPE.\n    \n    closes-bug: 1174660\n    \n    Note that this will cause a regression on bug 1037337; unfortunately,\n    the cure is worse than the disease, so out it goes.\n    \n    Change-Id: I9c7a2e7fdb8b4232e53ea96f86b50e8d34c27221\n',56,47,'SwiftStack'),(274559,265,265,'2013-10-07 22:27:34','2013-10-07 22:24:10','    Correct URL in readme\n    \n    doc.openstack.org -> docs.openstack.org\n    \n    Change-Id: Iacadb8f70cb94adc002c562a1068ff38be19a9fc\n',1,1,'VMware'),(274560,869,869,'2013-09-23 10:05:34','2013-09-23 10:05:34','    Two small account-quota fixes\n    \n    First: even if a user has exceeded their account quota, they should be\n    able to make object POST requests. Updating an object\'s metadata isn\'t\n    going to make them any more over quota, so should be allowed.\n    \n    Second: don\'t bother with the reseller_admin check for container or\n    object requests. If I send the header X-Account-Meta-Quota-Bytes: 100\n    on e.g. an object PUT request, the proxy will (rightly) ignore it. Now\n    account-quotas does too.\n    \n    Change-Id: I970a76349659acdd8229a324bd33bfe7fe7261a4\n',65,13,'SwiftStack'),(274562,826,826,'2013-10-07 17:49:52','2013-10-04 08:04:42','    Don\'t apply timeout to Pool.get operation (leaks)\n    \n    The connection timeout to a memcache server is performed by using the\n    \"with Timeout()\" construct over the sock.connect() call in the\n    .create() method. In addition, the same construct was being applied to\n    the Pool.get() call in ._get_conns().\n    \n    If the maximum number of connections was already created, and the\n    Pool.get() called took longer than the connect timeout, then the error\n    handling path would add a place holder to the connection\n    pool. Eventlet\'s Pool class allows for additional items to be added to\n    the pool, over and above the max_size setting. This additional place\n    holder will eventually be pulled and a new connection created to take\n    its place.\n    \n    The fix is to remove the timeout construct in the _get_conns() method.\n    \n    In addition, we also apply the unit test patch mentioned in the review\n    comments for Patch Set 6 of https://review.openstack.org/45134,\n    located at http://paste.openstack.org/show/47288/.\n    \n    Fixes bug 1235027\n    \n    Change-Id: I786cabefe3e8ddf7d92feb7ebc7cfb613d60a1da\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',39,11,'Red Hat'),(274564,826,826,'2013-10-07 17:18:09','2013-10-07 12:10:31','    Revert \"Refactor common/utils methods to common/ondisk\"\n    \n    This reverts commit 7760f41c3ce436cb23b4b8425db3749a3da33d32\n    \n    Change-Id: I95e57a2563784a8cd5e995cc826afeac0eadbe62\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',359,455,'Red Hat'),(274566,4083,4083,'2013-09-24 17:18:58','2013-09-20 15:08:12','    Fix utf-8 handling in object versions.\n    \n    Fixes object versioning when object name and/or version\n    container name contain multibyte utf-8 characters.\n    \n    When object names containing non-ASCII characters\n    are PUT multiple times into a container with an\n    x-versions-location set, subsequent DELETE of the\n    object results in a 500 response status.\n    \n    When the versions container name contains\n    non-ASCII characters the first delete of an object\n    succeeds but fails to restore previous version of\n    object, so second delete incorrectly returns 404.\n    \n    Fixes bug 1229142\n    \n    Change-Id: I425440f76b8328f8e119d390bfa4c7022181e89e\n',124,63,'HP'),(274568,4075,4075,'2013-10-08 15:51:50','2013-10-08 13:34:50','    allow container create even if over account quota\n    \n    Change-Id: I07278bc3314c26426ff0557fe2f5c69c02d6550c\n',25,1,'Rackspace'),(274570,4075,4075,'2013-10-07 21:33:30','2013-10-07 21:28:48','    Add a Timeout when getting Memcache connections\n    \n    The old Timeout behavior when pulling connections of the MemcacheConnPool left\n    ambiguity around what timed out and could put more placeholders in the queue\n    than the configured max_connections.\n    \n    To avoid waiting indefinitely on slow severs we raise a custom Timeout when we\n    fail get a connection from the pool.  We still error limit the slow server,\n    and move onto the next, but we still don\'t allow more than max_connections.\n    \n    Change-Id: I9e2409896423d52da69e35c038e5f457c71f705d\n',80,17,'Rackspace'),(274572,229,229,'2013-10-08 23:58:13','2013-10-08 07:35:43','    CHANGELOG and AUTHORS updates for 1.10.0 release\n    \n    Change-Id: Iaf8d289c5ddb6ac778243a5e1fc27600bade6feb\n',54,1,'SwiftStack'),(274574,229,5625,'2013-11-26 14:02:57','2013-10-23 11:35:57','    Fixed concurrent PUT requests to accounts or containers\n    \n    When concurrent PUT requests come in for an account or container, the\n    resulting DB access will try to lock the DB for writing. Normal access\n    will retry when it encounters a locked DB, change 0fdad0d9 introduced\n    a cursor for doing the initialization which did not have the retry\n    capability, resulting in a hard failure.\n    \n    Fixes bug 1243973\n    \n    Change-Id: I73b219e0f5eacf314d87b4d5e56c03daf51b2eca\n',47,4,'independent'),(274575,229,5625,'2013-11-26 14:03:06','2013-11-21 11:46:15','    Fix DB locked error on commit\n    \n    This bug was introduced in ef7f9e27; while moving timeout for execute\n    to the cursor wrapper, commit was moved as well; however commit is\n    purely a connection method, only execute is passed on to a cursor.\n    Added unit tests to check both methods for correct timeouts.\n    \n    This manifested in a test failure as:\n    ERROR __call__ error with POST /sdb1/418/AUTH_d1c4b610b16a48de83219c696261009c/TestContainer-tempest-1572414684 :\n    Traceback (most recent call last):\n      File \"/opt/stack/new/swift/swift/container/server.py\", line 486, in __call__\n        res = method(req)\n      File \"/opt/stack/new/swift/swift/common/utils.py\", line 1915, in wrapped\n        return func(*a, **kw)\n      File \"/opt/stack/new/swift/swift/common/utils.py\", line 687, in _timing_stats\n        resp = func(ctrl, *args, **kwargs)\n      File \"/opt/stack/new/swift/swift/container/server.py\", line 464, in POST\n        broker.update_metadata(metadata)\n      File \"/opt/stack/new/swift/swift/common/db.py\", line 677, in update_metadata\n        conn.commit()\n    OperationalError: database is locked (txn: tx5065394f288740e69fcec-00528e184e)\n    \n    Change-Id: I269b133fac53d4792d21b62f801cc0c0ccf337ea\n',60,27,'independent'),(274576,229,229,'2013-11-26 14:31:32','2013-11-14 15:58:52','    Use upstream patched Pool.get\n    \n    This works around an eventlet bug in eventlet 0.9.16.\n    This version properly keeps track of pool size accounting, and\n    therefore doesn\'t let the pool grow without bound. This patched\n    version is the result of commit\n    f5e5b2bda7b442f0262ee1084deefcc5a1cc0694 in eventlet and is\n    documented at https://bitbucket.org/eventlet/eventlet/issue/91\n    \n    This patch includes full test coverage of the back-ported code, even\n    when the actually-installed eventlet is newer.\n    \n    This fixes bug #1254119\n    \n    Change-Id: I075bb5e40e08571d52fe17fcc3fa0e25be5befed\n',101,2,'SwiftStack'),(274577,639,54,'2013-12-12 15:28:19','2013-12-10 14:06:45','    Sync global requirements to pin sphinx to sphinx>=1.1.2,<1.2\n    \n    Sync the global requirements to pin sphinx.  This addresses an issue\n    where Sphinx 1.2 is not building documents correctly and causing\n    check/gate to fail.\n    \n    We also had to adjust the pip command used.\n    \n    Change-Id: I8894c0199db845e90e5086a7c0e6bb7c7a26b5a0\n',2,1,'Metacloud'),(274578,239,869,'2014-01-16 13:44:23','2014-01-16 13:44:23','    Use constant time comparison in tempURL\n    \n    Use constant time comparison when evaluating tempURL to avoid timing\n    attacks (CVE-2014-0006). This is the havana backport of the master\n    patch.\n    \n    Fixes bug 1265665\n    \n    Change-Id: I11e4ad83cc4077e52adf54a0bd0f9749294b2a48\n',13,10,'SwiftStack'),(274579,24,639,'2014-01-16 21:01:51','2013-12-12 13:09:58','    Set defaultbranch in .gitreview to stable/havana\n    \n    This allows people run git-review without any arguments and it will push\n    to the correct branch.\n    \n    Change-Id: I14f42e5f696ef670ead326ad74a96557ddf3148c\n',1,0,'Red Hat'),(274581,229,229,'2013-07-10 16:51:41','2013-07-10 16:48:57','    updated .gitreview to default to the ec branch\n    \n    Change-Id: I8c189da4954d4b5cf9683477f9db91da26d99816\n',1,0,'SwiftStack'),(274588,4087,4087,'2013-10-16 10:06:16','2013-08-01 15:57:55','    Add Storage Policy Support\n    \n    The basic idea here is to replace the use of a single object ring in the Application\n    class with a collection of object rings. The collection includes not only the Ring\n    object itself but the policy name assocaited with it, the filename for the .gz and\n    any other meta data associated with the policy that may be needed.  When containers\n    are created, a policy (thus a specific obj ring) is selected allowing apps to\n    specify policy at container creation time and leverage policies simply by using\n    different containers for object operations.\n    \n    The policy collection is based off of info in the swift.conf file parsed at wsgi\n    application init time. The format of the sections in the .conf file is covered\n    below and accessed via get__policies() that has all of the info except\n    for the Ring addresses; the rings are instantiated \"just in time\" when the App\n    method get_object_ring() is inoked for the first time per policy. There is basic\n    error handling in both the conf file parser as well as the accessor functions to\n    assure the conf file is formed correctly.\n    \n    swift.conf format:\n    \n    	[storage-policy:0]\n    	name = chicken\n    \n    	[storage-policy:1]\n    	name = turkey\n    	default = yes\n    \n    With the above format:\n    \n    - policy 0 will always be used for access to existing containers w/o the policy specified.\n    The ring name for polic 0 is always \'object\' assuring backwards compatiblity.  The parser\n    will always create a policy 0 even if not specified\n    - the policy with \'default=yes\' is the one used for new container creation and allows the\n    admin to specify which policy is used without forcing the application to add the metadata.\n    - in the future new elements can be added such as \'ec-scheme\' which would imply that the\n    associated ring is built for erasure code and includes some ec scheme parameters.\n    A policy w/o any other tag like this implies replication using where the # of copies is\n    determined by how the ring was built\n    \n    This commit focuses only on the Proxy server (storage node services using the obj\n    rings will be next) and the unit test framework changes and new unit tests.\n    \n    Ring selection is done at public entry points based on container metadata. If the\n    container has the metadata X-Storage-Policy and there is a match with the policy\n    name provided and one parsed from swift.conf, that ring will be used. If not then\n    decisions are made per description of swift.conf sections above.  Note that internally\n    there is a policy index that is used in conjunction with X-Storage-Policy that enables\n    the cluster admin to both support backwards compatibility as well as choose the\n    default that is most applicable for their cluster.  The internal metadata stored in\n    containers is called X-Storage-Policy-Index.\n    \n    The container metadata policy cannot be changed, if an attempt is made to change it a c\n    onflict error will be returned. An attempt to create a container with a policy not defined\n    results in a bad reqeust error.  Migrating data from one policy to another means copying it\n    from one container to another manually.\n    \n    The following highlights the major changes in this commit:\n    \n    * swift.conf file parser support for storage policies (new storage_policy.py)\n    * container update to support immutable storage policy metadata\n    * a few misc function parm changes to enable passing of ring info\n    * use of ring based on container metadata in objController public functions\n    * large number of changes to unit test framework to support multiple rings\n    but no new capabilities specifically geared at testing multiple rings\n    * unit tests covering all new functinality\n    \n    Storage Node services to support Storage Polciies are not included here.\n    \n    Change-Id: I53bcad1dc724596c5c4ec8a30d5cf50ebe7f1b7d\n    Implements:  blueprint ec-proxy-work\n',1303,239,'Intel'),(274589,5614,5614,'2013-09-20 23:04:02','2013-09-18 19:49:32','    Handle X-Copy-From header in container_quota middleware\n    \n    Content length of the copied object is checked before\n    allowing the copy request according to the container quota.\n    \n    Closes-Bug: #1201875\n    Change-Id: If44b916791e94ac6c66eee04a5727186ce0e56ae\n',68,3,'Red Hat'),(274591,4067,4067,'2013-10-15 15:41:20','2013-10-15 15:38:02','    return value on memcache client decr call\n    \n    Closes-Bug: 1238204\n    Change-Id: I7d2ece118159637e5c5bf4bf5dd4ce4d2f6e4523\n',12,10,'Rackspace'),(274592,4067,4067,'2013-10-15 16:23:00','2013-10-15 16:23:00','    Removes vim comment\n    \n    Change-Id: Ibc930638ee2d839e8499a13018c205b615f8b854\n    Partial-Bug: 1229324\n',0,1,'Rackspace'),(274594,869,869,'2013-10-09 12:25:42','2013-10-09 12:25:42','    Fix 500 from account-quota middleware\n    \n    If a user had set X-Account-Meta-Quota-Bytes to something non-integer\n    prior to the installation of the account-quota middleware, then the\n    quota check would choke on it. Now a non-integer value is treated as\n    \"no quota\".\n    \n    Change-Id: I5c38911be1f66fa293aea9c78590d4ce7d184113\n',17,1,'SwiftStack'),(274596,869,869,'2013-10-10 13:33:05','2013-10-10 13:33:05','    Small optimization to container_quotas\n    \n    When handling an object PUT with X-Copy-From, we only need to fetch\n    the source object\'s size if the container has a byte quota, but we\n    were always fetching it. Now we only fetch the size when we need it.\n    \n    Change-Id: I0c2c6820cdf0022ef57df5fe7dcb2dd466665a4f\n',11,10,'SwiftStack'),(274598,826,826,'2013-10-17 15:03:31','2013-09-12 19:51:18','    DiskFile API, with reference implementation\n    \n    Refactor on-disk knowledge out of the object server by pushing the\n    async update pickle creation to the new DiskFileManager class (name is\n    not the best, so suggestions welcome), along with the REPLICATOR\n    method logic. We also move the mount checking and thread pool storage\n    to the new ondisk.Devices object, which then also becomes the new home\n    of the audit_location_generator method.\n    \n    For the object server, a new setup() method is now called at the end\n    of the controller\'s construction, and the _diskfile() method has been\n    renamed to get_diskfile(), to allow implementation specific behavior.\n    \n    We then hide the need for the REST API layer to know how and where\n    quarantining needs to be performed. There are now two places it is\n    checked internally, on open() where we verify the content-length,\n    name, and x-timestamp metadata, and in the reader on close where the\n    etag metadata is checked if the entire file was read.\n    \n    We add a reader class to allow implementations to isolate the WSGI\n    handling code for that specific environment (it is used no-where else\n    in the REST APIs). This simplifies the caller\'s code to just use a\n    \"with\" statement once open to avoid multiple points where close needs\n    to be called.\n    \n    For a full historical comparison, including the usage patterns see:\n    https://gist.github.com/portante/5488238\n    \n    (as of master, 2b639f5, Merge\n     \"Fix 500 from account-quota     This Commit\n     middleware\")\n    --------------------------------+------------------------------------\n                                     DiskFileManager(conf)\n    \n                                       Methods:\n                                         .pickle_async_update()\n                                         .get_diskfile()\n                                         .get_hashes()\n    \n                                       Attributes:\n                                         .devices\n                                         .logger\n                                         .disk_chunk_size\n                                         .keep_cache_size\n                                         .bytes_per_sync\n    \n    DiskFile(a,c,o,keep_data_fp=)    DiskFile(a,c,o)\n    \n      Methods:                         Methods:\n       *.__iter__()\n        .close(verify_file=)\n        .is_deleted()\n        .is_expired()\n        .quarantine()\n        .get_data_file_size()\n                                         .open()\n                                         .read_metadata()\n        .create()                        .create()\n                                         .write_metadata()\n        .delete()                        .delete()\n    \n      Attributes:                      Attributes:\n        .quarantined_dir\n        .keep_cache\n        .metadata\n                                    *DiskFileReader()\n    \n                                       Methods:\n                                         .__iter__()\n                                         .close()\n    \n                                       Attributes:\n                                        +.was_quarantined\n    \n    DiskWriter()                     DiskFileWriter()\n    \n      Methods:                         Methods:\n        .write()                         .write()\n        .put()                           .put()\n    \n    * Note that the DiskFile class   * Note that the DiskReader() object\n      implements all the methods       returned by the\n      necessary for a WSGI app         DiskFileOpened.reader() method\n      iterator                         implements all the methods\n                                       necessary for a WSGI app iterator\n    \n                                     + Note that if the auditor is\n                                       refactored to not use the DiskFile\n                                       class, see\n                                       https://review.openstack.org/44787\n                                       then we don\'t need the\n                                       was_quarantined attribute\n    \n    A reference \"in-memory\" object server implementation of a backend\n    DiskFile class in swift/obj/mem_server.py and\n    swift/obj/mem_diskfile.py.\n    \n    One can also reference\n    https://github.com/portante/gluster-swift/commits/diskfile for the\n    proposed integration with the gluster-swift code based on these\n    changes.\n    \n    Change-Id: I44e153fdb405a5743e9c05349008f94136764916\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',2208,1133,'Red Hat'),(274600,869,869,'2013-10-16 12:41:53','2013-10-14 13:12:22','    Proxy: use just one greenthread per client\n    \n    Instead of using two greenthreads and an eventlet.queue.Queue of size\n    1 to stream response bodies from backends to clients, just do it with\n    a single greenthread that reads and writes in a loop. This should\n    lower the amount of CPU used by the proxy in its response streaming.\n    \n    Client fairness used to be provided implicitly; since the queue only\n    held 1 item, the read-from-backend greenthread would block after each\n    chunk until the write-to-client greenthread got a chance to run. Now\n    fairness is provided by an explicit eventlet.sleep() call, just as it\n    is in the object server.\n    \n    Change-Id: Iae27109f5a3d109ad21ec9a972e39f22150f6dbb\n',40,62,'SwiftStack'),(274602,869,869,'2013-10-09 12:35:36','2013-10-09 12:31:26','    Small efficiency improvement in account quotas\n    \n    If you were performing an object PUT with X-Copy-From and you had\n    account_quotas in your pipeline but your account did not have a quota\n    set, then we will now avoid an unnecessary call to get_object_info().\n    \n    Change-Id: I8592d4ad65e45ecf9e0557bc10ce2c2db19732e8\n',11,10,'SwiftStack'),(274604,42,42,'2013-10-04 23:23:23','2013-10-04 23:18:07','    Make test_translations test our tree\n    \n    In order to run the correct classes, Python test framework adjusts\n    sys.path. However, these changes are not propagated to subprocesses.\n    Therefore, the test actually tries to test installed Swift, not\n    the one in which it is running.\n    \n    The usual suggestion is to run \"python setup.py develop\" before\n    testing, but it\'s annoying and error-prone. If you forget it,\n    you may test the code in /usr very easily, and never know.\n    \n    Let\'s just pass the correct path to subprocess. Much safer.\n    \n    Change-Id: Ic71314e8462cf6e0579d704ffe9fbbfac7e6ba24\n',6,2,'Red Hat'),(274606,5250,5250,'2013-09-05 18:12:15','2013-09-05 18:12:15','    Faster swift-dispersion-populate\n    \n    - Makes swift-dispersion-populate a bit faster when using a larger\n      dispersion_coverage with a larger part_power.\n    - Adds option to only run population for container OR objects\n    - Adds option to let you resume population at given point (useful if you\n      need to resume population after a previous run error\'d out or the\n      like) by specifying which suffix to start at.\n    \n    The original populate just randomly used uuid4().hex as a suffix on the\n    container/object names until all the partition\'s required where covered.\n    This isn\'t a big deal if you\'re only doing 1% coverage on a ring with a\n    small part power but takes ages if you\'re doing 100% on a larger ring.\n    \n    Change-Id: I52f890a774412c1d6179f12db9081aedc58b6bc2\n',91,51,'Rackspace'),(274608,4078,4078,'2013-10-19 11:40:35','2013-10-19 11:40:35','    Adding more unit tests for audit_location_generator\n    \n    Change-Id: I40410fbbb79cea8647074f703e4675364c69d930\n',41,0,'INTC'),(274610,1020,1020,'2013-10-22 15:49:09','2013-08-23 15:03:08','    Add WWW-Authenticate to 401 responses\n    \n    Per http://www.ietf.org/rfc/rfc2616.txt, when a 401 error is returned, the\n    Www-Authenticate response header MUST also be returned. The format is\n    described in http://www.ietf.org/rfc/rfc2617.txt.\n    \n    Swift supports and/or implements a number of authentication schemes\n    including tempauth, Keystone, tempurl, formpost and container sync. In\n    this fix, we use a catch-all, \"Swift\". The realm is the account (where\n    known) or \"unknown\" (bad path or where the 401 is returned from code\n    that does not have the request). Examples:\n    \n         Www-Authenticate: Swift realm=\"AUTH_1234567889\"\n         Www-Authenticate: Swift realm=\"unknown\"\n    \n    Fixes bug #1215491\n    \n    Change-Id: I03362789318dfa156d3733ef9348795062a9cfc4\n',287,16,'HP'),(274612,2206,2206,'2013-10-23 21:19:01','2013-10-23 21:19:01','    utf8 encode tempurl key\n    \n    In tempurl middleware, hmac uses the value of account metadata to\n    generate HMAC-SHA1 signature and hmac must accept a str-type string, not\n    a unicode string. The meta dict returned from get_info stroges special\n    chars as unicode however. So just encode it for tempurl using.\n    \n    Closes-Bug: #1242644\n    Change-Id: I4be62eea014a573efc4748470de57dccf00e431d\n',9,4,'UnitedStack'),(274613,42,42,'2013-10-22 17:18:04','2013-10-22 17:18:04','    Add an __str__ method to brokers\n    \n    A few uses of broker.db_file are in printouts where we do need\n    them, so the administrator may know what\'s up. Seems like an easy\n    way to get rid of those is to make brokers identify themselves\n    with common __str__. Alternative back-end implementations may\n    supply something other than a filename here, for example a cluster\n    name and a volume name.\n    \n    Note that I\'m not sure if correct coercion would occur when\n    brokers are bounced through dictionaries, hence explicit str().\n    \n    Change-Id: I329788ebd1fbe39ffadcf9f9d5194a74a88dde58\n',19,11,'Red Hat'),(274616,869,869,'2013-11-04 10:39:10','2013-11-04 10:39:10','    Fix unit tests.\n    \n    Turns out that if a test module\'s setup() function fails, tox silently\n    ignores the failures.\n    \n    There was a bug where the test storage policies were being ignored by\n    the container controller, thus causing\n    test.unit.proxy.test_server.setup() to fail. The bug has been fixed.\n    \n    Change-Id: I73a6f9ad3b1e2d7198d6a7fc67a0fbfd9116d684\n',22,24,'SwiftStack'),(274617,5626,5626,'2013-10-29 17:12:13','2013-10-29 16:56:09','    Fixed non-zero default policy index\n    \n    Fixes integer conditional in the proxy container controller.\n    _backend_requests adds the policy header if the policy_index provided\n    evaluates to true. If policy with index 0 is not the default it can\n    never be set as it evalutes to false. Switched this statement to check\n    if policy_index is not None.\n    \n    Closes-Bug: #1246107\n    Change-Id: I34a0551af1f07db76bb16844f6d11b515737a38f\n',1,1,'Rackspace'),(274619,4087,4087,'2013-11-13 17:15:26','2013-11-13 17:03:41','    Misc Minor Fixes for Storage Policies\n    \n    - fixed issue in proxy container POST similar to recent PUT fix (if condition not correct for INT)\n    - coorected a few test cases using PUT instead of POST\n    - added missing test for convert_policy_to_index in ContainerController\n    - added test to provide coverage for maksing sure policy is correctly added to back end headers\n    (adds coverage for recent if INT condition issues in container PUT/POST for policy 0)\n    \n    Change-Id: Ifcdf26321491ed2455bbc03636e4b1b318b7d299\n    Implements: blueprint swift-ec\n',75,6,'Intel'),(274620,5248,5248,'2013-10-25 19:56:19','2013-10-25 19:44:46','    catch decompression errors\n    \n    Change-Id: Ica380edc2364a5e18cefc26f70710e18ea329cfa\n',15,2,'Rackspace'),(274621,809,809,'2013-10-25 16:29:16','2013-10-25 16:28:14','    Update my mailmap\n    \n    Using new email address.\n    \n    Change-Id: I9d49992e64302ff5d879761fa63dd01cefb63cad\n',1,0,'Huawei'),(274623,869,869,'2013-10-24 11:23:37','2013-10-21 13:26:11','    Simplify callers of diskfile.[read|write]_metadata()\n    \n    As it happens, diskfile.read_metadata() and diskfile.write_metadata()\n    can take either an open file or a filename as their first arguments\n    (since xattr.[get|set]xattr() can), so we can clean up a couple places\n    where we were opening a file just to call read_metadata() or\n    write_metadata() on it. This results in 2 fewer system calls.\n    \n    Example strace output:\n    \n    /* read_metadata(filename) */\n    getxattr(\"/mnt/sdb1/1/node/sdb1/afile\", \"user.some.key\", 0x0, 0) = 10\n    getxattr(\"/mnt/sdb1/1/node/sdb1/afile\", \"user.some.key\", \"some-value\", 10) = 10\n    \n    /* fp = open(filename); read_metadata(fp) */\n    open(\"/mnt/sdb1/1/node/sdb1/afile\", O_RDONLY) = 4\n    fstat(4, {st_mode=S_IFREG|0664, st_size=0, ...}) = 0\n    fgetxattr(4, \"user.some.key\", 0x0, 0)   = 10\n    fgetxattr(4, \"user.some.key\", \"some-value\", 10) = 10\n    \n    Change-Id: I321d8663b9e9e47b8f3ee6c21a1b65b408bb80e6\n',12,20,'SwiftStack'),(274625,826,826,'2013-10-24 13:04:42','2013-10-24 12:23:39','    Fix UnboundLocalError on account PUT\n    \n    Fixes bug-1243973\n    \n    Change-Id: I67143535c0f7a0c6b53f67329a0bb128a355a4de\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',39,1,'Red Hat'),(274627,229,229,'2013-10-29 12:29:49','2013-10-29 12:29:49','    Make pbr a build-time only dependency\n    \n    This lets you build swift packages that don\'t require pbr\n    to be installed at all. You would need pbr on the machine running\n    rpmbuild / debuild, but not on the machines that install the packages.\n    \n    Unfortunately, this does not make swift able to be\n    installed via pip 0.3.1 on Lucid; you\'ll need to uninstall the system\n    python-pip package and install a new pip some other way. Given that\n    pip < 1.3 doesn\'t perform SSL certificate validation for pypi (trivial\n    MITM attack, anyone?), you\'d probably want to get a new pip anyway.\n    \n    Change-Id: Ia50a229c5ae4dd2158beeaa953619b5e8f987c55\n',16,8,'SwiftStack'),(274628,869,869,'2013-10-29 14:21:16','2013-10-25 12:02:42','    Quarantine objects with busted metadata.\n    \n    Before, if you encountered an object with corrupt or missing xattrs,\n    the object server would return a 500 on GET, and wouldn\'t quarantine\n    anything. Now the object server returns a 404 for that GET and the\n    corrupted file is quarantined, thus giving replication a chance to fix\n    it.\n    \n    Change-Id: Ib1d7ab965391742c88fde3d83dc0b5afe85bada9\n',76,18,'SwiftStack'),(274629,5248,5248,'2013-10-28 22:38:53','2013-10-28 17:19:18','    form post over XMLHttpRequest (cors) broken\n    \n    Change-Id: Ia55e0d3974a96e11d49ab3cb26b6dcd7129b5cc8\n',50,14,'Rackspace'),(274631,42,42,'2013-10-29 16:10:47','2013-10-29 16:10:47','    Strengthen account tests\n    \n    This fell out of Peter Portante\'s \"acctcont-api\" branch and seems\n    obviously good. Apparently one of these would\'ve triggered while\n    doing the Pluggable Backend work.\n    \n    Now, why commit this separately while simultaneously working on\n    a big unified Backend Patch? Because posting them separately\n    proves that the test changes worked on the old code.\n    \n    Change-Id: I9ca6ad45fb255f5c0a177a93b93c1acc68da5bbe\n',7,3,'Red Hat'),(274633,826,826,'2013-10-30 11:32:09','2013-08-18 13:37:44','    Tie socket write buffer size to server parameters\n    \n    By default, Python 2.*\'s standard library \"socket\" module performs 8K\n    writes. For 10ge networks, with large MTUs (typically 9,000), this is\n    not optimal. We tie the default buffer size to the client_chunk_size\n    paramter for the proxy server, and to the network_chunk_size for the\n    object server.\n    \n    One might be tempted to ask, isn\'t there a way to set this value on a\n    per-request basis? This author was unable to find a reference to the\n    _fileobject in the context of WSGI. By the time a request pass to a\n    WSGI object\'s __call__ method, the \"wfile\" attribute of the\n    req.environ[\'eventlet.input\'] (Input) object has been set to None, and\n    the \"rfile\" attribute is the object wrapping the socket for reading,\n    not writing.\n    \n    One might also be tempted to ask, why not just override the\n    wsgi.HttpProtocol\'s \"wbufsize\" class attribute instead? Until\n    eventlet/wsgi.py is fixed, we can\'t set wsgi.HttpProtocol.wbufsize to\n    anything but zero (the default, see Python\'s SocketServer.py,\n    StreamRequestHandler class), since Eventlet does not ensure the socket\n    _fileobject\'s flush() method is called after Eventlet invokes a\n    write() method on the same.  NOTE: wbufsize (a class attribute of\n    StreamRequestHandler originally, not to be confused with the standard\n    library\'s socket._fileobject._wbufsize class attribute) is used for\n    the bufsize parameter of the connection object\'s makefile() method. As\n    a result, the socket\'s _fileobject code uses that value to set both\n    _rbufsize and _wbufsize. While that would allow us to transmit in 64KB\n    chunks, it also means that write() and writeline() method calls on the\n    socket _fileobject are only transmitted once 64KB have been\n    accumulated, or a flush() is called.\n    \n    As for performance improvement:\n    \n    Run       8KB   64KB\n      0     8.101  6.367\n      1     7.892  6.216\n      2     7.732  6.246\n      3     7.594  6.229\n      4     7.594  6.292\n      5     7.555  6.230\n      6     7.575  6.270\n      7     7.528  6.278\n      8     7.547  6.304\n      9     7.550  6.313\n    Average 7.667  6.275  1.3923  18.16%\n    \n    Run using the following after adjusting the test value for obj_len to\n    1 GB:\n    \n    nosetests -v --nocapture --nologcapture \\\n    test/unit/proxy/test_server.py:TestProxyObjectPerformance.test_GET_debug_large_file\n    \n    Change-Id: I4dd93acc3376e9960fbdcdcae00c6d002e545894\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',88,0,'Red Hat'),(274635,826,826,'2013-10-30 11:33:26','2013-10-01 11:30:15','    Remove unnecessary swift_conn comments\n    \n    Change-Id: I659073a979e2ed6f76cc0df828e600dc1d955b90\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',0,33,'Red Hat'),(274637,42,42,'2013-10-22 17:29:38','2013-10-22 17:29:38','    Add colon after service name\n    \n    In Fedora 21 the log format changed from this:\n    \n    Oct 10 23:54:20 rhev-a24c-01 proxy-server 10.10.55.128 .....\n    \n    to this:\n    \n    Oct 10 23:57:49 kvm-rei journal: proxy-server 192.168.128.11 .....\n    \n    It is clearly incompatible, because the word \"journal:\" is added.\n    \n    It happens because all the log messages are filtered by Systemd\n    and it adds \"journal:\" if it cannot find a word ending with colon.\n    See:\n     https://bugzilla.redhat.com/show_bug.cgi?id=1018042\n    \n    It seems that one simple fix could be in Swift. We already add\n    the indentifier word, it\'s just we do not end it in colon.\n    Therefore, we could start adding a colon to make the log look\n    more like any other system log.\n    \n    Unfortunately, this is not entirely compatible either! The number\n    of words is kept, so if you parse with regexp, you get the things\n    in expected places, but the name of the server now has a colon.\n    Would be simple enough to fix, I suppose, but still, this needs\n    a consideration. Reviewers should feel free to put -1 or -2 on\n    this if they find an application that breaks with this patch.\n    \n    Change-Id: I0d641ae49e6fc989283868ade2ca542a8133cb07\n',1,1,'Red Hat'),(274639,869,869,'2013-11-04 12:28:48','2013-11-04 12:28:48','    Fix deprecation warning.\n    \n    BaseException.message is deprecated; if you have an exception of type\n    Exception (or subclass thereof), then \"str(ex)\" is the preferred way\n    to get the message.\n    \n    Change-Id: I5b4acf88de538c1ef0f2db4fefaa92699937cd50\n',1,1,'SwiftStack'),(274640,4083,4083,'2013-11-05 12:15:24','2013-11-05 12:15:24','    Fix swift_test_client duplicating request params\n    \n    Remove extra lines of code that result in\n    swift_test_client adding params twice to\n    PUT request urls.\n    \n    Bug was revealed while developing functional\n    tests for SLO - SLO manifest PUTs behave incorrectly\n    because the url constructed by swift_test_client ends\n    with ?multipart-manifest=put?multipart-manifest=put\n    \n    Fixes bug 1248121\n    \n    Change-Id: Ie5a8651a55049bb52ef641edfd6eb29b0ff3c245\n',0,4,'HP'),(274641,869,869,'2013-11-06 11:16:42','2013-10-28 14:57:18','    Alternate DiskFile constructor for efficient auditing.\n    \n    Before, to audit an object, the auditor:\n     - calls listdir(object-hash-dir)\n     - picks out the .data file from the listing\n     - pulls out all N of its user.swift.metadata* xattrs\n     - unpickles them\n     - pulls out the value for \'name\'\n     - splits the name into a/c/o\n     - then instantiates and opens a DiskFile(a, c, o),\n    which does the following\n     - joins a/c/o back into a name\n     - hashes the name\n     - calls listdir(object-hash-dir) (AGAIN)\n     - picks out the .data file (and maybe .meta) from the listing (AGAIN)\n     - pulls out all N of its user.swift.metadata* xattrs (AGAIN)\n     - unpickles them (AGAIN)\n     - starts reading object\'s contents off disk\n    \n    Now, the auditor simply locates the hash dir on the filesystem (saving\n    one listdir) and then hands it off to\n    DiskFileManager.get_diskfile_from_audit_location, which then\n    instantiates a DiskFile in a way that lazy-loads the name later\n    (saving one xattr reading).\n    \n    As part of this, DiskFile.open() will now quarantine a hash\n    \"directory\" that\'s actually a file. Before, the audit location\n    generator would skip those, but now they make it clear into\n    DiskFile(). It\'s better to quarantine them anyway, as they\'re not\n    doing any good the way they are.\n    \n    Also, removed the was_quarantined attribute on DiskFileReader. Now you\n    can pass in a quarantine_hook callable to DiskFile.reader() that gets\n    called if the file was quarantined. Default is to log quarantines, but\n    otherwise do nothing.\n    \n    Change-Id: I04fc14569982a17fcc89e00832725ae71009335a\n',385,121,'SwiftStack'),(274643,5251,5251,'2013-10-29 13:49:38','2013-10-28 17:28:57','    HEAD on account returns 410 if account was deleted and not yet reaped\n    \n     * updated CONTRIBUTING.md\n     * improved unit tests\n     * 100% coverage for proxy acct controller tests\n     * invoke fake_http_connect correctly\n    \n    Change-Id: I0826c5a1c52efdd5ae95f7fde8024f2bff0751ba\n',61,8,'SwiftStack'),(274645,26,26,'2013-11-07 16:52:01','2013-08-28 16:10:43','    Object replication ssync (an rsync alternative)\n    \n    For this commit, ssync is just a direct replacement for how\n    we use rsync. Assuming we switch over to ssync completely\n    someday and drop rsync, we will then be able to improve the\n    algorithms even further (removing local objects as we\n    successfully transfer each one rather than waiting for whole\n    partitions, using an index.db with hash-trees, etc., etc.)\n    \n    For easier review, this commit can be thought of in distinct\n    parts:\n    \n    1)  New global_conf_callback functionality for allowing\n        services to perform setup code before workers, etc. are\n        launched. (This is then used by ssync in the object\n        server to create a cross-worker semaphore to restrict\n        concurrent incoming replication.)\n    \n    2)  A bit of shifting of items up from object server and\n        replicator to diskfile or DEFAULT conf sections for\n        better sharing of the same settings. conn_timeout,\n        node_timeout, client_timeout, network_chunk_size,\n        disk_chunk_size.\n    \n    3)  Modifications to the object server and replicator to\n        optionally use ssync in place of rsync. This is done in\n        a generic enough way that switching to FutureSync should\n        be easy someday.\n    \n    4)  The biggest part, and (at least for now) completely\n        optional part, are the new ssync_sender and\n        ssync_receiver files. Nice and isolated for easier\n        testing and visibility into test coverage, etc.\n    \n    All the usual logging, statsd, recon, etc. instrumentation\n    is still there when using ssync, just as it is when using\n    rsync.\n    \n    Beyond the essential error and exceptional condition\n    logging, I have not added any additional instrumentation at\n    this time. Unless there is something someone finds super\n    pressing to have added to the logging, I think such\n    additions would be better as separate change reviews.\n    \n    FOR NOW, IT IS NOT RECOMMENDED TO USE SSYNC ON PRODUCTION\n    CLUSTERS. Some of us will be in a limited fashion to look\n    for any subtle issues, tuning, etc. but generally ssync is\n    an experimental feature. In its current implementation it is\n    probably going to be a bit slower than rsync, but if all\n    goes according to plan it will end up much faster.\n    \n    There are no comparisions yet between ssync and rsync other\n    than some raw virtual machine testing I\'ve done to show it\n    should compete well enough once we can put it in use in the\n    real world.\n    \n    If you Tweet, Google+, or whatever, be sure to indicate it\'s\n    experimental. It\'d be best to keep it out of deployment\n    guides, howtos, etc. until we all figure out if we like it,\n    find it to be stable, etc.\n    \n    Change-Id: If003dcc6f4109e2d2a42f4873a0779110fff16d6\n',3530,75,'Rackspace'),(274647,5596,5596,'2013-11-07 01:48:14','2013-10-30 21:43:35','    early quorum responses\n    \n    Allow the proxy to respond to many types of requests as soon as it has a\n    quorum.  This can help speed up responses (without changing the results),\n    especially when one node is acting up.\n    \n    I had to fix a few unit tests that no longer match the backend http requests\n    made by our proxy.\n    \n    Change-Id: Ieb070dc3019e217e717b96154a7a809409bf40a5\n',179,44,'Rackspace'),(274649,4060,4060,'2013-11-07 15:55:39','2013-11-07 11:36:55','    Default region loading an old-style pickled ring\n    \n    This is to support upgrades from swift < 1.8 using old-style pickled\n    rings to 1.10. Old-style pickled rings won\'t have region information.\n    \n    Change-Id: I18b2acba3d346e41def9d25d3d4dbd12705e5375\n    Closes-Bug: #1248919\n',56,1,'Memset Ltd'),(274651,869,869,'2013-11-07 17:00:39','2013-11-07 17:00:26','    Remove redundant hash check\n    \n    Change-Id: I46f69d48e60349d28c6a297b703c9ff16b79bfe3\n',1,2,'SwiftStack'),(274652,826,826,'2013-11-05 22:37:49','2013-11-01 14:57:28','    Fix up sphinx docs for *make_request* methods\n    \n    Change-Id: I05ac17ba45eda99dc9fb9d6ecf2374d1e8371a32\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',5,4,'Red Hat'),(274654,869,869,'2013-11-05 16:15:07','2013-09-24 16:46:45','    Add more stuff to SAIO doc\'s proxy pipeline.\n    \n    If you\'re setting one of these up, you\'re probably going to use it for\n    development, in which case you want everything but the kitchen sink\n    turned on so you can just start hacking away.\n    \n    Change-Id: I98d178ff545cbf8d853c102e9fce76fb9f6773ac\n',38,10,'SwiftStack'),(274656,869,869,'2013-11-05 12:48:35','2013-11-05 12:48:35','    Remove some WebOb leftovers.\n    \n    The deleted comments were talking about a swob EmptyResponse object,\n    which doesn\'t exist; it seems this was left over from the big WebOb\n    removal. Also, swob doesn\'t exhibit that behavior, so there\'s no point\n    in having this extra code path around.\n    \n    Further, it seems like the hack was only needed with WebOb < 1.0.8. I\n    went back to Swift 1.4.8 (Essex) and compared it to master, and this\n    is the result:\n    \n    DLO manifest HEAD\n    =================\n    \n    Essex (ffadbc3)\n    ---------------\n    Small #segments --> Content-Length: 12345\n    Large #segments --> Content-Length: 0\n    Large #segments sans shenanigans --> Content-Length: 0\n    \n    master (f63b58f)\n    ----------------\n    Small #segments --> Content-Length: 12345\n    Large #segments --> Content-Length: 0\n    Large #segments sans shenanigans --> Content-Length: 0\n    \n    So, whatever WebOb wackiness this was intended to hack around, it\n    doesn\'t seem to have been here for a long, long time.\n    \n    Change-Id: I7b717b1b36de1139cc5b76c166d1715dbc34b332\n',4,20,'SwiftStack'),(274658,3037,3037,'2013-11-13 22:46:20','2013-11-13 19:20:16','    catch OSError to prevent breaking request /recon/diskusage\n    \n    swift.common.utils.ismount maybe raise some OSError in some special\n    cases; and the request against /recon/diskusage doesn\'t handle it\n    before. This patch let output of mounted keyword is the error\'s message.\n    \n    Change-Id: I5d9018f580181e618a3fa072b7a760d41795d8eb\n    Closes-Bug: #1249181\n',20,1,'UnitedStack'),(274659,826,40,'2013-11-15 16:32:52','2013-11-15 15:08:36','    Add swiftsync.\n    \n    Change-Id: Ie588db762aedc55e00f8f51b3d2e329ba9a08a6c\n',1,0,'eNovance'),(274660,826,826,'2013-11-19 11:32:19','2013-10-05 11:12:43','    Quiet all locale warnings and dummy thread, too\n    \n    Change-Id: I0c68b94ec234e470ce2d50da01d8ae1cd10fae58\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',23,3,'Red Hat'),(274661,5625,5625,'2013-11-20 13:26:50','2013-10-23 11:35:57','    Fixed concurrent PUT requests to accounts or containers\n    \n    When concurrent PUT requests come in for an account or container, the\n    resulting DB access will try to lock the DB for writing. Normal access\n    will retry when it encounters a locked DB, change 0fdad0d9 introduced\n    a cursor for doing the initialization which did not have the retry\n    capability, resulting in a hard failure.\n    \n    Fixes bug 1243973\n    \n    Change-Id: I73b219e0f5eacf314d87b4d5e56c03daf51b2eca\n',47,4,'independent'),(274663,2206,2206,'2013-10-28 17:41:09','2013-10-28 17:41:09','    improve docs in etc/dispersion.conf-sample\n    \n    1. add a comment to hint using a new account for using dispersion tools\n    2. change sample url for keystone from \'saio\' to \'localhost\'\n    \n    Change-Id: I4683f5eb0af534b39112f1b7420f67d569c29b3a\n',5,3,'UnitedStack'),(274665,826,826,'2013-11-19 11:27:40','2013-11-13 11:16:59','    Use utils.ismount in place of os.path.ismount\n    \n    See comments from: https://review.openstack.org/55991\n    \n    Change-Id: Ibb4153702b3dc4c60f66abb11cd3fa1953449827\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',27,32,'Red Hat'),(274667,4075,4075,'2013-11-18 14:24:55','2013-11-18 14:24:55','    minor fix to unittest fake error\n    \n    Change-Id: Ife7add5646afb94ec56a38f335112ab70998b1b1\n',2,1,'Rackspace'),(274669,826,826,'2013-11-19 11:29:41','2013-11-01 14:39:53','    Replace httplib with bufferedhttp in sphinx docs\n    \n    We also replace references in a few comments as well.\n    \n    Change-Id: Ifc8d78e943219fefc73f41abed7d393a060e3926\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',6,6,'Red Hat'),(274671,283,283,'2013-10-16 17:41:14','2013-10-15 17:46:01','    Handle COPY verb in account quota middleware\n    \n    Since COPY verb allow to copy an existing object\n    we must check the size of the source object before\n    allowing the copy.\n    \n    Fixes bug: #1201884\n    \n    Change-Id: Ia37bc716be0c3e5a3174dc4370bb5084f81073ad\n',51,5,'eNovance'),(274673,26,26,'2013-11-12 18:09:36','2013-11-12 18:00:15','    Fix probe test\n    \n    Fix for a probe test that failed every once in a\n    while due to the early-majority change previously\n    committed. Sometimes a write would return success\n    before the third node had succeeded and the probe\n    test would look for on-disk evidence and fail,\n    when it would\'ve been fine had it waited just a\n    bit longer for the third node to complete.\n    \n    Since there\'s no real way for the probe test to\n    know when all three nodes are done, I just made\n    it retry once a second for several seconds before\n    reporting an error.\n    \n    There may be more tests like this we\'ll have to\n    fix as we run across them.\n    \n    Change-Id: I749e43d4580a7c726a9a8648f71bafefa70a05f5\n',16,1,'Rackspace'),(274675,869,869,'2013-10-30 12:43:54','2013-10-30 12:43:54','    Fix quarantine, error counts in audit logs\n    \n    Any quarantines and errors that happened between the last recon dump\n    and the end of an audit pass weren\'t getting counted in the logs.\n    \n    This is particularly easy to see on a mostly-empty SAIO: go corrupt a\n    file, and the auditor will probably tell you (a) that it\'s\n    quarantining a file, and then (b) that 0 files were quarantined.\n    \n    Change-Id: I78e32b911e457078144564e3be42527260148ade\n',3,2,'SwiftStack'),(274677,5625,5625,'2013-11-18 13:56:46','2013-10-24 11:46:49','    Fix UnboundLocalError on container PUT\n    \n    Fixes bug-1243973\n    \n    Change-Id: If165fdcccb5d4712570b1cdabcc89e618f539849\n',42,1,'independent'),(274679,869,869,'2013-11-13 12:52:21','2013-11-13 12:51:18','    Fix test to work with mock 0.8.0\n    \n    This particular test case used a construct that worked in mock 1.0,\n    but not in 0.8. Our test-requirements.txt says mock>=0.8.0.\n    \n    Change-Id: I93ed4b7b5d169572bbed6490cb9b0dd421a3b9e2\n',2,1,'SwiftStack'),(274681,826,826,'2013-11-21 13:11:02','2013-11-14 13:56:47','    Import filter and app into namespace correctly\n    \n    The module used to simply \"import swift\", and then reference\n    the classes:\n    \n        swift.common.middleware.catch_errors.CatchErrorsMiddleware\n        swift.proxy.server.Application\n    \n    in order to very that the WSGI services loaded the proper filters and\n    apps.\n    \n    However, those references only happen to work, as the WSGI loading\n    would properly import the rest of the path so that the namespace\n    reference would be okay. If the WSGI configuration were to change, or\n    if the behavior of WSGI broke, instead of of seeing the actual failure\n    condition, a module attribute error would result instead:\n    \n        AttributeError: \'module\' object has no attribute \'middleware\'\n    \n    The referenced names are now properly imported with this change to\n    avoid misleading error conditions.\n    \n    Change-Id: Ifff4271bc5be1136bf17e4e5b291b01033d608db\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',3,1,'Red Hat'),(274683,2206,2206,'2013-11-20 11:28:14','2013-10-22 18:05:43','    Use POST in bulk-delete\n    \n    The DELETE verb applies to a single resource, and doesn\'t define any\n    semantics for the body.\n    \n    http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.7\n    \n    The swift Bulk Delete command affects multiple resources specified in a\n    DELETE body.\n    \n    http://docs.openstack.org/developer/swift/misc.html#module-swift.common.middleware.bulk\n    \n    While Bulk Delete is a welcome operation, its usage of DELETE is\n    unusual: affecting multiple resources and relying on reading content.\n    \n    More typically, such an operation employs POST (or PUT), which folks\n    including api-craft usually agree is the best \"catch-all\" verb for\n    behaviors such as those affecting multiple resources. That\'s the TL;DR;\n    of the thread below.\n    \n    https://groups.google.com/forum/#!searchin/api-craft/Regarding$20Bulk$20actions/api-craft/wY-W1NdZDRs/7YDwMhCR608J\n    \n    Note that this topic isn\'t nasal or abstract. The current behavior is\n    unsupported using the built-in java http client. Even if third-party\n    libraries can work around this behavior, it is probably best to not be a\n    snowflake wrt http verb semantics where possible!\n    \n    http://stackoverflow.com/questions/9100776/http-delete-with-request-body-issues\n    \n    DocImpact\n    \n    Closes-Bug: #1232787\n    Change-Id: I0fc74c85618fe4dd7ff5e7f9756c7f6f67aa0465\n',30,17,'UnitedStack'),(274685,826,826,'2013-11-21 22:34:36','2013-11-20 16:43:40','    Do not format messages before they are logged\n    \n    Change-Id: Ia645c9eca47b7f404d9b987f68a96b4744031e9d\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',18,15,'Red Hat'),(274687,5625,5625,'2013-11-21 12:02:33','2013-11-21 11:46:15','    Fix DB locked error on commit\n    \n    This bug was introduced in ef7f9e27; while moving timeout for execute\n    to the cursor wrapper, commit was moved as well; however commit is\n    purely a connection method, only execute is passed on to a cursor.\n    Added unit tests to check both methods for correct timeouts.\n    \n    This manifested in a test failure as:\n    ERROR __call__ error with POST /sdb1/418/AUTH_d1c4b610b16a48de83219c696261009c/TestContainer-tempest-1572414684 :\n    Traceback (most recent call last):\n      File \"/opt/stack/new/swift/swift/container/server.py\", line 486, in __call__\n        res = method(req)\n      File \"/opt/stack/new/swift/swift/common/utils.py\", line 1915, in wrapped\n        return func(*a, **kw)\n      File \"/opt/stack/new/swift/swift/common/utils.py\", line 687, in _timing_stats\n        resp = func(ctrl, *args, **kwargs)\n      File \"/opt/stack/new/swift/swift/container/server.py\", line 464, in POST\n        broker.update_metadata(metadata)\n      File \"/opt/stack/new/swift/swift/common/db.py\", line 677, in update_metadata\n        conn.commit()\n    OperationalError: database is locked (txn: tx5065394f288740e69fcec-00528e184e)\n    \n    Change-Id: I269b133fac53d4792d21b62f801cc0c0ccf337ea\n',60,27,'independent'),(274689,826,826,'2013-11-22 14:39:30','2013-11-22 00:37:11','    Handle optional arguments for run_forever()\n    \n    All the other daemons do this, and since the out deamon wrapper\n    scripts pass all the command line options through directly, seems\n    simple enough to handle them by ignoring.\n    \n    This is also applied to run_once().\n    \n    Change-Id: I1df83bdf78f0dc3d911019f67f78301967b5da72\n    Closes-Bug: #1253891\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',4,4,'Red Hat'),(274690,5625,5625,'2013-11-21 15:16:10','2013-11-20 10:57:24','    Fixed locale test in the presence of LANGUAGE\n    \n    According to GNU documents, the priority order of language variables\n    is LANGUAGE, LC_ALL, LC_*, LANG. Therefore, if LANGUAGE is set, it\n    overrides the LC_ALL setting from the test. An empty value is ignored,\n    and setting it to empty is easier to deal with than just deleting the\n    variable.\n    \n    Also fixed the Google translate fail esperanto grammar.\n    \n    Fixes bug 1235058\n    \n    Change-Id: Ic97b90dfc21997e19cc473250794a9b3c526beb5\n',11,12,'independent'),(274692,826,826,'2013-11-22 14:46:38','2013-11-20 15:52:07','    Simple fix for proxy-logging empty field handling\n    \n    Change-Id: Ia135575bd30a0bc04a2105291e68a6d18c7a3047\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',2,4,'Red Hat'),(274694,5248,5248,'2013-11-22 21:03:11','2013-11-04 17:06:06','    Get retry.\n    \n    If a source times out on read try another one of them with a\n    modified range.  There had to be a lot of moved around code\n    to get this working but it should all make sense.\n    \n    Change-Id: Ieaf045690a8823927a6f38098a95b37a4d4adb70\n',557,356,'Rackspace'),(274696,869,869,'2013-11-22 12:23:58','2013-11-22 12:23:58','    Remove obsolete future imports\n    \n    The with statement has been standard since Python 2.5, so we can get\n    rid of these imports.\n    \n    Change-Id: I280971c3d8c01e94cc2c17cacaedcbe9d9c8a3c3\n',0,28,'SwiftStack'),(274698,229,229,'2013-11-22 09:46:40','2013-11-22 09:44:36','    add an \"inline\" query parameter to tempurl\n    \n    Giving the inline query parameter will cause the tempurl\n    response to be given a \"Content-Disposition: inline\" header,\n    regardless of other query parameters or metadata. This allows\n    easy in-line viewing, eg in browsers.\n    \n    DocImpact\n    \n    Change-Id: Icd5c544d6a749d4f58e8a921968f4e432a2185db\n',82,26,'SwiftStack'),(274700,26,26,'2013-11-22 21:40:29','2013-11-09 03:18:11','    Per device replication_lock\n    \n    New replication_one_per_device (True by default)\n    that restricts incoming REPLICATION requests to\n    one per device, replication_currency allowing.\n    \n    Also has replication_lock_timeout (15 by default)\n    to control how long a request will wait to obtain\n    a replication device lock before giving up.\n    \n    This should be very useful in that you can be\n    assured any concurrent REPLICATION requests are\n    each writing to distinct devices. If you have 100\n    devices on a server, you can set\n    replication_concurrency to 100 and be confident\n    that, even if 100 replication requests were\n    executing concurrently, they\'d each be writing to\n    separate devices. Before, all 100 could end up\n    writing to the same device, bringing it to a\n    horrible crawl.\n    \n    NOTE: This is only for ssync replication. The\n    current default rsync replication still has the\n    potentially horrible behavior.\n    \n    Change-Id: I36e99a3d7e100699c76db6d3a4846514537ff685\n',240,10,'Rackspace'),(274702,733,733,'2013-11-24 09:11:04','2013-11-24 09:11:04','    Use a more portable errno in tests.\n    \n    ELIBBAD doesn\'t exist on OS X. The exact value we use here isn\'t\n    important, so use something more portable.\n    \n    Change-Id: Id03dc1773f416a94bbd14ad31b2b2a70f16b9a51\n',1,1,'Rackspace'),(274703,229,229,'2013-11-15 15:10:39','2013-11-15 15:10:39','    allow bare excepts in flake8\n    \n    Change-Id: I4751f9f65712960019f9a303b7d7fe017c6e85c7\n',1,1,'SwiftStack'),(274705,4075,4075,'2013-11-21 01:35:58','2013-11-18 11:41:58','    Add a DebugLogger for wsgi server tests\n    \n    Change-Id: Ifd2528be443ba3879bf4921f6c5f4ef31f29044b\n',58,24,'Rackspace'),(274707,10,826,'2013-11-26 18:03:33','2013-11-19 22:55:09','    Fix for memcache middleware configuration\n    \n    The documentation rightly said to use \"memcache_max_connections\", but\n    the code was looking for \"max_connections\", and only looking for it in\n    proxy-server.conf, not in memcache.conf as a fall back.\n    \n    This commit brings the code coverage for the memcache middleware to\n    100%.\n    \n    Closes-Bug: 1252893\n    Change-Id: I6ea64baa2f961a09d60b977b40d5baf842449ece\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',211,26,'Red Hat'),(274708,4056,229,'2013-11-25 15:56:38','2013-11-14 15:58:52','    Use upstream patched Pool.get\n    \n    This works around an eventlet bug in eventlet 0.9.16.\n    This version properly keeps track of pool size accounting, and\n    therefore doesn\'t let the pool grow without bound. This patched\n    version is the result of commit\n    f5e5b2bda7b442f0262ee1084deefcc5a1cc0694 in eventlet and is\n    documented at https://bitbucket.org/eventlet/eventlet/issue/91\n    \n    This patch includes full test coverage of the back-ported code, even\n    when the actually-installed eventlet is newer.\n    \n    This fixes bug #1254119\n    \n    Change-Id: I075bb5e40e08571d52fe17fcc3fa0e25be5befed\n',101,2,'SwiftStack'),(274710,826,229,'2013-11-26 14:03:30','2013-11-20 17:15:19','    add bare except to catch errors\n    \n    Change-Id: Ibe78912cf923591bddd6a8cf0e683cd028c9c4e8\n',14,3,'SwiftStack'),(274712,229,229,'2013-11-26 14:39:30','2013-11-26 14:39:30','    bare excepts, as is proper\n    \n    Change-Id: Ifd28f6f14a781a67644315690491888161a7250c\n',2,9,'SwiftStack'),(274714,5596,5596,'2013-11-25 21:25:55','2013-11-25 18:58:34','    slightly less early quorum\n    \n    The early quorum change has maybe added a little bit too much\n    eventual to the consistency of requests in Swift, and users can\n    sometimes get unexpected\n    results.\n    \n    This change gives us a knob to turn in finding the right balance,\n    by adding a timeout where pending requests can finish after quorum\n    is achieved.\n    \n    Change-Id: Ife91aaa8653e75b01313bbcf19072181739e932c\n',54,0,'Rackspace'),(274716,4056,4056,'2013-11-27 00:37:02','2013-11-26 15:08:13','    Fix bug in obj updater run_once().\n    \n    The \"not\" in front of the ismount() call got accidentally dropped in a\n    recent change.  This patch adds it back along with a few more tests.\n    \n    Note that this bug only showed up on an SAIO during probe tests because\n    I used actually-mounted (virtual) \"disks\".  So keep that in mind when\n    building SAIOs for development/testing.\n    \n    Change-Id: Ia193f3c4b73203605954036863575c22ddab6b03\n',89,8,'SwiftStack'),(274718,4056,4056,'2013-11-27 12:07:42','2013-11-27 12:07:42','    Add HTML reporting for test branch coverage.\n    \n    When including branch coverage results, also generate HTML reports into\n    a \"cover\" subdirectory under the directory in which .unittests resides\n    (i.e. known location at the top of the swift tree).\n    \n    Change-Id: I493d74f38755f7bf0d7043052585efb27840b238\n',6,2,'SwiftStack'),(274720,869,869,'2013-11-19 16:20:46','2013-11-18 13:17:48','    Some functional tests for static large objects\n    \n    There\'s some sort-of-hacky code in there to detect SLO support in\n    order to skip tests when SLO is off so that the functests won\'t fail\n    on older clusters.\n    \n    Change-Id: I6ad5974a0db7213747b0f4497d08ffc706d3f220\n',232,3,'SwiftStack'),(274722,826,826,'2013-11-27 14:07:02','2013-11-25 13:30:41','    Use TCP_NODELAY for created sockets.\n    \n    Mark Seger at HP has been looking at small objects, 1 and 2 KB size,\n    and with Rick Jones\' help noticed that TCP protocol traces showed\n    effects from the Nagel algorithm client-to-server and\n    server-to-client.\n    \n    This patch just addresses our WSGI server responses, but does not\n    address out-bound connections from the various servers.\n    \n    Change-Id: I11f86df1f56fba1c6ab6084dc1f580c395f072dc\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',6,3,'Red Hat'),(274723,869,869,'2013-11-19 16:49:36','2013-11-11 14:59:14','    Reorganize SLO unit tests\n    \n    This brings some sanity to the SLO test app (the thing the middleware\n    wraps in the unit tests) as well as splits things into multiple test\n    classes.\n    \n    This is part of the effort to move all SLO functionality to\n    middleware, but it\'s a separate commit to prove that these test\n    changes don\'t harm anything when running against the old code.\n    \n    Change-Id: I52a16f15a80dfaf9b3c595b0e634d52f418caf6c\n',364,270,'SwiftStack'),(274725,733,733,'2013-11-27 14:34:06','2013-11-24 20:24:45','    Account for a platform difference in semaphores\n    \n    On OS X (and probably other Operating Systems) it isn\'t possible to\n    introspect the value of a semaphore. Account for this by skipping a\n    test about this.\n    \n    Change-Id: I97824f9fc4e36de4f7a62c8ce53865e6977dfdfe\n',12,4,'Rackspace'),(274727,5627,5627,'2013-11-22 15:54:13','2013-10-16 19:28:37','    Added discoverable capabilities.\n    \n    Swift can now optionally be configured to allow requests to \'/info\',\n    providing information about the swift cluster.  Additionally a HMAC\n    signed requests to\n    \'/info?swiftinfo_sig=<sign>&swiftinfo_expires=<expires>\' can be\n    configured allowing privileged access to more sensitive information\n    not meant to be public.\n    \n    DocImpact\n    Change-Id: I2379360fbfe3d9e9e8b25f1dc34517d199574495\n    Implements: blueprint capabilities\n    Closes-Bug: #1245694\n',742,48,'Rackspace'),(274729,826,826,'2013-11-26 23:34:12','2013-09-30 12:35:07','    Report path information in failure exceptions\n    \n    When an error occurs during functional tests that use the\n    swift_test_client module, the reported error message includes the\n    method and path:\n    \n        ResponseError: 500: \'Internal Error\' (\'HEAD\' \\\n        \'/v1/AUTH_test/d5ce...\')\n    \n    Change-Id: I631cd9e83879fb644778d4ded62625483bf38045\n',33,18,'Red Hat'),(274731,10,826,'2013-11-26 18:04:27','2013-09-03 15:27:57','    Push cooperative sleep call down into ThreadPool\n    \n    The PUT REST API has no idea how writes are performed, so when thread\n    pools are in use, the sleep is not necessary, though it is still\n    necessary when thread pools are not in use. Since the ThreadPool\n    object knows when threads are actually in use, it can take care of\n    being cooperative with the eventlet hub.\n    \n    In addition, we can hide the cooperative iterator hook, given that the\n    only other consumer of this was the auditor, which does not need it\n    any longer.  The only consumer of the DiskFile class that wants the\n    cooperative behavior is the REST API layer of the object server, which\n    is also using thread pools.\n    \n    Change-Id: Ibc4ac672899f9a35fd68c85d7f56403c19b4f991\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',14,38,'Red Hat'),(274733,826,826,'2013-11-27 16:19:51','2013-11-22 16:59:09','    Add a unit test to verify proxy logging fields\n    \n    Also bring unit test coverage to 100% (well, at least every line is\n    reported as \"covered\").\n    \n    Change-Id: I659d0c02008368897b1307a7a5c9aaba73b80588\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',99,19,'Red Hat'),(274735,121,121,'2013-11-21 17:28:07','2013-11-20 16:26:03','    test: improve db_replicator coverage\n    \n    This patch adds a test for ReplicatorRpc.complete_rsync()\n    and complete extract_device() coverage.\n    \n    test_extract_device:\n      test the case the parameter is invalid\n    \n    test_complete_rsync_with_bad_input:\n      ensure the use of invalid parameters return a 404 erro\n    \n    test_complete_rsync:\n      validate the returned code in case of success\n    \n    Change-Id: I59e0d26a1efe59d8beff1e81c2a7edc6de0872e9\n',34,0,'eNovance'),(274737,826,826,'2013-11-26 12:59:48','2013-10-21 18:19:30','    Remove unnecessary \"is not None\" check\n    \n    From a review comment on https://review.openstack.org/30051 remove\n    the \"is not None\" check, as the assignment in the try block will\n    never assign None as value as the int() built-in will not return it.\n    \n    There was some concern of long-term maintenance of the DiskFile\n    class\'s _quarantine method raising exceptions. If that routine were\n    ever mistakenly changed to NOT raise an exception, subtle problems\n    could creep into the code (see https://review.openstack.org/53237).\n    We address this concern by raising an exception explicitly at the\n    call sites of DiskFile._quarantine().\n    \n    Change-Id: I1729a2d77a6b72b4494b24a8838b47ad5272c075\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',20,19,'Red Hat'),(274739,4075,4075,'2013-11-21 01:33:48','2013-11-21 01:33:48','    workaround probetest race from early response\n    \n    Change-Id: I594633887c86fc2212850409a37ee2257633a23c\n',19,8,'Rackspace'),(274741,4075,4075,'2013-11-20 21:11:45','2013-10-29 13:04:59','    in case you lose your builder backups\n    \n    Change-Id: Ica555be2be492c3ec5fdeab738058ff35989a603\n',90,11,'Rackspace'),(274743,826,826,'2013-11-26 10:31:43','2013-11-24 23:29:53','    Protect against hash cleanup errors on PUTs\n    \n    In http://launchpad.net/bugs/1254405 an exception occurs when\n    finalizing the PUT of an object, but it is obscured by the thread pool\n    code, so we don\'t see the actual line where it originated. However,\n    there are two possible functions where this exception could originate:\n    \n        1. renamer()\n        2. hash_cleanup_listdir()\n    \n    If this is an error in renamer(), there is some other waky problem\n    where the temporary file has been removed. It is likely that this is a\n    problem where a file name from os.listdir ends up disappearing (but\n    even this is a rare occurence). Regardless, it is not clear that we\n    really want an error from hash_cleanup_listdir() from affecting the\n    return result of the PUT.\n    \n    To that end, we squelsh OSErrors from hash_cleanup_listdir() for\n    now. One might argue for all errors, but since os.unlink() and\n    os.listdir() raise OSError today, that is probably sufficient.\n    \n    Even that we use \"Closes-Bug\" below, it is not clear it can even be\n    determined that this closes that bug report.\n    \n    Change-Id: I2f55df835c387e4d17cffda74c04c9994aebbe1f\n    Closes-Bug: 1254405\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',22,1,'Red Hat'),(274745,869,869,'2013-11-27 17:25:16','2013-11-27 17:23:59','    Report transaction ID in failure exceptions\n    \n    This way, when something fails in Jenkins, you have some chance of\n    searching the logs for the relevant transaction.\n    \n    Change-Id: I3cf606cb4963e32b5c6ac3deda08e73541b3ff7d\n',11,2,'SwiftStack'),(274748,826,826,'2013-12-02 13:54:40','2013-12-02 13:54:40','    Remove Python 3.3 from list of tox environments\n    \n    Remove Python 3.3 from the list of tox test environments since we do\n    not currently support Python 3.3 for swift.\n    \n    Change-Id: I7993a511e8433b21b292f21f4775e4ef2b5c2539\n',1,1,'Red Hat'),(274749,869,869,'2013-11-30 11:09:34','2013-11-27 18:24:17','    Expose bulk-operation limits in /info.\n    \n    These will allow clients to perform the minimal number of requests\n    required to accomplish some bulk tasks. For example, a client with\n    many objects to delete can learn that the cluster\'s limit on\n    deletes-per-request is, say, 128, and then batch up their deletes in\n    groups of 128. Without this, the client has to either discover the\n    limit out-of-band somehow (and get notified if it changes), or do some\n    sort of binary search to figure out the limit.\n    \n    Similar reasoning applies to the containers-per-request value.\n    \n    The errors-per-request values are included so that clients may size\n    their requests such that everything is attempted regardless of\n    failure.\n    \n    I split the \'bulk\' entry into \'bulk_delete\' and \'bulk_upload\' because,\n    from a client\'s standpoint, they\'re separate operations. It so happens\n    that Swift implements both in one piece of middleware, but clients\n    don\'t care.\n    \n    Bonus fix: documented a missing config setting for the bulk middleware.\n    \n    Change-Id: Ic3549aef79682fd5b798145c3545c1609aa1592b\n',58,12,'SwiftStack'),(274751,869,869,'2013-12-02 09:45:29','2013-11-21 11:03:46','    Some functional tests for dynamic large objects\n    \n    Change-Id: Id9f6c7e26ed9760372d2bfc9a1ffa3f8ae3d5861\n',110,0,'SwiftStack'),(274753,826,826,'2013-11-27 20:21:54','2013-09-19 16:56:07','    Add accurate timestamps in proxy log\n    \n    Add accurate timestamps to the proxy-logging middleware log lines for\n    the start and end of a request. We use 9 digits of precision since on\n    some systems the clock resolution can be as fine as 1 ns.\n    \n    The goal is to allow for log processing that can use the more accurate\n    timestamps to correlate requests, computing number of requests in\n    flight at a given historical point in time.\n    \n    Change-Id: I61e8784b1c455d629f1299207fc4fc7e4a134814\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',28,19,'Red Hat'),(274756,733,733,'2013-12-02 12:43:59','2013-12-02 11:30:54','    GreenDBConnection no longer assumes that arguments are kwargs\n    \n    Previous this code assumed that almost all arguments would be passed\n    as kwargs. Now the code also handles ``timeout`` occurring in\n    ``*args``. This is needed because on PyPy\'s sqlite module, they are\n    passed in ``*args``.\n    \n    Change-Id: I7ce25e7b262c6f46680e3f0eb391094de8051946\n',6,5,'Rackspace'),(274758,4080,4080,'2013-12-03 16:29:00','2013-12-02 16:37:03','    Add option to return disk usage report with byte suffix.\n    \n    Disk usage is currently returned as bytes. This patch adds the option\n    to return the value with a more human-friendly suffix, eg. MB/GB/TB/PB.\n    \n    Change-Id: I3d55181f7e6085e711bd6e09ea2ce0a12b290cc5\n',18,2,'Red Hat'),(274760,733,733,'2013-12-02 14:24:22','2013-12-02 14:24:22','    Fixed DB test cases on PyPy\n    \n    They weren\'t working because of the intersection between some monkey\n    patching in the tests and the fact that ``sqlite3.Connection`` and\n    ``Cursor`` are Python classes on PyPy, but C-extension classes on\n    CPython. The result was that trying to call the superclass\'s init\n    didn\'t work because the name ``sqlite3.Connection`` pointed to a\n    different class that wasn\'t actually the real superclass of\n    ``GreenDBConnection``. Using ``super`` fixes this because the method\n    called is now always the real superclass\'s.\n    \n    Change-Id: Ib45b16c7499883e560877788f13285d0a47cc2cd\n',2,2,'Rackspace'),(274762,869,26,'2013-12-03 19:27:12','2013-12-04 00:10:46','    Remove ssync iter_hook usage\n    \n    Apparently that disappeared and now the whole thing does on its own what this\n    was trying to achieve.\n    \n    Change-Id: If20016cb80c855e3e8373de5d56926ef8f8e7dac\n',1,6,'Rackspace'),(274764,4075,4075,'2013-12-03 21:12:19','2013-12-03 21:12:19','    use diskfile in ssync_sender tests\n    \n    Change-Id: I7993de98ce3eb4839fa5d72d1b6ce08e4a7c1451\n',89,63,'Rackspace'),(274766,4075,4075,'2013-12-04 23:09:02','2013-12-03 11:17:57','    fix expired object deletion\n    \n    fixes bug #1257330\n    \n    Change-Id: I49f645abdeba97eafb3ae42ef9e3684c912cfdc6\n',72,6,'Rackspace'),(274768,211,211,'2013-12-02 12:46:41','2013-12-02 12:44:20','    Remove swift-bench\n    \n    swift-bench has moved to :\n    \n    http://github.com/openstack/swift-bench\n    \n    DocImpact\n    \n    Change-Id: Id09765f53d1e493fb0eeae0dba57879ba9dd0ade\n',0,831,'eNovance'),(274770,26,26,'2013-12-05 19:39:29','2013-12-05 18:02:06','    Fixed a failing test on my saio\n    \n    The added sleep makes this test pass on my saio. I have not heard of\n    it failing for anyone else, but I figured I\'d post this up just in\n    case someone does have the same problem and this fixes it for them.\n    \n    Change-Id: Ia0bb09d36d0b531ade7c6a6034bbe31dd6c90a98\n',6,1,'Rackspace'),(274772,826,826,'2013-12-05 15:31:09','2013-12-05 15:31:09','    Override spelling of tempauth test name\n    \n    Change-Id: Ife571bbeb6dd4ba5c552a2f0725c36e133e64cf4\n',1,1,'Red Hat'),(274774,869,869,'2013-12-05 16:52:25','2013-11-21 17:39:56','    Fix HEAD tempurls\n    \n    HEAD-only tempurls didn\'t work; tempurl only allowed a HEAD request if\n    the tempurl was generated for GET or PUT (that is, the method in the\n    HMAC-signed string was \"GET\" or \"PUT\").\n    \n    The intent of the code was to allow a user with a GET or a PUT tempurl\n    to also perform a HEAD request; I think the breaking of HEAD tempurls\n    is just a bug.\n    \n    Change-Id: I621ddaac03e0d058dd9e7c7c374cb5c4b6386d36\n',28,9,'SwiftStack'),(274776,869,869,'2013-12-03 15:56:47','2013-12-03 14:49:57','    Preserve closeability of app iterables\n    \n    PEP 333 (WSGI) says that if your iterable has a close() method, the\n    framework must call it.\n    \n    WSGIContext._app_call pulls the first chunk off the returned iterable\n    to make sure that it gets status and headers, and then it would\n    itertools.chain() that first chunk back onto the iterable so the whole\n    body went out. swob.Response.call_application() does it too.\n    \n    The problem is that an itertools.chain object doesn\'t have a close()\n    method, so your iterable\'s fancy-pants close() method has no chance of\n    getting called.\n    \n    This patch adds a slightly smarter CloseableChain that works like\n    itertools.chain, but has a close() method that calls the underlying\n    iterables\' close() methods, if any.\n    \n    Change-Id: If975c93f53c27dfa0c2f52f4bbf599af25202f70\n',59,4,'SwiftStack'),(274778,1020,1020,'2013-12-04 12:18:54','2013-12-02 13:40:01','    Opt out of the service catalog\n    \n    Set include_servce_catalog=False in Keystone\'s auth_token\n    example configuration. Swift does not use X-Service-Catalog\n    so there is no need to suffer its overhead. In addition,\n    service catalogs can be larger than max_header_size so this\n    change avoids a failure mode.\n    \n    DocImpact\n    Relates to bug 1228317\n    \n    Change-Id: If94531ee070e4a47cbd9b848d28e2313730bd3c0\n',11,0,'HP'),(274780,869,869,'2013-12-02 17:41:38','2013-12-02 17:08:19','    Update handoff algorithm to use IP/port pairs\n    \n    The replica placement algorithm works on regions, then zones, then\n    IP/port, then device ID. The handoff algorithm worked on regions, then\n    zones, then device ID, completely skipping IP/port. It\'s now been\n    updated to take IP/port into consideration.\n    \n    This means you get one handoff on each machine in the cluster before\n    you start getting handoffs that share a machine with a previous\n    one. In small clusters, this can help with durability.\n    \n    Because this is performance-critical code, here are some quick\n    benchmark results:\n    \n    Run time averages over 25000 trials on a 1200-device ring (20 part\n    power, 3 replicas, 2 regions, 10 zones, 120 nodes):\n    \n    		   |   master    |   branch\n    ===================+=============+============\n    get 1 more node	   |  2.727e-05	 |  3.076e-05\n    get 6 more nodes   |  3.55e-05   |  4.214e-05\n    get all more nodes |  0.002247   |  0.002691\n    \n    There\'s a small slowdown from the additional bookkeeping, but nothing\n    too awful. The time to get 6 more nodes (for handoff checks on 404,\n    it\'s 2x replica count by default, hence 6) went from 35 to 42\n    microseconds, so it remains small.\n    \n    Change-Id: Ie7da4dfcb0fcf1a38e2fb13f60c204540fadbf06\n',85,47,'SwiftStack'),(274782,869,869,'2013-12-06 10:57:37','2013-12-03 22:18:46','    Stop mutating PATH_INFO in proxy server\n    \n    The proxy server was calling swob.Request.path_info_pop() prior to\n    instantiating a controller so that req.path_info was just /a/c/o (sans\n    /v1). The version got moved over into SCRIPT_NAME.\n    \n    This lead to some unfortunate behavior when trying to re-use a request\n    from middleware. Something like this:\n    \n        # Imagine we\'re a WSGIContext object here.\n        #\n        # To start, SCRIPT_NAME = \'\' and PATH_INFO=\'/v1/a/c/o\'\n    \n        resp_iter = self._app_call(env, start_response)\n        # Now SCRIPT_NAME=\'/v1\' and PATH_INFO =\'/a/c/o\'\n    \n        if something_special in self._response_headers:\n            env[\'REQUEST_METHOD\'] = \'GET\'\n            env.pop(\'HTTP_RANGE\', None)\n    \n    	# 404 SURPRISE! The proxy calls path_info_pop() again,\n            # and now SCRIPT_NAME=\'/v1/a\' and PATH_INFO=\'/c/o\', so this\n            # gets treated as a container request. Yikes.\n            resp_iter = self._app_call(env, start_response)\n    \n    Now we just leave SCRIPT_NAME and PATH_INFO alone. To make life easy\n    for everyone who does want just /a/c/o, I defined\n    swob.Request.swift_entity_path, which just strips off the /v1.\n    \n    Note that there\'s still one call to path_info_pop() in tempauth, but\n    that\'s only for requests going to /auth, so it won\'t affect Swift API\n    requests. It might be a good idea to remove that one later, but let\'s\n    do one thing at a time.\n    \n    Change-Id: I87557a11c01f3f3889b610578cda6ba7d3933e7a\n',299,228,'SwiftStack'),(274784,229,229,'2013-12-06 09:21:50','2013-12-03 06:33:55','    Release notes for Swift 1.11.0\n    \n    Change-Id: Iff13ce1fb9ab662fc4965f8f2a420f58535fb5d3\n',119,0,'SwiftStack'),(274786,4075,4075,'2013-12-06 12:07:52','2013-11-13 11:40:27','    make test tooling less opinionated\n    \n    Change-Id: I709afcec998795794a9ef13bbe7493ddd46c59b5\n',16,8,'Rackspace'),(274788,826,826,'2013-12-05 10:21:42','2013-12-04 16:05:56','    Allow access to the in-memory object server\n    \n    This will allow functional tests to be used against it, and can then\n    be used for the storage-policy work as an example diskfile\n    implementation associated with a storage policy.\n    \n    Change-Id: I47a88e70cee99225779baaed379b0c5d4c73611a\n',2,1,'Red Hat'),(274790,4080,4080,'2013-10-25 09:02:33','2013-10-25 08:59:37','    Prevent early auth deny in tempauth when using swift3 middleware.\n    \n    When tempauth is used together with swift3 and keystone, groups are\n    empty and tempauth denies the request too early without a chance for\n    keystone to authenticate the request.\n    \n    Change-Id: I21d9b22ecbd18a5f1fba901abd94221a332c45ea\n    Closes-Bug: 1244545\n',17,1,'Red Hat'),(274792,229,229,'2013-12-09 10:33:53','2013-12-09 10:33:53','    clarify the current state of the DiskFile API\n    \n    Change-Id: Ia3d62c53d14c9a5efdb9a39b08817320cf331085\n',5,2,'SwiftStack'),(274793,826,826,'2013-12-09 20:55:08','2013-10-02 23:52:30','    Use files in the source tree instead of cut/paste\n    \n    Many of the large files are included in the tree and the script now\n    leverages a checked out swift tree to provide those files so that\n    users don\'t have to cut/paste text from the document. The contents of\n    those files are still included in the document for reference.\n    \n    Updated to add sudo in appropriate places so that the entire script\n    can be run as the user instead of as root.\n    \n    We also simplify the steps needed to get resetswift script working\n    (don\'t need to edit the user name).\n    \n    Change-Id: Ie5b5a815870edcc205d273e35e0bbd2426d3b002\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',892,654,'Red Hat'),(274795,2206,2206,'2013-11-28 17:39:57','2013-11-26 00:27:20','    fix usage of need_default in parse_storage_policies\n    \n    The need_default varible in parse_storage_policies seems to mark the\n    case that there no policy is set to default. If True, the function trys\n    to use first policy as default. If False, that means there is a policy\n    is set yes for default option, not false values. So set need_default\n    False only if a policy says he is the default one.\n    \n    Change-Id: Idc293366e6c529423e75900783570ffb6925533b\n',37,1,'UnitedStack'),(274797,826,54,'2013-12-10 17:31:21','2013-12-10 14:06:45','    Sync global requirements to pin sphinx to sphinx>=1.1.2,<1.2\n    \n    Sync the global requirements to pin sphinx.  This addresses an issue\n    where Sphinx 1.2 is not building documents correctly and causing\n    check/gate to fail.\n    \n    We also had to adjust the pip command used.\n    \n    Change-Id: I8894c0199db845e90e5086a7c0e6bb7c7a26b5a0\n',2,1,'Metacloud'),(274798,3063,3063,'2013-12-03 14:00:22','2013-11-29 13:59:47','    Increases the UT coverage of db_replicator.py\n    \n    Adds 20 unit tests to increase the coverage of db_replicator.py\n    from 71% to 90%\n    \n    Change-Id: Ia63cb8f2049fb3182bbf7af695087bfe15cede54\n    Closes-Bug: #948179\n',338,2,'Intel'),(274800,869,869,'2013-12-10 16:43:29','2013-12-08 18:00:47','    Use /info to check if SLO is enabled\n    \n    The functional tests have some hokey detection of SLO support that\n    pre-dates the /info API, but we can do better now.\n    \n    Also moved the SLO check up inside the setUp method so that skipping\n    the SLO tests should be somewhat faster now.\n    \n    Change-Id: I645718b459d794a9a97770f7162934558c94f3e8\n',23,23,'SwiftStack'),(274802,826,826,'2013-12-12 17:13:38','2013-12-12 11:57:08','    Add some tests to demonstrate hash_cleanup_listdir\n    \n    We add some tests to verify various behaviors of\n    hash_cleanup_listdir(), and break them into individual tests so that\n    one failure won\'t prevent the others from running as well.\n    \n    Change-Id: I4f52388d813f061b8e7d2b45dfb0f805689020c2\n',92,31,'Red Hat'),(274803,42,42,'2013-11-22 19:01:10','2013-11-22 18:57:44','    Return an exit code for configuration errors\n    \n    Red Hat\'s QA noticed that in case of the infamous \"xattr>=0.4\"\n    error, swift-init exits with a zero error code, which confuses\n    startup scripts (not Systemd though -- that one knows exactly\n    if processes run or not).\n    \n    The easiest fix is to return the error code like Guido\'s blog\n    post suggested.\n    \n    Change-Id: I7badd8742375a7cb2aa5606277316477b8083f8d\n    Fixes: rhbz#1020480\n',64,8,'Red Hat'),(274805,826,826,'2013-12-11 17:18:13','2013-12-11 16:59:59','    Bring obj server unit tests to > 98%\n    \n    This set of changes attempts to bring the unit test coverage to over\n    98% for the object server module.\n    \n    Two changes to the object server are made with this patch:\n    \n    1. The try/except block around diskfile.write_metadata() was removed\n       at the end of the POST method\n    \n    The write_metadata() method of the DiskFile module does not raise\n    either the DiskFileNotExist or DiskFileQuarantined exceptions on that\n    code path.\n    \n    2. The conditional container_update() call was removed at the end of\n       the PUT method\n    \n    The container_update() calls is performed when a new object is created\n    or when an exist object is updated. Since we already report old\n    timestamps as 409s (Conflict) we always perform the update.\n    \n    We also fix an existing test to clear the hash prefix so that it can\n    actually detect the async pending pickle file creation for a failure\n    mode.\n    \n    Change-Id: I71ec9dcf7c0ac86e56aa0f06993d501fdfa22d5b\n',349,64,'Red Hat'),(274807,5628,5628,'2013-12-10 16:16:44','2013-12-10 16:16:44','    Remove start index 0 in range()\n    \n    Remove the useless arg (\"start index\" = 0) in files, since its default\n    value is 0, to make code cleaner.\n    \n    Fixes bug #1259750\n    \n    Change-Id: I52afac28a3248895bb1c012a5934d39e7c2cc5a9\n',4,4,'99cloud'),(274809,869,869,'2013-12-12 17:29:45','2013-12-12 17:27:47','    Expose basic constraints in /info\n    \n    Change-Id: I70649e0669e2f7a1d61742a16ed6dc792d4b2a5a\n',41,2,'SwiftStack'),(274811,229,54,'2013-12-10 17:06:20','2013-12-10 14:06:45','    Sync global requirements to pin sphinx to sphinx>=1.1.2,<1.2\n    \n    Sync the global requirements to pin sphinx.  This addresses an issue\n    where Sphinx 1.2 is not building documents correctly and causing\n    check/gate to fail.\n    \n    We also had to adjust the pip command used.\n    \n    Change-Id: I8894c0199db845e90e5086a7c0e6bb7c7a26b5a0\n',2,1,'Metacloud'),(274814,4075,4075,'2013-12-13 16:39:55','2013-12-13 16:39:55','    Update swift-config paste appconfig inspection\n    \n    This crafts a significantly more informative and complete picture of the\n    appconfig object after paste has gotten a hold of it.\n    \n    Change-Id: I07d7248ecf384f32d333025874ecb2782c58d6af\n',23,4,'Rackspace'),(274816,4064,4064,'2013-12-13 08:59:22','2013-12-12 16:28:40','    Only retry GETs for objects.\n    \n    Change-Id: I8b6ceeaa0e5e247e45209deced808b0b78181d53\n',14,13,'Rackspace'),(274818,829,829,'2013-12-11 04:34:01','2013-12-09 13:56:10','    Updates tox.ini to use new features\n    \n    tox 1.6 allows us to skip the sdist step, which is slow. This does that.\n    It also allows us to override the install line. In this case, it\'s\n    important as it allows us to stop getting pre-release software we\n    weren\'t asking for.\n    \n    Original patch by Monty Taylor, talked about here:\n    http://lists.openstack.org/pipermail/openstack-dev/2013-September/015495.html\n    \n    Change-Id: I2042cae5ebf5467408fe6cdb71f6147081b72ca6\n',3,0,'HP'),(274820,826,826,'2013-12-14 22:28:56','2013-12-03 13:01:15','    Handle non-integer values for if-delete-at\n    \n    If a client passes us a non-integer value for if-delete-at we\'ll now\n    properly report a 400 error instead of a 503.\n    \n    Closes-Bug: 1259300\n    Change-Id: I8bb0bb9aa158d415d4f491b5802048f0cd4d8ef6\n',43,6,'Red Hat'),(274821,229,229,'2013-12-16 12:33:08','2013-12-16 12:33:08','    update ssync tests to use req.get_response()\n    \n    Change-Id: I2fa752b42669fab27d1a8e7562d52d8f8b848351\n',42,41,'SwiftStack'),(274822,26,26,'2013-12-16 17:14:00','2013-12-16 17:14:00','    Just trying to keep /tmp clean\n    \n    Change-Id: Ia8d7cf37a4f6a4652cb3440a896cefb411cdb41a\n',16,5,'Rackspace'),(274824,869,869,'2013-12-18 10:38:34','2013-12-18 10:38:34','    Fix obj versioning w/non-ASCII container name\n    \n    If you create a container with a non-ASCII name, and then make another\n    container with X-Versions-Location: first-cøntåîner, *and* you\'re\n    serializing stuff in memcache as json (the default), when the proxy\n    tries to make a versioned object, it will crash.\n    \n    The fix is to make sure that get_container_info() always returns strs,\n    not unicodes.\n    \n    The long-term fix would be to get rid of simplejson entirely, as its\n    decoder can\'t make up its mind whether JSON strings should be Python\n    strs or unicodes, and that makes it really really easy to write bugs\n    like this.\n    \n    Change-Id: Ib20ea5fb884484a4246d7a21a9f1e2ffd82eb04f\n',7,1,'SwiftStack'),(274825,26,26,'2013-12-06 04:23:31','2013-12-06 04:12:15','    Make ssync_receiver drop conn on exc\n    \n    Before, the ssync receiver wouldn\'t hang up the connection with all\n    errors. Now it will. Hanging up early will ensure the remote end gets\n    a \"broken pipe\" type error right away instead of it possible sending\n    more data for quite some time before finally reading the error.\n    \n    Change-Id: I2d3d55baaf10f99e7edce7843a7106875752020a\n',9,9,'Rackspace'),(274827,5629,5629,'2013-12-19 09:31:17','2013-11-07 04:45:27','    change the last-modified header value with valid one\n    \n    the Last-Modified header in Response didn\'t have a suitable\n    value - an integer part of object\'s timestamp.\n    This leads that the the if-[un]modified-since header with the\n    value from last-modified is always earlier than timestamp\n    and results the content is always newer than value of these\n    conditional headers.\n    Patched code returns math.ceil() of object\'s timestamp\n    in Last-Modified header so the later conditional header works\n    correctly\n    \n    Closes-Bug: #1248818\n    Change-Id: I1ece7d008551bf989da74d23f0ed6307c45c5436\n',140,7,'KT Corporation'),(274829,869,869,'2013-12-16 16:08:16','2013-12-13 13:11:01','    Force catch_errors into pipeline\n    \n    This commit adds a hook for WSGI applications\n    (e.g. proxy.server.Application) to modify their WSGI pipelines. This\n    is currently used by the proxy server to ensure that catch_errors is\n    present; if it is missing, it is inserted as the first middleware in\n    the pipeline.\n    \n    This lets us write new, mandatory middlewares for Swift without\n    breaking existing deployments on upgrade.\n    \n    Change-Id: Ibed0f2edb6f80c25be182b3d4544e6a67c5050ad\n',407,29,'SwiftStack'),(274831,869,869,'2013-12-12 16:13:42','2013-12-12 16:13:42','    Expose allowed tempurl methods in /info\n    \n    Clients can construct tempurls for any method, but they only work if\n    they\'re in this list, so it\'s helpful for clients to see the list.\n    \n    Change-Id: Id852f457d65b62c4fe79db01b1d7029a5fa5aa09\n',38,6,'SwiftStack'),(274833,229,2206,'2013-12-23 11:01:05','2013-11-21 11:14:34','    test 3 date format in functional tests\n    \n    According to HTTP/1.1, servers MUST accept all three formats:\n    \n    Sun, 06 Nov 1994 08:49:37 GMT     # RFC 822, updated by RFC 1123\n    Sunday, 06-Nov-94 08:49:37 GMT    # RFC 850, obsoleted by RFC 1036\n    Sun Nov 6 08:49:37 1994           # ANSI C\'s asctime() format\n    \n    In functional tests, a date value header has 3 kinds of format will be\n    tested.\n    \n    Change-Id: I679ed44576208f2a79bffce787cb55bda4b39705\n    Closes-Bug: #1253207\n',11,5,'UnitedStack'),(274835,869,869,'2013-12-18 12:11:47','2013-12-18 12:11:47','    Allow running just one test with tox\n    \n    Now, \"tox -e py26 -- test.unit.proxy.test_server\" runs just that one\n    test file.\n    \n    \"tox -e py26\" still runs all the tests with py26, just like before.\n    \n    Change-Id: I40db12dd5e7cc8f9388e29b30447f70d3bfc4b28\n',1,1,'SwiftStack'),(274837,4080,4080,'2013-12-17 11:16:53','2013-12-17 11:16:53','    Add swiftbrowser as an associated project\n    \n    Swiftbrowser is a simple web app build with Django to access Openstack Swift.\n    \n    Change-Id: I2d397f61e4c3fcd09ba994a06ec4d492f37ae34a\n',1,0,'Red Hat'),(274839,211,211,'2013-12-24 01:18:19','2013-12-24 01:17:19','    Allow specify arguments to .probetests script\n    \n    Just so at least I can add -x or -s.\n    \n    Change-Id: I95543a3086ca5fb292e7899c02646a58296c610a\n',1,1,'eNovance'),(274841,869,869,'2013-12-17 16:18:35','2013-12-17 16:11:26','    Preserve tracebacks from run_in_thread\n    \n    Now the traceback goes all the way down to where the exception came\n    from, not just down to run_in_thread. Better for debugging.\n    \n    Change-Id: Iac6acb843a6ecf51ea2672a563d80fa43d731f23\n',37,22,'SwiftStack'),(274843,5569,5569,'2013-12-29 11:35:07','2013-12-27 17:38:34','    Up nproc limit on startup.\n    \n    Separate out setrlimit calls for specific exception handling.\n    \n    Closes-Bug: #1264561\n    Change-Id: I5588f19f8d0393409580d17317727977758d5cb3\n',16,1,'independent'),(274845,229,5250,'2013-12-28 20:58:27','2013-12-18 14:03:23','    Fix checkmount  error parsing in swift-recon\n    \n    - swift-recon now handles parsing instances where \'mounted\' key (in unmounted\n      and disk_usage) is an error message instead of a bool.\n    - Add\'s checkmount exception handling to the recon umounted endpoint.\n    - Updates existing unittest to have ismount throw an error.\n    - Updates unittests to cover the corner cases\n    \n    Change-Id: Id51d14a8b98de69faaac84b2b34b7404b7df69e9\n',50,15,'Rackspace'),(274847,3,3,'2014-01-06 03:38:47','2014-01-06 03:38:47','    Whitelist external netifaces requirement\n    \n    * tox.ini(testenv.install_command): Use the --allow-external and\n    --allow-insecure options so that pip 1.5 and later will assent to\n    retrieve the netifaces package even though it\'s not hosted on PyPI.\n    The --allow-insecure option is aliased to a clearer\n    --allow-unverified wording in 1.5, but the old form is being used to\n    avoid breaking users of 1.4.x and will be valid at least through\n    1.6.x according to comments in the pip source.\n    \n    Change-Id: I587b516f3f77c930475ca2eaae5ff73c5d2ab576\n',1,1,'OpenStack Foundation'),(274848,5250,5250,'2014-01-04 00:19:22','2014-01-04 00:19:22','    Don\'t report async pendings on exception\n    \n    If we encounter an exception trying to gather async pendings \'async\'\n    doesn\'t exist and the cronjob ends up erroring out and leaving behind a\n    stale lock file.\n    \n    Change-Id: I70a6d3f00bd2c9ce742e6d16af93804280707040\n',1,3,'Rackspace'),(274850,40,40,'2013-12-24 03:11:43','2013-12-23 17:57:56','    Remove swiftclient dep on direct_client\n    \n    Partial Implements: blueprint remove-swiftclient-dependency\n    Change-Id: I9af7150e5d21d50e5f880e57796314b8f05822d2\n',102,24,'eNovance'),(274852,826,826,'2014-01-06 18:12:42','2014-01-06 18:12:42','    Remove trailing slash for consistency\n    \n    Change-Id: Idd4fd116b6be226e46e33f421883b6fb34947a84\n    Signed-off-by: Peter Portante <peter.portante@redhat.com>\n',8,8,'Red Hat'),(274854,3063,3063,'2013-12-09 19:16:35','2013-12-05 17:19:50','    Adds a retry mechanism when deleting containers\n    \n    Bulk middleware now has a mechanism to retry a delete when the\n    HTTP response code is 409. This happens when the container still\n    has objects. It can be useful in a bulk delete where you delete\n    all the objects in a container and then try to delete the container.\n    It is very likely that at the end it will fail because the replica\n    objects have not been deleted by the time the middleware got a\n    successful response.\n    \n    Change-Id: I1614fcb5cc511be26a9dda90753dd08ec9546a3c\n    Closes-Bug: #1253478\n',102,24,'Intel'),(274856,826,826,'2014-01-06 10:28:56','2013-12-11 20:41:34','    Refactor to share on-disk layout with hash cleanup\n    \n    Closes-Bug: 1260132\n    Change-Id: Iaa367c686b8dc49dd53c55a7cca661d9611044f8\n',57,39,'Red Hat'),(274858,51,51,'2014-01-07 15:58:11','2014-01-07 14:18:31','    Move the tests from functionalnosetests\n    \n    Move the tests from functionalnosetests under functional, so we no\n    longer have two seperate trees for functional tests. This also drops\n    the \'nose\' name from the directory, so that it doesn\'t end up with\n    confusion if we move to testr. Further, since there are no longer two\n    test runs in .functests, it nows looks very close to the other two.\n    \n    Change-Id: I8de025c29d71f05072e257df24899927b82c1382\n',1691,1696,'HP'),(274860,283,283,'2014-01-08 10:06:22','2014-01-03 15:39:20','    Add Swift-account-stats as a related project.\n    \n    Change-Id: If2620a6b448581697d0d049578ea28faead6fbcf\n',1,0,'eNovance'),(274862,826,826,'2014-01-09 11:06:28','2013-12-09 20:52:58','    Raise diskfile.py module coverage to > 98%\n    \n    We attempt to get the code coverage (with branch coverage) to 100%,\n    but fall short because due to interactions between coverage.py and\n    CPython\'s peephole optimizer. See:\n    \n        https://bitbucket.org/ned/coveragepy/issue/198/continue-marked-as-not-covered\n    \n    In the main diskfile module, we remove the check for a valid\n    \"self._tmppath\" since it is only one of a number of fields that could\n    be verified and it was not worth trying to get coverage for it. We\n    also remove the try / except around the close() method call in the\n    DiskFileReader\'s app_iter_ranges() method since it will never be\n    called in a context that will raise a quarantine exception (by\n    definition ranges can\'t generate a quarantine event).\n    \n    We also:\n    \n    * fix where quarantine messages are checked to ensure the\n      generator is actually executed before the check\n    * in new and modified tests:\n      * use assertTrue in place of assert_\n      * use assertEqual in place of assertEquals\n    * fix references to the reserved word \"object\"\n    \n    Change-Id: I6379be04adfc5012cb0b91748fb3ba3f11200b48\n',344,62,'Red Hat'),(274864,27,27,'2013-12-20 16:13:26','2013-12-20 08:57:43','    Various optimizations to RingBuilder.rebalance()\n    \n    Overall gain is about 20-22% of time on my laptop. This includes:\n    \n    * replacing string sort_key with a tuple (because we can and because\n      compairing two 3-tuples is faster than comparing two 26-byte strings);\n    * keeping track of hungriest dev in tier (allows us to use built-in\n      dict.__getitem__ as a key instead of lambdas in couple of places);\n    * remove unnecessary sorted() call in the innermost loop (because we\n      don\'t need to sort all of them or better we don\'t need to sort\n      anything there);\n    * memoize tiers for each dev (saves just a couple of percents but why\n      not).\n    \n    Performance measurments have been done using this script:\n    http://paste.openstack.org/show/55609/\n    \n    Related-Bug: #1262166\n    Related-Bug: #1261659\n    Change-Id: If38bd9fe82efc12b01e9aa146e0f4ab565fb6bea\n',31,42,'Mirantis'),(274866,4083,4083,'2014-01-06 22:29:37','2013-12-03 22:02:39','    Generic means for persisting system metadata.\n    \n    Middleware or core features may need to store metadata\n    against accounts or containers. This patch adds a\n    generic mechanism for system metadata to be persisted\n    in backend databases, without polluting the user\n    metadata namespace, by using the reserved header\n    namespace x-<server_type>-sysmeta-*.\n    \n    Modifications are firstly that backend servers persist\n    system metadata headers alongside user metadata and\n    other system state.\n    \n    For accounts and containers, system metadata in PUT\n    and POST requests is treated in a similar way to user\n    metadata. System metadata is not yet supported for\n    object requests.\n    \n    Secondly, changes in the proxy controllers ensure that\n    headers in the system metadata namespace will pass through\n    in requests to backend servers.\n    \n    Thirdly, system metadata returned from backend servers\n    in GET or HEAD responses is added to the cached info\n    dict, which middleware can access.\n    \n    Finally, a gatekeeper middleware module is provided\n    which filters all system metadata headers from requests\n    and responses by removing headers with names starting\n    x-account-sysmeta-, x-container-sysmeta-. The gatekeeper\n    also removes headers starting x-object-sysmeta- in\n    anticipation of future support for system metadata being\n    set for objects. This prevents clients from writing or\n    reading system metadata.\n    \n    The required_filters list in swift/proxy/server.py is\n    modified to include the gatekeeper middleware so that\n    if the gatekeeper has not been configured in the\n    pipeline then it will be automatically inserted close\n    to the start of the pipeline.\n    \n    blueprint cluster-federation\n    \n    Change-Id: I80b8b14243cc59505f8c584920f8f527646b5f45\n',979,43,'HP'),(274868,869,869,'2014-01-08 14:29:35','2014-01-08 14:14:02','    Log when quarantining an object\n    \n    When you\'re trying to troubleshoot why all your objects are getting\n    quarantined, it\'s really nice to have some logging. If nothing else,\n    it\'s nice to know which process did it.\n    \n    Change-Id: I6e8be6df938659f7392891df9336ed70bd155706\n',4,0,'SwiftStack'),(274870,869,869,'2014-01-10 12:59:08','2014-01-10 12:57:53','    Add missing license header to test file\n    \n    All the other tests have license headers, so this one should too.\n    \n    I picked 2013 for the copyright year because that\'s when \"git log\"\n    says it was first and last touched.\n    \n    Change-Id: Idd41a179322a3383f6992e72d8ba3ecaabd05c47\n',14,0,'SwiftStack'),(274872,869,869,'2013-12-21 11:32:34','2013-12-21 11:32:34','    Make POST for bulk delete actually work\n    \n    Change-Id: I568e7e31df3dcbeac20dba6d543a13c0409de00e\n    Closes-Bug: 1232787\n',3,1,'SwiftStack'),(274874,4075,4075,'2014-01-10 16:17:44','2014-01-10 00:31:55','    Allow programmatic reloading of Swift hash path config\n    \n    New util\'s function validate_hash_conf allows you to programmatically reload\n    swift.conf and hash path global vars HASH_PATH_SUFFIX and HASH_PATH_PREFIX\n    when they are invalid.\n    \n    When you load swift.common.utils before you have a swift.conf there\'s no good\n    way to force a re-read of swift.conf and repopulate the hash path config\n    options - short of restarting the process or reloading the module - both of\n    which are hard to unittest.  This should be no worse in general and in some\n    cases easier.\n    \n    Change-Id: I1ff22c5647f127f65589762b3026f82c9f9401c1\n',43,16,'Rackspace'),(274876,4080,4080,'2014-01-10 07:15:59','2014-01-10 07:14:43','    Update account quota doc\n    \n    A note was added stating that the same limitations apply to\n    account quotas as for container quotas. An example on uploads\n    without a content-length headers was added.\n    \n    Related-Bug: 1267659\n    Change-Id: Ic29b527cb71bf5903c2823844a1cf685ab6813dd\n',7,0,'Red Hat'),(274878,869,869,'2014-01-08 17:26:11','2014-01-08 17:20:14','    Warn if read_affinity is configured but not enabled\n    \n    To get the proxy\'s read affinity to work, you have to set both\n    \"read_affinity = <stuff>\" and \"sorting_method = affinity\" in the proxy\n    config. If you set the first but not the second, then you don\'t get\n    read affinity, and Swift doesn\'t help you determine why not.\n    \n    Now the proxy will emit a warning message if read_affinity is set but\n    sorting_method is a value other than \"affinity\", so if you check your\n    logs to see why it isn\'t working, you\'ll get a hint.\n    \n    Note that the message comes out twice per proxy process, so with 2\n    workers you\'ll see the warning 6 times on startup (2 for master + 2 *\n    2 per worker). It\'s sort of annoying, but at least it\'s not\n    per-request.\n    \n    Bonus docstring fix: remove a sentence that\'s not true\n    \n    Change-Id: Iad37d4979a1b7c45c0e3d1b83336dbcf7a68a0c9\n',14,4,'SwiftStack'),(274881,869,4087,'2014-01-14 15:02:42','2013-12-11 15:10:37','    Storage Policy / DiskFile Interface Support\n    \n    The EC branch currently has minimal DiskFile support (one API) and\n    a big todo item for the rest.  This patch completes the support as\n    well as addresses a change to the one existing interface where we\n    used to pass the object directory name into DiskFile but have now\n    decided to pass in the policy index instead and let DiskFile build\n    the object directory name.  This patch includes:\n    \n    - change interface param from directory name to policy index\n    - replace DiskFile DATADIR with Diskfile module method to\n      return object directory name based on index (in all\n      DiskFile and test files)\n    - do the same for ASYNCDIR, although not required, might\n      be nice for debug/organization to have the async updates\n      in per policy directories\n    - removal of object dir notion from StoragePoicy object\n    \n    The patch also includes 2 updates unrelated to diskfile that were\n    suggested during review:\n    1) avoid use of extra parm in obj server HTTP verb handlers\n    2) modify storage_policy module to remove test code policy\n    defaults and update related test code to provide them\n    \n    Still a few todo items labeled XXX (todo in a different patch later):\n    - had to do some of the updater policy work to get things\n      to function but supporting policies for the updater\n      is a separate activity\n    - same kind of thing with ssync, had to hack in one minor\n      thing to get things to work but a different activity\n      will be entered on Trello for ssync policy support\n    \n    Change-Id: I71eab0788325f715b2787e818d41dc3fa58a7046\n    Implements: blueprint storage-policies\n',379,274,'Intel'),(274882,869,869,'2014-01-14 16:47:50','2014-01-14 14:37:05','    Get rid of surplus policy accessors\n    \n    We don\'t really need these; the two places that were using the module\n    like a StoragePolicyCollection can just reach in and grab .POLICIES\n    instead.\n    \n    Change-Id: I8ae7d31b30c50b073b16f57d26a18366269d6fd4\n',45,98,'SwiftStack'),(274883,4075,4075,'2014-01-16 18:19:48','2014-01-15 17:24:58','    Remove storage_policies paramater\n    \n    Add some mocking to standardize how we move around storage policies in tests.\n    \n    Change-Id: Ia1e71edde32c5f4a6ae13855c6d13098480733d9\n',336,258,'Rackspace'),(274884,869,4087,'2014-01-30 14:20:47','2014-01-02 15:25:55','    Add Storage Policy Support to the Updater\n    \n    This patch makes the Updater policy aware and adds plumbing required\n    for existing test cases to pass as well as test cases required for\n    policy coverage.\n    \n    Change-Id: I19b5dfb59d04ba574a1badd634665c432bf8cbcd\n    Implements: blueprint storage-policies\n',112,85,'Intel'),(274885,4087,4087,'2014-01-22 15:44:58','2013-12-30 12:35:49','    Add Storage Policy Support to the Auditor\n    \n    This patch makes the Auditor policy aware and adds plumbing required\n    for existing test cases to pass as well as a few policy specific tests\n    (not all tests require policy knowledge to achieve coverage).\n    \n    Change-Id: I701890130188527066986d2dc6dcc9783a54471a\n    Implements: blueprint storage-policies\n',151,75,'Intel'),(274887,4056,869,'2014-01-13 10:52:29','2013-11-13 12:06:55','    Move all SLO functionality to middleware\n    \n    This way, with zero additional effort, SLO will support enhancements\n    to object storage and retrieval, such as:\n     * automatic resume of GETs on broken connection (today)\n     * storage policies (in the near future)\n     * erasure-coded object segments (in the far future)\n    \n    This also lets SLOs work with other sorts of hypothetical third-party\n    middleware, for example object compression or encryption.\n    \n    Getting COPY to work here is sort of a hack; the proxy\'s object\n    controller now checks for \"swift.copy_response_hook\" in the request\'s\n    environment and feeds the GET response (the source of the new object\'s\n    data) through it. This lets a COPY of a SLO manifest actually combine\n    the segments instead of merely copying the manifest document.\n    \n    Updated ObjectController to expect a response\'s app_iter to be an\n    iterable, not just an iterator. (PEP 333 says \"When called by the\n    server, the application object must return an iterable yielding zero\n    or more strings.\" ObjectController was just being too strict.) This\n    way, SLO can re-use the same response-generation logic for GET and\n    COPY requests.\n    \n    Added a (sort of hokey) mechanism to allow middlewares to close\n    incompletely-consumed app iterators without triggering a warning. SLO\n    does this when it realizes it\'s performed a ranged GET on a manifest;\n    it closes the iterable, removes the range, and retries the\n    request. Without this change, the proxy logs would get \'Client\n    disconnected on read\' in them.\n    \n    DocImpact\n    \n    blueprint multi-ring-large-objects\n    \n    Change-Id: Ic11662eb5c7176fbf422a6fc87a569928d6f85a1\n',1252,862,'SwiftStack'),(274889,26,26,'2014-01-10 23:48:00','2013-12-08 09:13:59','    New container sync configuration option\n    \n    Summary of the new configuration option:\n    \n    The cluster operators add the container_sync middleware to their\n    proxy pipeline and create a container-sync-realms.conf for their\n    cluster and copy this out to all their proxy and container servers.\n    This file specifies the available container sync \"realms\".\n    \n    A container sync realm is a group of clusters with a shared key that\n    have agreed to provide container syncing to one another.\n    \n    The end user can then set the X-Container-Sync-To value on a\n    container to //realm/cluster/account/container instead of the\n    previously required URL.\n    \n    The allowed hosts list is not used with this configuration and\n    instead every container sync request sent is signed using the realm\n    key and user key.\n    \n    This offers better security as source hosts can be faked much more\n    easily than faking per request signatures. Replaying signed requests,\n    assuming it could easily be done, shouldn\'t be an issue as the\n    X-Timestamp is part of the signature and so would just short-circuit\n    as already current or as superceded.\n    \n    This also makes configuration easier for the end user, especially\n    with difficult networking situations where a different host might\n    need to be used for the container sync daemon since it\'s connecting\n    from within a cluster. With this new configuration option, the end\n    user just specifies the realm and cluster names and that is resolved\n    to the proper endpoint configured by the operator. If the operator\n    changes their configuration (key or endpoint), the end user does not\n    need to change theirs.\n    \n    DocImpact\n    \n    Change-Id: Ie1704990b66d0434e4991e26ed1da8b08cb05a37\n',1262,89,'Rackspace'),(274891,869,869,'2014-01-13 18:57:17','2014-01-13 18:57:17','    Add missing setting to SLO sample conf\n    \n    Change-Id: I3b3a306e855509d6d03223ea59dfbd109647733c\n',2,0,'SwiftStack'),(274893,869,869,'2014-01-14 22:19:58','2014-01-14 22:15:03','    Expose some SLO constraints via /info\n    \n    These are the ones that affect what requests a client can make; the\n    others are just time and speed limits, so they weren\'t as interesting.\n    \n    Change-Id: I21c19c950227f02725aafc309a3996fc6749a383\n',45,10,'SwiftStack'),(274895,229,229,'2014-01-11 14:02:20','2014-01-10 22:44:32','    use specific hacking rules\n    \n    Change-Id: I91cb5e30ec081262e2a590d64ba46fddadc7590f\n',8,3,'SwiftStack'),(274897,239,869,'2014-01-16 13:40:53','2014-01-16 13:40:53','    Use constant time comparison in tempURL\n    \n    Use constant time comparison when evaluating tempURL to avoid timing\n    attacks (CVE-2014-0006).\n    \n    Fixes bug 1265665\n    \n    Change-Id: I11e4ad83cc4077e52adf54a0bd0f9749294b2a48\n',8,2,'SwiftStack'),(274899,26,26,'2014-01-14 15:40:35','2014-01-13 17:45:56','    Consolidating and standardizing x-delete-at format\n    \n    Change-Id: Idc916da1c7fe1cc43a2c26f7f7ee1d4fcdd52c89\n',95,26,'Rackspace'),(274901,283,283,'2014-01-16 14:07:48','2014-01-16 13:16:26','    Remove an useless dependency to swiftclient\n    \n    Unit tests in test/unit only have one dependency\n    to swiftclient in test_direct_client.py. This one\n    can be easily avoided and this patch removes it.\n    \n    Change-Id: Ic1c78bc7f7fe426e8f7d8209a783342a0c4f071f\n',3,3,'eNovance'),(274903,869,869,'2014-01-16 08:20:38','2014-01-15 11:01:52','    Use constant-time string compare for /info requests\n    \n    If you GET /info?swiftinfo_sig=<HMAC>&swiftinfo_expires=<TIME>, then\n    the response contains any admin-only information that\'s been\n    registered (via calls to register_swift_info(admin=True)).\n    \n    The bad news is that the info controller isn\'t using streq_const_time\n    to compare the valid HMAC signatures with the passed-in one, leading\n    to a possible timing attack.\n    \n    The good news is that this isn\'t a security hole since there\'s\n    absolutely nothing interesting in the admin-only section yet, so even\n    if an attacker does suss out a valid signature, they don\'t learn\n    anything. However, we should still fix this in case anything\n    interesting ever does get added.\n    \n    Change-Id: I28b6814def67200ddaa6272e09f6a55fb517fd97\n',8,2,'SwiftStack'),(274905,26,26,'2014-01-08 16:20:42','2014-01-07 23:58:47','    Mute hash_suffix rmdir failures\n    \n    Change-Id: I10acfb1a3005ef988ac8a88819bf754b98cea63a\n',22,1,'Rackspace'),(274907,308,308,'2014-01-17 12:36:30','2014-01-14 15:58:38','    Fix Error 400 Header Line Too Long\n    \n    Fix Error 400 Header Line Too Long when using Identity v3 PKI Tokens\n    \n    Uses swift.conf max_header_size option to set wsgi.MAX_HEADER_LINE,\n    allowing the operator to customize this parameter.\n    \n    The default value has been let to 8192 to avoid unexpected\n    configuration change on deployed platforms. The max_header_size option\n    has to be increased (for example to 16384), to accomodate for large\n    Identity v3 PKI tokens, including more than 7 catalog entries.\n    \n    The default max header line size of 8192 is exceeded in the following\n    scenario:\n    - Auth tokens generated by Keystone v3 API include the catalog.\n    - Keystone\'s catalog contains more than 7 services.\n    \n    Similar fixes have been merged in other projects.\n    \n    Change-Id: Ia838b18331f57dfd02b9f71d4523d4059f38e600\n    Closes-Bug: 1190149\n',29,5,'Cloudwatt'),(274909,4064,4064,'2014-01-17 07:42:48','2014-01-14 12:51:40','    Drop origin from get_info calls\n    \n    The reason for this is that having origin in the get_info calls causes an\n    infinite loop. The way that code was written it relies on GETorHEAD_base to\n    populate the data- the only problem is that the HEAD call is wrapped by\n    cors_validation which calls get_info and round and round we go. imo get_info\n    should be refactored to not work this way (relying on this other call to do\n    stuff behind scenes and then magically your stuff is there) because it seems\n    pretty prone to breaking. But I\'ll let somebody else do that :).\n    \n    Fixes bug 1270039\n    \n    Change-Id: Idad3cedd965e0d5fb068b062fe8fef301c87b75a\n',31,0,'Rackspace'),(274911,26,26,'2014-01-15 23:36:07','2014-01-08 00:06:30','    Mute hash_cleanup_listdir common failures\n    \n    Change-Id: I0fffa387b5fae793de91870e20cab4e32e94387a\n',32,4,'Rackspace'),(274913,826,869,'2014-01-19 09:57:12','2014-01-15 10:31:36','    Make sure SLO\'s bulk-delete logger is configured\n    \n    The SLO middleware supports deletion of an object and all its\n    segments; internally, it uses the same code as the bulk middleware to\n    do this (swift.common.middleware.bulk.Bulk).\n    \n    If something goes wrong in the bulk delete, the Bulk object logs the\n    exception; however, SLO\'s Bulk object\'s logger always has the default\n    logging config, so if you\'ve got a non-default logging setup\n    (e.g. syslog to a remote log host), this one exception message goes\n    somewhere else (e.g. local syslog).\n    \n    This patch makes SLO and its bulk deleter share a logger so all the\n    messages go to the same place.\n    \n    Change-Id: Idb01b5640257a02dbb9c698851a14ad8fba11a2d\n',9,3,'SwiftStack'),(274915,826,229,'2014-01-19 10:00:05','2014-01-17 09:56:52','    lower the default yield frequency for bulk requests\n    \n    closes bug 1270246\n    \n    DocImpact\n    \n    Change-Id: If7f484d1a580e991896ac55f822655110266f3fa\n',7,3,'SwiftStack'),(274917,869,869,'2014-01-17 11:45:57','2014-01-17 11:45:57','    Fix swift-dispersion-report when partitions overlap\n    \n    swift-dispersion-report tries to avoid checking a partition more than\n    once, so it keeps track of partitions already queried and skips\n    duplicates.\n    \n    swift-dispersion-report also keeps track of the number of successful\n    responses; it counts the number of expected replicas to find, and also\n    counts the number of replicas actually found, and tells the operator\n    if the numbers differ.\n    \n    However, in the case that a partition was duplicated, the\n    expected-responses counter was incremented, but the actual check was\n    skipped, so it looked as though some copies were missing. Now we only\n    increment the expected-responses counter if we\'re actually going to\n    perform the check.\n    \n    Change-Id: I22ac2b8066b62ca7c8ebf099c9f602118bb1a298\n',2,2,'SwiftStack'),(274919,826,826,'2014-01-15 14:31:56','2014-01-15 14:31:56','    Make test_close_error run much faster\n    \n    Change-Id: Iddeab82eed2f781837ab41c9e99e8450bb14a974\n',1,1,'Red Hat'),(274921,826,826,'2014-01-10 11:06:27','2013-12-09 20:52:58','    Adjust unit tests to clarify existing device usage\n    \n    Most of the unit tests run with check_mount=False, so if a device is\n    chosen by a test that was not created ahead of time, the test will still\n    work, since the \"tmp\" directory creation in DiskFile.create() using\n    mkdirs(), thereby creating the a directory for the device (perhaps that\n    should be fixed).\n    \n    This change refactors the test code to use the exiting device\n    explicitly.\n    \n    Change-Id: Ib4fbf069596672bb0b98f41573f312eabde38f98\n',90,69,'Red Hat'),(274923,229,229,'2014-01-17 14:22:46','2014-01-15 12:05:08','    release notes and authors update for 1.12\n    \n    Change-Id: I76c13957a7758287fd40dd2e9fb85277d9288977\n',73,0,'SwiftStack'),(274925,826,826,'2014-01-19 21:57:10','2014-01-13 19:38:09','    Fix up SAIO to use new gatekeeper\n    \n    Fix up the SAIO default proxy-server pipeline to use the new\n    gatekeeper and update to follow the pipeline ordering from proxy\n    sample.\n    \n    Change-Id: Iaa4de7abd7fc557cafe6fe40668973e9fc142ca3\n',4,1,'Red Hat'),(274927,826,826,'2014-01-23 10:06:10','2014-01-22 16:18:48','    Add debug logger on per-test proxy-server\n    \n    To help debug problems with the proxy-server app setup for each class,\n    we add a debug logger so that on failure we can see what requests were\n    actually sent.\n    \n    Additionally, we move the set_http_connect() call to the same relative\n    position as the one before it for clarity of intent.\n    \n    Related bug 1271962\n    \n    Change-Id: Idc301c06e114b11c358ee4fbc0b2b70ec7743091\n',2,1,'Red Hat'),(274929,826,826,'2014-01-19 16:29:45','2014-01-16 00:49:28','    Use a tempfile.mkdtemp() based temporary directory\n    \n    Change-Id: Ie0e8137615348b130b67323d0d2913dc5ebfd5fb\n',47,56,'Red Hat'),(274931,826,4075,'2014-01-23 15:04:23','2014-01-17 01:15:22','    Add documentation for GateKeeper\n    \n    The purpose of GateKeeper mostly relates to the development of new swift code,\n    so I threw together a guide for development_middleware that covers some basics\n    with a eye towards metadata handling in-particular.\n    \n    I also fixed up some missing autodoc\'s, split out middleware autodoc and added\n    some ref\'s here and about so I could link to them from the\n    development_middleware guide.\n    \n    DocImpact\n    Change-Id: I20dd942ea8df9e33c3e794cb49669ffa1332c63e\n',555,175,'Rackspace'),(274933,26,26,'2014-01-16 08:01:10','2014-01-04 06:22:46','    ismount should not raise exceptions\n    \n    The changes from using os.path.ismount to using\n    swift.common.utils.ismount has caused problems since the new one\n    raises exceptions in cases where the old one did not. Daemons have\n    been encountering this and exiting; servers have been 500ing instead\n    of 507ing in this case, changing handoff behaviors, etc.\n    \n    Since the new one was specifically written and tested for this new\n    behavior, I left that original function as ismount_raw and made\n    ismount do what it did before.\n    \n    If there really isn\'t some reason for this new behavior, I\'ll be glad\n    to get rid of ismount_raw and just keep ismount. I couldn\'t see any\n    reason for the new behavior myself.\n    \n    Change-Id: I2b5b17f9ed9656cd8804a5ed568170697d0b183d\n',48,3,'Rackspace'),(274935,869,4064,'2014-01-24 13:37:45','2014-01-22 13:03:51','    Add flag to stop swob from always using absolute location.\n    \n    This is needed for SOS (along with patch\n    https://github.com/dpgoetz/sos/pull/37)\n    to work with swift 1.12 . By spec you should always use the absolute\n    location but this causes a problem with staticweb over a cdn using a\n    cname. Basically you want to be able to forward the browser to a\n    relative location instead of whatever full url the proxy server\n    thinks you are using.\n    \n    Change-Id: I3fa1d415bf9b566be069458b838f7e65db0c4f39\n',44,1,'Rackspace'),(274936,4075,4075,'2014-01-24 01:24:08','2014-01-24 01:24:05','    Move test.unit.locale out of gettext\'s way\n    \n    When I run unittests on my laptop I get an ImportError from gettext who tries\n    to \"from locale import normalize\" and says \"ImportError: cannot import name\n    normalize\".  Whit this patch unittests works, not sure why this problem\n    doesn\'t show up in my other dev environments.\n    \n    Also this seems like good form since \'locale\' is already a stdlib module.\n    \n    Change-Id: If0fcd66ce391665b4e4127c610de3246db409a68\n',84,84,'Rackspace'),(274938,340,340,'2014-01-23 12:43:08','2014-01-20 13:30:58','    Add secondary groups to user during privilege escalation\n    \n    setgid provides the primary group, setgroups sets the secondary\n    groups. Prior to this patch, we would do a setgroups with an empty\n    list, effectively wiping secondary groups. We now verify which\n    secondary groups the user is member of and escalate the privileges\n    accordingly.\n    \n    Change-Id: I33a10edd448b3ac5aa758a8d1d70e582cf421c7d\n    Closes-Bug: 1269473\n',9,2,'iWeb | Internap'),(274940,229,4064,'2014-01-25 15:50:24','2014-01-22 13:03:51','    Add flag to stop swob from always using absolute location.\n    \n    This is a backport of commit 89deaf5f3cb062cc2c2d7d7d365e84ec2e41a511\n    \n    This is needed for SOS (along with patch\n    https://github.com/dpgoetz/sos/pull/37)\n    to work with swift 1.12 . By spec you should always use the absolute\n    location but this causes a problem with staticweb over a cdn using a\n    cname. Basically you want to be able to forward the browser to a\n    relative location instead of whatever full url the proxy server\n    thinks you are using.\n    \n    Change-Id: I28dcbd779d2aa4a6e636c956b058670b8e4b2fd7\n',44,2,'Rackspace'),(274942,4064,4064,'2014-01-28 14:17:59','2014-01-27 15:32:01','    Config option to lower the timeout for recoverable object GETs.\n    \n    Change-Id: I71f9824559126e4025e7629715ab9dac64231e09\n',31,7,'Rackspace'),(274944,869,869,'2013-12-19 12:49:30','2013-12-18 10:43:29','    Some functional tests for object versioning\n    \n    Also fix some exception-handling stuff in functional tests; at some\n    point, ResponseError() started needing two more parameters, but the\n    functional tests (not swift_test_client, just tests.py) still had a\n    couple spots that were not passing in the new params. Now they\'re\n    optional again, and if you omit them, then the stringification of the\n    ResponseError is just a little less useful than it could be.\n    \n    Change-Id: I38968c4b590fc04b97b85c5f974c8648291a6689\n',96,6,'SwiftStack'),(274946,26,26,'2014-01-23 01:05:16','2014-01-23 01:05:16','    Skip delete_at_update for replication requests\n    \n    Requests through the object server that are from backend replication\n    should not send x-delete-at updates to the .expiring_objects account.\n    Replication is just moving data around or making new replicas, not\n    creating new data from nothing.\n    \n    Change-Id: I324864face3ff559822c7a50c50e675e8b889b48\n',22,0,'Rackspace'),(274948,4080,4080,'2014-01-20 07:13:20','2014-01-20 07:07:25','    Make swift-recon usable on hosts without IPv6\n    \n    Fixes a bug when swift-recon --sockstat is used on hosts without\n    IPv6 support.\n    \n    Tested by disabling IPv6 on Ubuntu 12.04 LTS:\n    \n    Add \"ipv6.disable=1\" to GRUB_CMDLINE_LINUX_DEFAULT in /etc/default/grub\n    sudo update-grub\n    sudo /sbin/reboot\n    \n    Closes-Bug: 1270711\n    Change-Id: Ib31a059e412ac68ca0a3faef4201fec7560d1178\n',1,1,'Red Hat'),(274950,26,26,'2014-01-23 01:16:05','2014-01-16 01:58:49','    Container Sync: Simple HTTP Proxy load balancing\n    \n    Change-Id: I021b043b927153bacff48cae648d4d8c5bbad765\n',36,7,'Rackspace'),(274953,4087,4087,'2014-01-31 18:56:26','2014-01-31 18:56:26','    Add Requirement for Storage Policy Names\n    \n    With recent patches we\'ve added exposure of policy names to clients\n    so to avoid confusion we have decided to require nameing them in\n    swift.conf (before you could get away without a name).\n    \n    Change-Id: I576f7e9e03be97addaae479f1865fd7791581cc6\n    Implements: blueprint storage-policies\n',49,8,'Intel'),(274955,229,4087,'2014-02-06 14:48:41','2014-01-30 17:23:36','    Replace Policy Index with Policy Name in Response Headers\n    \n    The policy index is intended for internal use only so response\n    headers should always use the name, not the index.\n    \n    Change-Id: I9395e99994fd412d40877340419f90b08b911dd4\n    Implements: blueprint storage-policies\n',7,5,'Intel'),(274956,4087,4087,'2014-02-04 07:52:51','2013-10-16 12:38:14','    Add storage policy support for the Replicator\n    \n    Adds storoge policy awareness to the replicator service so that it\n    processes all policy rings according to their type. Thus it also\n    extends storage policies to include a \'type\' element per policy.\n    The \'type\' will default to \'replication\' if not specified. Below\n    it is specified for example purposes:\n    \n    [storage-policy:0]\n    name = chicken\n    type = replication\n    \n    Unit test code updated to both support policy plumbing as well\n    as provide coverage for testing with 2 policies in selected\n    tests.\n    \n    Change-Id: I721ffc36dfca2bb81f1ce00c3c3d6aec9e27bf43\n    Implements: blueprint storage-policies\n',298,100,'Intel'),(274958,4087,4087,'2014-02-04 09:10:10','2014-01-28 12:06:56','    Add Storage Policy Support for /Info\n    \n    Registers policies to report on /info enpoint both the policy names\n    and the types of policies.\n    \n    Also updated test_storage_policies.py to use the new @patch_policies\n    to be consistent with other policy related test code.\n    \n    Change-Id: I28db4d1b501fd193db93f18379414cd0dc77ac17\n    Implements: blueprint storage-policies\n',53,31,'Intel'),(274960,4064,4064,'2014-01-29 14:08:19','2014-01-29 08:33:27','    Add a way to ratelimit all writes to an account\n    \n    This is in case a cluster gets a problem user who has distributed the\n    writes to a bunch of containers but is just taking too much of the\n    cluster\'s resources.\n    \n    Change-Id: Ibd2ffd0e911463a432117b478585b9f8bc4a2495\n',151,71,'Rackspace'),(274962,4533,4533,'2014-01-31 19:54:02','2014-01-31 18:58:52','    Attempt to fix periodic memcache timeout test\n    \n    Not sure this will really fix the issue, but made a small change that\n    seemed to make more sense for the flow of the test.\n    \n    Closes-Bug: #1272503\n    Change-Id: Ifb25ed7c4a42b11f74d865787f63fea4e0beb745\n',1,2,'Rackspace'),(274964,563,563,'2014-01-17 11:28:02','2014-01-16 13:39:08','    Remove dependencies on pep8, pyflakes and flake8\n    \n    They should be determined by the hacking dependency\n    implicitely.\n    \n    Change-Id: I8805f7b0ef9f2b1f59be342e9c6d032330707688\n',1,4,'SUSE'),(274966,5251,5251,'2014-01-29 13:02:54','2013-11-13 20:55:14','    Privileged acct ACL header, new ACL syntax, TempAuth impl.\n    \n     * Introduce a new privileged account header: X-Account-Access-Control\n     * Introduce JSON-based version 2 ACL syntax -- see below for discussion\n     * Implement account ACL authorization in TempAuth\n    \n    X-Account-Access-Control Header\n    -------------------------------\n    \n    Accounts now have a new privileged header to represent ACLs or any other\n    form of account-level access control.  The value of the header is an opaque\n    string to be interpreted by the auth system, but it must be a JSON-encoded\n    dictionary.  A reference implementation is given in TempAuth, with the\n    knowledge that historically other auth systems often use TempAuth as a\n    starting point.\n    \n    The reference implementation describes three levels of account access:\n    \"admin\", \"read-write\", and \"read-only\".  Adding new access control\n    features in a future patch (e.g. \"write-only\" account access) will\n    automatically be forward- and backward-compatible, due to the JSON\n    dictionary header format.\n    \n    The privileged X-Account-Access-Control header may only be read or written\n    by a user with \"swift_owner\" status, traditionally the account owner but\n    now also any user on the \"admin\" ACL.\n    \n    Access Levels:\n    \n    Read-only access is intended to indicate to the auth system that this\n    list of identities can read everything (except privileged headers) in\n    the account.  Specifically, a user with read-only account access can get\n    a list of containers in the account, list the contents of any container,\n    retrieve any object, and see the (non-privileged) headers of the\n    account, any container, or any object.\n    \n    Read-write access is intended to indicate to the auth system that this\n    list of identities can read or write (or create) any container.  A user\n    with read-write account access can create new containers, set any\n    unprivileged container headers, overwrite objects, delete containers,\n    etc.  A read-write user can NOT set account headers (or perform any\n    PUT/POST/DELETE requests on the account).\n    \n    Admin access is intended to indicate to the auth system that this list of\n    identities has \"swift_owner\" privileges.  A user with admin account access\n    can do anything the account owner can, including setting account headers\n    and any privileged headers -- and thus changing the value of\n    X-Account-Access-Control and thereby granting read-only, read-write, or\n    admin access to other users.\n    \n    The auth system is responsible for making decisions based on this header,\n    if it chooses to support its use.  Therefore the above access level\n    descriptions are necessarily advisory only for other auth systems.\n    \n    When setting the value of the header, callers are urged to use the new\n    format_acl() method, described below.\n    \n    New ACL Format\n    --------------\n    \n    The account ACLs introduce a new format for ACLs, rather than reusing the\n    existing format from X-Container-Read/X-Container-Write.  There are several\n    reasons for this:\n     * Container ACL format does not support Unicode\n     * Container ACLs have a different structure than account ACLs\n      + account ACLs have no concept of referrers or rlistings\n      + accounts have additional \"admin\" access level\n      + account access levels are structured as admin > rw > ro, which seems more\n        appropriate for how people access accounts, rather than reusing\n        container ACLs\' orthogonal read and write access\n    \n    In addition, the container ACL syntax is a bit arbitrary and highly custom,\n    so instead of parsing additional custom syntax, I\'d rather propose a next\n    version and introduce a means for migration.  The V2 ACL syntax has the\n    following benefits:\n     * JSON is a well-known standard syntax with parsers in all languages\n     * no artificial value restrictions (you can grant access to a user named\n        \".rlistings\" if you want)\n     * forward and backward compatibility: you may have extraneous keys, but\n        your attempt to parse the header won\'t raise an exception\n    \n    I\'ve introduced hooks in parse_acl and format_acl which currently default\n    to the old V1 syntax but tolerate the V2 syntax and can easily be flipped\n    to default to V2.  I\'m not changing the default or adding code to rewrite\n    V1 ACLs to V2, because this patch has suffered a lot of scope creep already,\n    but this seems like a sensible milestone in the migration.\n    \n    TempAuth Account ACL Implementation\n    -----------------------------------\n    \n    As stated above, core Swift is responsible for privileging the\n    X-Account-Access-Control header (making it only accessible to swift_owners),\n    for translating it to -sysmeta-* headers to trigger persistence by the\n    account server, and for including the header in the responses to requests\n    by privileged users.  Core Swift puts no expectation on the *content* of\n    this header.  Auth systems (including TempAuth) are responsible for\n    defining the content of the header and taking action based on it.\n    \n    In addition to the changes described above, this patch defines a format\n    to be used by TempAuth for these headers in the common.middleware.acl\n    module, in the methods format_v2_acl() and parse_v2_acl().  This patch\n    also teaches TempAuth to take action based on the header contents.  TempAuth\n    now sets swift_owner=True if the user is on the Admin ACL, authorizes\n    GET/HEAD/OPTIONS requests if the user is on any ACL, authorizes\n    PUT/POST/DELETE requests if the user is on the admin or read-write ACL, etc.\n    \n    Note that the action of setting swift_owner=True triggers core Swift to\n    add or strip the privileged headers from the responses.  Core Swift (not\n    the auth system) is responsible for that.\n    \n    DocImpact: Documentation for the new ACL usage and format appears in\n    summary form in doc/source/overview_auth.rst, and in more detail in\n    swift/common/middleware/tempauth.py in the TempAuth class docstring.\n    I leave it to the Swift doc team to determine whether more is needed.\n    \n    Change-Id: I836a99eaaa6bb0e92dc03e1ca46a474522e6e826\n',1160,82,'SwiftStack'),(274968,826,826,'2014-02-03 16:01:14','2014-02-03 16:01:14','    Reduce line count by two\n    \n    Change-Id: Ib0ee2bb5b202966d3d07c754656c92006149af9c\n',2,4,'Red Hat'),(274970,283,283,'2014-01-13 13:25:02','2013-11-26 12:14:15','    Fix container quota MW for handling a bad source path\n    \n    The copy source must be container/object.\n    This patch avoids the server to return\n    an internal server error when user provides\n    a path without a container.\n    \n    Fixes: bug #1255049\n    Change-Id: I1a85c98d9b3a78bad40b8ceba9088cf323042412\n',83,24,'eNovance'),(274972,4080,4080,'2014-01-31 15:34:37','2013-12-17 09:10:31','    Add some tests for bin/swift-recon\n    \n    Fix also minor bug in zone filtering when zone set to 0.\n    \n    Moved bin/swift-recon to swift/cli/recon.py, which makes\n    it possible to import it without using some scary hacks.\n    bin/swift-recon is now created by setup.py install.\n    \n    Closes-Bug: #1261692\n    Change-Id: Id0729991c8ece73604467480dbf93fec7d8eb196\n',1036,882,'Red Hat'),(274974,229,229,'2013-12-28 10:57:05','2013-12-28 08:15:15','    Documentation of the logs formats used in Swift\n    \n    Change-Id: I402014627bab7113105a6a63c0b0ce1267735ca0\n',96,0,'SwiftStack'),(274976,5599,5599,'2014-01-30 23:04:46','2014-01-27 01:08:37','    Add missing sample config of object-replicator\n    \n    Change-Id: I2bca67023aeb9a012927c69e23d582d4a0ff2098\n',19,0,'NTT'),(274978,869,869,'2013-12-19 19:06:21','2013-12-19 19:03:06','    Sanify handoff search depth with non-integer replica counts\n    \n    On GET, the proxy will go search the primary nodes plus some number of\n    handoffs for the account/container/object before giving up and\n    returning a 404. That number is, by default, twice the ring\'s replica\n    count. This was fine if your ring had an integral number of replicas,\n    but could lead to some slightly-odd behavior if you have fractional\n    replicas.\n    \n    For example, imagine that you have 3.49 replicas in your object ring;\n    perhaps you\'re migrating a cluster from 3 replicas to 4, and you\'re\n    being smart and doing it a bit at a time.\n    \n    On an object GET that all the primary nodes 404ed, the proxy would\n    then compute 2 * 3.49 = 6.98, round it up to 7, and go look at 7\n    handoff nodes. This is sort of weird; the intent was to look at 6\n    handoffs for objects with 3 replicas, and 8 handoffs for objects with\n    4, but the effect is 7 for everybody.\n    \n    You also get little latency cliffs as you scale up replica counts. If,\n    instead of 3.49, you had 3.51 replicas, then the proxy would look at 8\n    handoff nodes in every case [ceil(2 * 3.51) = 8], so there\'d be a\n    small-but-noticeable jump in the time it takes to produce a 404.\n    \n    The fix is to compute the number of handoffs based on the number of\n    primary nodes for the partition, not the ring\'s replica count. This\n    gets rid of the little latency cliffs and makes the behavior more like\n    what you get with integral replica counts.\n    \n    If your ring has an integral number of replicas, there\'s no behavior\n    change here.\n    \n    Change-Id: I50538941e571135299fd6b86ecd9dc780cf649f5\n',7,7,'SwiftStack'),(274980,826,826,'2014-02-03 17:00:53','2014-02-03 17:00:53','    Fix up double mocking of swob.Request.__init__\n    \n    From Pete Zaitcev\'s work on PBes (https://review.openstack.org/47713):\n    \n      Fixes up a problem with double mocking of Request.__init__, which\n      should be seen in stock code as well.\n    \n    Change-Id: Ibf8103425404b03aaab9a4e97a3a62d0fb8dbb14\n',57,57,'Red Hat'),(274982,42,42,'2014-02-04 11:20:56','2014-02-04 11:20:56','    Fix numbering of steps in proxy section of install_multinode\n    \n    Steps were numbered 1, 2, (note reset), 1, 2, etc. Then a user says:\n    \"I\'m on Step 2 in Proxy section, er...\"\n    \n    See a bug, fix a bug.\n    \n    Change-Id: If6f32b3a33e1070e705812df7ab299e6736c9806\n',1,1,'Red Hat'),(274984,869,869,'2014-01-16 12:55:50','2014-01-16 12:50:48','    Let swift-object-info skip etag verification\n    \n    Now swift-object-info has a \"-n\" option that will cause the etag\n    verification to be skipped; on large objects, the etag verification\n    takes the vast majority of the runtime, and sometimes you just want to\n    know which account owns the 5 GB monstrosity without waiting around while\n    its checksum is verified.\n    \n    Change-Id: Id284570633eb7b98046cdb948d7c37a152de1195\n',42,19,'SwiftStack'),(274986,869,869,'2014-02-03 18:29:48','2013-11-21 17:31:16','    Move all DLO functionality to middleware\n    \n    This is for the same reason that SLO got pulled into middleware, which\n    includes stuff like automatic retry of GETs on broken connection and\n    the multi-ring storage policy stuff.\n    \n    The proxy will automatically insert the dlo middleware at an\n    appropriate place in the pipeline the same way it does with the\n    gatekeeper middleware. Clusters will still support DLOs after upgrade\n    even with an old config file that doesn\'t mention dlo at all.\n    \n    Includes support for reading config values from the proxy server\'s\n    config section so that upgraded clusters continue to work as before.\n    \n    Bonus fix: resolve \'after\' vs. \'after_fn\' in proxy\'s required filters\n    list. Having two was confusing, so I kept the more-general one.\n    \n    DocImpact\n    \n    blueprint multi-ring-large-objects\n    \n    Change-Id: Ib3b3830c246816dd549fc74be98b4bc651e7bace\n',1517,1424,'SwiftStack'),(274988,4067,4067,'2014-02-05 22:50:31','2014-02-05 22:50:31','    Fix a couple ifs in account quota middleware.\n    \n    Unless I\'m misunderstanding something, this is better/more\n    correct.\n    \n    Change-Id: I6c62fbfdddea908a2671021a34fa25600b0dff45\n',2,2,'Rackspace'),(274990,5623,5623,'2014-02-06 16:38:34','2014-02-04 16:31:47','    Make .expiring_objects account name configurable\n    \n    The account which tracks objects scheduled for deletion had its name\n    hard-coded to \'expiring_objects\'. This is made configurable via\n    expiring_objects_account_name option. Backend file-systems\n    integration efforts may want to treat these \"special\" accounts in a\n    different way.\n    \n    This would still go undocumented, hence \'pseudo-hidden\'.\n    \n    UpgradeImpact: None as the default value would continue to be the same\n                   which is \'.expiring_objects\'.\n    \n    Change-Id: I1a093b0d0e2bdd0c3d723090af03fc0adf2ad7e3\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n',6,3,'Red Hat'),(274992,4067,4067,'2014-02-06 17:10:19','2014-02-06 17:10:19','    Fix a comment in bulk middleware.\n    \n    Change-Id: I3a65d090c5c6ce42639e0af0fcac738a12e52252\n',2,2,'Rackspace'),(274994,4067,4067,'2014-02-06 23:14:45','2014-02-06 23:14:45','    Fix a comment in SLO middleware\n    \n    Change-Id: I6ef435db55eb6cac5a92d9ef0f7ac3eaf271761d\n',1,1,'Rackspace'),(274995,4080,4080,'2014-02-05 16:20:09','2014-02-05 06:51:46','    Add tests for swift-ring-builder\n    \n    Add some tests for essential methods in swift-ring-builder.\n    Tests for removing or changing device settings are executed\n    with different search values to cover many possible command\n    line arguments.\n    \n    Currently tested methods:\n    \n    - create ring\n    - add device\n    - remove device\n    - set weight\n    - set info\n    - set min_part_hours\n    - set replicas\n    \n    Tests use swift.common.ring.RingBuilder to verify actions.\n    \n    Catching and testing output from print statements is not\n    tested, because this requires redirecting sys.stdout during\n    tests and that might have some sideeffects for testing tools.\n    \n    bin/swift-ring-builder has been moved to swift/cli/ringbuilder.py\n    and slightly modified to work as before (mainly due to no more\n    existing global variables since that part of the code has been\n    moved inside a main() function).\n    \n    Change-Id: Ia63f59a8faca1fad990784f27532ca07a2125454\n',1067,849,'Red Hat'),(274997,4067,4067,'2014-02-10 14:31:14','2014-02-10 14:31:14','    Fix recon docs\n    \n    Change-Id: Icaa0f61e5796253dcc57b8c005577890de8aa537\n',2,2,'Rackspace'),(274998,826,826,'2014-02-03 00:47:09','2014-02-03 00:42:39','    Attempt to make test_memcache_pool_timeout stable\n    \n    Too much time can pass after we create a set of co-routines and when\n    the parent co-routine continues is setup and staging. Instead, we\n    perform all the setup and staging, let the system run and then verify\n    the final state after all the dust settles.\n    \n    Change-Id: I801148e380807119d3d6da5a24ba9cced39fb339\n    Closes-Bug: 1272503\n',12,14,'Red Hat'),(275000,4080,4080,'2014-02-06 09:44:58','2014-01-09 10:15:50','    Remove swiftclient dependency\n    \n    Removes the requirement for swiftclient in swift-dispersion-report\n    and swift-dispersion-populate. To prevent a dependency on\n    keystoneclient and to avoid reinventing the wheel with an internal\n    keystoneclient, authentication with keystone is only supported if\n    swiftclient is available. If not, only auth v1 is supported.\n    \n    The dependency in swift/container/sync.py has also been removed.\n    \n    Implements: blueprint remove-swiftclient-dependency\n    \n    Change-Id: I6ec3b3c85a67b9ab6eb04b90ffc16daf1600e8a7\n',231,15,'Red Hat'),(275002,4083,4083,'2014-02-12 11:18:19','2014-02-12 11:18:19','    Remove duplicate doc entry for swob\n    \n    Fixes swob module being referenced twice in misc.rst\n    resulting in duplicate sections in the doc.\n    \n    Also fixes build_sphinx warning for section underline\n    too short in middleware.rst.\n    \n    Change-Id: Ibe44895f933a6503ca04ccd3a084bc0cfd913213\n',1,10,'HP'),(275003,869,869,'2014-02-11 10:22:13','2014-02-05 11:57:20','    Ensure swift.source is set for DLO/SLO requests\n    \n    SLO was setting it sometimes (the PUT path), but not others (the GET\n    path), and DLO just wasn\'t doing it at all. One could already\n    distinguish DLO/SLO internal requests by the user agent, but we should\n    set swift.source too.\n    \n    Change-Id: I5d5b7dd49bd1522a9c830d0abd21fff92ae79a39\n',22,2,'SwiftStack'),(275005,4080,4080,'2014-02-13 10:51:27','2014-02-12 20:26:29','    Don\'t create bin/* files magically\n    \n    Just use import to make scripts available in bin/ instead of\n    creating these during setup.py install.\n    \n    Change-Id: I7318bbb77f6564ed58736887e711e1c497873471\n',50,4,'Red Hat'),(275007,4087,4087,'2014-02-04 08:40:06','2014-01-08 12:39:07','    Add Storage Policy Support to list_endpoints\n    \n    This patch makes list_endpoints policy aware and adds plumbing required\n    for existing test cases to pass as well as unit tests as needed to\n    assure policy coverage.\n    \n    Change-Id: Ia866ddc14ffafda0c791b5fe4f2e81c4178405c2\n    Implements: blueprint storage-policies\n',79,6,'Intel'),(275009,3090,3090,'2014-02-13 16:45:07','2014-02-13 16:45:07','    small typo in cli/recon.py\n    \n    Change \"Can\'t check for async\'s on non object servers.\" to \"Can\'t check\n    asyncs on non object servers.\"\n    \n    Change-Id: I04f09187da73bb3709d11d8c6f3bb1901005a0cc\n',1,1,'Collabora, Ltd'),(275011,869,869,'2014-02-12 21:43:46','2014-02-12 15:48:29','    Small efficiency improvement for SLO range GET\n    \n    If a client sends a GET request with a Range header for a SLO\n    manifest, SLO would notice this and perform a second GET request, sans\n    Range header, to retrieve the manifest body. Most of the time, this is\n    the sane thing to do: a subset of a SLO manifest is pretty much\n    useless. However, if the client has requested the first N bytes of the\n    large object, and the SLO manifest has N or fewer bytes, then the\n    response will actually have the whole manifest in it, so SLO doesn\'t\n    need to make a second request. (It\'s not wrong, just inefficient.)\n    \n    Fortunately, ranged GET responses come with a Content-Range header\n    that tells us first byte, last byte, and total content length. Now SLO\n    detects whether or not a ranged GET response contains the full\n    manifest, and if so, just uses the existing response instead of making\n    another.\n    \n    Change-Id: I63b991e08a1165eb3e88bd0620a1e64ef056fec6\n',137,7,'SwiftStack'),(275013,283,283,'2014-02-04 12:30:20','2013-12-10 18:31:55','    Handle COPY verb in container quota middleware\n    \n    The patch fix the ability to bypass the account\n    quota using the COPY verb. The quotas for destination\n    container are now checked before the copy.\n    \n    Change-Id: I9f409ea6c0893f36972aa1fabe31fb143e151ab5\n    Fixes: bug #1259565\n',73,6,'eNovance'),(275015,229,229,'2014-02-12 16:59:35','2014-02-04 15:17:11','    Added docs about the swift_source log field\n    \n    Change-Id: I934230a006c856de844d8580f3b57f38a9845844\n',41,1,'SwiftStack'),(275017,4080,4080,'2014-02-17 19:38:26','2014-02-17 10:31:20','    Allow log disable in account/container server\n    \n    Logging can be disabled in the object server, but not in the\n    account and container server though both sample configs already\n    include that setting. This patch allows to disable logging for\n    account and container server as well.\n    \n    Functionality is ensured by some additional tests.\n    \n    Closes-Bug: 1280954\n    Change-Id: Ia4e87911863089c3bea093d9f181ff29e9e963eb\n',67,26,'Red Hat'),(275019,1020,1020,'2014-02-18 11:46:31','2014-02-18 09:41:25','    Improve StaticWeb 404 on web-listings/index\n    \n    A common scenario is for users to make a container public via an ACL.\n    They can then use a browser to display the objects in the container.\n    Next, they enable StaticWeb with something such as\n    \"X-Container-Meta-Web-Index:index.html\" -- but then get confused\n    because they get 404 Not Found (when index.html does not exist).\n    \n    For someone who understands what they are doing, this makes sense.\n    However, we\'ve had several customer escalations because of this.\n    Usually, they are just playing with our GUI and have no intention\n    of using StaticWeb for real -- the 404 looks like something is\n    broken; not the correct response.\n    \n    The solution is to provide a better error message. This message is only\n    shown when StaticWeb is refusing to give a listing -- other 404 situations\n    are not affected. Also, a custom 404 error page is not affected.\n    \n    Change-Id: I3ba8c48e0ce148d8e91a1e0dc16a0d37a692a24e\n',42,1,'HP'),(275020,569,569,'2014-02-20 16:15:48','2014-02-07 16:06:12','    Fix misspellings in swift\n    \n    Fix misspellings detected by:\n    * pip install misspellings\n    * git ls-files | grep -v locale | misspellings -f -\n    \n    Change-Id: I6594fc4ca5ae10bd30eac8a2f2493a376adcadee\n    Closes-Bug: #1257295\n',16,16,'Intel'),(275022,869,869,'2014-02-20 14:54:26','2014-02-12 18:29:12','    Support If-[None-]Match for object HEAD, SLO, and DLO\n    \n    I moved the checking of If-Match and If-None-Match out of the object\n    server\'s GET method and into swob so that everyone can use it. The\n    interface is similar to the Range handling; make a response with\n    conditional_response=True, and you get handing of If-Match and\n    If-None-Match.\n    \n    Since the only users of conditional_response are object GET, object\n    HEAD, SLO, and DLO, this has the effect of adding support for If-Match\n    and If-None-Match to just the latter three places and nowhere\n    else. This makes object GET and HEAD consistent for any kind of\n    object, large or small.\n    \n    This also fixes a bug where various conditional headers (If-*) were\n    passed through to the object server on segment requests, which could\n    cause segment requests to fail with a 304 or 412 response. Now only\n    certain headers are copied to the segment requests, and that doesn\'t\n    include the conditional ones, so they can\'t goof up the segment\n    retrieval.\n    \n    Note that I moved SegmentedIterable to swift.common.request_helpers\n    because it sprouted a transitive dependency on swob, and leaving it in\n    utils caused a circular import.\n    \n    Bonus fix: unified the handling of DiskFileQuarantined and\n    DiskFileNotFound in object server GET and HEAD. Now in either case, a\n    412 will be returned if the client said \"If-Match: *\". If not, the\n    response is a 404, just like before.\n    \n    Closes-Bug: 1279076\n    Closes-Bug: 1280022\n    Closes-Bug: 1280028\n    \n    Change-Id: Id2ee78346244d516b980202e990aa38ce6812de5\n',705,256,'SwiftStack'),(275024,4080,4080,'2014-02-10 16:50:18','2013-12-29 16:41:58','    Limit logged headers in proxy_logging middleware\n    \n    Currently all headers are logged if access_log_headers are enabled in\n    proxy_logging middleware. By adding the option access_log_headers_only\n    it is now possible to limit the logged headers to the given header values.\n    \n    DocImpact\n    Change-Id: I0a1e40567c9eddc9bb00dd00373dc6eeb33d347c\n',38,3,'Red Hat'),(275026,869,869,'2014-02-20 21:03:51','2014-02-20 20:33:00','    Raise error on long or short DLO\n    \n    The GET response for a DLO has a Content-Length that\'s computed from\n    the container listing, but the response body\'s length is determined by\n    the segments. If a segment grows or shrinks between when the headers\n    are sent and when the segment is requested, this confuses clients.\n    \n    For example, if the DLO is longer than its Content-Length and the\n    client sends another request on the same TCP connection, then it can\n    get leftover object bytes instead of an HTTP status line.\n    Alternately, if the headers it sends fill up the TCP buffers since\n    Swift won\'t read them until the first response is done, then deadlock\n    hilarity ensues.\n    \n    If the DLO is shorter than its Content-Length, you\'re pretty much\n    guaranteed a deadlock: the client is waiting for the rest of the\n    response, and the server is waiting for a new request.\n    \n    Now SegmentedIterable detects both these conditions and raises an\n    exception so that the TCP connection gets torn down. It can\'t save\n    this request, but it can stop the next one from getting hosed too.\n    \n    Change-Id: Icf79ba046ef7aaaab49ce6d0b33147332c967afc\n',103,2,'SwiftStack'),(275028,10,40,'2014-01-26 10:45:19','2013-08-12 13:04:40','    Allow multiple storage_domain in cname_lookup.\n    \n    Implements: blueprint multiple-domains-in-domain-remap\n    Change-Id: Ia647f6777717e9ff4955ea66b29f072ac03d2785\n',62,6,'eNovance'),(275030,869,869,'2014-02-20 23:01:00','2014-02-20 23:01:00','    Functional tests for DLO If-Match/If-None-Match\n    \n    Change-Id: I4a731a3836eb0f58b897ee43477b3b76d2344a81\n',44,0,'SwiftStack'),(275032,869,869,'2014-02-20 22:01:39','2014-02-20 22:01:39','    Functional tests for SLO If-Match/If-None-Match\n    \n    Change-Id: Ib70f579f5edebc7b1586e5f51fee5769bcaa9931\n',44,0,'SwiftStack'),(275034,4083,4083,'2014-02-19 18:32:53','2014-02-18 14:07:37','    Fix invalid account acl generating 500 response.\n    \n    Sending an account POST with an X-Account-Access-Control\n    header value that is valid json but not a valid ACL was\n    causing a 500 Internal Error if the value did not parse\n    to a dict due to an exception being raised in tempauth.py.\n    \n    This patch modifies acl.py to check that the header value\n    is both json and parses to a dict. The existing\n    tests are extended to cover these invalid header values.\n    \n    This patch also enables json encoded dicts with whitespace\n    (e.g. \'{ }\') to be accepted as a value for\n    X-Account-Access-Control in the same way that \'{}\' is.\n    These previously resulted in a 400 response.\n    \n    Closes-bug: 1281626\n    \n    Change-Id: Ia06ba9c9d16f749f801a8158e73d3898c4a42888\n',47,7,'HP'),(275036,229,229,'2014-02-23 10:22:34','2014-02-23 10:22:34','    tabs to spaces\n    \n    Change-Id: Ie3d3af87df8f72792abf345c0d4dcfe2be1f4141\n',11,11,'SwiftStack'),(275038,1195,1195,'2014-02-20 19:24:33','2014-02-20 19:19:09','    Alphabetized items under \"Misc\" in source documentation\n    \n    I alphabetized the items under \"Misc\" in the source documentation to\n    make them easier to locate.\n    \n    Change-Id: I1badca7a97e7d887fefac0be2e2208eec52cec60\n',54,54,'Rackspace'),(275040,1195,1195,'2014-02-23 15:03:57','2014-02-20 20:27:20','    Alphabetized items under \"Middleware\" in source documentation\n    \n    I alphabetized the items under \"Middleware\" in the source documentation\n    to make them easier to locate.\n    \n    Change-Id: I3a0108c89d16ef07b7623dda518b3096c2686002\n',101,103,'Rackspace'),(275042,869,869,'2014-02-21 16:49:22','2014-02-21 16:49:22','    Refactor a quorum-size calculation\n    \n    No behavior change, just use the utility function instead of rolling\n    our own.\n    \n    Change-Id: I152ccd8f22f424cd7547fa4d67df020f263096a9\n',2,5,'SwiftStack'),(275044,229,229,'2014-02-23 22:02:23','2014-02-23 15:24:47','    AUTHORS and CHANGELOG update for 1.13 release\n    \n    Change-Id: I6195c70cbbd7c94682539962dd5410e3665f01ac\n',56,0,'SwiftStack'),(275046,1195,1195,'2014-02-21 10:59:29','2014-02-21 10:59:29','    Alphabetized items under other sections in source documentation\n    \n    I alphabetized the items under \"Proxy\", \"Account\", \"Container\",\n    and \"Object\" in the source documentation to make them easier to\n    locate.\n    \n    Change-Id: Ia9cca0ee558cb1e0361c1a88103352bd006da1e3\n',56,56,'Rackspace'),(275048,869,869,'2013-12-19 11:19:40','2013-12-19 10:53:04','    Fix fd leak from get_logger() in python 2.6\n    \n    Calling get_logger({}) instantiates a logging.handlers.SyslogHandler,\n    which opens and keeps a socket around (either /dev/log or UDP or\n    whatever; not important).\n    \n    Under Python 2.6, all logging handlers instantiated anywhere at all\n    will live for the entire lifetime of the program; they get stored in\n    logging._handlerList and logging._handlers. Python 2.7 is very\n    similar, but uses weakrefs instead of strong references in those\n    module-level variables, so logging handlers can actually get cleaned\n    up prior to program exit.\n    \n    The net effect is that any program that calls get_logger() more than a\n    fixed number of times will leak file descriptors under Python 2.6.\n    \n    This commit throws encapsulation out the window and, under 2.6 only,\n    replaces strong references with weakrefs in logging._handlerList and\n    logging._handlers, thus avoiding the leak.\n    \n    Change-Id: I5dc0d1619c5a4500f892b898afd9e3668ec0ee7c\n',47,0,'SwiftStack'),(275050,5630,5630,'2014-02-26 20:54:20','2014-02-26 20:53:10','    Remove blank space after print\n    \n    Check Swift code, remove blank space after print.\n    \n    Change-Id: Ia7838ac5f33f2b335d1cd664b017e87118262d29\n',13,13,'EasyStack'),(275053,229,869,'2014-03-04 11:36:41','2014-02-04 17:12:56','    Send policy index on async update\n    \n    Also clean up a couple little things in the object updater. Now it\n    won\'t abort processing when it encounters a file (not directory) named\n    \"async_pending-\\d+\", and it won\'t process updates in a directory that\n    does not correspond to a storage policy.\n    \n    That is, if you have policies 1, 2, and 3, but there\'s a directory on\n    your disk named \"async_pending-5\", the updater will now skip over that\n    entirely. It won\'t even bother doing directory listings at all. This\n    is a good idea, believe it or not, because there\'s nothing good that\n    the container server can do with an update from some unknown storage\n    policy. It can\'t update the listing, it can\'t move the object if it\'s\n    misplaced... all it can do is ignore the request, so it\'s better to\n    just not send it in the first place. Plus, if this is due to a\n    misconfiguration on one storage node, then the updates will get\n    processed once the configuration is fixed.\n    \n    Change-Id: Ic645ac3426e18adfc8c46613c8aadcf765d6d0e2\n',75,37,'SwiftStack'),(275054,229,869,'2014-03-04 14:26:58','2014-02-04 17:56:54','    Send policy index to container on sync update\n    \n    We\'re sending the policy index to the container on async update, so we\n    really should send it on synchronous update (object-server ==>\n    container-server) as well.\n    \n    Also cleaned up a couple of unrelated test mocks to use the \'mock\'\n    library instead of hand-patching.\n    \n    Change-Id: I776ff8b519a7bef441466d199137d8a315600973\n',34,21,'SwiftStack'),(275055,869,869,'2014-02-27 22:38:53','2014-02-27 22:38:53','    Make DLO manifest copying work with ?multipart-manifest=get\n    \n    If a client issues a COPY request for a DLO with the query param\n    multipart-manifest=get, then the expectation is a new\n    manifest. However, this wasn\'t the case; X-Object-Manifest wasn\'t\n    being set on the new object, so the result was a normal object with\n    the same contents as the old manifest (typically 0 bytes).\n    \n    There was already a mechanism by which middlewares could modify COPY\n    requests; this commit extends that so they can set headers on the new\n    object.\n    \n    Note that this has nothing to do with a \"normal\" DLO copy, i.e. one\n    without multipart-manifest=get. That one makes a new object that\'s the\n    concatenation of the segments, and it was working just fine.\n    \n    Change-Id: I1073af9fee6e34ebdfad7b1a89aeb05e4523a151\n',137,62,'SwiftStack'),(275057,4829,4829,'2014-03-02 19:12:25','2014-03-02 19:10:27','    Use new style class for ringbuilder\'s Commands\n    \n    classs Commands:\n    \n    ==>\n    \n    class Commands(object):\n    \n    Change-Id: I160a10f4380b41dc76d5b359aa66c42b3242e940\n',1,1,'AT&T'),(275058,26,26,'2014-02-28 17:10:03','2014-02-28 17:10:03','    Object server PUTs should respect client_timeout\n    \n    It seems the object server never respected the client_timeout value\n    since the beginning of Swift. This is normally fine since the proxy does\n    and will normally hang up on the backends. But if the proxy has a bug or\n    if there\'s network issues or whatever, the object server should be smart\n    enough to enforce this timeout as well.\n    \n    Our operations guys noticed this problem when older processes would\n    never exit after a reload. They started investigating and saw that the\n    object server had open tmp files that hadn\'t been touched in quite some\n    time. Sometimes the tmp files didn\'t even exist anymore since the\n    reclaimer deletes really old untouched tmp files.\n    \n    Change-Id: Iba0397203a2dccca4a28a8c8cbfc5a60e429837a\n',40,10,'Rackspace'),(275060,869,869,'2014-03-03 17:28:48','2014-03-03 17:28:48','    Convert all old-style classes to new-style\n    \n    This cleanup has been slowly happening for a while; let\'s finish it.\n    \n    Change-Id: I1561e3540d524834e0cc5bc725ab80936eae1f0e\n',54,54,'SwiftStack'),(275061,5631,5631,'2014-03-02 15:20:59','2014-02-27 01:33:23','    fix gatekeeper response headers behavior\n    \n    removes @wsgify decorator\n    changes code to a more traditional way of messing with response headers\n    \n    Change-Id: I13ce7f98bae48eb0b990a64aa6f3d63ff8d13bf5\n    Closes-Bug: 1285392\n',65,8,'Rackspace'),(275063,869,869,'2014-02-28 12:55:15','2014-02-27 18:30:15','    Don\'t lard up InternalClient with extra middleware\n    \n    One can argue that it makes sense for the client-facing proxy server\n    to have certain middlewares like gatekeeper in its pipeline, but that\n    is not desirable for InternalClient. In particular, it prevents you\n    from passing in sysmeta headers using InternalClient, and I found\n    myself wanting to do that earlier today.\n    \n    Now InternalClient\'s proxy application gets exactly what\'s configured;\n    no more, no less. This will mean that the object expirer can read and\n    write sysmeta headers, but I think we can trust it to keep our\n    secrets.\n    \n    Change-Id: I17b4a89c24e600754701ee1645b40406421fa6f3\n',30,11,'SwiftStack'),(275065,869,869,'2014-02-27 18:18:00','2014-02-27 18:18:00','    Fix a couple typos\n    \n    Change-Id: I9d63e9b52162dfccd72488655f61842e7723718f\n',5,5,'SwiftStack'),(275067,4078,4078,'2014-03-05 16:23:42','2014-03-05 16:23:42','    Make internal client work with conf.d\n    \n    Copied from Clay\'s patch in LP\n    \n    Fixes bug #1277046\n    \n    Change-Id: I2052ffaea3a74cdca9596b08273b7120570b1375\n',5,4,'INTC'),(275069,4075,4075,'2014-03-03 23:37:21','2014-03-03 09:08:43','    sanity check copy tests\n    \n    Change-Id: I4880e0a790dabb84e8c55fe11c36df41aeb0c739\n',266,247,'Rackspace'),(275071,869,869,'2014-03-07 08:55:54','2014-03-06 13:11:03','    Functional tests for tempurl\n    \n    Change-Id: I578be387fe6119a86a8abc544b3cbe210ddca3c1\n',204,16,'SwiftStack'),(275072,109,109,'2014-03-07 09:56:36','2014-03-07 09:56:25','    Fixed mispelling in function name - accross to across\n    \n    Change-Id: I7d9749218d277c9e71e47d903b3126f9f73ffe65\n',2,2,'Cisco'),(275074,869,869,'2014-03-04 18:40:12','2014-03-04 18:40:12','    Speed up failing InternalClient requests\n    \n    InternalClient.make_request was sleeping after every attempt,\n    including the last one. We don\'t need to sleep after the final\n    attempt; we can just return failure.\n    \n    Change-Id: Ieee5f96afb5b39a659d8438a237bfd907405165a\n',3,1,'SwiftStack'),(275076,869,4064,'2014-03-07 11:08:37','2014-03-06 07:47:42','    copy over swift.authorize stuff into subrequests\n    \n    If auth is setup in the env then it needs to be copied over with the\n    make_request wsgi helper.  Also renamed make_request to\n    make_subrequest- when I grepped for make_request I got > 250 results,\n    this\'ll make it easier to find references to this function in the\n    future.\n    \n    Updated docs and sample confs to show tempurl needs to be before dlo and\n    slo as well as auth.\n    \n    Change-Id: I9750555727f520a7c9fedd5f4fd31ff0f63d8088\n',35,16,'Rackspace'),(275078,869,869,'2014-03-07 14:26:01','2014-03-07 14:25:25','    Add tempurl to the example proxy config\'s pipeline\n    \n    Change-Id: Ic4df234d181e4f5c0243a5feb8fd135dd8dc1e93\n',1,1,'SwiftStack'),(275080,826,826,'2014-03-06 13:10:13','2014-03-06 00:03:03','    Add missing swift constraint for functional tests\n    \n    Looks like we are keeping at least four lists of the default\n    constraints in various places, and when we added the max_header_size\n    in initial Static Large Object Support commit (5d73da15) we failed to\n    add it to the two locations in the test tree (test/sample.conf and\n    test/functional/tests.py).\n    \n    With this commit we take a small step to consolidate the list of\n    constraints to the constraints module by removing the list from the\n    tests module (note we still have them listed in the sample swift.conf\n    file and the test module\'s sample.conf file), document the missing\n    reference in the test module\'s sample.conf file, and, while we\'re at\n    it, use the SWIFT_CONF_FILE reference where possible.\n    \n    Change-Id: Ic4fa5f1aedec9bc7a7b43ce1a2ca3cdebce6171f\n',26,30,'Red Hat'),(275082,869,869,'2014-03-07 15:53:05','2014-03-07 15:53:05','    Functional tests for TempURL and SLO together\n    \n    Change-Id: I4893911e50005d5b669b96e7d59b6149c734780e\n',88,0,'SwiftStack'),(275085,4087,4087,'2014-03-11 13:57:17','2014-01-07 12:38:54','    Add Storage Policy Support to ssync\n    \n    This patch makes ssync policy aware and adds plumbing required\n    for existing test cases to pass as well as required tests to\n    assure policy support coverage.\n    \n    Change-Id: I8de43be41a10732aca05781dbd1a7ca5da6bb6b3\n    Implements: blueprint storage-policies\n',257,41,'Intel'),(275087,869,869,'2014-03-18 12:21:01','2014-03-18 12:21:01','    remove debugging print\n    \n    Change-Id: I9be807f5cbb60b8ce36ff32c92ba77a3e2cd2587\n',0,2,'SwiftStack'),(275088,869,869,'2014-03-11 11:28:39','2014-03-11 11:25:04','    Fix ring-builder crash\n    \n    If you had a partition with 1 replica on a deleted device, 1 on a\n    zero-weight device, and 1 on a normal device, then rebalancing would\n    crash. This was because the ring builder was memoizing tiers_for_dev()\n    for all *available* devices (i.e. weight > 0 and not deleted), but\n    depended on it being present for all devices with partitions still on\n    them.\n    \n    Since the builder moved the replica from the deleted device, it left\n    the one on the zero-weight device alone, so you had an unavailable\n    device with a partition replica still on it, triggering the crash.\n    \n    Now we go ahead and memoize tiers_for_dev() for *all* devices, not\n    just available ones, thereby fixing the crash.\n    \n    Change-Id: Ie0b58b65e0353732cf785ab772e95e699f3a5b5d\n',30,3,'SwiftStack'),(275090,4075,4075,'2014-03-11 23:02:33','2014-03-11 14:18:55','    DRY out common.constraints a bit more\n    \n    Change-Id: If8a71692b79e381036b34245e09697ac1009beca\n',143,54,'Rackspace'),(275092,4075,4075,'2014-03-12 12:04:45','2014-03-06 01:19:36','    make probetests work with conf.d configs\n    \n    Change-Id: I451ff4629730a334ac1bd8fc6cd75de95314e153\n',115,135,'Rackspace'),(275094,4075,4064,'2014-03-11 18:41:46','2014-01-15 14:49:31','    Make cors work better.\n    \n    CORS doesn\'t really work with swift right now. OPTIONS calls for the most part\n    work but for so called \"simple cross-site requests\" (i.e. those that don\'t\n    require a pre-flight OPTIONS request) Swift always returns the Origin it was\n    given as the Access-Control-Allow-Origin in the response. This makes CORS\n    \"work\" for these requests but if you actually wanted the javascript user agent\n    to restrict anything for you it wouldn\'t be able to!\n    \n    You can duplicate the issue with updated CORS test page:\n    \n    http://docs.openstack.org/developer/swift/cors.html#test-cors-page\n    \n    And a public container with an \'X-Container-Meta-Access-Control-Allow-Origin\'\n    that does NOT match the webserver hosting the test-cors-page.\n    \n    e.g.\n    \n    with a public container that accepts cross-site requests from \"example.com\":\n    \n    `swift post cors-container -m access-control-allow-origin:example.com -r .r:*`\n    \n    You could point your browser at a copy of the test-cors-page on your\n    filesystem (the browser will will send \'Origin: null\')\n    \n    Without a token the XMLHttpRequest will not request any custom headers (i.e.\n    Access-Control-Request-Headers: x-auth-token) and the request will be made\n    with-out a preflight OPTIONS request (which Swift would have denied anyway\n    because the origin\'s don\'t match)\n    \n    i.e. fill in \"http://saio:8080/v1/AUTH_test/cors-container\" for \"URL\" and\n    leave \"Token\" blank.\n    \n    You would expect that the browser would not complete the request because\n    \"Origin: null\" does not match the configured \"Access-Control-Allow-Origin:\n    example.com\" on the container metadata, and indeed with this patch - it won\'t!\n    \n    Also:\n    \n    The way cors is set up does not play well with certain applications for swift.\n    If you are running a CDN on top of swift and you have the\n    Access-Control-Allow-Origin cors header set to * then you probably want the *\n    to be cached on the the CDN, not the Origin that happened to result in an\n    origin request.\n    \n    Also:\n    \n    If you were unfortunate enough to allow cors headers to be saved directly\n    onto objects then this allows them to supersede the headers coming from the\n    container.\n    \n    NOTE: There is a change is behavior with this patch. Because its cors, a\n          spec that was created only to cause annoyance to all, I\'ll write out\n          what\'s being changed and hopefully someone will speak up if it breaks\n          there stuff.\n    \n    previous behavior: When a request was made with a Origin header set the\n                       cors_validation decorator would always add that origin as\n                       the Access-Control-Allow-Origin header in the response-\n                       whether the passed origin was a match with the container\'s\n                       X-Container-Meta-Access-Control-Allow-Origin or not, or even\n                       if the container did not have CORS set up at all.\n    new behavior: If strict_cors_mode is set to True in the proxy-server.conf\n                  (which is the default) the cors_validation decorator will only\n                  add the Access-Control-Allow-Origin header to the response when\n                  the request\'s Origin matches the value set in\n                  X-Container-Meta-Access-Control-Allow-Origin. NOTE- if the\n                  container does not have CORS set up it won\'t just magically start\n                  working. Furthremore, if the Origin doesn\'t match the\n                  Access-Control-Allow-Origin - a successfully authorized request\n                  (either by token or public ACL) won\'t be *denied* - it just\n                  won\'t include the Access-Control-Allow-Origin header (it\'s up\n                  to the security model in the browser to cancel the request\n                  if the response doesn\'t include a matching Allow-Origin\n                  header).  On the other hand, if you want to restrict requests\n                  with CORS, you can actually do it now.\n    \n                  If you are worried about breaking current functionality you\n                  must set:\n    \n                  strict_cors_mode = False\n    \n                  in the proxy-server.conf. This will continue with returning the\n                  passed in Origin as the Access-Control-Allow-Origin in the\n                  response.\n    \n    previous: If you had X-Container-Meta-Access-Control-Allow-Origin set to *\n              and you passed in Origin: http://hey.com you\'d get\n              Access-Control-Allow-Origin: http://hey.com back. This was true for\n              both OPTIONS and regular reqs.\n    new: With X-Container-Meta-Access-Control-Allow-Origin set to * you get * back\n         for both OPTIONS and regular reqs.\n    \n    previous: cors headers saved directly onto objects (by allowing them to be\n              saved via the allowed_headers config in the object-server conf)\n              would be overridden by whatever container cors you have set up.\n    new: For regular (non-OPTIONS) calls the object headers will be kept. The\n         container cors will only be applied to objects without the\n         \'Access-Control-Allow-Origin\' and \'Access-Control-Expose-Headers\' headers.\n         This behavior doesn\'t make a whole lot of sense for OPTIONS calls so I\n         left that as is. I don\'t think that allowing cors headers to be saved\n         directly onto objects is a good idea and it should be discouraged.\n    \n    DocImpact\n    \n    Change-Id: I9b0219407e77c77a9bb1133cbcb179a4c681c4a8\n',201,26,'Rackspace'),(275096,5632,5633,'2014-03-07 10:31:24','2014-03-06 12:31:38','    Added a test for empty metadata\n    \n    Here added a test for setting empty object metadata\n    and checking its value in response headers.\n    \n    Change-Id: I460302661d150364a95bcd7f0ebbbc2a1e95507a\n',13,0,'independent'),(275098,4083,4083,'2014-03-05 18:25:39','2014-03-05 18:25:39','    Fix ineffective expect header test\n    \n    The test for expect header being sent\n    with non-zero object PUTs doesn\'t seem\n    to check its results, so passes whether\n    the expect header is set or not.\n    \n    Change-Id: Ic74233c19e48aba43e63501467565e305ed399c3\n',1,0,'HP'),(275100,283,283,'2014-02-19 13:32:32','2013-11-25 23:26:09','    Fix account quota mw for handling a bad source path\n    \n    The copy source must be container/object.\n    This patch avoids the server to return\n    an internal server error when user provides\n    a path without a container.\n    \n    Change-Id: I8ea4e62b2a00c4b4a1666d30411a6c93a4f848a5\n    Fixes: bug #1254626\n',19,3,'eNovance'),(275104,869,869,'2014-03-18 13:47:19','2014-02-06 16:52:18','    Store policy index in container_stat table\n    \n    This used to be stored in the metadata, but it has different semantics\n    than metadata when it comes to replication: with metadata, newest\n    wins, while with policy index, oldest wins. Let\'s store separate\n    things separately.\n    \n    Also, this lets us do things like reference the policy index in SQL\n    triggers, or have a broker method that just pulls out the policy\n    index without everything else.\n    \n    Also also, it\'s faster to do it this way: you don\'t have to\n    deserialize a big blob of JSON just to pull out a single integer.\n    \n    Change-Id: I26f7ef09201970ee876ac24f39d0b2d4895bfda9\n',250,273,'SwiftStack'),(275106,4075,869,'2014-03-19 18:32:07','2014-02-10 18:49:16','    Fix changing of storage policy index\n    \n    The commit that the storage policy moved out of metadata and into\n    container_stat introduced a bug: if the client DELETEs and then PUTs a\n    container with a different storage policy, the resurrected container\n    still had the old policy. This is because the policy was being set in\n    broker.initialize(), but that was only being called for new\n    containers (no .db files at all).\n    \n    Now the policy index is still set at initialization for new\n    containers, but it is updated for resurrected containers.\n    \n    I considered using broker.set_storage_policy_index() for all\n    containers, new or resurrected, but that would leave a brief window of\n    time for new containers where the .db file has the default policy\n    index and not the user-specified one, and that seemed like a good home\n    for bugs to move into.\n    \n    Change-Id: I496e5078df80ec1466c1d50ac62ae3700c5aeec0\n',136,3,'SwiftStack'),(275108,869,869,'2014-03-20 16:33:58','2014-03-20 16:33:58','    Purge self.policies from Swift\n    \n    Since we decided to go with a global policy set that we swap out in\n    tests, we don\'t need these dependency-injection remnants any more.\n    \n    Change-Id: I43411f774c09bd1197db70c3ca8889ba49009e2d\n',5,11,'SwiftStack'),(275110,869,869,'2014-03-20 17:35:13','2014-03-20 17:35:13','    tiny stylistic fixup\n    \n    Change-Id: I2b14bffbef7992852cbff9864a3369a23aebc4c8\n',1,1,'SwiftStack'),(275112,869,869,'2014-03-20 17:01:40','2014-03-20 17:01:40','    Move patch_policies in obj server tests\n    \n    By hoisting this stuff up into a decorator, it leaves the bodies of\n    the test methods less cluttered and easier to read.\n    \n    Change-Id: Ifa049bd13d2ef48d07d98ddc2ad2fe8b6513b5d4\n',15,19,'SwiftStack'),(275114,869,869,'2014-03-18 12:50:51','2014-03-18 12:50:51','    Remove some debugging prints from tests\n    \n    Change-Id: I7116aa75ea5c8e1ef85a799a6e1ddf0d6edffb4f\n',0,7,'SwiftStack'),(275115,4075,4075,'2014-03-17 21:09:22','2014-03-17 20:58:42','    move cors-test-page to literal include\n    \n    This makes it so test-cors.html is a real file in doc/source so it\'s easy for\n    those in the know to jump in there with a `python -m SimpleHTTPServer` and\n    point their webbrowser to `http://localhost:8000/test-cors.html`.\n    \n    The example html and javascript still appear in the docs in their entirety\n    using the Sphinx literal include directive.\n    \n    Change-Id: Ia0ba36df6c58795e3764fa53b7f585dcc1b3be07\n',65,62,'Rackspace'),(275117,869,869,'2014-03-14 17:55:42','2014-03-03 11:25:43','    Allow pre-1970 dates in If-[Un]Modified-Since\n    \n    If I want to fetch an object only if it is newer than the first moon\n    landing, I send a GET request with header:\n    \n        If-Modified-Since: Sun, 20 Jul 1969 20:18:00 UTC\n    \n    Since that date is older than Swift, I expect a 2xx response. However,\n    I get a 412, which isn\'t even a valid thing to do for\n    If-Modified-Since; it should either be 2xx or 304. This is because of\n    two problems:\n    \n    (a) Swift treats pre-1970 dates as invalid, and\n    \n    (b) Swift returns 412 when a date is invalid instead of ignoring it.\n    \n    This commit makes it so any time between datetime.datetime.min and\n    datetime.datetime.max is an acceptable value for If-Modified-Since and\n    If-Unmodified-Since. Dates outside that date range are treated as\n    invalid headers and thus are ignored, as RFC 2616 section 14.28\n    requires (\"If the specified date is invalid, the header is ignored\").\n    \n    This only works for dates that the Python standard library can parse,\n    which on my machine is 01 Jan 1 to 31 Dec 9999. Eliminating those\n    restrictions would require implementing our own date parsing and\n    comparison, and that\'s almost certainly not worth it.\n    \n    Change-Id: I4cb4903c4e5e3b6b3c9506c2cabbfbda62e82f35\n',24,25,'SwiftStack'),(275119,826,826,'2014-03-19 16:20:25','2014-03-19 16:19:45','    Enable object versions for SAIO by default\n    \n    Change-Id: I4a20cacd6c8eb4d82a1f0b59a6b26340bc57184a\n',4,0,'Red Hat'),(275121,4075,4075,'2014-03-17 16:13:43','2014-03-17 16:00:46','    Fix race on container recreate\n    \n    There was a path on container recreate that would sometimes allow db to get\n    reinitialized without updating put_timestamp.  Replication would of course fix\n    it up, but that node would think it\'s database was deleted till then desipite\n    just ok\'ing a request with a newer X-Timestamp than the deleted_timestamp on\n    disk.\n    \n    Change-Id: I8b98afb2aac2e433b6ecb5c421ba0d778cef42fa\n    Closes-Bug: #1292784\n',102,12,'Rackspace'),(275123,4075,4075,'2014-03-17 20:18:42','2014-03-17 20:18:42','    Make backend container requests use the same X-Timestamp\n    \n    The proxy.controllers.base\'s generate_request_headers will set an X-Timestamp\n    header for you if it didn\'t get populated by additional kwarg or the\n    transfer_headers method.  This works fine if you only call it once per\n    request, but because of how proxy.controllers.obj and\n    proxy.controllers.container fill in the backend update header chains in\n    _backend_requests we need multiple independent copies and call the base\n    controllers generate_request_headers once of each backend request - which left\n    the ContainerController sending down different X-Timestamp values\n    (microseconds apart) for PUT and DELETE.\n    \n    The ObjectController skirts the issue entirely because it always preloads a\n    X-Timestamp on the req used to generate backend headers, and it allows it to\n    be copied over via transfer_headers by including \'x-timestamp\' in it\'s\n    pass_through_headers attribute.\n    \n    Because the container-replicator is already does merge_timestamps the\n    differences would always eventaully even out and there is no consistency bug,\n    but this seems cleaner since they put_timestamp being stored on the three\n    replicas during a container PUT were all coming from the same client request.\n    \n    Since both PUT and DELETE were effected, and the ContainerController doesn\'t\n    need to allow X-Timestamp to pass_through like the ObjectController does for\n    container-sync, it seemed cleanest to fix the issue in _backend_requests via\n    the additional kwarg to generate_request_headers.\n    \n    There\'s a driveby fix for FakeLogger and update to the proxy_server\'s\n    ContainerController tests.\n    \n    Change-Id: Idbdf1204da33f8fb356ae35961dbdc931b228b77\n',58,3,'Rackspace'),(275125,1266,1266,'2014-03-11 14:17:08','2014-02-24 11:24:56','    Allow specification of object devices for audit\n    \n    In object audit \"once\" mode we are allowing the user to specify\n    a sub-set of devices to audit using the \"--devices\" command-line\n    option.  The sub-set is specified as a comma-separated list.  This\n    patch is taken from a larger patch to enable parallel processing\n    in the object auditor.\n    \n    We\'ve had to modify recon so that it will work properly with this\n    change to \"once\" mode.    We\'ve modified dump_recon_cache()\n    so that it will store nested dictionaries, in other words it will\n    store a recon cache entry such as {\'key1\': {\'key2\': {...}}}. When\n    the object auditor is run in \"once\" mode with \"--devices\" set the\n    object_auditor_stats_ALL and ZBF entries look like:\n    {\'object_auditor_stats_ALL\': {\'disk1disk2..diskn\': {...}}}. When\n    swift-recon is run, it hunts through the nested dicts to find the\n    appropriate entries.  The object auditor recon cache entries are set\n    to {} at the beginning of each audit cycle, and individual disk\n    entries are cleared from cache at the end of each disk\'s audit cycle.\n    \n    DocImpact\n    \n    Change-Id: Icc53dac0a8136f1b2f61d5e08baf7b4fd87c8123\n',340,73,'HP'),(275128,869,869,'2014-03-21 14:07:25','2014-03-21 14:07:25','    Fix unit tests.\n    \n    Not sure why Jenkins didn\'t notice these were broken, but it didn\'t.\n    \n    Change-Id: I3d6fcdca8430a1f34d9829ad6a1eda704805ee55\n',3,3,'SwiftStack'),(275129,869,5634,'2014-03-21 14:10:41','2014-03-13 17:46:57','    Put X-Timestamp in object 404 responses\n    \n    This way the container reconciler can tell (sometimes) that an object\n    was deleted at a certain time.\n    \n    Change-Id: I3a56f2367585803b82f0b254946896c34746f9ca\n',16,4,'Rackspace'),(275130,869,869,'2014-03-20 18:53:54','2014-03-20 18:53:54','    Block X-Backend* in gatekeeper\n    \n    By moving the blocking to gatekeeper from the proxy server, we gain\n    the ability to pass X-Backend headers in via InternalClient while\n    still keeping real clients from using them.\n    \n    I wanted this functionality while working on storage policies; I had\n    an InternalClient and wanted to tell it to use a specific policy index\n    instead of what the container said, and that seemed like a good time\n    for an X-Backend header.\n    \n    Change-Id: I4089e980d3cfca660365c7df799723b1f16ba277\n',9,8,'SwiftStack'),(275133,869,869,'2014-03-24 11:57:33','2014-03-21 13:57:19','    Allow overriding of storage policy index.\n    \n    This is something the reconciler will need so that it can GET from one\n    policy, PUT in another, and then DELETE from the first one again.\n    \n    Change-Id: Icd32332e330a967f634f96f29670671270eb074e\n',69,4,'SwiftStack'),(275134,4078,4078,'2014-03-26 11:30:21','2014-03-26 11:09:05','    Indicate default storage policy in /info response\n    \n    Adding which storage policy is the default one in /info\n    \n    Change-Id: If246368828b26bfe9270fb82a0c521d5097f0390\n',3,1,'INTC'),(275135,4075,4075,'2014-03-25 19:41:27','2014-03-24 13:14:38','    Fix PUT to existing container w/o specific storage policy\n    \n    This also introduces the storage_policy_index property on the broker.\n    \n    Change-Id: Id8b176f46da5c8ea6da38e0770132c1198a82b6a\n',108,6,'Rackspace'),(275137,869,4087,'2014-03-26 11:33:51','2014-03-25 17:47:52','    Add Storage Policy Support to Account HEAD\n    \n    This change updates the account HEAD handler to report out per\n    policy object and byte usage for the account.  Cumulative values\n    are still reported and policy names are used in the report\n    out (unless request is sent to an account server directly in\n    which case policy indexes are used for easier accounting).\n    \n    Below is an example of the relevant HEAD response for a cluster\n    with 3 policies and just a few small objects:\n    \n       X-Account-Container-Count: 3\n       X-Account-Object-Count: 3\n       X-Account-Bytes-Used: 21\n       X-Storage-Policy-Bronze-Object-Count: 1\n       X-Storage-Policy-Bronze-Bytes-Used: 7\n       X-Storage-Policy-Silver-Object-Count: 1\n       X-Storage-Policy-Silver-Bytes-Used: 7\n       X-Storage-Policy-Gold-Object-Count: 1\n       X-Storage-Policy-Gold-Bytes-Used: 7\n    \n    Change-Id: I5ec251f9a8014dd89764340de927d09466c72221\n    Implements: blueprint storage-policies\n',783,82,'Intel'),(275139,869,869,'2014-03-25 13:00:19','2014-03-25 13:00:19','    Tests for storage policies in /info\n    \n    Change-Id: I8c4a1a602886381b77b55f4d4e0f6957119374df\n',11,0,'SwiftStack'),(275141,826,826,'2014-03-25 17:00:44','2014-03-24 21:43:14','    Make initialization test failure more explicit\n    \n    A few changes to make the db initialization test failure mode more\n    explicit.\n    \n    Change-Id: I533cd33476a57ecb854a1af1a5fb170c65daa825\n',10,4,'Red Hat'),(275142,5632,5632,'2014-03-22 17:30:20','2014-03-21 07:47:21','    Added swift-container-info tool.\n    \n    This is a very simple swift tool to retrieve information\n    of a container that is located on the storage node.\n    One can call the tool with a given container db file\n    as it is stored on the storage node system.\n    It will then return several information about that container.\n    \n    Change-Id: Ifebaed6c51a9ed5fbc0e7572bb43ef05d7dd254b\n',174,1,'NEC'),(275144,229,229,'2014-03-25 15:57:15','2014-03-25 14:03:38','    fix a skipped account ACLs functional test\n    \n    closes bug #1292158\n    \n    Change-Id: Ic74c9d698c312b484a49d759eced6860d46cf399\n',8,14,'SwiftStack'),(275146,702,702,'2014-03-26 13:32:12','2014-03-26 13:32:12','    Update swift3 repository\n    \n    The swift3 project was moved to StackForge.\n    \n    Change-Id: I3a7108d57b3b9ed3d8594545ff4d67dcab86ca07\n',1,1,'independent'),(275148,229,229,'2014-03-26 11:10:49','2014-03-26 11:10:21','    don\'t repatch mimetools again. and again. again.\n    \n    Change-Id: Id8ccb269ede6981dba8a5e119316e3447074193c\n',3,2,'SwiftStack'),(275149,229,4075,'2014-03-25 17:35:40','2014-03-24 16:10:18','    Bump up sleep when expecting a timeout\n    \n    It seemed like some of the tests ment to exercise the proxy\'s timeout could\n    would occastionally race and the backend mock would be able to cough up a\n    chunk before the timeout fired in the proxy - typically resulting in a failed\n    assertion like \" lalala\" != \'lalala\'.\n    \n    We paramaterize the timeout value, and bump it up for those cases where we are\n    expecting to hit the timeout.  Timing shows this change is just as fast for\n    passing tests.  And if you want to break the node_timeout in\n    proxy.controller.base you can verify the tests are still just as effective -\n    if a bit slower to detect the failure path.\n    \n    Fixes bug #1272509\n    \n    Change-Id: Iaf91d9d551e94fc317a08e8c0ee02daeed331b60\n',38,25,'Rackspace'),(275151,4075,4075,'2014-03-04 08:29:38','2014-02-27 20:27:29','    Update tox.ini so flake8 works even without hacking\n    \n    The flake8 command (when run from the command line or via vim-flake8) seems to\n    bypass the the normal pep8 [W]arning and [E]rror as well as py[F]lake checks\n    if the project level tox.ini includes a select, but doesn\'t include them in\n    it\'s select option (tested on flake8 v2.0 and v2.1).  Somehow if hacking is\n    installed these checks always run even if they\'re not explicitly listed in the\n    select list - but adding them so flake8 works on our project even without\n    hacking doesn\'t seem to cause any problems.\n    \n    Also The [flake8] section\'s \"select\" option in tox.ini doesn\'t seem to run all\n    checks when presented with the space-comma seperated list.  I had to pull out\n    the bare except check (H201), because our hacking fix for the \"H201 # noqa\"\n    hasn\'t been released to pypi yet (maybe hacking version 0.9.0?).\n    \n    As far as I know the Swift core development team is fully onboard with pep8,\n    and the flake8 checks are mostly like \"unused import\" stuff - so I *think*\n    this change is more about making the tool test what we want it too and not\n    changing or adding any new requirements or expectations.\n    \n    Change-Id: Ia911c63745100cce182d5c5eb67b77e31c1e9b18\n',3,3,'Rackspace'),(275153,5632,5632,'2014-03-25 16:14:00','2014-03-25 14:09:56','    Removed hard coded location of ring\n    \n    In bin/swift-object-info, removed the hard coded location of ring.\n    \n    Change-Id: Ie328633f5f4de755c9dcc4bb52341bb97087419d\n',26,18,'NEC'),(275156,869,869,'2014-03-26 14:37:52','2014-03-26 14:37:52','    Fix broker.storage_policy_index after .set_storage_policy_index\n    \n    Change-Id: I5abd232263ef4443d7f63ae9995a6a996eeca8c7\n',4,0,'SwiftStack'),(275158,869,869,'2014-03-25 13:06:35','2014-03-25 13:06:35','    Add note to sample conf about policies being experimental\n    \n    Change-Id: Ifd9ce1cf2f0513d122b4d18970603faed74f7df6\n',12,0,'SwiftStack'),(275160,4087,4087,'2014-03-27 05:16:10','2014-03-26 17:02:42','    Move Storage Policy validation from parser to class\n    \n    Currently we validate Storage Policy conflicts while parsing\n    swift.conf in parse_storage_policies. This let\'s us get away\n    with unnatural things in tests like patch_policies with two\n    policies that have the same name.\n    \n    Additionally this change makes the rules a bit easier to\n    identify and assure coverage.\n    \n    Change-Id: I6cd48e5a3b3658e106ecd20df0b04fd804c028a4\n    Implements: blueprint storage-policies\n',200,201,'Intel'),(275162,4087,4087,'2014-04-07 15:33:01','2014-03-28 10:14:36','    Fix issue with account broker and pre-SPI databases\n    \n    Set a DEFAULT storage_policy_index for existing container rows during\n    migration.\n    \n    Copy existing object_count and bytes_used in policy_stat table during\n    migration.\n    \n    Change-Id: I6b3f591bad455dcd072056c28fc5a37c3f618e40\n    Implements: blueprint storage-policies\n',93,7,'Intel'),(275164,4078,4078,'2014-04-08 11:38:46','2014-03-24 21:34:31','    Fixes versioning function tests with non-zero default policy\n    \n    In each PUT, proxy-server will do HEAD request for container sync\n    and checking the object versions. This patch makes proxy-server\n    knows the non-zero default policy when HEADing\n    \n    Change-Id: I29c5715a9dbc11d9f2ca9ccdfa7655beadf354f8\n',49,1,'INTC'),(275166,229,826,'2014-03-26 15:19:10','2014-03-25 15:56:44','    Invert which proxy logging middleware instance logs\n    \n    Prior to this patch the proxy_logging middleware always prepared to\n    read the response and process it for access logging, where the\n    proxy_logging instance first to handle the response bytes marked the\n    request as \"logged\".\n    \n    This meant that the proxy_logging instance immediately before the\n    proxy-server app (right most in the pipeline, if properly setup) would\n    always log the responses for all the client requests, regardless if\n    middleware to the left of it still had processing to do for the\n    response. This would break SLO, where the slo middleware passed along\n    the GET of the manifest, unchanged from the client, so that the right\n    most proxy logging middleware would log the sponse for just the\n    manifest, but then the slo middleware would fetch all the segments of\n    the manifest, feeding them out in the response to the client, the\n    request now marked as \"logged\" so that the left most proxy logging\n    middleware would not log it.\n    \n    This patch inverts this behavior so that now the first proxy_logging\n    middleware instance to receive a request in the pipeline marks that\n    request as handling it. So now, the left most proxy_logging middleware\n    handles logging for all client reaquests, and the right most\n    proxy_logging middleware handles all other requests initiated from\n    within the pipeline to its left.\n    \n    Closes bug: 1297438\n    \n    Change-Id: Ia3561523db76c693e4e0b2c38f461544dfcee086\n',92,9,'Red Hat'),(275167,5250,5250,'2014-03-26 15:27:39','2014-03-26 13:39:46','    Write out ring.gz\'s in a safer fashion\n    \n    Write the ring file to a temporary location first and then move it into\n    place. This should help prevent issues like reading a partial ring file\n    while a new instances is being written out.\n    \n    Change-Id: I28357a2f038a51cb9d823822b92f736dff033a9e\n',9,2,'Rackspace'),(275169,4075,4075,'2014-03-26 13:26:13','2014-03-26 13:25:36','    minor cleanups for swift-container-info\n    \n    Change-Id: I4d0687f64524093e2ffaa4f8d31bcff70dca145e\n',42,28,'Rackspace'),(275171,826,826,'2014-03-27 15:58:13','2014-03-26 22:10:29','    Move like unit tests together; add comments\n    \n    Some simple code movement to move the utils.ratelimit_sleep() unit\n    tests together so that they can be viewed all at once.\n    \n    We also add some comments to document the behavior of\n    utils.ratelimit_sleep(); small modification to max_rate parameter\n    checking to match intended use.\n    \n    Change-Id: I3b11acfb6634d16a4b3594dba8dbc7a2d3ee8d1a\n',37,16,'Red Hat'),(275173,826,826,'2014-03-27 23:57:36','2014-03-26 22:38:03','    Mock out time and sleep to avoid races\n    \n    We mock out time.time(), time.sleep() and eventlet.sleep() so that we\n    avoid test problems caused by exceedingly long delays during the\n    execution of the test.\n    \n    We also make sure to convert the units used in the tests to\n    milliseconds for a bit more clarity.\n    \n    Closes bug: 1298154\n    \n    Change-Id: I803d06cbf205a02a4f7bb1e0c467d276632cd6a3\n',118,59,'Red Hat'),(275175,5632,5632,'2014-03-31 10:05:52','2014-03-30 21:52:53','    Added swift-account-info tool.\n    \n    This is a very simple swift tool to retrieve information\n    of an account that is located on the storage node.\n    One can call the tool with a given account db file\n    as it is stored on the storage node system.\n    It will then return several information about that account.\n    \n    Change-Id: Ibfeee790adc000fc177b4b3c03d22ff785fda325\n',160,1,'NEC'),(275177,4078,4078,'2014-03-26 10:47:22','2014-03-26 10:23:53','    Update swift-get-nodes to use storage_directory util func\n    \n    Change-Id: I074d6c5f62e5218427c72b3e11de40da4ecfc0ab\n',6,6,'INTC'),(275179,5146,5146,'2014-03-31 13:12:57','2014-03-31 13:12:57','    Fixes SUPER important typo in CHANGELOG.\n    \n    Change-Id: Id1ecc425cd9e32fef4d70e97d3a705a695eb73a2\n',1,1,'IBM'),(275181,869,869,'2014-03-13 12:56:01','2014-03-05 11:02:59','    Check object segment MD5s\n    \n    Now if a client is downloading a large object and one of the segment\n    fetches gets bad data, we\'ll abort the request right away instead of\n    letting the client carry on. We do this by checking each segment\'s\n    body against the etag in the GET response\'s headers, like we tell\n    clients to do.\n    \n    To make sure that the etag is the MD5, we add ?multipart-manifest=get\n    to all segment GET requests. That way, a segment won\'t be another\n    large object, because a large object\'s etag isn\'t its MD5. This does\n    mean that clients can\'t make, say, a DLO manifest that points to a\n    bunch of SLO manifests. However, that capability was only introduced\n    in Swift 1.13.0 (post-Havana); prior to that, clients couldn\'t mix\n    large-object types. I\'m more than happy to trade that capability away\n    in exchange for data-integrity checks.\n    \n    Change-Id: I98c78a291ee1a863a36d54a22867bd01c126644e\n',147,115,'SwiftStack'),(275183,4075,4075,'2014-03-25 19:51:58','2014-03-12 13:00:21','    additional functional tests for account acls\n    \n    Change-Id: I7d8a8e48066281707862cd07f6b5a012476e8f24\n',1386,18,'Rackspace'),(275185,4067,4067,'2014-03-18 21:17:52','2014-03-18 21:17:52','    Fix TestGreenThreadSafeIterator test\n    \n    Change-Id: Ic121ae5c99b4e5c5e3d1efc432b55b762d50f3fb\n    Closes-Bug: 1190244\n',9,7,'Rackspace'),(275187,4075,869,'2014-03-27 11:44:42','2014-03-26 11:57:11','    Only run flake8 on Swift code\n    \n    In particular, this skips the \"build\" directory, which is prone to\n    containing third-party stuff that doesn\'t comply with all the various\n    hacking/flake8/pep8 checks.\n    \n    Change-Id: Ibe2240d8c6ca5947b2cac259cd7d0a1154f8a9cd\n',1,1,'SwiftStack'),(275189,826,826,'2014-04-02 08:32:02','2014-04-02 08:32:02','    Only fetch a timestamp when needed\n    \n    While it seems free to just call time.time() whenever it is\n    convenient, in many cases code has to decide on a particular timestamp\n    as a reference point for decisions. In other places, it just seems\n    like a waste to make two calls that one would assume would return\n    nearly identical times; however, certain test environments are\n    notoriously overloaded (which is arguably a good thing, added stress\n    to the code) where back-to-back calls to time.time() might produce\n    timestamps seconds or even minutes apart.\n    \n    These simple changes here pick a point of reference for the operation\n    to use throughout.\n    \n    Change-Id: Id2c0ffcc7f4ffafff61ebf59a8baeb079fd0c2b8\n',9,8,'Red Hat'),(275190,229,5630,'2014-04-01 16:53:00','2014-02-26 17:48:33','    AssertEquals is deprecated, use assertEqual partI\n    \n    assertEquals is deprecated in Python 2.7, need drop it.\n    http://docs.python.org/2/library/unittest.html#deprecated-aliases\n    \n    Change-Id: Ieec505887f740b99b11ef40878ba3ee7247b78a8\n    Closes-Bug: #1285040\n',220,220,'EasyStack'),(275192,42,42,'2014-04-01 23:22:22','2014-04-01 22:19:21','    Relocate DATADIR to backends\n    \n    It simply makes sense that the definition of DATADIR belongs to\n    backends. After all, some of them may not even have any.\n    \n    Coincidentially, a few unnecessary imports are dropped.\n    \n    By the way, on the object server side, diskfile.py provides DATADIR\n    in the same way already.\n    \n    Change-Id: I60bfd522c77c4a0ee13697a2e31141777c7e2398\n',25,39,'Red Hat'),(275194,4064,4064,'2014-04-01 08:37:15','2014-04-01 07:05:44','    Range requests not working with sub_SLOs\n    \n    Change-Id: I618c06e7f9251bfc7049c9dc6df66e539b90d9a9\n',42,23,'Rackspace'),(275196,229,4533,'2014-04-01 10:42:00','2014-03-19 21:51:17','    Add \"If-None-Match: *\" support to PUT\n    \n    A common pattern that we see clients do is send a HEAD request before a\n    PUT to see if it exists.  This can slow things down quite a bit\n    especially since 404s on HEAD are currently a bit expensive.\n    \n    This change will allow a client to include a \"If-None-Match: *\" header\n    with a PUT request.  In combination with \"Expect: 100-Continue\" this\n    allows the server to return that it already has a copy of the object\n    before any data is sent.\n    \n    I attempted to also include etag support with the If-None-Match header,\n    but that turned up having too many hairy edge cases, so was left as a\n    future excercise.\n    \n    DocImpact\n    \n    Change-Id: I94e3754923dbe5faba065719c7a9afa9969652dd\n',191,16,'Rackspace'),(275198,229,229,'2014-04-03 09:11:47','2014-04-02 16:58:40','    updates for 1.13.1 release\n    \n    Change-Id: I9a84c476e8d370c3a5dbc24db77a7258d521013f\n',45,1,'SwiftStack'),(275199,826,4078,'2014-04-03 09:54:58','2014-04-01 15:21:19','    Clean up swift-{account, container}-info\n    \n    Reuse common code; add unit tests; ensured coverage was at 100%.\n    \n    Change-Id: Id6fcc7cb07fd178e00d43968e3e2cc03226fdc05\n',463,168,'INTC'),(275201,826,826,'2014-04-02 23:48:01','2014-04-02 16:16:21','    Rework use of constraints to ease testing\n    \n    Prior to this patch both mainline code and testing modules imported\n    and used constraints directly into their own namespace, or relied on\n    the namespace of other modules that were not the constraints\n    module. This meant that if a unit test wanted to change a constraint\n    for its operation, it had to know how that module was using the\n    constraint, instead of referencing the constraint module itself.\n    \n    This patch unifies the use of constraints so that all constraints are\n    referenced via the constraints module. In turn, this allows a test to\n    leverage the re-loadable nature of the constraints in the constraints\n    module.\n    \n    It addition, a number of functional tests where using the default\n    values for constraints, instead of the configured value discovered in\n    a test.conf or in an existing swift.conf. This patch removes those\n    direct references in favor of the load_constraint() method from the\n    test/functional/tests.py module.\n    \n    Change-Id: Ia5313d653c667dd9ca800786de59b59334c34eaa\n',261,230,'Red Hat'),(275203,826,826,'2014-04-02 23:48:01','2014-03-31 22:56:17','    Only change collation for functional tests\n    \n    The unconditional module-level change of the locale collation can\n    affect other tests run under nose. To avoid this, make the change at\n    the package level, and restore it when finished.\n    \n    Change-Id: Iacda42aa7155f1cfa7d0dcadbf73b961dfb4b923\n',34,3,'Red Hat'),(275205,26,26,'2014-04-03 23:06:13','2014-04-03 23:06:13','    Fixed error in container sync exc handling\n    \n    If container sync got a non-ClientException and then a ClientException\n    during a get/put operation, it previously would break in the error\n    handling.\n    \n    Change-Id: Ib2fa70270f3ec870bf60d5bbb3e8f514aeeb0927\n',9,2,'Rackspace'),(275206,826,826,'2014-04-02 23:48:01','2014-03-31 23:22:49','    Read the configuration once for all func tests\n    \n    Merge the swift_testing module into the functional test module itself,\n    so that we can read the configuration once for all unit tests, sharing\n    the same constraints.\n    \n    Change-Id: I9fbbfdade9adca329cd79f7d4291ba009327c842\n',383,392,'Red Hat'),(275208,826,826,'2014-04-04 07:25:22','2014-03-31 23:51:43','    Move module level setup under setup_package method\n    \n    Perform all the package level test setup under the setup_package\n    method so that we only read the configuration file on disk when\n    functional tests are run. This let\'s us \"play nice\" with other tests.\n    \n    Change-Id: I699d664bcef6754aac4ec6877830e745b764342f\n',112,92,'Red Hat'),(275209,826,826,'2014-04-03 15:56:25','2014-04-03 12:07:42','    Handle getting info on wrong database type\n    \n    Change-Id: I32f66f6a7683180a18a2807143d0910c75bf16f0\n',32,1,'Red Hat'),(275213,4078,4078,'2014-04-10 09:22:19','2014-04-09 20:07:12','    Update swift-container-info to be storage policy aware\n    \n    Lookup policy name in swift.conf; \'Legacy\' container will use\n    policy-0\'s name; \'Unknown\' is shown if policy not found in swift.conf\n    \n    Change-Id: I450d40dc6e2d8f759187dff36d658e52737ae2a5\n',12,1,'INTC'),(275214,4078,4078,'2014-04-12 12:47:53','2014-04-11 15:35:25','    Fix parsing storage policy in swift.conf\n    \n    Don\'t skip next value update in NoOptionError\n    Raise ValueError if wrong section name found\n    \n    Change-Id: I711e4d214c415d184df259d62f3847143cae78a6\n',53,17,'INTC'),(275215,4087,4087,'2014-04-11 12:24:32','2014-04-11 12:22:26','    Minor refactor of storage policy helper functions\n    \n    Pulled from a larger pending review where it became clear that\n    we didn\'t need to keep adding get_data_dir(index) type routines\n    so this patch makes a generic function in the policy module that\n    constructs strings given a base and a policy index then others\n    can use it directly or as a partial (as is done with get_data_dir()\n    for example)\n    \n    Change-Id: Ia3bed58f4b8d52f44b8ab3e8fad8014231c19c50\n    Implements: blueprint storage-policies\n',34,39,'Intel'),(275217,4087,4087,'2014-04-14 18:20:52','2014-04-14 18:20:52','    Super small code cleanup in Updater\n    \n    We have this proposed on master as well so thought I\'d better\n    get it up to par on the feature/ec branch as well.  Just some\n    extra code left over from multiple implementations...\n    \n    Change-Id: Iae1adfd3449e8d4fc81cb3e78266496c85acb11a\n    Implements: blueprint storage-policies\n',1,1,'Intel'),(275218,4067,4067,'2014-04-07 18:38:04','2014-03-26 22:55:55','    Unify backend logging\n    \n    Make account, object, and container servers construct log lines using the\n    same utility function so they will produce identically formatted lines.\n    \n    This change reorders the fields logged for the account server.\n    \n    This change also adds the \"additional info\" field to the two servers that\n    didn\'t log that field.  This makes the log lines identical across all 3\n    servers.  If people don\'t like that, I can take that out.  I think it makes\n    the documentation, parsing of the log lines, and the code a tad cleaner.\n    \n    DocImpact\n    \n    Change-Id: I268dc0df9dd07afa5382592a28ea37b96c6c2f44\n    Closes-Bug: 1280955\n',106,38,'Rackspace'),(275220,869,869,'2014-04-08 11:44:58','2014-04-08 11:44:58','    Fix deprecation warning\n    \n    Accessing BaseException.message spews a warning; we can get the same\n    information with str(err), which does not spew.\n    \n    Change-Id: I67648d53d25522be074a78c44b3ce97dc27d1f07\n',1,1,'SwiftStack'),(275221,229,229,'2014-04-08 10:26:40','2014-04-08 10:26:40','    update setup.py with pbr version\n    \n    This file is normally updated in the standard \"update from\n    global requirements\" patch, but since those contain other\n    changes we don\'t want, the setup.py file never gets updated.\n    \n    This patch updates setup.py to bring it in line with the\n    standard global requirements way of doing things without also\n    updating [test-]requirements.txt\n    \n    Change-Id: Id0e4f8e17dd4c714b4d2dd75985431a9e12e6a4f\n',1,1,'SwiftStack'),(275223,826,826,'2014-04-01 22:59:22','2014-04-01 22:56:43','    Update callback with proper bytes transferred\n    \n    The first set of bytes transferred was being dropped.\n    \n    Change-Id: I8e055190d04af1718c5e88bf5e8c44fde6794c74\n',5,3,'Red Hat'),(275225,826,826,'2014-04-04 15:26:32','2014-04-04 15:26:32','    Attempt to ensure connect always timesout\n    \n    It seems that the test_connect_put_timeout() test does not always fail\n    when it is expected. Sometimes, not very often, the attempt to connect\n    succeeds, resulting in a failed test.\n    \n    This might be because the fake-connection infrastructure uses a\n    sleep(0.1) and the test uses a connect timeout of 0.1. There might be a\n    case where the two values result in the exact time where the entries\n    happen to be added in the wrong order such that the sleep() completes\n    first before the connect timeout fires, where the connect completes\n    successfully.\n    \n    Closes bug 1302781\n    \n    Change-Id: Ie23e40cf294170eccdf0713e313f9a31a92f9071\n',1,1,'Red Hat'),(275227,4083,4083,'2014-04-07 20:27:40','2014-04-07 18:42:50','    Add missing constraints to /info\n    \n    Two of the default constraints, max_header_size and\n    max_meta_overall_size, don\'t get registered for the\n    /info response by the proxy server.\n    \n    Rather than adding them individually to the proxy\'s\n    register_swift_info call, this patch proposes to\n    register all the constraints for /info at once\n    using the constraints.EFFECTIVE_CONSTRAINTS dict.\n    Any future additions to default constraints will\n    then be automatically included in /info.\n    \n    Change-Id: I5c10d4c8eda90ba94745b6f89df85aafbb50f8ef\n',5,10,'HP'),(275229,5635,5635,'2014-04-07 09:56:03','2014-04-07 08:44:54','    Support for content-length in the upload object method for\n    internal client.\n    \n    Internal client uses \'chunked\' transfer encoding in it\'s\n    upload_object method. If content-length is known in advance,\n    internal_client should allowed to use content length in the\n    upload_object method and not the chunked method.\n    \n    Change-Id: I68d2ebde78e01fa16b7187a2f045ea20f4310722\n',29,1,'IBM'),(275231,4083,4083,'2014-04-09 11:59:24','2014-04-08 18:44:06','    Add tests and comments re constraints in /info\n    \n    Add test to check that only the expected keys are\n    reported by proxy in /info, and add comments to\n    raise awareness that default constraints will be\n    automatically published by proxy in response to /info\n    requests.\n    \n    Change-Id: Ia5f6339b06cdc2e1dc960d1f75562a2505530202\n',10,1,'HP'),(275233,313,313,'2014-04-05 16:54:11','2014-04-05 09:38:12','    Set permissions on generated ring files\n    \n    The use of NamedTemporaryFile creates rings with permissions 0600;\n    however most installs probably generate the rings as root but the\n    swift-proxy runs as user swift.\n    \n    Set the permissions on the generated ring to 0644 prior to rename so\n    that the swift user can read the rings.\n    \n    Change-Id: Ia511931f471c5c9840012c3a75b89c1f35b1b245\n    Closes-Bug: #1302700\n',11,0,'Canonical'),(275235,826,826,'2014-04-09 13:25:17','2014-04-07 13:01:44','    Use eventlet instead of threading for timeout\n    \n    The only explicit use of Python threading is found in the\n    testFileSizeLimit test. Using eventlet seems a bit easier to follow,\n    accomplishing the same goal, and does not constrain us to a\n    multi-threaded environment.\n    \n    The chunks() and timeout() module level functions are only used by one\n    test each, so we just move them to those tests to indicate they are not\n    used globally.\n    \n    Change-Id: I50b9fb798fbfd1d552b3c3f90309f6b86da34853\n',29,35,'Red Hat'),(275237,4533,4533,'2014-04-10 19:03:29','2014-04-10 18:59:01','    Fix logging issue when services stop on py26\n    \n    On older versions of python 2.6, exceptions would be spewed to the error\n    log whenever a service would stop.  This gets magnified by the\n    container-updater which seems to do it with every pass.  This catches\n    and squelches the error.\n    \n    Change-Id: I128c09c240e768e8195af1f6fe79b10d4e432471\n    Closes-Bug: #1306027\n',6,2,'Rackspace'),(275239,4075,826,'2014-04-10 12:27:25','2014-04-10 14:36:43','    Add includes of referenced SAIO bin scripts\n    \n    Change-Id: I6810e69a757336a3aed0a38146c27f270fe2dde1\n',16,0,'Red Hat'),(275241,869,869,'2014-03-14 17:55:43','2014-03-04 11:52:48','    Support If-[Un]Modified-Since for object HEAD\n    \n    We already supported it for object GET requests, but not for\n    HEAD. This lets clients keep metadata up-to-date without having to\n    either fetch the whole object when it\'s changed or do their own date\n    parsing. They can just treat Last-Modified as opaque and update their\n    idea of metadata when they get a 200.\n    \n    Change-Id: Iff25d8989a93d651fd2c327e1e58036e79e1bde1\n',265,14,'SwiftStack'),(275243,5632,5632,'2014-04-12 09:20:06','2014-04-11 11:53:48','    Print \'Container Count\' in data base info\n    \n    Currently, \'Container Count\' was missing in data base info.\n    So this patch will help printing \'Container Count\' also.\n    \n    Change-Id: I1ca80ee79e71b086b30fd2d1ab024ea1cfb324f5\n',4,0,'NEC'),(275245,4087,4087,'2014-04-14 16:14:30','2014-04-14 15:19:22','    Fix testcase test_print_db_info_metadata()\n    \n    Test compares cluster info to hardcoded expected data and wasn\'t\n    sorting the two sets of things being compared leading to some\n    sporadic unit test failures.\n    \n    Change-Id: I3ef98260a62c15d06ba8cc196196d4e90abca3f0\n',4,2,'Intel'),(275247,4087,4087,'2014-04-17 06:07:52','2014-04-16 13:32:23','    Quick fix to Storage Policy Support for List Endpoints\n    \n    The path being sent to get_container_info didn\'t include the ver\n    so downstream path parsers were off by one on interpretting\n    parms.  get_info is mocked in unit tests so not caught there,\n    found while doing an example for the docs.  The version doesn\'t\n    matter in this case, just need a placeholder so the downstream\n    functions get the parms correct.\n    \n    Also added policy support for custom endpoint names which was\n    missing before and tightened up unit test coverage for both\n    functional issues addressed here.\n    \n    Change-Id: I56d4b0f4f321a4c72b11ec44d868a194d02ea3a3\n    Implements: blueprint storage-policies\n',53,56,'Intel'),(275249,4075,4075,'2014-04-28 18:27:07','2014-04-28 18:27:07','    Convert POLICIES to list for random.choice\n    \n    python\'s random.choice is implemented by taking a random index into the length\n    of a list and selecting the item at that integer index.\n    \n    POLICIES is not a list, but happened mostly fit the interface for\n    random.choice since it had a len and supported integer indexing, but would\n    fail if your storage policy index\'s had any gaps.\n    \n    In python3 a dict\'s .values() method returns a view instead of a real list so\n    changing StoragePolicyCollections __iter__ method to return .values() instead\n    of .itervalues() wouldn\'t buy us much.  It seems better to just convert\n    POLICIES to a list and conform to the contract for random.choice.\n    \n    Change-Id: Id72a025822ecb6c8fec6b7be377d58ce9cb8f7b5\n',1,1,'Rackspace'),(275250,4087,4087,'2014-05-01 11:46:53','2014-04-09 16:10:13','    Add Storage Policy Support to Container Sync\n    \n    Have container sync get its object ring from POLICIES now,\n    update tests to use policy index from container_info and pass\n    that along for use in ring selection.\n    \n    Change-Id: If57d3b0ff8c395f21c81fda76458bc34fcb23257\n    Implements: blueprint storage-policies\n',109,86,'Intel'),(275252,4075,4087,'2014-04-29 20:31:02','2014-04-14 14:04:37','    Add Storage Policy Support to Recon Middleware\n    \n    Recon middleware returns object ring file MD5 sums; this patch\n    updates it to include other object files that may be present\n    because of Storage Policies.  Also adds unit test coverage for\n    the MD5 reporting function which previously had none.\n    \n    The recon script will now check all rings the server responds with\n    match the on-disk md5\'s regardless of server-type; including any\n    storage policy object rings.\n    \n    Note the small change to the ring save method, needed to\n    stimulate the right code paths in 2.6 and 2.7 versions of\n    gzip to enable testing of ring MD5 sums.\n    \n    Change-Id: I01efd2999d6d9c57ee8693ac3a6236ace17c5566\n    Implements: blueprint storage-policies\n',198,30,'Intel'),(275254,4078,4078,'2014-04-16 16:36:58','2014-04-09 19:15:04','    Adding functional tests for Storage Policy\n    \n    Change-Id: If17bc7b9737558d3b9a54eeb6ff3e6b51463f002\n',253,2,'INTC'),(275256,4075,4075,'2014-05-02 18:38:19','2014-04-28 15:47:50','    Fix X-Backend-Storage-Policy-Index requests\n    \n    The reconciler needs to make PUT/GET requests to specific Storage Policies\n    despite the cached value of the container_info.\n    \n    The existing implementation was pulling the request header after it had\n    already selected the ring and was placing objects on the wrong devices.\n    \n    Change-Id: I2f92b9ddc1179e0223bcb33fc4cfead50db0ae78\n',32,16,'Rackspace'),(275258,4075,4075,'2014-05-02 18:39:57','2014-04-28 17:52:38','    Fix recursive Policy patching\n    \n    When using test.unit.patch_policies on a TestCase that subclasses a patched\n    TestCase the mock policies would be unwound too early.  This change allows you\n    to subclass a TestCase decorated with patch_policies and get the parent\n    classes effective POLICIES.\n    \n    Change-Id: I1b5baefe1ae4281e3be8a5f772994aff4065f981\n',5,1,'Rackspace'),(275260,4075,4075,'2014-05-02 18:39:57','2014-04-28 15:56:44','    Cleanup container update headers in obj server tests\n    \n    The object server tests for container backed headers were doing a match\n    expectation against the backend HeaderKeyDict using a real dict so in tests\n    the keys were needlessly case sensitive.  This change updates the tests so\n    they perform correct assertions with case insensitive header keys and removes\n    some needless string manipulation in the obj server added to satisfy the\n    overly picky unittests.\n    \n    There\'s also a drive by fix to update some backend http mocks for container\n    update tests that we\'re not fully exercising their their request fakes.\n    Because the object server container update code is resilient to to all manor\n    of failure from backend requests the general intent of the tests was\n    unaffected but this change cleans up some confusing logging in the debug\n    logger output.\n    \n    Change-Id: Iea5ed128b62fd2dc17f55cd8076b711e6087dd26\n',13,10,'Rackspace'),(275262,4075,4075,'2014-05-05 15:55:08','2014-04-12 02:30:02','    cleanup policy parsing a bit more\n    \n    Change-Id: Ia7053557411e085a58c7904b12a9d07dd2d1ccf6\n',294,217,'Rackspace'),(275264,4087,4087,'2014-05-06 09:04:06','2014-04-16 15:17:30','    Add Storage Policy support to the Account Reaper\n    \n    Extract X-Storage-Policy-Index header from container listing request\n    and use it when making direct object DELETE requests.\n    \n    Change-Id: Icd4b2611b4169e46f216ff9a9839af732971a2bf\n    Implements: blueprint storage-policies\n',112,43,'Intel'),(275265,4075,4075,'2014-05-07 15:44:27','2014-04-30 20:15:11','    Additional functional tests for Storage Policies\n    \n     * additional container tests\n     * refactor test cross policy copy\n     * make functional tests cleanup better\n    \n    Change-Id: I4b06853a75198073da7cc9a1a224ef23defacfe7\n',316,251,'Rackspace'),(275266,4075,4075,'2014-05-06 18:15:23','2014-04-16 17:14:06','    Add write_fake_ring helper to test.unit\n    \n    ... and some tests to use it.\n    \n    Change-Id: I570d10af5011edcf8279605f8cd0fd1b3fd16bfa\n',65,97,'Rackspace'),(275268,4075,4075,'2014-05-08 01:00:32','2014-04-30 20:19:47','    Fix cross policy versioning DELETE\n    \n    In the object_versions section of proxy.controllers.obj\'s DELETE the\n    X-Storage-Policy-Index header was not being set on the correct request, which\n    ment you\'d get a 404 when you tried to DELETE an object in a versioned\n    container.  The 404 was acctually coming from the request to cleanup the old\n    version after it had already been copied over the current version.\n    \n    Change-Id: Ibbf57abf16bc38c02e5703113ce5a17fa2a7dae2\n',142,5,'Rackspace'),(275270,4075,4075,'2014-05-07 16:24:04','2014-04-16 17:16:57','    Extend interface on InternalClient\n    \n     * add get_object\n     * allow extra headers passthrough on HEAD/metadata reqeusts\n     * expose (account|container|get_object)_ring properties\n    \n    Pipeline propety access to the auto_create_account_prefix also allows us to\n    bypass the early exit on a container HEAD for auto_create_accounts if the\n    container-updater hasn\'t cycled yet.\n    \n    Change-Id: I9b287d15f2426022d669d1186c9e22dd8ca13fb9\n',360,37,'Rackspace'),(275272,4075,4075,'2014-05-07 14:39:07','2014-05-01 21:26:00','    Add probe tests for Account Reaper\n    \n    Change-Id: I1ecb5c25b41a53206b70582dbbe5e9097b86999d\n',136,0,'Rackspace'),(275274,4075,4075,'2014-05-07 16:02:34','2014-05-01 14:05:16','    Add probetest for container sync\n    \n    This change also introduced the option of specifiying in the cluster info\n    which of the relam/cluster\'s is the current realm/cluster.\n    \n    Change-Id: Iec7c936398c5536091e70786c5b36e1fa3abbec0\n',220,8,'Rackspace'),(275276,4075,4075,'2014-05-08 21:18:53','2014-05-08 19:05:48','    Use X-Backend-Storage-Policy-Index\n    \n    The reconciler adds a number of X-Backend headers to container\n    responses and also override InternalClient requests which over-ride\n    container_info when setting X-Backend-Storage-Policy-Index.  Since\n    only backend requests will ever refer to policy by index, this change\n    unifies this backend request header with the other headers already\n    prefixed by Backend.  It also superficially simplifies the proxy\'s\n    BaseController translation of policy_index to name since X-Backend\n    headers are already stripped from outgoing requests.\n    \n    Change-Id: I7597dac2bde7fc438c96b20e1574508aba5cfa05\n',56,53,'Rackspace'),(275278,4080,4080,'2014-04-17 16:55:14','2014-04-17 16:45:12','    Fix test-requirements.txt\n    \n    mock >= 1.0 changed the behavior for iterable sideeffects. Any\n    exceptions in an iterable side_effect will now be raised instead of\n    returned.\n    \n    With mock < 1.0 tests are failing, because test for the\n    internal client (TestSimpleClient.test_get_with_retries) use an\n    iterable sideeffect that raise an URLError on the first request\n    and pass on the second request.\n    \n    Change-Id: I568b68c33ff599d7a4f590e2a0eb8caeee4b4d4e\n',1,1,'Red Hat'),(275279,4087,4087,'2014-04-17 09:57:51','2014-04-12 16:39:29','    Bring Object Auditor Coverage To 99%\n    \n    Previously at 87% with 20 missing 11 partial, this additional\n    test code brings it to 99% 0 missing and 3 partial.  Noticed\n    some easy places to add coverage while working on the\n    Storage Policy branch.\n    \n    Change-Id: I49b5b4db3341416fce1ef42811732c16d3265522\n',53,6,'Intel'),(275281,869,869,'2014-04-10 14:08:27','2014-04-08 11:27:14','    Check swift.conf MD5 with recon\n    \n    I\'ve seen several folks recently have problems with their Swift\n    clusters because they had different hash prefixes on different\n    nodes. Let\'s help them out by having recon check that.\n    \n    Note that MD5-equality is stronger than what we need (which is\n    ConfigParser-equality for a particular set of keys), but this way we\n    don\'t expose the secret hash prefix and suffix across the internal\n    network, just the MD5 checksum of the file containing them.\n    \n    Change-Id: I3af984ee45947345891b3c596a88e3464f178cc7\n',246,105,'SwiftStack'),(275283,826,826,'2014-04-14 19:05:25','2014-04-10 15:37:15','    Load constraints from cluster info dictionary\n    \n    Use constrainst from the new \"swift-constraints\" section of test.conf,\n    fall back to those found in the response to the /info API call,\n    ultimately falling back to the constraints module\'s effective\n    constraints.\n    \n    Change-Id: Iea01c9c4b5148faa10004a240df411cbe7336a6a\n',90,62,'Red Hat'),(275285,4064,4064,'2014-04-21 15:20:12','2014-04-21 15:20:12','    setting request_node_count doesn\'t work\n    \n    Change-Id: Ia161b872cf5ffa43c10334b42cc36d679c3adf56\n',17,8,'Rackspace'),(275287,5636,5636,'2014-04-22 23:52:28','2014-04-22 23:52:28','    Fix redundant add operation of set in ring\n    \n    You don\'t need to add dev_id into seen_ids again when it has already existed in seen_ids.\n    \n    Fixes Bug #1311190\n    \n    Change-Id: If0766de8dc5e2a59a648cae39c789c91131805d2\n',1,1,'independent'),(275289,5637,5637,'2014-04-18 11:43:44','2014-04-18 11:43:44','    Fix error log of proxy-server when cache middleware is disabled\n    \n    Change-Id: I0b67721cbb692fb8d2a5dd8b2c4f5383512b7b45\n    Closes-Bug: #1306591\n',5,5,'NTT'),(275291,733,733,'2014-04-25 20:14:09','2014-04-25 19:54:49','    Fix several typos in the codebase.\n    \n    These were found using https://github.com/intgr/topy\n    \n    Change-Id: I0dc7b76c44b8b17b1dcd79184dad1516fb11173c\n',24,24,'Rackspace'),(275292,826,826,'2014-04-29 08:45:11','2014-01-11 00:18:04','    In-process swift server for functional tests\n    \n    Provide a way to run the functional tests using a p/a/c/o server setup\n    in the same process running the nosetests infrastructure.\n    \n    By setting the environment variable, SWIFT_TEST_IN_PROCESS, to a true\n    value, the functional test framework will construct a set of proxy,\n    account, container and object servers running in the same process that\n    is running the functional tests, ignoring any external swift\n    service. This in-process swift environment is akin to the one used in\n    test/unit/proxy/test_server.py.\n    \n    Setting that same environment variable to a false value will ensure the\n    in-process servers are not used.\n    \n    When the above environment variable is not present, and the\n    /etc/swift/test.conf is _not_ present (or present but empty) on the\n    system where the functional tests are executing, the in-process\n    environment will be used. Previously, if no /etc/swift/test.conf file\n    was found, the tests would just be marked as skipped.\n    \n    Using this in-process method allows one to gather code coverage using\n    the functional tests to exercise code paths, in addition to the unit\n    tests, or more easily debug existing functional tests, or even write new\n    ones.\n    \n    There are two constraints that are changed for use with the in-process\n    functional tests: max_file_size is lowered to roughly 8 MB, and\n    client_timeout is set to 4s.\n    \n    Change-Id: I5acd65e3068868d6509feae1d1954237d37fad45\n',321,23,'Red Hat'),(275293,4083,4083,'2014-04-25 15:09:15','2014-04-25 13:42:30','    Unit test for common.utils.cache_from_env\n    \n    The behavior of common.utils.cache_from_env\n    was changed by https://review.openstack.org/#/c/89488/.\n    This patch adds unit test for that function.\n    \n    Change-Id: If757e12990c971325f7705731ef529a7e2a9eee7\n',32,0,'HP'),(275295,1266,1266,'2014-04-29 17:21:00','2014-04-29 15:04:42','    Sleep between object ZBF process forks\n    \n    We\'ve found that, on fresh systems where the ZBF run completes\n    almost instantaneously, the Swift logs (syslog by default) get\n    filled-up with object ZBF scan start and completion messages.\n    This patch calls self._sleep() between ZBF scan runs to cut-down\n    on these messages and the related unnecessary ZBF scan runs\n    without impacting the integrity of the object auditing process.\n    \n    Change-Id: I057c5ca235467cfa115a7a3d44e21c350900059a\n',20,4,'HP'),(275297,229,4533,'2014-04-10 12:42:11','2014-04-10 18:59:01','    Fix logging issue when services stop on py26\n    \n    On older versions of python 2.6, exceptions would be spewed to the error\n    log whenever a service would stop.  This gets magnified by the\n    container-updater which seems to do it with every pass.  This catches\n    and squelches the error.\n    \n    Change-Id: I5944c1620c62cf0868b70dae7d7e2acd56bf8211\n    Closes-Bug: #1306027\n',6,2,'Rackspace'),(275299,3090,3090,'2014-04-25 11:19:47','2014-04-24 11:02:54','    Sort the log file dates in reverse order\n    \n    We want to show log files in descending order.\n    \n    Change-Id: I6f79d9f5a73afa43efec36c3ca99afcde3fe7813\n    Closes-Bug: #1311405\n',6,1,'Collabora, Ltd'),(275301,26,26,'2014-04-22 15:00:09','2014-04-22 15:00:09','    TempURL: Fixed bug with \\r or \\n in disposition.\n    \n    If an object had a \\r or \\n in its name, it would end up creating an\n    invalid HTTP Content-Disposition header. Reviewer consensus was to use\n    URL encoding.\n    \n    Fixes bug 1306250\n    \n    Change-Id: Ibccaaed5152b4d09d6aee4966a1982cc0a0da07d\n',58,8,'Rackspace'),(275303,4533,4533,'2014-04-24 16:50:03','2014-04-24 16:50:03','    Fix coverage report for newer versions of coverage\n    \n    With newer versions of coverage (at least what is installed with ubuntu\n    trusty), code coverage isn\'t working.  Making this change allows the\n    coverage library to find the swift package.\n    \n    Change-Id: I3b3792622904a86096064c0e03c8095636f83973\n',1,1,'Rackspace'),(275305,229,897,'2014-05-08 22:31:01','2014-05-07 12:15:43','    Update mailmap for Morgan Fainberg\n    \n    Change-Id: Ia46c28c86ef3f440556b1b027d2bf0a7f3e721c5\n',2,1,'Metacloud'),(275306,5146,5146,'2014-05-10 11:15:56','2014-05-10 05:15:12','    Uses None instead of mutables for function param defaults\n    \n    As seen on #1174809, changes use of mutable types as default\n    arguments and defaults them within the method. Otherwise, those\n    defaults can be unexpectedly persisted with the function between\n    invocations and erupt into mass hysteria on the streets.\n    \n    There was indeed a test (TestSimpleClient.test_get_with_retries)\n    that was erroneously relying on this behavior. Since previous tests\n    had populated their own instantiations with a token, this test only\n    passed because the modified headers dict from previous tests was\n    being overridden. As expected, with the mutable defaults fix in\n    SimpleClient, this test begain to fail since it never specified any\n    token, yet it has always passed anyway. This change also now provides\n    the expected token.\n    \n    Change-Id: If95f11d259008517dab511e88acfe9731e5a99b5\n    Related-Bug: #1174809\n',200,36,'IBM'),(275307,61,61,'2014-05-11 14:46:10','2014-05-11 14:44:47','    debug level logs should not be translated\n    \n    According to the OpenStack translation policy available at\n    https://wiki.openstack.org/wiki/LoggingStandards debug messages\n    should not be translated. Like mentioned in several changes in\n    Nova by garyk this is to help prioritize log translation.\n    \n    Change-Id: I59486b1110f08510d83a4aec2a1666805c59d1cd\n    Closes-Bug: #1318333\n',24,24,'B1 Systems GmbH'),(275310,229,4087,'2014-05-22 08:11:07','2014-04-07 14:22:27','    Add Storage Policy Documentation\n    \n    Add overview and example information for using Storage Policies.\n    \n    Also updates SAIO makerings script and swift.conf to tie in with\n    the docs and create a 2nd policy as part of the SAIO install.\n    \n    Change-Id: I6f11f7a1bdaa6f3defb3baa56a820050e5f727f1\n    Implements: blueprint storage-policies\n',641,22,'Intel'),(275311,4075,4075,'2014-05-16 13:22:37','2014-04-08 17:01:29','    Expose Backend container info on deleted containers.\n    \n    Include basic container info in backend headers on 404 responses from the\n    container server.  Default empty values are used as placeholders if the\n    database does not exist.\n    \n    Specifically the X-Backend-Status-Changed-At, X-Backend-DELETE-Timestamp and\n    the X-Backend-Storage-Policy-Index value will be needed by the reconciler to\n    deal with reconciling out of order object writes in the face of recently\n    deleted containers.\n    \n     * Add \"status_changed_at\" key to the response from ContainerBroker.get_info.\n     * Add \"Status Timestamp\" field to swift.cli.info.print_db_info_metadata.\n     * Add \"status_changed_at\" key to the response from AccountBroker.get_info.\n    \n    Change-Id: Ie6d388f067f5b096b0f96faef151120ba23c8748\n',247,66,'Rackspace'),(275313,4075,4075,'2014-05-16 13:22:37','2014-04-28 19:22:51','    Update FakeLogger with better log level handling\n    \n    Parameterize logger on some daemons which were previously unparameterized and\n    try and use the interface in tests.\n    \n    Change-Id: Id2e3740b1dd569050f4e083617e7dd6a4249027e\n',65,43,'Rackspace'),(275315,4075,4078,'2014-05-27 18:34:56','2014-04-15 16:06:22','    Fixes probe tests with non-zero default storage policy\n    \n    Add headers param to direct_client.direct_get_object, which is used in\n    probetests to passthrough the X-Storage-Policy-Index header.\n    \n    Raise SkipTest if default policy type is not replication\n    \n    Change-Id: I19adbbcefbc086c8467bd904a275d55cde596412\n',162,87,'INTC'),(275316,4075,4075,'2014-05-16 13:22:37','2014-04-28 19:28:20','    Make FakeRing use more real code\n    \n    The existing FakeRing mock\'s implementation bit me on some pretty\n    subtle character encoding issue by-passing the hash_path code that is\n    normally part of get_part_nodes.  This change tries to exercise more\n    of the real ring code paths when it makes sense and provide a better\n    Fake for use in testing.\n    \n    Change-Id: I87e10b78ed0963344988f73e946ecda7a96cc6a8\n',72,55,'Rackspace'),(275318,4075,4075,'2014-05-28 20:25:43','2014-05-28 20:23:36','    make policies sortable\n    \n    Change-Id: Iecfd5bd819da025ed8cdf4309f935ffe62a8e91c\n',17,0,'Rackspace'),(275320,4075,4075,'2014-05-28 20:25:45','2014-05-28 18:44:29','    always send spi with container PUT\n    \n    Change-Id: Ib3fb6e2e10adb6e51e80a059a0d84f16cffb7761\n',39,37,'Rackspace'),(275322,4075,4078,'2014-05-28 20:26:40','2014-04-11 15:51:33','    Allow to deprecate policy\n    \n    if a policy is marked as \'deprecate = yes\' in swift.conf:\n        * it will not appear in /info of the cluster\n        * upload/download/delete/post are allowed on the existing containers\n          with this policy.\n        * clients will get error when trying to create container with this policy\n        * clients can get the policy info via HEAD on the existing\n          containers created with this policy\n        * clients also can set new metadata via POST to the containers with\n          this policy\n    \n    corner cases:\n        * deprecated policy will ignore the default option\n        * deprecating a default policy make the policy with the lowest index default\n    \n    Change-Id: Ia72d39dca0c993e461e0e8cadef1dc91be98f3f4\n',96,8,'INTC'),(275324,869,869,'2014-05-16 15:29:47','2014-05-16 14:31:08','    Let users add their own txid suffixes\n    \n    The value of the X-Trans-Id-Extra header on the request (if any) will\n    now be appended to the transaction ID. This lets users put their own\n    information into transaction IDs.\n    \n    For example, Glance folks upload images as large objects, so they\'d\n    like to be able to tie together all the segment PUTs and the manifest\n    PUT with some operation ID in the logs. This would let them pass in\n    that operation ID as X-Trans-Id-Extra, and then when things went\n    wrong, it\'d be much easier to find all the requests in Swift\'s logs.\n    \n    Also, this aids debuggability when requests fail to receive\n    responses. If a user is sending in their own X-Trans-Id-Extra strings,\n    then that gives operators something to search for in the logs. The\n    normal txid won\'t work since that\'s in the response, but the client\n    didn\'t receive one.\n    \n    Swift will only use the first 32 characters of X-Trans-Id-Extra so\n    that its log lines stay a manageable length. Also, it\'s URL-quoted so\n    that users cannot inject double quotes into X-Trans-Id-Extra and screw\n    up log parsers.\n    \n    DocImpact\n    \n    Change-Id: I3c51d0c5ac55697ac230001840da219e73a03157\n',85,3,'SwiftStack'),(275325,733,733,'2014-05-16 10:10:53','2014-05-16 10:09:55','    Fixed several Python3 syntax errors\n    \n    Change-Id: I8634ddb31da0297c06e39b968ce1a209b0d78614\n',4,4,'Rackspace'),(275327,733,733,'2014-05-17 08:18:27','2014-05-16 14:44:18','    Added a tox job for running flake8 under Python 3\n    \n    Change-Id: I04a78cc5e3613d1d765d716633bca297bf7207b6\n',10,0,'Rackspace'),(275329,646,646,'2014-05-08 18:31:07','2013-10-24 03:40:06','    Add profiling middleware in Swift\n    \n    The profile middleware provide a tool to profile Swift\n    code on the fly and collect statistic data for performance\n    analysis. An native simple Web UI is also provided to help\n    query and visualize the data.\n    \n    Change-Id: I6a1554b2f8dc22e9c8cd20cff6743513eb9acc05\n    Implements: blueprint profiling-middleware\n',1778,0,'IBM'),(275331,26,26,'2014-05-20 15:29:51','2014-05-20 15:29:51','    Make the new xprofile tests optional.\n    \n    On Lucid at least, xprofile doesn\'t work. While others try to figure out the\n    underlying issue, this patch would just skip the tests if the profiling code\n    can not be imported.\n    \n    Change-Id: I0fee3f729742cc727edc2adabb4ed782bea7798f\n',26,10,'Rackspace'),(275332,229,229,'2014-05-20 19:46:38','2014-05-20 17:28:19','    Change the default token logged length to 16\n    \n    Based on comments from deployers at the Juno OpenStack summit,\n    limiting the default logged token length (to, by default, prevent\n    tokens from being fully logged) is a good idea.\n    \n    Change-Id: I58980e85329d99de41f1c08f75e85973452317b1\n',16,5,'SwiftStack'),(275334,4533,4533,'2014-05-19 14:43:50','2014-05-08 22:52:15','    Add targeted config loading to swift-init\n    \n    This allows an easier and more explicit way to tell swift-init to run on\n    specific servers.  For example with an SAIO, this allows you to do\n    something like:\n    \n    swift-init object-server.1 reload\n    \n    to reload just the 1st object server.  A more real world example is when\n    you are running separate servers for replication.  In this example you\n    might have an object-server/public.conf and\n    object-server/replication.conf.  With this change you can do something\n    like:\n    \n    swift-init object-server.replication reload\n    \n    to just reload the replication server.\n    \n    DocImpact\n    Change-Id: I5c6046b5ee28e17dadfc5fc53d1d872d9bb8fe48\n',166,21,'Rackspace'),(275336,229,4068,'2014-05-21 09:49:01','2014-05-21 16:38:08','    added Benchmarks/Load Generators section\n    \n    Change-Id: Ie4b12b91ab07987e4f9cf2d1b7d24961d22cfd37\n',8,0,'HP'),(275338,229,229,'2014-05-21 09:37:22','2014-05-21 09:37:22','    taking the global reqs that we can\n    \n    Change-Id: Icfdeeab14e90728aa8167ad6587d51e9b10cb846\n',9,1,'SwiftStack'),(275340,26,26,'2014-05-22 20:30:34','2014-05-22 19:37:53','    New log_max_line_length option.\n    \n    Log lines can get quite large, as we previously noticed with rsync error\n    log lines. We added a setting to cap those, but it really looks like we\n    should have just done this overall limit. We noticed the issue when we\n    switched to UDP syslogging and it would occasionally blow past the 16436\n    lo MTU! This causes Python\'s logging code to get an error and hilarity\n    ensues.\n    \n    Change-Id: I44bdbe68babd58da58c14360379e8fef8a6b75f7\n',114,3,'Rackspace'),(275341,733,733,'2014-05-26 16:07:41','2014-05-26 16:05:42','    Fixed a handful of typos\n    \n    Change-Id: I8cb2de27818332be587df7321ef567f8399910a9\n',6,6,'Rackspace'),(275342,42,42,'2014-05-09 19:10:08','2014-05-09 19:10:08','    Print pipeline names in the reported pipeline\n    \n    When current code modifies the pipeline, it prints the entry point\n    names instead of the names used to construct the pipeline. This is\n    inconvenient because a sysadmin cannot copy and paste from the log.\n    \n    We already save the pipeline name into contexts in most cases, so\n    the fix simply reuses that to provide friendly names.\n    \n    Fixes bug: 1311802\n    \n    Change-Id: Ic76baf1360cd521f140fa1980029ccbce58f1717\n',9,26,'Red Hat'),(275344,4064,4064,'2014-05-21 08:49:05','2014-05-20 12:33:59','    Add ability to remove subsections from /info\n    \n    Change-Id: Ic881065962cf5f69f7a5b64f6e38d9e6e1f8fd18\n',65,10,'Rackspace'),(275346,42,42,'2014-04-30 12:17:25','2014-04-30 12:17:25','    Plumb insecure flag to functests\n    \n    The problem arises when running functests against pre-existing\n    clusters configured with self-signed certificates. As far as\n    security goes, doing that is rather useless, but it happens.\n    Such testing worked previously, but with the switch to Requests\n    in the client, we must plumb \"insecure\" flag. There\'s no other\n    way to do it in Requests, no environment variable, anything.\n    \n    Change-Id: I94a61b60de8ee0529652c8c4a1ab9894c7cdb589\n',29,2,'Red Hat'),(275348,229,4087,'2014-05-27 15:41:19','2014-04-18 10:16:11','    Add Ratelimit parameters to /info\n    \n    We previously registered with no parameters, added parms so they\n    are displayed as follows (example):\n    \n    \"ratelimit\": {\"max_sleep_time_seconds\": 60.0,\n    \"container_listing_ratelimits\": [[0, 100.0], [10, 50.0], [50, 20.0]],\n    \"container_ratelimits\": [[0, 100.0], [10, 50.0], [50, 20.0]],\n    \"account_ratelimit\": 1.0}\n    \n    Note that not all parameters are exposed (intentionally) via /info\n    \n    Change-Id: I36c7ef15af17e3eb8ebb93429035bd06d089a945\n    Closes-Bug: 1308989\n',117,31,'Intel'),(275350,4075,4075,'2014-05-02 20:11:12','2014-05-02 20:11:12','    Add --quoted option to swift-temp-url\n    \n    If you have a path with special characters it may be easier to hand them to\n    swift-temp-url prequoted than try to escape them on the command line.  By the\n    time common.middleware.tempurl gets ahold of the path it\'s unquoted so we do\n    the same before calculating the hmac but still use the pre-quoted path output\n    to the commandline.\n    \n    Change-Id: Ia1a9666e487b1e70e4db7cd597bc6a1027e3e918\n',8,3,'Rackspace'),(275352,26,26,'2014-05-21 13:32:17','2014-05-20 20:19:47','    Container sync no longer sending swift_bytes value\n    \n    Container sync had a bug where it\'d send out the trailing\n    \"; swift_bytes=xxx\" part of the content-type header. That trailing part\n    is just for internal cluster usage by SLO. Since that needed to be\n    stripped in two places now, I separated it out to a function that both\n    spots call.\n    \n    Change-Id: Ibd6035d7a6b78205344bcc9d98bc1b7a9d463427\n',45,15,'Rackspace'),(275354,61,61,'2014-05-20 11:40:39','2014-05-20 11:39:13','    replace string format arguments with function parameters\n    \n    There are files containing string format arguments inside\n    logging messages. Using logging function parameters should\n    be preferred.\n    \n    Change-Id: I1c2a4f43463932e85c75d576241d0c0455c38492\n',10,7,'B1 Systems GmbH'),(275356,5638,4064,'2014-06-10 12:48:05','2014-05-27 09:52:39','    xLO bug with auth tokens expiring during download.\n    \n    Just put SLO and DLO after any auth middleware. This works because when\n    the request goes through that middleware in the pipeline the\n    authentication takes place: validation of the token, setting up who the\n    user is, and setting the authorization call back. Each subrequest made\n    for the segments will be subjected to that authorization call back which\n    verifies the user has access to the individual segments.\n    \n    To get this to work with keystone, the keystone identity is set up\n    during __call__ and applied to the authorize function using a\n    functools.partial. When the authorize function is later called from the\n    environ by the proxy server the idenity that was set up when the request\n    passed through the auth middleware is used, not what can be pulled out\n    of the possibly altered state of the request\'s environment.\n    \n    DocImpact\n    fixes bug: 1315133\n    \n    Change-Id: I7827dd2d9dfbb3c6424773fb2891355d47e372ba\n',30,12,'Rackspace'),(275358,4080,4080,'2014-06-04 16:52:47','2014-06-04 15:27:48','    Fix file uploads > 2 GiB in formpost middleware\n    \n    Formpost middleware fails to upload files larger then 2 GiB due to\n    an Overflow error. The reason is that the readline() will use a\n    readline(int(content_length)) later on and fail if it is larger than\n    2GiB.  Since it is not required to read the whole content into memory\n    to detect the boundary only read the amount of required bytes.\n    \n    The underlying error is located in Python 2.7 and is related to\n    cStringIO: http://bugs.python.org/issue7358\n    \n    Closes-Bug: #1326429\n    Change-Id: I196edda647921c2691d278cebd1cca80ebd360f2\n',1,1,'Red Hat'),(275360,26,26,'2014-05-28 01:18:28','2014-05-27 21:10:47','    Add debug logging to container sync requests\n    \n    Also fixed a bug where SimpleClient would send ?format=json for object\n    requests, which is not necessary.\n    \n    Change-Id: If06a7dcebc9de2d7c8b28a046d60b902dae821c1\n',76,32,'Rackspace'),(275362,42,42,'2014-06-02 16:54:30','2014-06-02 16:54:30','    isolate representation from content in GET request\n    \n    Container server representation of data (received from backend) is isolated\n    into `create_listing()` call. GET() method will call `create_listing()`\n    when it\'s ready to create a serialized object listing. It will allow us to\n    customize that representation: get different listing, if backend supports\n    more interesting queries, for example.\n    \n    Change-Id: I4fa03357d3d9e697bc3e1fb5da42d7572c6ae9b3\n',8,3,'Red Hat'),(275364,5163,5163,'2014-06-04 09:52:07','2014-06-04 09:49:13','    Fixes typo in man page\n    \n    There is a simple typo in the man page of proxy-server.conf,\n    \"client_timeout\" is written as \"client_timeoutt\".\n    This commit fixes it.\n    \n    Closes-Bug: #1326237\n    Change-Id: I98777f523906e4ed625de8f20a96979ea627aa1f\n',1,1,'independent'),(275366,5638,61,'2014-06-03 21:55:49','2014-05-14 16:40:42','    replaced e.message with a bare \"e\" object ref\n    \n    Change-Id: Ia4fa7ab0860532a71a531c13ee2125666547136e\n',1,1,'B1 Systems GmbH'),(275368,869,869,'2014-06-02 10:14:22','2014-06-02 10:14:22','    Remove unused variable\n    \n    The tempurl functional tests would fail if you put tempurl.methods in\n    the proxy server\'s disallowed_sections. The test assumed that the\n    presence of the key \'tempurl\' implied the presence of the subkey\n    \'methods\', but since 9cbf8a3 landed, operators can remove arbitrary\n    things from /info.\n    \n    Normally I\'d just change x[\'methods\'] to x.get(\'methods\', []), but it\n    turns out this was setting up a class variable that nobody ever looked\n    out again, so removing the code also works.\n    \n    Change-Id: Ie899d146bc6fff81a5fae77815897244e8ec6bec\n',0,1,'SwiftStack'),(275370,229,229,'2014-06-18 11:10:17','2014-06-06 11:46:41','    properly quote www-authenticate header value\n    \n    HTTP header values should be quoted. Since the WWW-Authenticate\n    header value contains user-supplied strings, it\'s important to\n    ensure it\'s properly quoted to ensure the integrity of the protocol.\n    \n    Previous to this patch, the URL was unquoted and then the unquoted\n    value was returned in the header. This patch re-quotes the value\n    when it is set on the response.\n    \n    This is filed as CVS-2014-3497\n    \n    Fixes bug 1327414\n    \n    Change-Id: If8bd8842f2ce821756e9b4461a18a8ac8d42fb8c\n',36,1,'SwiftStack'),(275371,4075,4087,'2014-06-18 17:31:37','2014-03-17 12:18:25','    Add Storage Policy Support\n    \n    The basic idea here is to replace the use of a single object ring in\n    the Application class with a collection of object rings. The\n    collection includes not only the Ring object itself but the policy\n    name associated with it, the filename for the .gz and any other\n    metadata associated with the policy that may be needed. When\n    containers are created, a policy (thus a specific obj ring) is\n    selected allowing apps to specify policy at container creation time\n    and leverage policies simply by using different containers for object\n    operations.\n    \n    The policy collection is based off of info in the swift.conf file.\n    The format of the sections in the .conf file is as follows:\n    \n    swift.conf format:\n    \n        [storage-policy:0]\n        name = chicken\n    \n        [storage-policy:1]\n        name = turkey\n        default = yes\n    \n    With the above format:\n    \n    - Policy 0 will always be used for access to existing containers\n      without the policy specified. The ring name for policy 0 is always\n      \'object\', assuring backwards compatiblity. The parser will always\n      create a policy 0 even if not specified\n    \n    - The policy with \'default=yes\' is the one used for new container\n      creation. This allows the admin to specify which policy is used without\n      forcing the application to add the metadata.\n    \n    This commit simply introduces storage policies and the loading\n    thereof; nobody\'s using it yet. That will follow in subsequent\n    commits.\n    \n    Expose storage policies in /info\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: Ica05f41ecf3adb3648cc9182f11f1c8c5c678985\n',1000,3,'Intel'),(275372,4075,4075,'2014-06-18 17:31:37','2014-04-28 19:22:51','    Update FakeRing and FakeLogger\n    \n    FakeLogger gets better log level handling\n    \n    Parameterize logger on some daemons which were previously\n    unparameterized and try and use the interface in tests.\n    \n    FakeRing use more real code\n    \n    The existing FakeRing mock\'s implementation bit me on some pretty subtle\n    character encoding issue by-passing the hash_path code that is normally\n    part of get_part_nodes.  This change tries to exercise more of the real\n    ring code paths when it makes sense and provide a better Fake for use in\n    testing.\n    \n    Add write_fake_ring helper to test.unit for when you need a real ring.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: Id2e3740b1dd569050f4e083617e7dd6a4249027e\n',199,159,'Rackspace'),(275373,4075,4075,'2014-06-18 17:31:38','2014-05-27 16:57:25','    Add Storage Policy support to Containers\n    \n    Containers now have a storage policy index associated with them,\n    stored in the container_stat table. This index is only settable at\n    container creation time (PUT request), and cannot be changed without\n    deleting and recreating the container. This is because a container\'s\n    policy index will apply to all its objects, so changing a container\'s\n    policy index would require moving large amounts of object data\n    around. If a user wants to change the policy for data in a container,\n    they must create a new container with the desired policy and move the\n    data over.\n    \n    Keep status_changed_at up-to-date with status changes.\n    \n    In particular during container recreation and replication.\n    \n    When a container-server receives a PUT for a deleted database an extra UPDATE\n    is issued against the container_stat table to notate the x-timestamp of the\n    request.\n    \n    During replication if merge_timestamps causes a container\'s status to change\n    (from DELETED to ACTIVE or vice-versa) the status_changed_at field is set to\n    the current time.\n    \n    Accurate reporting of status_changed_at is useful for container replication\n    forensics and allows resolution of \"set on create\" attributes like the\n    upcoming storage_policy_index.\n    \n    Expose Backend container info on deleted containers.\n    \n    Include basic container info in backend headers on 404 responses from the\n    container server.  Default empty values are used as placeholders if the\n    database does not exist.\n    \n    Specifically the X-Backend-Status-Changed-At, X-Backend-DELETE-Timestamp and\n    the X-Backend-Storage-Policy-Index value will be needed by the reconciler to\n    deal with reconciling out of order object writes in the face of recently\n    deleted containers.\n    \n     * Add \"status_changed_at\" key to the response from ContainerBroker.get_info.\n     * Add \"Status Timestamp\" field to swift.cli.info.print_db_info_metadata.\n     * Add \"status_changed_at\" key to the response from AccountBroker.get_info.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: Ie6d388f067f5b096b0f96faef151120ba23c8748\n',2269,318,'Rackspace'),(275374,4075,4075,'2014-06-18 17:31:38','2014-05-27 01:17:13','    Add Storage Policy support to Object Server\n    \n    Objects now have a storage policy index associated with them as well;\n    this is determined by their filesystem path. Like before, objects in\n    policy 0 are in /srv/node/$disk/objects; this provides compatibility\n    on upgrade. (Recall that policy 0 is given to all existing data when a\n    cluster is upgraded.) Objects in policy 1 are in\n    /srv/node/$disk/objects-1, objects in policy 2 are in\n    /srv/node/$disk/objects-2, and so on.\n    \n     * \'quarantined\' dir already created \'objects\' subdir so now there\n       will also be objects-N created at the same level\n    \n    This commit does not address replicators, auditors, or updaters except\n    where method signatures changed. They\'ll still work if your cluster\n    has only one storage policy, though.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I459f3ed97df516cb0c9294477c28729c30f48e09\n',971,276,'Rackspace'),(275375,4075,869,'2014-06-18 17:31:38','2014-03-17 17:54:42','    Add Storage Policy support to Object Updates\n    \n    The object server will now send its storage policy index to the\n    container server synchronously and asynchronously (via async_pending).\n    \n    Each storage policy gets its own async_pending directory under\n    /srv/node/$disk/objects-$N, so there\'s no need to change the on-disk\n    pickle format; the policy index comes from the async_pending\'s\n    filename. This avoids any hassle on upgrade. (Recall that policy 0\'s\n    objects live in /srv/node/$disk/objects, not objects-0.)  Per-policy\n    tempdir as well.\n    \n    Also clean up a couple little things in the object updater. Now it\n    won\'t abort processing when it encounters a file (not directory) named\n    \"async_pending-\\d+\", and it won\'t process updates in a directory that\n    does not correspond to a storage policy.\n    \n    That is, if you have policies 1, 2, and 3, but there\'s a directory on\n    your disk named \"async_pending-5\", the updater will now skip over that\n    entirely. It won\'t even bother doing directory listings at all. This\n    is a good idea, believe it or not, because there\'s nothing good that\n    the container server can do with an update from some unknown storage\n    policy. It can\'t update the listing, it can\'t move the object if it\'s\n    misplaced... all it can do is ignore the request, so it\'s better to\n    just not send it in the first place. Plus, if this is due to a\n    misconfiguration on one storage node, then the updates will get\n    processed once the configuration is fixed.\n    \n    There\'s also a drive by fix to update some backend http mocks for container\n    update tests that we\'re not fully exercising their their request fakes.\n    Because the object server container update code is resilient to to all manor\n    of failure from backend requests the general intent of the tests was\n    unaffected but this change cleans up some confusing logging in the debug\n    logger output.\n    \n    The object-server will send X-Storage-Policy-Index headers with all\n    requests to container severs, including X-Delete containers and all\n    object PUT/DELETE requests.  This header value is persisted in the\n    pickle file for the update and sent along with async requests from the\n    object-updater as well.\n    \n    The container server will extract the X-Storage-Policy-Index header from\n    incoming requests and apply it to container broker calls as appropriate\n    defaulting to the legacy storage policy 0 to support seemless migration.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I07c730bebaee068f75024fa9c2fa9e11e295d9bd\n    \n    add to object updates\n    \n    Change-Id: Ic97a422238a0d7bc2a411a71a7aba3f8b42fce4d\n',646,207,'SwiftStack'),(275376,4075,4087,'2014-06-18 17:31:38','2014-03-17 18:38:21','    Add Storage Policy Support to the Auditor\n    \n    This patch makes the object auditor policy-aware, so it\'ll audit\n    objects in any storage policy.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I94e3a7937d9814b9ecef6ca35371e245a43513d3\n',158,69,'Intel'),(275377,4075,4087,'2014-06-18 17:31:38','2014-03-18 10:50:17','    Add storage policy support for the Replicator\n    \n    This makes it so that objects stored in all policies get replicated\n    properly. This is only for rsync replication, not ssync.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: Ifdb4624841f35953ba80189e669d3ef15d5563fd\n',251,93,'Intel'),(275378,4075,4087,'2014-06-18 17:31:38','2014-03-18 11:06:52','    Add Storage Policy Support to ssync\n    \n    This patch makes ssync policy aware so that clusters using storage\n    policies and ssync replication will replicate objects in all policies.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I64879077676d764c6330e03734fc6665bb26f552\n',274,56,'Intel'),(275379,4075,4075,'2014-06-18 17:31:38','2014-03-23 10:24:21','    Put X-Backend-Timestamp in object 404 responses\n    \n    This way the container reconciler can tell (sometimes) that an object\n    was deleted at a certain time.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: Idaba3255f4109e5150d6c457f913c600fd8923eb\n',24,6,'Rackspace'),(275380,4075,4075,'2014-06-18 17:31:39','2014-04-16 17:16:57','    Extend interface on InternalClient\n    \n     * add get_object\n     * allow extra headers passthrough on HEAD/metadata reqeusts\n     * expose (account|container|get_object)_ring properties\n    \n    Pipeline propety access to the auto_create_account_prefix also allows us to\n    bypass the early exit on a container HEAD for auto_create_accounts if the\n    container-updater hasn\'t cycled yet.\n    \n    Allow overriding of storage policy index.\n    \n    This is something the reconciler will need so that it can GET from one\n    policy, PUT in another, and then DELETE from the first one again.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I9b287d15f2426022d669d1186c9e22dd8ca13fb9\n',741,161,'Rackspace'),(275381,4075,4075,'2014-06-18 17:31:39','2014-05-27 15:33:55','    Extend direct_client\n    \n    Rework header handling and add some methods needed by the reconciler.\n    \n     * response headers are case insensitive HeaderKeyDicts\n     * add direct client container obj put and delete\n     * add headers param to direct head object\n     * add headers to DirectClientException\n    \n    DirectClientException is a subclass of ClientException with a convience\n    constructor.  ClientException now supports an http_headers kwarg.\n    \n    Exceptions raised from direct_client will include headers.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: Ia484d569619df0bf85f973e4e916de2ac6401d5e\n',600,311,'Rackspace'),(275382,4075,4075,'2014-06-18 17:31:39','2014-04-28 20:03:48','    Add container-reconciler daemon\n    \n    This daemon will take objects that are in the wrong storage policy and\n    move them to the right ones, or delete requests that went to the wrong\n    storage policy and apply them to the right ones. It operates on a\n    queue similar to the object-expirer\'s queue.\n    \n    Discovering that the object is in the wrong policy will be done in\n    subsequent commits by the container replicator; this is the daemon\n    that handles them once they happen.\n    \n    Like the object expirer, you only need to run one of these per cluster\n    see etc/container-reconciler.conf.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I5ea62eb77ddcbc7cfebf903429f2ee4c098771c9\n',2658,11,'Rackspace'),(275383,4075,4075,'2014-06-18 20:57:04','2014-04-28 21:27:29','    Add reconciler probetest outline\n    \n    You can manually setup a split brain scenario for reconciler testing with the\n    enqueue script using the machinery from the included probetest.  Evoke the\n    test as a script with with \'split-brain\' command for more help.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I3a7b3167d674eba5f6e4072b176f6c4d29cdcd72\n',218,0,'Rackspace'),(275384,4075,4075,'2014-06-18 20:57:09','2014-05-27 17:47:21','    Merge container storage_policy_index\n    \n    Keep status_changed_at in container databases current with status changes that\n    occur as a result of container creation, deletion, or re-creation.\n    \n    Merge container put/delete/created timestamps when handling replicate\n    responses from remote servers in addition to during the handling of the\n    REPLICATE request.\n    \n    When storage policies are configured on a cluster send status_changed_at,\n    object_count and storage_policy_index as part of container replication sync\n    args.\n    \n    Use status_changed_at during replication to determine the oldest active\n    container and merge storage_policy_index.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: Ib9a0dd42c271145e641437dc04d0ebea1e11fc47\n',949,79,'Rackspace'),(275385,4075,4087,'2014-06-18 20:57:09','2014-05-27 19:02:52','    Add Storage Policy Support to Accounts\n    \n    This change updates the account HEAD handler to report out per\n    policy object and byte usage for the account.  Cumulative values\n    are still reported and policy names are used in the report\n    out (unless request is sent to an account server directly in\n    which case policy indexes are used for easier accounting).\n    \n    Below is an example of the relevant HEAD response for a cluster\n    with 3 policies and just a few small objects:\n    \n       X-Account-Container-Count: 3\n       X-Account-Object-Count: 3\n       X-Account-Bytes-Used: 21\n       X-Storage-Policy-Bronze-Object-Count: 1\n       X-Storage-Policy-Bronze-Bytes-Used: 7\n       X-Storage-Policy-Silver-Object-Count: 1\n       X-Storage-Policy-Silver-Bytes-Used: 7\n       X-Storage-Policy-Gold-Object-Count: 1\n       X-Storage-Policy-Gold-Bytes-Used: 7\n    \n    Set a DEFAULT storage_policy_index for existing container rows during\n    migration.\n    \n    Copy existing object_count and bytes_used in policy_stat table during\n    migration.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I5ec251f9a8014dd89764340de927d09466c72221\n',994,87,'Intel'),(275386,4075,42,'2014-06-18 20:57:09','2014-06-17 22:35:59','    Refactoring storage policies merge_timestamps\n    \n     * base implementation of is_deleted phrased to use _is_deleted\n     * wrap pre-conn coded _is_deleted inside a transation for merge_timestamps\n    \n    Implements: blueprint storage-policies\n    Change-Id: I6a948908c3e45b70707981d87171cb2cb910fe1e\n',512,117,'Red Hat'),(275387,4075,4078,'2014-06-18 20:57:09','2014-04-09 19:15:04','    Add functional tests for Storage Policy\n    \n     * additional container tests\n     * refactor test cross policy copy\n     * make functional tests cleanup better\n    \n    In-process functional tests only define a single ring and will skip some of\n    the multi-storage policy tests, but have been updated to reload_policies with\n    the patched swift.conf.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: If17bc7b9737558d3b9a54eeb6ff3e6b51463f002\n',484,57,'INTC'),(275388,4075,4078,'2014-06-18 20:57:09','2014-05-27 17:25:15','    Update bin scripts to be storage policy aware\n    \n    swift-container-info:\n        Print policy container info\n    \n    swift-object-info:\n        Allow to specify storage policy name when looking for object info\n        Notify if there is missmatch between ring location and the actual\n        object path in filesystem\n    \n    swift-get-nodes:\n        Allow to specify storage policy name when looking for account/\n        container/object ring location\n        Notify if there is missmatch between ring and the policy\n    \n    Lookup policy name in swift.conf; \'Legacy\' container will use\n    policy-0\'s name; \'Unknown\' is shown if policy not found in swift.conf\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I450d40dc6e2d8f759187dff36d658e52737ae2a5\n',700,276,'INTC'),(275389,4075,4075,'2014-06-18 21:09:50','2014-04-29 00:21:08','    Enqueue misplaced objects during container replication\n    \n    After a container database is replicated, a _post_replicate_hook will enqueue\n    misplaced objects for the container-reconciler into the .misplaced_objects\n    containers.  Items to be reconciled are \"batch loaded\" into the reconciler\n    queue and the end of a container replication cycle by levering container\n    replication itself.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I3627efcdea75403586dffee46537a60add08bfda\n',769,13,'Rackspace'),(275390,4075,4075,'2014-06-18 21:09:53','2014-04-28 17:05:43','    Add LRUCache to common.utils\n    \n    This decorator will memonize a function using a fixed size cache that evicts\n    the oldest entries.  It also supports a maxtime paramter to configure a\n    \"time-to-live\" for entries in the cache.\n    \n    The reconciler code uses this to cache computations of the correct storage\n    policy index for a container for 30 seconds.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I0f220869e33c461a4100b21c6324ad725da864fa\n',236,1,'Rackspace'),(275391,4075,4078,'2014-06-18 21:09:53','2014-04-15 16:06:22','    Fixes probe tests with non-zero default storage policy\n    \n    Add headers param to direct_client.direct_get_object, which is used in\n    probetests to passthrough the X-Storage-Policy-Index header.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I19adbbcefbc086c8467bd904a275d55cde596412\n',120,68,'INTC'),(275392,4075,4087,'2014-06-18 21:09:54','2014-03-17 17:34:35','    Add Storage Policy Support to list_endpoints\n    \n    This patch makes list_endpoints policy aware so that the object is\n    looked up in the right ring and its actual locations returned to the\n    client.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I56d4b0f4f321a4c72b11ec44d868a194d02ea3a3\n',103,34,'Intel'),(275393,4075,4087,'2014-06-18 21:09:54','2014-04-09 16:10:13','    Add Storage Policy Support to Container Sync\n    \n    Have container sync get its object ring from POLICIES now,\n    update tests to use policy index from container_info and pass\n    that along for use in ring selection.\n    \n    This change also introduced the option of specifiying in the cluster info\n    which of the relam/cluster\'s is the current realm/cluster.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: If57d3b0ff8c395f21c81fda76458bc34fcb23257\n',333,94,'Intel'),(275394,4075,4087,'2014-06-18 21:09:54','2014-04-14 14:04:37','    Add Storage Policy Support to Recon Middleware\n    \n    Recon middleware returns object ring file MD5 sums; this patch\n    updates it to include other object files that may be present\n    because of Storage Policies.  Also adds unit test coverage for\n    the MD5 reporting function which previously had none.\n    \n    The recon script will now check all rings the server responds with\n    match the on-disk md5\'s regardless of server-type; including any\n    storage policy object rings.\n    \n    Note the small change to the ring save method, needed to\n    stimulate the right code paths in 2.6 and 2.7 versions of\n    gzip to enable testing of ring MD5 sums.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I01efd2999d6d9c57ee8693ac3a6236ace17c5566\n',202,26,'Intel'),(275395,4075,4087,'2014-06-18 21:09:54','2014-04-16 15:17:30','    Add Storage Policy support to the Account Reaper\n    \n    Extract X-Storage-Policy-Index header from container listing request\n    and use it when making direct object DELETE requests.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: Icd4b2611b4169e46f216ff9a9839af732971a2bf\n',202,39,'Intel'),(275396,4075,4075,'2014-06-18 21:09:54','2014-06-06 11:35:34','    Fix object-expirer for missing objects\n    \n    Currently if the object-expirer goes to delete an object and the primary nodes\n    are unavailable, or the object is on handoffs - the object servers are unable\n    to verify the x-if-delete-at timestamp and return 412, without writing a\n    tombstone or updating the containers.  The expirer treats 412 as success and\n    the dark data is not removed form the object servers nor the object removed in\n    the listing.\n    \n    As a side effect of this bug, if the expirer encounters split brain the delete\n    would never get processed in the correct storage policy.\n    \n    It seems it\'s just not correct to treat the lack of data as success.  Now the\n    object server will treat x-if-delete at against a non-existent object as a\n    404, and to distinguish from a successfull process of an x-if-delete-at\n    request, will return 204.\n    \n    The expirer will treat a 404 response from swift as a failure, and will\n    continue to attempt to expire the object until it is older that it\'s\n    configurable reclaim age.  However swift will only return 404 if the majority\n    of nodes are able to return success, or if only even a single node is able to\n    accept the x-if-delete-at request the containers will get updated and\n    replicaiton will settle the tombstone - the subsequent x-if-delete-at request\n    will 412 and be removed from the queue.\n    \n    It\'s worth noting that if an object with x-delete-at meta is DELETED (by a\n    client request) an async update for the expiring update containers will be\n    processed to remove the queue entry - but if no primary nodes handle the\n    DELETE request replication will never remove the expiring entry and assuming\n    it\'s scheduled for beyond the tombstones reclaim age - the queue entry will\n    not be processable.  In this case the expirer will attempt to DELETE the\n    object (and get 404s) in vain until the queue entry passes the configurable\n    reclaim age.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I66260e99fda37e97d6d2470971b6f811ee9e01be\n',291,67,'Rackspace'),(275397,4075,4075,'2014-06-19 10:18:06','2014-06-10 22:17:47','    Add two vector timestamps\n    \n    The normalized form of the X-Timestamp header looks like a float with a fixed\n    width to ensure stable string sorting - normalized timestamps look like\n    \"1402464677.04188\"\n    \n    To support overwrites of existing data without modifying the original\n    timestamp but still maintain consistency a second internal offset\n    vector is append to the normalized timestamp form which compares and\n    sorts greater than the fixed width float format but less than a newer\n    timestamp.  The internalized format of timestamps looks like\n    \"1402464677.04188_0000000000000000\" - the portion after the underscore\n    is the offset and is a formatted hexadecimal integer.\n    \n    The internalized form is not exposed to clients in responses from Swift.\n    Normal client operations will not create a timestamp with an offset.\n    \n    The Timestamp class in common.utils supports internalized and normalized\n    formatting of timestamps and also comparison of timestamp values.  When the\n    offset value of a Timestamp is 0 - it\'s considered insignificant and need not\n    be represented in the string format; to support backwards compatibility during\n    a Swift upgrade the internalized and normalized form of a Timestamp with an\n    insignificant offset are identical.  When a timestamp includes an offset it\n    will always be represented in the internalized form, but is still excluded\n    from the normalized form.  Timestamps with an equivalent timestamp portion\n    (the float part) will compare and order by their offset.  Timestamps with a\n    greater timestamp portion will always compare and order greater than a\n    Timestamp with a lesser timestamp regardless of it\'s offset.  String\n    comparison and ordering is guaranteed for the internalized string format, and\n    is backwards compatible for normalized timestamps which do not include an\n    offset.\n    \n    The reconciler currently uses a offset bump to ensure that objects can move to\n    the wrong storage policy and be moved back.  This use-case is valid because\n    the content represented by the user-facing timestamp is not modified in way.\n    Future consumers of the offset vector of timestamps should be mindful of HTTP\n    semantics of If-Modified and take care to avoid deviation in the response from\n    the object server without an accompanying change to the user facing timestamp.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: Id85c960b126ec919a481dc62469bf172b7fb8549\n',2034,895,'Rackspace'),(275398,4075,4087,'2014-06-19 10:18:34','2014-04-07 14:22:27','    Add Storage Policy Documentation\n    \n    Add overview and example information for using Storage Policies.\n    \n    DocImpact\n    Implements: blueprint storage-policies\n    Change-Id: I6f11f7a1bdaa6f3defb3baa56a820050e5f727f1\n',923,20,'Intel'),(275400,229,229,'2014-06-20 14:49:21','2014-06-20 10:15:32','    release notes for Swift 2.0\n    \n    Change-Id: I2bf91c755d2f779639c773fcfe2a3b54a584b4ae\n',72,1,'SwiftStack'),(275401,4087,4087,'2014-06-10 08:08:13','2014-06-10 08:08:13','    Change assertCalledWith to assert_called_with\n    \n    In test_ptime() 2 uses of the former failed to assert with bogus\n    values used in the assert.  Using assert_called_with() instead\n    correctly performs the assertion.\n    \n    Change-Id: Idbd918f8e8d3ec5a4110725b949710fb54b4ba9a\n',2,2,'Intel'),(275403,229,229,'2014-06-30 13:13:12','2014-06-30 13:12:14','    default git review to push to feature/ec branch\n    \n    Change-Id: I057a56d892a0fb0ff10c901c768a9ea5fa5926b9\n',1,0,'SwiftStack'),(275404,4087,4087,'2014-06-23 12:52:50','2014-06-23 12:52:50','    Replace POLICY and POLICY_INDEX with string literals\n    \n    Replaced throughout code base &  tox\'d. Functional as well\n    as probe tests pass with and without policies defined.\n    \n    POLICY --> \'X-Storage-Policy\'\n    POLICY_INDEX --> \'X-Backend-Storage-Policy-Index\'\n    \n    Change-Id: Iea3d06de80210e9e504e296d4572583d7ffabeac\n',278,228,'Intel'),(275406,4087,4087,'2014-06-23 11:09:56','2014-06-21 06:38:04','    Minor Updates to Storage Policy Docs\n    \n    Fixed some grammar issues, formatting issues, clarrified some\n    wording now that its easier to read fully rendered.\n    \n    Change-Id: Ie803dd1a84d50de7663a7099c32d81807701e188\n',30,29,'Intel'),(275408,869,869,'2014-06-24 11:04:45','2014-06-06 14:29:44','    Don\'t count 412 or 416 as errors in stats\n    \n    The backend HTTP servers emit StatsD metrics of the form\n    <server>.<method>.timing and <server>.<method>.errors.timing\n    (e.g. object-server.GET.timing). Whether something counts as an error\n    or not is based on the response\'s HTTP status code.\n    \n    Prior to this commit, \"success\" was 2xx, 3xx, or 404, while everything\n    else was considered \"error\". This adds 412 and 416 to the \"success\"\n    set. Like 404, these status codes indicate that we got the request and\n    processed it without error, but the response was \"no\". They shouldn\'t\n    be in the same category as statuses like 507 that indicate something\n    stopped the request from being processed.\n    \n    Change-Id: I5582a51cf6f64aa22c890da01aaaa077f3a54202\n',36,4,'SwiftStack'),(275410,4080,1266,'2014-06-25 14:07:51','2014-06-16 09:55:19','    Fix swift-recon --auditor bug\n    \n    I introduced a bug in swift-recon --auditor, which Christian\n    Schwede uncovered.  Christian proposed a fix which replaces the\n    generator nested_get_value with a recursive function which\n    returns just one instance of a key.  Christian\'s fix will break\n    the parallel object auditor patch which uses the generator to\n    return all instances of a particular key in a nested dictionary\n    and then sums those values.\n    \n    This alternative fix sums over all values returned by\n    nested_get_value, as is done in the parallel auditor patch.\n    \n    Change-Id: I6ac403395ab42d11161d6df266e8fbd5a2af9a64\n',9,9,'HP'),(275412,869,869,'2014-06-24 10:37:32','2014-06-24 10:37:28','    Fix some spelling in comments\n    \n    Change-Id: Id272dd9f603a42d9b22f80cff93716a5ed15698a\n',1,1,'SwiftStack'),(275414,4075,4075,'2014-06-25 23:27:04','2014-06-25 20:21:28','    Fix double request in simple client\n    \n    The SimpleClient.base_request method need only to call urllib2.urlopen\n    once to get a response from the server.  Remove the duplicate call.\n    \n     * fixup tests that were poorly mocking urllib2\n     * mock eventlet sleep because we\'re all busy\n    \n    Change-Id: I6da93c689200351e9dbd9416b9c4bf9544571f15\n',14,9,'Rackspace'),(275415,4075,4075,'2014-06-30 13:28:24','2014-06-25 11:38:54','    Fix KeyError on Storage Policy Container Sync\n    \n    In the proxy, container_info can return a \'storage_policy\' of None.  When\n    you set a header value on a swob.Request to None that effectively just\n    delete\'s the key.  One path through the proxy during container sync was\n    counting on the the \'X-Backend-Storage-Policy-Index\' being set which isn\'t\n    the case if the cached container_info if for a pre-policies container.\n    \n    Also clean up some test cruft, tighten up the interface on FakeConn, and add\n    some object controller tests to exercise more interesting failure and handoff\n    code paths.\n    \n    Change-Id: Ic379fa62634c226cc8a5a4c049b154dad70696b3\n',302,97,'Rackspace'),(275416,832,832,'2014-06-30 12:55:37','2014-06-30 12:55:37','    Add SAIO fix for Ubuntu 12.04\n    \n    The version of setup tools in Ubuntu 12.04 is too old and is causing\n    the SAIO instructions to fail when installing python-swiftclient.\n    \n    The work around is to install python-swiftclient\'s dependencies\n    before running running:\n    \n      python setup.py develop\n    \n    This change adds a note to users of Ubuntu 12.04 to replace step 2\n    of \"Getting the code\" with:\n    \n      cd $HOME/python-swiftclient; sudo pip install -r requirements.txt; \\\n                                   python setup.py develop; cd -\n    \n    Change-Id: I63f57bbf1f1158f8740f6137ad55ff49f12a316c\n    Closes-Bug: #1217288\n',5,0,'Rackspace'),(275418,5639,5639,'2014-07-01 04:56:39','2014-06-02 05:32:12','    Container Auditor should log a warning if the devices path contains a non-directory.\n    \n    If the devices path configured in container-server.conf contains a file\n    then an uncaught exception is seen in the logs. For example if file foo exists as such\n    /srv/1/node/foo then when the container-auditor runs, the exception that foo/containers is\n    not a directory is seen in the logs\n    \n    This patch was essentially clayg and can be found in the bug\n    \n    I tested it and wanted to get a feel of the openstack workflow so going through the\n    commit process\n    \n    I have added a unit test as well as cleaned up and improved the unit test coverage\n    for this module.\n    - unit test for above fix is added\n    - unit test to verify exceptions that are raised in the module\n    - unit test to verify the logger\'s behavior\n    - unit test to verify mount_check behavior\n    \n    Change-Id: I903b2b1e11646404cfb0551ee582a514d008c844\n    Closes-Bug: #1317257\n',135,8,'independent'),(275420,869,869,'2014-06-16 10:43:22','2014-06-12 16:51:28','    Fix SLO test with old simplejson\n    \n    Our requirements.txt contains \"simplejson>=2.0.9\". With that version,\n    attempting to decode invalid JSON raises ValueError, not\n    simplejson.JSONDecodeError. In fact, there is no such thing as\n    JSONDecodeError; it isn\'t introduced until a later version. Also,\n    stdlib\'s json module doesn\'t have a JSONDecodeError either. However,\n    JSONDecodeError inherits from ValueError, so we can just catch that\n    instead.\n    \n    Also added a better failure message when invalid JSON is detected;\n    we\'ll now fail immediately instead of later in some assertEqual().\n    \n    Change-Id: I7f0db20b2d72e89c961cb43daa6888ecd878f769\n',2,2,'SwiftStack'),(275422,4080,4080,'2014-06-25 14:07:52','2014-06-25 14:05:05','    Add test for swift-recon --auditor\n    \n    Related-Bug: 1329785\n    Change-Id: I47cecd8a4cd55ca75c2a51153be7bb61c27d0ea0\n',45,0,'Red Hat'),(275424,26,26,'2014-07-02 13:05:23','2014-06-25 18:19:25','    SimpleClient http proxying\n    \n    Previously, this code was attempting to set up http proxying but it\n    wasn\'t working. We noticed after a while when we saw traffic going\n    through an alternate route instead of our set of http proxies with\n    container sync.\n    \n    Additional work and testing by clayg; thanks!\n    \n    Change-Id: I840b8e55a80c13ae85c65bf68de261d735685b27\n',84,12,'Rackspace'),(275425,4075,4075,'2014-07-02 12:20:05','2014-07-02 12:20:05','    Fix order dependent test in proxy.test_server\n    \n    TestObjectController.test_POST_backend_headers was being too picky about the\n    order of backend requests which when pushed through eventlet will not have a\n    stable order.  This change preserves the expectations and assertions while\n    removing the dependency on the order of the requests.\n    \n    Change-Id: I7176ccb9223cd3dfc3c922b8b3d81eb514891d05\n',13,5,'Rackspace'),(275426,229,4075,'2014-07-02 10:49:38','2014-06-30 21:49:49','    Fix pop_queue for move object twice\n    \n    With the two vector timestamp change some resolution was lost in the queue\n    entries that could lead to the reconciler being unable to successfully remove\n    a processed item from the queue in pop_queue.  To ensure the queue entries\n    with a significant offset can be successfully removed while still handling\n    the re-enqueued object case issue the DELETE with the timestamp slightly later\n    than the maximum of the queue entries last modified time (q_record) and\n    misplaced objects timestamp (q_ts).\n    \n    Change-Id: I4726243b3f7c4c1e98f0c578e7ffdecf4ec22199\n',8,1,'Rackspace'),(275428,4075,4087,'2014-07-02 15:58:22','2014-07-02 14:39:42','    Fix potential missing key error in container_info\n    \n    If upgrading from a non-storage policy enabled version of\n    swift to a storage policy enabled version its possible that\n    memcached will have an info structure that does not contain\n    the \'storage_policy\" key resulting in an unhandled exception\n    during the lookup.  The fix is to simply make sure we never\n    return the dict without a storage_policy key defined; if it\n    doesn\'t exist its safe to make it \'0\' as this means you\'re\n    in the update scenario and there\'s xno other possibility.\n    \n    Change-Id: If8e8f66d32819c5bfb2d1308e14643f3600ea6e9\n',50,21,'Intel'),(275430,869,869,'2014-07-01 10:34:45','2014-06-03 14:17:01','    Small cleanup to ring serialization\n    \n    Instead of catching TypeError and retrying without mtime, let\'s just\n    check and see if mtime is an allowed arg and decide based on\n    that. This way, if anything else raises TypeError we\'ll know about it.\n    \n    Change-Id: Ib394d8176e2bc4bd53ace019ce5816369223c273\n',3,2,'SwiftStack'),(275432,4075,869,'2014-07-02 15:09:01','2014-07-02 11:37:26','    Fix exception raising in FakeConn\n    \n    Timeout isn\'t an Exception, so Timeouts in tests weren\'t getting\n    raised. Instead, you\'d sometimes have an HTTPResponse\'s .status be a\n    Timeout object, not an integer, which greatly confuses code that\n    expects an integer.\n    \n    Also reorder the test that exposed the failure in the gate so it blows\n    up most times instead of sometimes do demonstrate the failure with out\n    this fix to FakeConn.\n    \n    Change-Id: I76367a0575f84cad6b2f03e814f3f16bf96bc7d1\n',12,12,'SwiftStack'),(275434,4075,4087,'2014-06-23 23:13:18','2014-06-23 16:01:02','    Fix issues with test_wsgi.py and Storage Policies\n    \n    Discovered some tests that were coupling the code under test with the\n    storage policies configured in /etc/swift/swift.conf.  There was some\n    tests that created fake rings in their tempdirs, but didn\'t reset or\n    patch the POLICIES global.  So if your local config needed more rings\n    that the fake\'s were setting up (just 2) the tests would puke when they\n    loaded up an app that looked for rings.  I think this probably started\n    happening when we added eager object ring loading back into the proxy.\n    \n     * two TestCases in test_wsgi were missing @patch_policies\n     * fixed issue with patch_policies that could cause state to bleed\n       between tests\n     * patch_policies\' legacy and default collections get a FakeRing by\n       default\n    \n     * drive-by cleanup for test_loadapp_proxy() ring serialized path\n       handling\n     * drive-by cleanup for test_internal_client that was doing basically\n       the same thing as test_wsgi\n    \n    Change-Id: Ia706000ba961ed24f2c22b81041e53a0c3f302fc\n',27,27,'Intel'),(275436,4087,4087,'2014-06-10 08:03:23','2014-06-06 14:46:42','    Mock time for audit test \'test_sleeper\'\n    \n    The object auditor unit test, test_sleeper, needs to mock out time\n    to ensure run variations in the test environment do not skew the\n    results.\n    \n    Change-Id: I6ef15e88d6f760bc805e4bb6a6270751984624ff\n    Closes-Bug: 1321019\n',6,7,'Intel'),(275438,4075,4075,'2014-05-08 21:09:24','2014-05-02 12:36:15','    Sync netifaces with global-requirements\n    \n    also take the bit with the setup.py thing, seems harmless?\n    \n    Change-Id: I387147235727752540a0a173a45b4b057d96899c\n',9,1,'Rackspace'),(275440,869,61,'2014-07-07 15:42:13','2014-05-30 00:06:44','    Use except x as y instead of except x, y\n    \n    According to https://docs.python.org/3/howto/pyporting.html the\n    syntax changed in Python 3.x. The new syntax is usable with\n    Python >= 2.6 and should be preferred to be compatible with Python3.\n    \n    Enabled hacking check H231.\n    \n    Change-Id: I2c41dc3ec83e79181e8fd50e76771a74c393269c\n',3,3,'B1 Systems GmbH'),(275442,1266,1266,'2014-06-25 16:57:53','2014-03-26 16:32:07','    Parallel object auditor\n    \n    We are soon going to put servers with a high ratio of disk to CPU\n    into production as object servers.  One of our concerns with this\n    configuration is that the object auditor would take too long to\n    complete its audit cycle.  Therefore we decided to parallelise\n    the auditor.\n    \n    The auditor already uses fork(), so we decided to use the parallel\n    model from the replicator.  Concurrency is set by the concurrency\n    parameter in the auditor stanza, which sets the number of parallel\n    checksum auditors.  The actual number of parallel auditing processes\n    is concurrency + 1 if zero_byte_fps is non-zero.\n    \n    Only one ZBF process is forked, and a new ZBF process is forked as\n    soon as the current ZBF process finishes.  Thus the last process\n    running will always be a ZBF process.\n    \n    Both forever and once modes are parallelised.\n    \n    Each checksum auditor process submits a nested dictionary with keys\n    {\'object_auditor_stats_ALL\': {\'diskn\': {..}}} to dump_recon_cache\n    so that the object_auditor_stats_ALL dict in recon cache consists\n    of individual sub-dicts for each of the object disks on the server.\n    The recon cache is no different to before when the checksum auditor\n    is run in serial mode.  When swift-recon is run, it sums the stats\n    for the individual disks.\n    \n    DocImpact\n    \n    Change-Id: I0ce3db57a43e482d4be351cc522fc9060af6e2d3\n',128,45,'HP'),(275444,4080,5636,'2014-07-08 11:55:13','2014-06-29 22:03:33','    Document the unnecessary method invoking in FakeRing\n    \n    Add comment to explain why we invoke the get_part method even if the\n    _part_shift is equal to 32.\n    \n    Closes-Bug:  #1335581\n    \n    Change-Id: I160e9383b5e65f75ed5e89511cc7e63c51958a25\n',1,0,'independent'),(275446,26,26,'2014-07-08 15:15:07','2014-07-08 15:14:25','    This setting should\'ve been set to False back ...\n    \n    ...with commit 9eb797b09916574c2a4e0f5f9ea61fe120879075\n    \n    With this setting to True in the code, any tools anyone writes will\n    automatically start preallocating, which is almost always bad these days\n    with SSDs. So, if you write a tool that just scan dbs for stats, it\'ll\n    commit any pending info triggering preallocation and bam, your SSDs\n    start to fill up. :/\n    \n    Anyway, back when I wrote 9eb797b09916574c2a4e0f5f9ea61fe120879075 it\n    was my intention to have this off by default, everywhere; I changed all\n    the settings points but I failed to change the dang constant itself.\n    This corrects that.\n    \n    Change-Id: Iada0a3f1ecfabda4a96f574903d8e2eed1f69064\n',1,1,'Rackspace'),(275448,229,4075,'2014-07-02 21:18:01','2014-06-25 11:38:54','    Fix KeyError on Storage Policy Container Sync\n    \n    In the proxy, container_info can return a \'storage_policy\' of None.  When\n    you set a header value on a swob.Request to None that effectively just\n    delete\'s the key.  One path through the proxy during container sync was\n    counting on the the \'X-Backend-Storage-Policy-Index\' being set which isn\'t\n    the case if the cached container_info if for a pre-policies container.\n    \n    Also clean up some test cruft, tighten up the interface on FakeConn, and add\n    some object controller tests to exercise more interesting failure and handoff\n    code paths.\n    \n    Change-Id: I643e08c208efdc5a39e840d9e96710ddad54236b\n',302,96,'Rackspace'),(275449,229,4075,'2014-07-02 21:18:05','2014-06-30 21:49:49','    Fix pop_queue for move object twice\n    \n    With the two vector timestamp change some resolution was lost in the queue\n    entries that could lead to the reconciler being unable to successfully remove\n    a processed item from the queue in pop_queue.  To ensure the queue entries\n    with a significant offset can be successfully removed while still handling\n    the re-enqueued object case issue the DELETE with the timestamp slightly later\n    than the maximum of the queue entries last modified time (q_record) and\n    misplaced objects timestamp (q_ts).\n    \n    Change-Id: I87b1e4b4256af3f71defb58c8137c303d1ae63be\n',8,1,'Rackspace'),(275450,229,4087,'2014-07-02 21:18:10','2014-07-02 14:39:42','    Fix potential missing key error in container_info\n    \n    If upgrading from a non-storage policy enabled version of\n    swift to a storage policy enabled version its possible that\n    memcached will have an info structure that does not contain\n    the \'storage_policy\" key resulting in an unhandled exception\n    during the lookup.  The fix is to simply make sure we never\n    return the dict without a storage_policy key defined; if it\n    doesn\'t exist its safe to make it \'0\' as this means you\'re\n    in the update scenario and there\'s xno other possibility.\n    \n    Change-Id: If8c88f67ba7a3180ad06b586372fe35c65807aac\n',50,21,'Intel'),(275452,869,1352,'2014-07-01 10:44:11','2014-07-01 15:57:42','    Fix the section name in CONTRIBUTING.rst\n    \n    The name of the section \"If you\'re developer, start here\"\n    has changed in the wiki, now is \"If you\'re a developer\".\n    This commit updates it to correctly refer to the\n    proper section.\n    \n    Change-Id: I724107362c7eaf895133ab0a902a575081c025be\n',2,2,'99cloud'),(275454,4087,4087,'2014-07-04 06:08:53','2014-07-04 05:17:03','    Adjust timeout value in test_client_timeout\n    \n    Per information filed in bug (and related bugs referenced in the\n    report) it appears that in TestObjectController.test_client_timeout\n    having a matching timeout value for both self.app.client_timeout\n    and SlowBody() appears to work however, as expected, a smaller\n    value in self.app.client_timeout also works where a larger\n    value fails.  With that short test combined with speculation and\n    related fixes, seems reasonable to merge what is suggested in\n    the bug report, drop the self.app.client_timeout to 0.05\n    \n    Fixes Bug #1316716\n    \n    Change-Id: Ib4c6d3bb275f6c50c62505c90656efa7ee566bc0\n',1,1,'Intel'),(275456,4087,4087,'2014-07-10 14:13:27','2014-07-10 06:21:56','    Update docs to highlight that the auditor chunk size can be set\n    \n    May not be obvious, but existing code will let you change the\n    disk_chunk_size just for the auditor so this just points that\n    out in the docs.  In one short test I ran with a 4 node cluster\n    with 18GB of 4MB objects on it, changint he auditor chunk size\n    from the default of 64K to 1MB creased the auditor CPU time from\n    10% to 4%.\n    \n    Also added test code to make sure this overridden value is\n    actually used and checked other auditWorker conf values as\n    well.\n    \n    Change-Id: Ia12e1c6127877dc2124b60cd963cd0b6d5f3d6ef\n',34,3,'Intel'),(275457,869,229,'2014-07-09 12:12:33','2014-07-07 17:11:38','    added process pid to the end of storage node log lines\n    \n    Change-Id: I1c2709d85575fc7d4868fafd9ee757fd01868436\n',34,20,'SwiftStack'),(275459,4075,4075,'2014-05-02 21:11:49','2014-05-02 21:11:49','    Add filename*= support to tempurl Content-Disposition\n    \n    When working with unicode or unsafe characters most browsers can do better\n    with a fully quoted filename*=, and will prefer it to filename=.  Old style\n    filename= left in for backwards compat\n    \n    Change-Id: Ic54b0c376139bc8688d9124930689285a3b384fb\n',36,8,'Rackspace'),(275461,869,826,'2014-07-11 10:05:53','2014-06-02 13:36:21','    Handle func tests of swift cluster that hide /info\n    \n    If a swift cluster configures the proxy server to not accept\n    /info requests, just do the best we can, skipping tests as\n    necessary.\n    \n    To that end, if cors mode is not known we also skip the test.\n    \n    Change-Id: I34f296c8717e0baf24ae552a7e38f9354ee91974\n',12,6,'Red Hat'),(275464,4087,4087,'2014-07-18 13:17:28','2014-07-03 15:59:33','    Initial Erasure Code Docs\n    \n    This is just the start of some EC docs, the idea is not to add\n    more content to this patch but instead just to edit/agree on\n    what\'s here so far and get it merged to the feature branch so\n    we\'ve got some living docs going that are reviewable in smaller\n    patches (as opposed to how we did Storage Policies).\n    \n    Change-Id: I3d4ff2a5bbb8cad5d88fba4a116d7a4d3bad8c8c\n    Implements: blueprint swift-ec\n',293,1,'Intel'),(275466,4087,4087,'2014-07-31 05:47:35','2014-07-31 05:47:35','    A few minor updates to the living EC end user docs\n    \n    Change-Id: I8e0b10702a07ad4f0ba03b77ba4d72b44e013ca3\n    Implements: blueprint swift-ec\n',8,13,'Intel'),(275467,5254,5254,'2014-07-11 14:25:37','2014-07-11 11:13:52','    clean up saio env. after runnning func tests\n    \n    Added call to delete container in teardown_package().\n    Tests are leaving objects and containers in saio environment\n    after finishing running the tests.\n    \n    Currently, delete_containers() is called in the setUp of each test\n    class, which cleans up the containers of the previous test,\n    but leaves the containers of the last test in the saio environment.\n    \n    Change-Id: I643d7083a2a310fc3d24eab48c565f3798cff25f\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',8,1,'Red Hat'),(275469,5635,5635,'2014-07-11 12:56:10','2014-04-24 09:50:36','    Container PUT requests and max container per account\n    \n    If container counter per account is equal or greater than\n    max_container_per_account, then all PUT requests are failed and\n    403 is returned.\n    This is correct behaviour if the request is to create a new\n    container, however if container already exists PUT should be\n    allowed, even the max_container_per_account condition has met.\n    \n    This patch allows to process PUT requests for existing containers,\n    even if max_container_per_account > = container count.\n    \n    It indirectly resolve the bug 1306711, since swift-client\n    uses internally PUT requests for container, prior it upload an\n    object there.\n    \n    Change-Id: I2dcf20b6feb27e346111466a565695eba4b4b1da\n',21,6,'IBM'),(275471,5625,5625,'2014-07-02 18:35:49','2014-06-23 12:59:24','    Object services user-agent string uses full name\n    \n    It does not appear that, aside from the user-agent string, the strings\n    \"obj-server\", \"obj-updater\", or \"obj-replicator\" (or \"obj-<anything>\"*)\n    appear in the swift code base, aside from the directory containing the\n    object services code being named \"obj\".\n    \n    Furthermore, the container, account, and proxy services construct their\n    user-agent string, as reported in the logs, using their full name. In\n    addition, this full name also shows up as the name of the process via\n    \"ps\" or \"top\", etc., which can make it easier for admins to match log\n    entries with other tools.\n    \n    For consistency, we update the object services to use an \"object-\"\n    prefix rather than \"obj-\" in its user agent string.\n    \n    * obj-etag does appear in a unit test, but not part of the regular\n    code.\n    \n    Change-Id: I914fc189514207df2535731eda10cb4b3d30cc6c\n',21,18,'independent'),(275473,702,702,'2014-06-25 12:26:06','2014-04-22 09:28:15','    Disable case-changing behavior in Eventlet\n    \n    RFC 2616 says that HTTP header fields are case-insensitive.  However, there are\n    some S3 clients who don\'t accept normalized header by Swift and Eventlet.  For\n    example, AWS Java SDK expects that an etag header is \'ETag\', not \'Etag\'.\n    \n    This patch disables Eventlet\'s header capitalization so that the swift3\n    middleware can normalize the response headers as those clients expect.\n    \n    Note that this change requires a fix for Eventlet, which will be included in\n    the next Eventlet release (v0.15).\n    \n    Change-Id: I6d3428b0dafef776bdb3ebac7639b3126fa5e60d\n',59,12,'independent'),(275475,4087,4087,'2014-07-18 14:35:49','2014-07-18 14:35:12','    Fix small typo in deployment guide\n    \n    Change-Id: Ifd86ce5b36c2588b57fd44c633b095d1f49fcd5b\n',1,1,'Intel'),(275476,869,832,'2014-07-18 15:41:21','2014-07-02 17:21:54','    Add X-Delete-At/After support to FormPost\n    \n    This change adds the ability to specify a X-Delete-At or\n    X-Delete-After attribute when using the FormPost middleware.\n    \n    Here is an example of what you need to add to the form:\n    \n      <input type=\"hidden\" name=\"x_delete_at\" value=\"<unix-timestamp>\"/>\n      <input type=\"hidden\" name=\"x_delete_after\" value=\"<seconds>\"/>\n    \n    To be inline with the other form imput names, x-delete-at/after has\n    changed to x_delete_at/after.\n    \n    DocImpact\n    Change-Id: Ib1cc0bcf1dd7d2b689f2f26d100f9bab36880c81\n    Closes-Bug: #1065522\n',172,0,'Rackspace'),(275478,4083,4075,'2014-07-17 11:48:27','2014-06-20 15:43:40','    Add v2 API to list endpoints middleware\n    \n    The new API adds better support for storage policies and changes the\n    response from a list of backend urls to a dictionary with a key\n    \"endpoints\" that\'s a list of of the backend urls and a new key headers\n    that\'s a dictionary of headers to send along with the backend request.\n    In the v2 response format for object requests, there the headers key\n    includes \"X-Backend-Storage-Policy-Index\" which indicates the storage\n    policy index for the endpoints returned in the response.\n    \n    Change-Id: I706a5b5be8002c633fe97b2429256735800a902e\n',272,18,'Rackspace'),(275480,5640,5640,'2014-07-22 23:49:32','2014-07-22 12:30:54','    typo tradeoff -> trade-off\n    \n    Change-Id: Iad5eb611bc727991606f8a2d4dbb08dcc8fa3ddb\n',1,1,'independent'),(275482,5596,5596,'2014-07-21 08:49:27','2014-07-21 07:45:56','    lock_file race fixes\n    \n    I attempted to use this function and found a few problems.\n    \n    We shouldn’t unlink the file after closing it, because someone else could lock\n    it in between.  Switch to unlink before close.\n    \n    If someone else locked the file between our open and flock, they are likely to\n    unlink it out from underneath us.  Then we have a lock on a file that no longer\n    exists.  So stat the filename after locking to make sure the inode hasn\'t\n    changed or gone away.\n    \n    We probably shouldn’t unlink the file if we time out waiting for a lock.  So\n    move that to before the finally block.\n    \n    Change-Id: Id1858c97805d3ab81c584eaee8ce0d43d34a8089\n',95,18,'Rackspace'),(275484,869,1430,'2014-07-23 10:59:10','2014-07-23 10:27:40','    Use auth_token from keystonemiddleware\n    \n    auth_token middleware in python-keystoneclient is deprecated and has\n    been moved to the keystonemiddleware repo.\n    \n    Change-Id: Ia04aa83348e0776cb3239cb5420ee1450a990d5b\n    Closes-Bug: #1342274\n',4,4,'HP'),(275485,869,869,'2014-07-21 11:37:57','2014-07-21 11:37:57','    Fix a couple small things in formpost doc string\n    \n    Change-Id: Idb8d4707180396662493aacbd1f125c4ca43a1ca\n',5,5,'SwiftStack'),(275487,4083,4083,'2014-07-24 16:23:13','2014-07-07 12:32:44','    Fix trivial typos\n    \n    Fixes a few typos I have stumbled across recently.\n    \n    Change-Id: Ib232924f6b23c08578c52a8dd63aaaa8789f9da7\n',7,6,'HP'),(275489,2141,2141,'2014-07-23 17:31:06','2014-07-23 17:31:06','    Remove duplicate conditional statement\n    \n    It contains two same conditional statements to check whether the first\n    argurment is end with \'.ring.gz\'. The latter one can be covered by \'else\'\n    clause.\n    \n    Change-Id: I4b67dc330e82e793020bec4b74047062313ae11c\n    Signed-off-by: Lin Yang <lin.a.yang@intel.com>\n',0,1,'Intel'),(275491,4064,4064,'2014-07-25 12:24:23','2014-07-25 12:16:54','    Reuse a cursor instead of a conn.execute for better performance\n    \n    In some limited testing it was ~10% faster. Every little bit helps right?\n    \n    Change-Id: Ide55b7600d625ad151daca73fbdd8684f0f9e7f8\n',4,3,'Rackspace'),(275493,4087,4087,'2014-07-25 16:36:37','2014-07-25 16:34:39','    Reuse a cursor instead of a conn.execute for better performance\n    \n    Basically the same thing as https://review.openstack.org/#/c/109694/\n    but over in the account backend.\n    \n    Change-Id: I9255f3145818da3adafc16d3bcf159608a78fe51\n',8,7,'Intel'),(275494,340,340,'2014-07-18 13:36:41','2014-07-18 13:25:58','    Pass disk usage options when using --all\n    \n    This commit allows the arguments --human-readable and --top to be\n    used with --all to customize the output of the disk usage portion.\n    \n    There are no unit tests attached to this commit, I have created and\n    referenced bug #1344200 which shows there is a larger bug to address\n    to create several missing tests.\n    \n    Change-Id: I46b8359533989efc3067971acaafec1d0cbc2b9f\n    Closes-Bug: #1344178\n    Related-Bug: #1344200\n',1,1,'iWeb | Internap'),(275496,869,869,'2014-07-25 19:06:56','2014-07-25 18:50:19','    Fix \"Handoff requested (N)\" log spam\n    \n    A long, long time ago, on a GET request, the proxy would go look on 3*\n    nodes for the requested thing. If one of the primary nodes was\n    error-limited, it\'d look on two primaries and a handoff. Since this\n    indicated some failure somewhere, the proxy would emit a warning:\n    \"Handoff requested (1)\". If two primaries were down, there\'d be a\n    second message \"Handoff requested (2)\", and so on.\n    \n    Some StatsD messages were emitted too.\n    \n    A somewhat shorter time ago (commit d79a67eb), the proxy started\n    looking into handoffs if it got 404s from the primaries. While this\n    was a good idea, it resulted lots of \"Handoff requested (N)\" log spam;\n    you\'d see these messages on every single 404. Also, the StatsD\n    handoff_count and handoff_all_count metrics shot way up and turned\n    into noise.\n    \n    This commit restores the original intent (and usefulness) of the log\n    messages and StatsD metrics: if the proxy only looks at the normal\n    number of handoff nodes, nothing is logged. However, if a primary is\n    down, then the message \"Handoff requested (1)\" will be logged,\n    indicating that the proxy looked at one more handoff than it normally\n    would, and this happened because a primary node was error-limited.\n    \n    Closes-Bug: 1297214\n    \n    * or whatever the replica count was\n    \n    Change-Id: If1b77c18c880b096e8ab1df3008db40ce313835d\n',72,23,'SwiftStack'),(275498,4080,4080,'2014-08-01 14:18:04','2014-08-01 13:55:21','    Fix swift-dispersion-populate bug when using SimpleClient class\n    \n    Commit 7fcbbebb changed the internal client a little bit and removed the\n    class variable self.attempts in SimpleClient. This is currently still\n    needed in swift-dispersion-populate to track the number of retries, thus\n    re-adding it again.\n    \n    Closes-Bug: 1351323\n    Change-Id: I98ba6441607158b34708b2dbb2d1a63788681d63\n',6,4,'Red Hat'),(275499,869,4083,'2014-08-01 16:41:33','2014-03-10 11:46:58','    Enable object system metadata on PUTs\n    \n    This patch takes a first step towards support\n    for object system metadata by enabling headers\n    in the x-object-sysmeta- namespace to be\n    persisted when objects are PUT. This should be\n    useful for other pending patches such as on\n    demand migration and server side encryption\n    (https://review.openstack.org/#/c/64430/ and\n    https://review.openstack.org/#/c/76578/1).\n    \n    The x-object-sysmeta- namespace is already\n    reserved/protected by the gatekeeper and\n    passed through the proxy. This patch modifies\n    the object server to persist these headers\n    alongside user metadata when an object is\n    PUT.\n    \n    This patch will preserve existing object\n    system metadata and ignore any new system\n    metadata when handling object POSTs,\n    including POST-as-copy operations. Support\n    for modification of object system metadata\n    with a POST request requires further work\n    as discussed in the blueprint.\n    \n    This patch will preserve existing object\n    system metadata and update it with new\n    system metadata when copying an object.\n    \n    A new probe test is added which makes use of\n    the BrainSplitter class that has been moved\n    from test_container_merge_policy_index.py to\n    a new module brain.py.\n    \n    blueprint object-system-metadata\n    \n    Change-Id: If716bc15730b7322266ebff4ab8dd31e78e4b962\n',998,185,'HP'),(275501,229,4064,'2014-08-01 16:49:11','2014-07-31 10:19:10','    fix expirer bug with unicode container listings\n    \n    If the container names in the expirer\'s account are returned as\n    unicode strings (as is the case with some json libraries), the\n    expirer compared eg u\'1\' == \'1\', which is problematic. This patch\n    ensures that the unicode is coerced to ascii so the comparison\n    is correct.\n    \n    Change-Id: I72b322e7513f7da32e8dc75c6bf0e7e016948c88\n',5,2,'Rackspace'),(275503,4075,4075,'2014-07-01 12:06:29','2014-06-25 20:34:39','    Add X-Backend-Timestamp on more object server responses\n    \n    It\'s particularly interesting on writes (PUT, POST, DELETE) where the\n    current on-disk timestamp would prevent the object server from serving\n    the incoming request and returns 409 Conflict.\n    \n    The FakeConn has also been updated to respond in kind for 409\'s on\n    expect and all responses generaly just cause it\'s good to keep fakes in\n    line with the reals - not that I expected any existing tests to break\n    because of the new headers.\n    \n    Change-Id: Iac6fbd2f872a9521bb2db84a333365b69f54fb6c\n',111,15,'Rackspace'),(275505,869,869,'2014-07-31 12:18:47','2014-07-31 12:18:47','    Put proxy-logging in object expirer\'s sample config\n    \n    It\'s generally better to have logs for something than to not have\n    logs. This way, the object expirer (if using the sample config as a\n    starting point) will log what it does.\n    \n    Note that the container reconciler\'s sample config already contains\n    proxy-logging, as does the proxy server\'s. The object expirer is the\n    odd man out.\n    \n    Change-Id: I32aac99131746501820319b94405440c1934a694\n',42,1,'SwiftStack'),(275507,4083,4083,'2014-07-24 09:37:35','2014-07-17 11:17:57','    Update doc for list_endpoints v2 API\n    \n    Adds some v2 doc to list_endpoints module.\n    \n    Also adds LE to list of swift sources in logs.rst\n    \n    Change-Id: I6ccbcf677b12f5aa7db0f9d81e43ce5ca990cc57\n',25,1,'HP'),(275509,869,869,'2014-07-14 09:27:42','2014-07-11 12:03:30','    Allow HEAD for POST tempurls\n    \n    HEAD requests are already allowed for GET and PUT tempurls; this\n    commit adds that for POST tempurls. Since POST replaces all the\n    object\'s metadata, it\'s quite useful to be able to HEAD the object in\n    order to fetch the old metadata and do a client-side merge of the new\n    metadata (like with normal, token-authenticated POST requests).\n    \n    Change-Id: I603c7822cd27f0e304fd27024f83f95114eb0aef\n',23,4,'SwiftStack'),(275513,4087,4087,'2014-08-05 07:54:20','2014-08-05 07:54:20','    Updates to EC user docs from EC design meet-up\n    \n    Change-Id: I9ff3b1415e3112789493c84a14299acc16dcf1cc\n    Implements: blueprint swift-ec\n',7,0,'Intel'),(275514,869,869,'2014-08-04 16:59:16','2014-08-04 16:59:16','    Bail out a little faster when object write affinity is off\n    \n    This function was calling a couple functions prior to checking for\n    early bailout; if it did bail out, the results of those function calls\n    were unused. Bail out earlier to avoid wasted work.\n    \n    Change-Id: Ia023549a45355b44ebfb41212565c42f993415a9\n',3,3,'SwiftStack'),(275516,856,856,'2014-08-05 01:01:22','2014-08-05 00:59:54','    Update the swift documentation theme\n    \n    Currently the theme used by the swift developer docs are out of\n    date, it should be using oslosphinx, to provide a similar look\n    and feel between all openstack related projects.\n    \n    Change-Id: Id7c226cdc13c6c4f3b5082b1ef4dfe09966b21ec\n',13,954,'IBM'),(275518,869,869,'2014-07-24 14:38:53','2014-07-23 13:01:58','    Make swift-form-signature testable\n    \n    Moved the body of bin/swift-form-signature into\n    swift/cli/form_signature.py, like was done with swift-ring-builder and\n    others. Added a couple basic tests; there\'s not 100% coverage, but\n    it\'s better than the 0% coverage we had before.\n    \n    It\'s almost a straight forklift, but I changed exit() calls to return\n    statements.\n    \n    Change-Id: Ie2f702c070da24d9cdface83b9e838e9e2965085\n',160,67,'SwiftStack'),(275520,869,869,'2014-08-05 11:11:03','2014-07-23 14:12:03','    Make swift-form-signature output a sample form\n    \n    swift-form-signature would give you the required expiration-time and\n    HMAC signature, but it wouldn\'t help you actually construct the HTML\n    form. To do that, you had to go look at the formpost middleware\'s doc\n    string and make up a form yourself.\n    \n    For convenience, this commit makes swift-form-signature output a\n    sample form with the computed values filled in already; the user only\n    needs to fill in the Swift cluster\'s hostname.\n    \n    Change-Id: I70d70a648b78b382dbfbe8ff918e6158a7f6a0ab\n',45,0,'SwiftStack'),(275522,832,832,'2014-08-06 11:12:14','2014-07-04 15:56:45','    Swift configuration parameter audit\n    \n    This change is the result of an audit through the config parameters\n    provided by swift and how/if they are addressed in the swift\n    documentation. The documentation being the sample config files in\n    the /etc directory or the documentation.\n    \n    This change is only concerned with the config files in etc/ next\n    I will look at the documentation in the doc/ folder.\n    \n    This change makes the following assumptions:\n      - Unless stated otherwise, the commented out parameter in the\n        sample configuration is the default for swift.\n    \n      - When the default in the code differs from that of the sample\n        configuration, the default in the code is correct.\n    \n    Container reconciler:\n      Parameter: interval\n        - code: 30\n        - config: 300\n      Result: config = 30\n    \n    Object Expirer:\n      Parameter: recon_cache_path\n        - code: /var/cache/swift\n        - config: Parameter missing\n      Result: Add parameter\n    \n    swift-dispersion-populate && swift-dispersion-report\n      Parameter: auth_version\n        - code: 1.0\n        - config: 2.0 (due to being a confusing example of how to setup\n                       version 2.0).\n      Result: Added \'auth_version = 1.0\' to the right section (showing\n              default and make the sample configuration for auth version\n              2.0 easier to understand.\n    \n    swift-drive-audit:\n      Parameter: log_file_pattern\n        - code: /var/log/kern.*[!.][!g][!z]\n        - config: /var/log/kern*\n      Result: config = /var/log/kern.*[!.][!g][!z]\n    \n      NOTE: swift-drive-audit uses a parameter called device_dir which\n            defaults to \'/srv/node\'. In all other swift binaries/services\n            there is a similar parameter called devices which stores the\n            same thing. This is an inconsistency which I haven\'t fixed\n            as this could break existing swift clusters out in the wild.\n    \n    Proxy Server:\n      Parameter: object_chunk_size\n        - code: 65536\n        - config: 8192\n      Result: config = 65536\n    \n      Parameter: client_chunk_size\n        - code: 65536\n        - config: 8192\n      Result: config = 65536\n    \n      Parameter: strict_cors_mode\n        - code: True\n        - config: No parameter\n      Result: config = True\n    \n    Account and Container replicator configuration confusion:\n      NOTES:\n        The account and container replicators have parameters:\n          - interval\n          - run_pause\n    \n        Both of these are loaded into the same variable in code:\n          self.interval = int(conf.get(\'interval\') or\n                              conf.get(\'run_pause\') or 30)\n    \n        If a user sets both to different values then interval is used.\n      Result: Update the configuration to make this more clear.\n    \n    DocImpact\n    Change-Id: Iaadbb1a6284f8b3e0801bc343b29772f70f4bf6e\n',16,6,'Rackspace'),(275524,832,832,'2014-08-06 11:14:00','2014-08-05 12:31:44','    Remove old DLO config remenents from proxy\n    \n    Config items \'rate_limit_after_segment\' and\n    \'rate_limit_segments_per_sec\' are configuration items left over from\n    before DLO was moved from the proxy server and into it\'s own\n    middleware. This change removes the configuration options from the\n    proxy server.\n    \n    Change-Id: Ie3d42a57cda813feed019f01db986f13cdff9c31\n',0,4,'Rackspace'),(275526,733,733,'2014-06-12 11:19:05','2014-05-19 07:21:03','    Changed several files to be Python3 friendly\n    \n    The print syntax has been changed to be Python3 compatible.\n    \n    Change-Id: Id3fcbab390f08dcb3380cfda16d7b820b03ef683\n',17,9,'Rackspace'),(275529,4087,1141,'2014-08-08 11:12:23','2014-06-30 11:14:28','    EC: Add support for policy types, \'erasure_coding\' policy\n    \n    This patch extends the StoragePolicy class for non-replication storage\n    policies, the first one being \"erasure coding\".\n    \n    Changes:\n    \n     - Add \'policy_type\' support to base StoragePolicy class\n     - Disallow direct instatiation of StoragePolicy class\n    \n     - Subclass StoragePolicy\n    \n       - \"ReplicationStoragePolicy\":\n         . Replication policy, default\n         . policy_type = \'replication\'\n    \n       - \"ECStoragePolicy\":\n         . Erasure Coding policy\n         . policy_type = \'erasure_coding\'\n         . Private member variables\n           ec_type (EC backend),\n           ec_num_data_fragments (number of fragments original\n             data split into after erasure coding operation),\n           ec_num_parity_fragments (number of parity fragments\n           generated during erasure coding)\n         . Private methods\n           EC specific metadata and ring validator methods.\n    \n     - Swift will use PyECLib, a Python Erasure Coding library,\n       for erasure coding operations. This patch adds PyECLib to\n       Swift requirements.txt. PyECLib is already an approved\n       OpenStack core requirement.\n       (https://bitbucket.org/kmgreen2/pyeclib/)\n    \n     - Add test cases for\n       - \'policy_type\' StoragePolicy member\n       - policy_type == \'erasure_coding\'\n    \n     - Make default policy type for StoragePolicy tests cases\n       \'ReplicationStoragePolicy\'\n    \n    DocImpact\n    \n    Implements: blueprint ec-proxy-work\n    Change-Id: I605719bd9ab26b36310a06dbf518efc69ba41172\n',863,168,'Intel'),(275530,5254,5254,'2014-08-11 13:30:24','2014-08-01 15:31:03','    fix to handle object-expiration headers in one method\n    \n    There was some duplication of code in both POST and PUT\n    methods to handle object-expiration headers.\n    A method was created to remove this duplication,\n    which should help with maintainability of code.\n    \n    Change-Id: I85cc4a7b0d688760c97598d80b9e9a39288c5f34\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',63,79,'Red Hat'),(275531,978,869,'2014-08-07 12:26:11','2014-07-11 11:27:11','    Add POST and DELETE to tempurl default methods\n    \n    The tempurl middleware supports any configured HTTP methods, but the\n    default set was only GET, PUT, and HEAD, so cluster operators had to\n    take action to enable POST and DELETE. This commit changes the\n    defaults to include POST and DELETE.\n    \n    Note that this doesn\'t affect any existing temporary URLs at all; the\n    method is baked into the signature (temp_url_sig query param), so no\n    new access is granted to a holder of a temporary URL by this\n    change. It simply gives more flexibility to creators of temporary\n    URLs.\n    \n    Change-Id: I5bc15bbd2968ab7bedcd7c0df10f2ec825537191\n',14,12,'SwiftStack'),(275533,229,229,'2014-08-12 11:23:35','2014-08-10 23:50:17','    Catch permissions errors when writing StatsD packets\n    \n    Closes-Bug: #1183152\n    \n    Change-Id: I4b2c6e947241c987779a385fdff270d037470a57\n',27,4,'SwiftStack'),(275535,4087,4087,'2014-07-04 09:48:25','2014-07-04 09:48:25','    Increase Account Auditor Test Code Coverage\n    \n    Some simple additional test code to bring coverage from 82% to 99%\n    \n    Change-Id: I561bc0a043f3451bb0a84cad274fedc907e61ee8\n',31,1,'Intel'),(275537,978,826,'2014-08-04 16:54:50','2014-05-06 10:54:05','    Add a env var to use in-memory obj server in func\n    \n    Add an environment variable to enable the use of the in-memory object\n    server during in-process functional test runs.\n    \n    It might be worth-while to just run under both object servers in-tree,\n    but this at least enables it, without having to figure out how to make\n    two test runs in two different environments.\n    \n    DocImpact\n    \n    Change-Id: Id76b008e1f273c639ae61550affddc32c5d7c419\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',30,4,'Red Hat'),(275539,5637,5637,'2014-08-12 12:31:05','2014-04-09 16:33:02','    Add timestamp checking in AccountBroker.is_status_deleted\n    \n    Account-reaper works only at account-server with the first replica, and reaps\n    account with \"deleted\" status.\n    \n    On the other hand, account-replicator doesn\'t replicate the status, only\n    replicates *_timestamp.\n    When swift fails to delete the first account replica, account-reaper never\n    reaps the account, because the first replica never gets marked as \"deleted\".\n    \n    This patch adds a timestamp checking into is_status_deleted method, and\n    account-reaper will start to reap the account after account-replicator\n    replicates *_timestamp.\n    \n    Change-Id: I75e3f15ad217a71b4fd39552cf6db2957597efca\n    Closes-Bug: #1304755\n',18,2,'NTT'),(275542,4078,4078,'2014-08-12 14:53:00','2014-08-12 14:47:38','    Fix wrong indent in internal client test\n    \n    This results the unit test using \'wrong\' storage policy configured\n    in swift.conf when lazy-loading the object ring, other than the one\n    specified in the with statment.\n    \n    The reason why this test passes is get_object_ring uses ring index\n    as the parameter, so even with \'wrong\' policy-0 name, internal_client\n    still can load the fakering with right index(0). But it will fail if\n    you specify policy-0 with ec_ndata + ec_nparity > 2\n    \n    Change-Id: I40f6fef7a0d5e00d2e1dce0ba6c3c6ecd9bdc379\n',14,13,'INTC'),(275544,4087,4087,'2014-08-16 15:47:35','2014-08-16 11:02:06','    Fix sporadic false failure in xprofile unit test code\n    \n    Appears that what\'s been happening on feature/ec lately\n    with a middleware failure has to do with a hardcoded PID in\n    the test code itself causing a profile file to exist when\n    its not expected to by the test...\n    \n    Test code used a PID of 135 and based on how get_logfiles()\n    is written, any real PID that starts with 135 will cause a\n    false failure in test_call().  This can be seen via inspection\n    and confirmed in logfiles where all captured assertions show\n    a profile filename beginning with 135.  Tried getting smarter\n    about choosing a fake PID (int) but then decided it was 100%\n    safe to use \'ABC\' for this test since that\'ll never show up!\n    \n    Change-Id: I61adc36a127a5b362b2983f94c58dd9be3a9b13d\n',2,1,'Intel'),(275546,4064,4064,'2014-08-14 12:16:21','2014-08-11 09:43:13','    Sleep for longer at a time in lock_path.\n    \n    When lock_path is called and the lock goes for the whole 10 seconds,\n    the flock is called 1000 times. With this patch, the short 0.01 sleep\n    is used for the first 1% of the total lock time and then 1% of the\n    total lock time is used.\n    \n    Change-Id: Ibed6bdb49bddcdb868742c41f86d2482a7edfd29\n',32,1,'Rackspace'),(275548,4080,4080,'2014-06-13 10:33:03','2014-06-13 10:33:03','    Fix object auditor recon and logging\n    \n    1. Nothing is logged until at least one audit needs more than log_time.\n       If the audit runtime never exceeds this value (which is 3600 seconds\n       by default) nothing is logged and the recon entry is never updated.\n       It happens especially on very fast disks with a low usage and/or if\n       only a few disks are audited (for example, using the --devices\n       parameter on the command line).\n    \n       This patch changes this to log and update the recon cache entry\n       at least one time after the first device audit.\n    \n    2. If device_dirs is set the recon entry will be deleted after all\n        devices are audited.\n    \n    Change-Id: Ifa504d21389b3a5f7eaf914b19d6e26543dac121\n',9,7,'Red Hat'),(275550,229,229,'2014-08-18 10:38:43','2014-08-17 21:08:57','    add the account management config values to swift info\n    \n    added account_autocreate and allow_account_management to\n    the /info endpoint\n    \n    Change-Id: I4b239c9cefb728c3c93bf75cad065c72edf2fc0a\n',5,1,'SwiftStack'),(275551,978,978,'2014-08-07 12:26:59','2014-08-04 17:22:08','    Update tempurl docstring with methods config option\n    \n    Adds a description of the methods config option to the\n    docstring.\n    \n    Also fixes description of swift.source value and a\n    couple of other typos.\n    \n    Change-Id: If3489087df020536ff663ffe4e249c300ea2d506\n',8,3,'HP'),(275553,4064,4064,'2014-08-15 08:42:49','2014-08-11 15:08:18','    Shard expiring object container\n    \n    All the expiring objects for a given X-Delete-At are funnelled into the\n    same expiring object container- this can act as a bottleneck.\n    \n    Change-Id: I288a177a7ae3e213c727a2a81fa76d4ef9cf7eb3\n',38,21,'Rackspace'),(275555,4087,4087,'2014-08-19 07:10:06','2014-08-19 07:10:06','    Fix sporadic false failure in xprofile unit test code (master)\n    \n    Same fix as is going through on feature/ec, fixed it there first\n    as it was happening often and no point in waiting until EC is\n    complete before getting it over to master...\n    \n    Appears that what\'s been happening on feature/ec lately\n    with a middleware failure has to do with a hardcoded PID in\n    the test code itself causing a profile file to exist when\n    its not expected to by the test.\n    \n    Test code used a PID of 135 and based on how get_logfiles()\n    is written, any real PID that starts with 135 will cause a\n    false failure in test_call().  This can be seen via inspection\n    and confirmed in logfiles where all captured assertions show\n    a profile filename beginning with 135.  Tried getting smarter\n    about choosing a fake PID (int) but then decided it was 100%\n    safe to use \'ABC\' for this test since that\'ll never show up!\n    \n    Change-Id: I958f1525c2727b3fb3f533242fa509fa8e59926c\n',2,1,'Intel'),(275557,4080,4075,'2014-07-08 15:57:43','2014-07-01 11:23:48','    Remove fake _get_part and use the real thing\n    \n    The get_part method is fast and stable given a consistent hash path\n    suffix/prefix, so there\'s no absolute requirement for the fake\n    implementation other than convenience.  OTOH, removing the fake\n    implementation and fixing the tests that were relying on it should make\n    it easier to write better tests going forward and harder to hide bugs\n    that don\'t show up when using the fakes.\n    \n    There may be some overhead when writing new tests that use the ring if\n    you\'re making assertions on partitions or paths, but with a part power\n    of zero it\'s normally trivially obvious when a 1 needs to be a 0 or vice\n    versa.  Or you can just drop the assertions around the parts you were\n    faking anyway.\n    \n    Change-Id: I8bfc388a04eff6491038991cdfd7686c9d961545\n',46,51,'Rackspace'),(275559,869,869,'2014-08-19 17:28:43','2014-08-19 14:50:44','    Respect device weights when adding replicas\n    \n    Previously, any new (partition, replica) pairs created by adding\n    replicas were spread evenly across the whole ring. Now it respects\n    device weights, so more (partition, replica) pairs are placed on\n    higher-weight devices.\n    \n    Note that this only affects partition assignment *when the replica\n    count is increased*. Normal adding of disks without changing the\n    replica count is, and was, just fine.\n    \n    The cause was that the devices\' parts_wanted values weren\'t being\n    updated when the replica count went up. Since adding replicas makes\n    more things to assign, each device\'s desired share should have gone\n    up, but it didn\'t. This appears to be a simple oversight on the part\n    of the original author (me).\n    \n    Change-Id: Idab14be90fab243c1077a584396a9981a4bd8638\n',61,1,'SwiftStack'),(275561,869,869,'2014-08-21 08:56:29','2014-08-19 16:44:56','    Let admins add a region without melting their cluster\n    \n    Prior to this commit, swift-ring-builder would place partitions on\n    devices by first going for maximal dispersion and breaking ties with\n    device weight. This commit flips the order so that device weight\n    trumps dispersion.\n    \n    Note: if your ring can be balanced, you won\'t see a behavior\n    change. It\'s only when device weights and maximal-dispersion come into\n    conflict that this commit changes anything.\n    \n    Example: a cluster with two regions. Region 1 has a combined weight of\n    1000, while region 2 has a combined weight of only 400. The ring has 3\n    replicas and 2^16 partitions.\n    \n    Prior to this commit, the balance would look like so:\n    \n      Region 1: 2 * 2^16 partitions\n      Region 2: 2^16 partitions\n    \n    After this commit, the balance will be:\n    \n      Region 1: 10/14 * 2^16 partitions  (more than before)\n      Region 2: 4/14 * 2^16 partitions  (fewer than before)\n    \n    One consequence of this is that some partitions will not have a\n    replica in region 2, since it\'s not big enough to hold all of them.\n    \n    This way, a cluster operator can add a new region to a single-region\n    cluster in a gradual fashion so as not to destroy their WAN link with\n    replication traffic. As device weights are increased in the second\n    region, more replicas will shift over to it. Once its weight is half\n    that of the first region\'s, every partition will have a replica there.\n    \n    DocImpact\n    \n    Change-Id: I945abcc4a2917bb12be554b640f7507dd23cd0da\n',164,24,'SwiftStack'),(275564,229,5641,'2014-07-30 16:59:24','2014-02-21 10:55:08','    Multithread optimization for object updater\n    \n    This change makes the object updater work the same\n    as the container updater, which is that it now\n    spawns one thread for each node that it needs to\n    update. This should help optimize its\n    performance/efficiency.\n    \n    Change-Id: If740b8c67c0d953e4b510913bd8594570d868da6\n',21,19,'EMC'),(275566,229,229,'2014-08-22 15:39:49','2014-08-18 21:24:33','    authors and changelog updates for 2.1.0 release\n    \n    Change-Id: I457674f564dcacf0fd20004e9a3bb85113f53aa5\n',78,1,'SwiftStack'),(275568,229,229,'2014-08-23 08:58:56','2014-08-23 08:58:49','    added Alex to AUTHORS\n    \n    Change-Id: I2d147415e65c0f19159b995fc4eca78e075537b6\n',1,0,'SwiftStack'),(275569,5596,5596,'2014-08-26 18:38:01','2014-08-23 18:22:10','    container merge_items speedup\n    \n    I rewrote ContainerBroker.merge_items to use bulk SQL operations.  This\n    performs identical to the current version when len(item_list) == 1.  But as\n    item_list grows, the new version performs better, up to around 50% faster when\n    item_list numbers in the hundreds.\n    \n    I wrote a quick script to stress test merge_items:\n    https://gist.github.com/redbo/12a4ed9c6a020aee39fe\n    \n    Average of several runs against master: 35.08 seconds\n    Average of several runs against this branch: 18.44 seconds\n    \n    Change-Id: I07fff1fb05c90f1411c79d961e0ed63264ed2acf\n',59,38,'Rackspace'),(275571,5642,5642,'2014-04-23 23:59:28','2014-03-25 11:48:13','    Allow empty reseller prefixes in domain_remap\n    \n    Change-Id: I2013e4686fce1c06626ec974f8d721721e6ca6e7\n',21,12,'independent'),(275574,869,869,'2014-08-20 17:36:04','2014-08-07 11:53:49','    Refactor object PUT to make EC easier to add\n    \n    EC fragment archives need to go on the right primary nodes; that is,\n    fragment archive 0 needs to go on primary node 0, 1 on 1, and so\n    forth. Handoff nodes, however, are unordered.\n    \n    This commit plumbs the index through to the proxy ObjectController\'s\n    PUT method as well as adds a (very simple) transform for replicated\n    data storage. Hopefully, this provides an easy integration point for\n    EC to use.\n    \n    Change-Id: I72e6f313b12d7d4611fd95109ba66c8df8c8fa0f\n',133,49,'SwiftStack'),(275576,1141,1141,'2014-09-05 10:10:46','2014-07-31 12:04:21','    EC: Make quorum_size() specific to storage policy\n    \n    quorum size ie, the number of successful backend operations,\n    is used by the proxy to deem the client request serviceable\n    or successful.  With introduction of non-replication storage\n    policies, quorum_size definition will depend on the policy\n    type.  For \'replication\' policies, it is a function of the\n    number of object replicas configured, whereas for the\n    \'erasure_coding\' type policies, it is a function of the\n    number of data fragments the original data was split into.\n    \n    This patch adds quorum_size() definitions for the currently\n    supported storage policy (sub)classes:\n    \n       ReplicationStoragePolicy and ECStoragePolicy.\n    \n    for object server.\n    \n    Storage policies are not supported for account and container\n    services - the default \'replication\' style quorum_size()\n    definition will continue to apply to those.\n    \n    Changes:\n    \n     - Turn generic quorum_size() into replication_quorum_size() which\n       is applicable only to account and container services\n     - Define quorum_size() per StoragePolicy subclass\n     - Return replication_quorum_size() from ReplicationStoragePolicy\n     - Consult PyECLib to calculate ECStoragePolicy-specific quorum size\n     - Update callers of quorum_size() to reflect the above change\n     - Add quorum_size() unit test code for account, container\n       and object servers (taking storage policy into account)\n    \n    Change-Id: I25fd27267897826194f9babc696f3c371aee4d44\n    Implements: blueprint ec-proxy-work\n',139,34,'Intel'),(275577,229,5643,'2014-09-01 18:11:15','2014-09-01 18:53:30','    Only bind SAIO daemons to localhost\n    \n    The SAIO configs have no default bind_ip setting configured\n    which causes them to listen on all available IP addresses.\n    This can be dangerous on a test machine with public interfaces,\n    especially with the default passwords set. Its reasonable to\n    choose a more restrictive setup, especially in SAIO which uses\n    127.0.0.1 throughout ring-builder, example commands and the\n    probe tests.\n    \n    Change-Id: I471c49705ce09e07ec7acc07ee42a1e220529b82\n',13,0,'independent'),(275578,5254,4075,'2014-08-21 10:45:22','2014-08-08 02:14:27','    code shuffle post expired headers refactor\n    \n    Change-Id: I62248d7d3d7e0a3696a30e3d567ac6c2bea3c8eb\n',207,185,'Rackspace'),(275580,229,646,'2014-08-27 09:33:34','2014-08-27 11:42:06','    fix my name in AUTHORS\n    \n    My author name is my gmail account name, change it to my real name.\n    \n    Change-Id: Iafd94f694f7d007c54de086941309b119683f6cb\n',2,2,'IBM'),(275582,617,617,'2014-09-03 12:03:57','2014-09-03 12:03:40','    warn against sorting requirements\n    \n    Change-Id: I64ae9191863564e278a35d42ec9cd743a233028e\n    Closes-Bug: 1365061\n',8,0,'Rackspace'),(275584,322,322,'2014-07-25 22:06:29','2014-07-25 20:47:11','    Avoid usage of insecure mktemp() function\n    \n    This patch eliminates the use of the deprecated and insecure\n    tempfile.mktemp() function.  It has been replaced with secure\n    alternatives where temporary files are actually required.\n    \n    Change-Id: I0a13d6d44cd1abc4b66fa33f39eea407617a01d5\n    SecurityImpact\n    Closes-bug: #1348869\n',11,12,'Red Hat'),(275586,5644,5644,'2014-09-03 10:40:30','2014-09-03 10:40:30','    Spelling mistakes corrected in comments.\n    \n    Change-Id: Ibbd7511c3a2b08519feb4db18eca6e000603ea32\n',6,6,'Cisco Systems'),(275588,5599,5599,'2014-08-28 19:21:13','2014-08-28 19:20:02','    Small Fix for FakeServerConnection\n    \n    Current FakeServerConnection might cause 499 error\n    in some unit tests because sent (put) data will be\n    overridden by new one every time.\n    e.g. When calling conn.queue.put() twice and more in\n    an object PUT sequence, we can use only a last chunk as\n    the body. This fixes it to merge all chunks as a body.\n    \n    Change-Id: I463e9e2b454e3f3eb26950b3af4c8b8167a9a971\n',2,1,'NTT'),(275590,869,869,'2014-08-29 18:32:45','2014-08-29 15:48:38','    Fix last_modified_date_to_timestamp on non-UTC systems\n    \n    Before, we were calling datetime.datetime.strftime(\'%s.%f\') to convert\n    a datetime to epoch seconds + microseconds. However, the \'%s\' format\n    isn\'t actually part of Python\'s library. Rather, Python passes that on\n    to the system C library, which is typically glibc. Now, glibc takes\n    the \'%s\' format and helpfully* applies the current timezone as an\n    offset. This gives bogus results on machines where UTC is not the\n    system timezone. (Yes, some people really do that.)\n    \n    For example:\n    \n        >>> import os\n        >>> from swift.common import utils\n        >>> os.environ[\'TZ\'] = \'PST8PDT,M3.2.0,M11.1.0\'\n        >>> float(utils.last_modified_date_to_timestamp(\'1970-01-01T00:00:00.000000\'))\n        28800.0\n        >>>\n    \n    That timestamp should obviously be 0.\n    \n    This patch replaces the strftime() call with datetime arithmetic,\n    which is entirely in Python so the system timezone doesn\'t mess it up.\n    \n    * unhelpfully\n    \n    Change-Id: I56855acd79a5d8f2c98a771fa9fd2729e4f490b1\n',32,5,'SwiftStack'),(275592,4064,4064,'2014-08-29 11:43:00','2014-08-28 14:31:29','    Combine acc/cont put_* methods and fix their lock problem.\n    \n    The container backend is supposed to build a pending file and,\n    when it gets to a certain size, flush it all at once into the\n    sqlite db. Before this fix, many concurrent threads would ask\n    what the pending file size is to see if they should flush\n    instead of just appending to the pending file. The problem is\n    that many would ask, find it\'s too big, and try to get a lock.\n    The first one wins, flushes, but all the other waiting threads\n    still think they have to flush- which is a much slower opertaion\n    than just the append. This change gets the lock first and makes\n    sure that merge_items is only called when the pending file is full.\n    \n    Change-Id: I29cfa13a48c8f7d16dd414b2288d50461adbafd2\n',82,84,'Rackspace'),(275594,869,869,'2014-09-05 11:39:36','2014-09-05 11:39:36','    Error limit the right node on object PUT\n    \n    If any node had an error on object PUT, the proxy would count the\n    error against the last-connected-to node instead of the one with the\n    error. Now it counts the error against the right node.\n    \n    Change-Id: I884eb73cebe0c723473a6d5e390a148fcad0d3ed\n',22,3,'SwiftStack'),(275596,978,978,'2014-09-02 17:08:58','2014-09-02 15:46:16','    Check for change before container replicator updates db\n    \n    As described in the related bug report, unnecessary updates\n    to the container db during replication can impact object\n    object GET performance in certain circumstances.\n    \n    This patch changes swift/container/replicator.py so that\n    calls to merge_timestamps and update_reconciler_sync\n    are conditional on values having actually changed.\n    \n    Related-Bug: 1332025\n    Change-Id: If498251656500ed7a3d7ca4b109ea1079b8513c2\n',100,5,'HP'),(275598,47,47,'2014-07-13 20:37:30','2014-06-01 11:51:29','    Setup localization properly\n    \n    To start translation of swift, we need to initially import the\n    translation file - and place it at the proper place so that\n    the usual CI scripts can handle it.\n    \n    The proper place is for all python projects\n    $PROJECT/locale/$PROJECT.pot, so move locale/$PROJECT.pot to the new\n    location and regenerate the file.\n    \n    Update setup.cfg with the new paths.\n    \n    Further imports will be done by the OpenStack Proposal bot.\n    \n    Change-Id: Ide4da91f2af71db529f4a06d6b1e30ba79883506\n    Partial-Bug: #608725\n    Closes-Bug: #1082805\n',1157,1032,'SUSE'),(275600,869,869,'2014-09-05 14:08:03','2014-09-05 14:08:03','    Pay attention to all punctual nodes\n    \n    The proxy sends requests to all storage nodes, but it only needs a\n    quorum of them to respond before the proxy can, in turn, respond to\n    the client. Thus, it gets quorum, and then briefly waits to see if the\n    remainder of the storage nodes respond before giving up on them.\n    \n    However, the proxy was not paying any attention to the responses from\n    the non-quorum storage nodes. This would lead to some odd behavior,\n    like a container PUT where the backends returned (201, 201, 202) would\n    become a 201 to the client, but the permutation (201, 202, 201) would\n    become 202. Further, on object PUT, if the last node responded with an\n    error code, that error wouldn\'t count towards error-limiting.\n    \n    The fix is quite simple: after getting quorum, the make_requests()\n    method was calling a method that returns responses from the remainder\n    of the nodes, but it was ignoring that return value and making up\n    responses with dummy values instead. Now, prior to making up dummy\n    responses, the proxy first uses the responses it already has, and only\n    fills in dummy responses for nodes that really didn\'t respond in time.\n    \n    Change-Id: I0206b6b2272b0e7dcc80fb6c51840d8dae25cee2\n',54,14,'SwiftStack'),(275602,2141,2141,'2014-09-05 15:51:07','2014-09-05 15:51:07','    Change method _sort_key_for to static\n    \n    This method does not reference to any attribute of this class, so it\'s better\n    to change it to classstatic.\n    \n    Change-Id: I3ea0ca83cb29ceae9afb20da0c9817a9b044c084\n    Signed-off-by: Lin Yang <lin.a.yang@intel.com>\n',2,1,'Intel'),(275604,2965,2965,'2014-09-08 17:43:32','2014-09-08 17:43:19','    Fixed Typo - dictonary to dictionary\n    \n    Change-Id: Ia2a07bf1d1a77f6d6af0c8d9f53c2d47c2ba6d75\n',1,1,'Cisco Systems'),(275606,5623,5623,'2014-09-08 15:48:50','2014-09-08 15:35:48','    Mention storage backends in Associated Projects\n    \n    Change-Id: I6d88cfe668a557c41e6e6958cd73412ca50c6ba8\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n',6,0,'Red Hat'),(275608,794,794,'2014-09-08 21:00:49','2014-09-08 21:00:49','    Fix directory value for compile_catalog\n    \n    Commit 7a192987c0a5edb9e239ffb4aba3b1dac083b41e sets\n    up swift for translation but the compile_catalog\n    directory option is pointing at the wrong location\n    to scan for po files.\n    \n    Change-Id: Id4dd24ddfde735ef8ef064882bea045361b5db90\n    Closes-Bug: #1367086\n',1,1,'IBM'),(275610,5636,5636,'2014-09-08 22:43:53','2014-09-08 22:43:53','    Too many if clauses in the _clean_incoming_headers and the\n    _clean_outgoing_headers routines of the tempurl module\n    \n    Too many if clauses make code complicated. For more pythonic, you\'d\n    better to use the for ... else clause instead of them.\n    \n    Fix Bug #1363125\n    \n    Change-Id: I837235ecb08dd912e56cdfb363c4b4a6cc053e7d\n',20,26,'independent'),(275612,5631,5631,'2014-08-13 15:43:22','2014-04-30 15:00:49','    account to account copy implementation\n    \n    Adds ability to copy objects between different accounts (on server side)\n    \n    Adds new header to `PUT` request:\n    `X-Copy-From-Account: <account name>`\n    Account name corresponds to the last part of storage URL.\n    \n    Adds new header to `COPY` request:\n    `Destination-Account: <account name>`\n    Account name corresponds to the last part of storage URL.\n    \n    If your storage URL is: http://server:8080/v1/AUTH_test\n    Then the account name is `AUTH_test`\n    \n    These headers should be used alongside `X-Copy-From` and `Destination` headers\n    The legacy headers should specify `<container name>/<object name>` path as usual.\n    \n    DocImpact\n    \n    Change-Id: I0285fe6a47df9e699ac20ae4a83b0bf23829e1e6\n',953,36,'Rackspace'),(275614,978,978,'2014-09-11 10:39:48','2014-09-11 10:23:32','    Fix broken www-authenticate functional test\n    \n    testQuotedWWWAuthenticateHeader functional test started failing\n    due to a change to keystonemiddleware.auth_token, which now adds\n    its own www-authenticate header in addition to the one that swift\n    keystoneauth adds.\n    \n    This patch changes the functional test to check expected\n    swift generated header value is in the concatenation of\n    www-authenticate values.\n    \n    Verified that functional tests still pass using tempauth.\n    \n    Closes-Bug: 1368048\n    Change-Id: I913af077df800a559d259c1622f286ad10eae9df\n',6,3,'HP'),(275615,229,229,'2014-09-08 07:28:43','2014-09-01 11:22:53','    make the bind_port config setting required\n    \n    In a long-term effort to change the recommended ports for Swift,\n    the first step is to require the bind_port in config files. Later,\n    we can change the recommended setting.\n    \n    Anyone currently explicitly setting the ports will not be affected.\n    Anyone not setting the ports will need to specify them to match their\n    rings.\n    \n    DocImpact\n    \n    Change-Id: Icca83a263acdd0afc9016424a3e9f8c15e944789\n',40,19,'SwiftStack'),(275617,4075,4075,'2014-09-08 12:25:54','2014-09-08 12:25:54','    test tempurl header sanitization priority\n    \n    Change-Id: I0bb3004a717da2f65196bc56b0f7baef49e649e8\n',82,0,'Rackspace'),(275619,978,5254,'2014-09-08 10:15:21','2014-08-21 10:33:30','    moving object validation checks to top of PUT method\n    \n    This adds a sanity check on x-delete headers as\n    part of check_object_creation method\n    \n    Change-Id: If5069469e433189235b1178ea203b5c8a926f553\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',261,69,'Red Hat'),(275621,978,978,'2014-09-08 14:36:22','2014-09-08 14:06:00','    Extra unit tests for check_delete_headers\n    \n    A few extra tests to verify check_delete_headers in\n    constraints.py. A little duplication of coverage of existing\n    proxy/controllers/test_obj.py:TestObjController.test_POST_delete_at\n    but these tests call the recently refactored function directly,\n    and also add tests for X-Delete-After taking precedence over\n    X-Delete-At.\n    \n    Change-Id: I129cef15a6feac8a60fd4efbb3535d93f0eaab36\n',43,0,'HP'),(275623,5627,5627,'2014-09-08 21:34:40','2014-09-08 13:51:07','    Fix FormPOST max_file_size exceeded bug.\n    \n    When using FormPOST, if the size of the file being posted exceeds\n    max_file_size, a HTTP 499 was being returned rather than HTTP 400.\n    \n    Change-Id: I48c781735c66eccde3deb6f9c3c184aee964a4a5\n',37,24,'Rackspace'),(275625,978,4083,'2014-08-08 15:58:29','2014-03-28 02:46:08','    Restrict keystone cross-tenant ACLs to IDs\n    \n    The keystoneauth middleware supports cross-tenant access\n    control using the syntax <tenant>:<user> in container ACLs,\n    where <tenant> and <user> may currently be either a unique\n    id or a name. As a result of the keystone v3 API introducing\n    domains, names are no longer globally unique and are only\n    unique within a domain. The use of unqualified tenant and\n    user names in this ACL syntax is therefore not \'safe\' in a\n    keystone v3 environment.\n    \n    This patch modifies keystoneauth to restrict cross-tenant\n    ACL matching to use only ids for accounts that are not in\n    the default domain. For backwards compatibility,\n    names will still be matched in ACLs when both the requesting\n    user and tenant are known to be in the default domain AND the\n    account\'s tenant is also in the default domain (the default\n    domain being the domain to which existing tenants are\n    migrated).\n    \n    Accounts existing prior to this patch are assumed to be for\n    tenants in the default domain. New accounts created using a\n    v2 token scoped on the tenant are also assumed to be in the\n    default domain. New accounts created using a v3 token scoped\n    on the tenant will learn their domain membership from the\n    token info. New accounts created using any unscoped token,\n    (i.e. with a reselleradmin role) will have unknown domain\n    membership and therefore be assumed to NOT be in the default\n    domain.\n    \n    Despite this provision for backwards compatibility, names\n    must no longer be used when setting new ACLs in any account,\n    including new accounts in the default domain.\n    \n    This change obviously impacts users accustomed to specifying\n    cross-tenant ACLs in terms of names, and further work will be\n    necessary to restore those use cases. Some ideas are\n    discussed under the bug report. With that caveat, this patch\n    removes the reported vulnerability when using\n    swift/keystoneauth with a keystone v3 API.\n    \n    Note: to observe the new \'restricted\' behaviour you will need\n    to setup keystone user(s) and tenant(s) in a non-default domain\n    and set auth_version = v3.0 in the auth_token middleware config\n    section of proxy-server.conf. You may also benefit from the\n    keystone v3 enabled swiftclient patch under review here:\n    https://review.openstack.org/#/c/91788/\n    \n    DocImpact\n    \n    blueprint keystone-v3-support\n    \n    Closes-Bug:  #1299146\n    \n    Change-Id: Ib32df093f7450f704127da77ff06b595f57615cb\n',1270,31,'HP'),(275627,5248,5248,'2014-09-09 18:54:22','2014-08-15 15:54:05','    Delete expired objects in slightly smarter way.\n    \n    When the expirer tries to delete customer objects, if it just walks through the\n    containers in order the deamon will tend to send DELETEs to the same container\n    highly concurrently. This will in turn create a lot of asyncs because of all\n    the concurrent deletes. If the deletes were spread out to multiple containers\n    it would improve performance and decrease the number of asyncs made.\n    \n    Change-Id: I3d08118c197b7f18dd7e880bd5664508934ffd24\n',104,47,'Rackspace'),(275629,978,978,'2014-09-12 10:24:11','2014-09-12 10:20:19','    Add comments to clarify change to www-authenticate test\n    \n    Trivial patch to tidy-up change to the functional test for\n    www-authenticate header and add a comment to explain\n    that multiple header values might be returned.\n    \n    Change-Id: If62cb3fd9e11450a2be0cec71e80ecb74a959d04\n    Related-bug: 1368048\n',7,1,'HP'),(275631,4080,4080,'2014-09-12 14:37:04','2014-09-12 14:37:04','    Fix RingBuilder._build_max_replicas_by_tier docstring\n    \n    The current docstring doesn\'t include zones, and the order of the\n    entries is not up to date with the current code. Let\'s fix this.\n    \n    Change-Id: Ibabd79427b83d9e8c86b2caeb93dee219c8274c0\n',37,30,'Red Hat'),(275633,47,47,'2014-09-13 09:48:14','2014-09-13 09:48:14','    Stop using intersphinx\n    \n    Remove intersphinx from the docs build as it triggers network calls that\n    occasionally fail, and we don\'t really use intersphinx (links other\n    sphinx documents out on the internet)\n    \n    This also removes the requirement for internet access during docs build.\n    \n    This can cause docs jobs to fail if the project errors out on\n    warnings.\n    \n    Change-Id: I71e941e2a639641a662a163c682eb86d51de42fb\n    Related-Bug: #1368910\n',1,6,'SUSE'),(275635,978,4080,'2014-09-15 11:25:57','2014-09-14 23:41:19','    Fix internal link to keystoneauth in documentation\n    \n    This patch fixes a broken link at the end of the table in\n    http://docs.openstack.org/developer/swift/logs.html#swift-source\n    \n    Change-Id: I989173ac93e0f840997333be0d5cec07eb77b304\n',2,0,'Red Hat'),(275637,832,832,'2014-09-10 11:52:06','2014-08-14 14:39:18','    Treat 404s as 204 on object delete in proxy\n    \n    This change adds an optional overrides map to _make_request method\n    in the base Controller class.\n    \n      def make_requests(self, req, ring, part, method, path, headers,\n                        query_string=\'\', overrides=None)\n    \n    Which will be passed on the the best_response method. If set and\n    no quorum it reached, the override map is used to attempt to find\n    quorum.\n    \n    The overrides map is in the form:\n    \n        { <response>: <override response>, .. }\n    \n    The ObjectController, in the DELETE method now passes an override map\n    to make_requests method in the base Controller class in the form of:\n    \n        { 404: 204 }\n    \n    Statuses/responses that have been overridden are used in calculation\n    of the quorum but never returned to the user. They are replaced by:\n    \n        (STATUS, \'\', \'\', \'\')\n    \n    And left out of the search for best response.\n    \n    Change-Id: Ibf969eac3a09d67668d5275e808ed626152dd7eb\n    Closes-Bug: 1318375\n',112,24,'Rackspace'),(275639,4078,4078,'2014-09-03 09:04:43','2014-04-17 15:39:50','    Fix delete versioning objects when previous is expired\n    \n    When deleteing versioned objects proxy will try to restore the previous\n    copy. The COPY request will fail if the previous version is expired but\n    not handled by object-expirer.\n    \n    This patch checks COPY respones on the previous copy, if it\'s\n    HTTP_NOT_FOUND(mostly because it\'s expired) proxy will try to restore\n    with the version before previous.\n    \n    Closes-Bug #1308446\n    Change-Id: I17f049ea3ef62723effae8086ec427f6e151cd9c\n',71,8,'INTC'),(275641,4080,4080,'2014-09-15 17:31:16','2014-09-15 17:22:54','    Allow filtering by region in swift-recon\n    \n    The option \"-r\" is already used, thus only \"--region\" is used to specify\n    filter by region.\n    \n    Change-Id: If769f2f3191c202933b03b48fe0f22b7c94a4dd6\n    Closes-Bug: 1369583\n',32,14,'Red Hat'),(275644,4087,4087,'2014-09-19 05:23:01','2014-07-14 15:18:03','    Early framework for the EC Reconstructor\n    \n    Patch that adds the reconstructor daemon and a placeholder for\n    tests.  There are several TODOs related to Trello items that\n    can be worked on independently by various developers, thus\n    looking to land this patch on the integration branch to enable\n    that work.\n    \n    Sleep on the verb RUGGEDIZE, it may grow on you :) We can always\n    change it later.... and likely will\n    \n    Change-Id: Ic203cb313193fc4b0e557b299ea11d5d45e80d24\n    Implements: blueprint ec-reconstructor\n',653,95,'Intel'),(275646,869,869,'2014-09-16 10:10:59','2014-09-10 17:29:05','    Move multipart MIME parser into utils\n    \n    Over on the EC branch, we need to be able to parse multipart MIME\n    documents in the object server. The formpost middleware has a\n    perfectly good MIME parser, but it seems sort of awful to import\n    things from formpost in swift/obj/server.py, so I pulled it out into\n    common.utils.\n    \n    Change-Id: Ieb4c05d02d8e4ef51a3a11d26c503786b1897f60\n',301,291,'SwiftStack'),(275648,869,5596,'2014-09-18 12:36:26','2014-09-18 19:20:51','    container.merge_items bug\n    \n    When replicated container entries get round-tripped through json, they wind up\n    with unicode objects for names.  This causes equality checks to fail against\n    container entries, and you can wind up with duplicate records.  My bad.\n    \n    Change-Id: I3aee2ad8dbd3a617efe37e887cfb902a3e4a1646\n',32,0,'Rackspace'),(275649,2118,2118,'2014-09-18 21:18:50','2014-09-18 21:16:35','    Fixes several typos (Swift)\n    \n    Corrects spelling errors found in comments.\n    \n    Change-Id: I228a888e3f256569ea32ef1613092dbd63e13c62\n',10,10,'Cloudscaling'),(275651,869,869,'2014-09-18 17:04:30','2014-09-18 17:04:30','    Test for unicode names in AccountBroker.merge_items()\n    \n    ContainerBroker.merge_items() had a bug in it where non-ASCII Unicode\n    names would possibly result in duplicate entries in container\n    databases. AccountBroker.merge_items() doesn\'t do the same\n    bulk-operations tricks that ContainerBroker does, so it doesn\'t\n    currently have the bug. This commit just adds a test to ensure the bug\n    doesn\'t creep in should someone decide to make AccountBroker look more\n    like ContainerBroker someday.\n    \n    Change-Id: Id2ac129828dbdf55b609d839ce4d9d42437ee0a3\n',29,0,'SwiftStack'),(275653,1278,1278,'2014-09-19 10:44:30','2014-09-02 18:12:18','    Add \"--no-overlap\" option to swift-dispersion populate\n    \n    This change allows the user to use a \"--no-overlap\" parameter when\n    running the tool multiple times. It will increase the coverage by\n    whatever is specified in the dispersion_coverage field of the conf\n    file in a manner where existing container/objects are left in place\n    and no partition is populated more than once.\n    \n    Related-Bug: #1233045\n    \n    Change-Id: I139fed2f4c967ba18d073b7ecd1e946ed4da1271\n',53,6,'HP'),(275655,978,978,'2014-09-15 13:11:44','2014-09-10 16:09:13','    Update documentation for using keystone auth\n    \n    Cleanup and add clarification to the documentation\n    for using Keystone auth.\n    \n    Update to refer to auth_token middleware being\n    distributed as part of the keystomemiddelware project\n    rather than keystone.\n    \n    Include capabilities (/info) in the list of reasons\n    why delay_auth_decision might need to be set in\n    auth_token middleware config.\n    \n    Add description of the project_id:user_id format\n    for container ACLs and emphasize that ids rather than\n    names should be used since this patch has now merged:\n    https://review.openstack.org/#/c/86430\n    \n    DocImpact\n    blueprint keystone-v3-support\n    Change-Id: Idda4a3dcf8240474f1d2d163016ca2d40ec2d589\n',79,38,'HP'),(275657,441,441,'2014-09-22 06:07:56','2014-09-22 06:07:56','    Imported Translations from Transifex\n    \n    Change-Id: Ibd8882766a87c6d77e786f7635b1290391e43f10\n',459,200,NULL),(275659,229,869,'2014-09-22 17:13:26','2014-08-28 09:39:38','    Reject overly-taxing ranged-GET requests\n    \n    RFC 7233 says that servers MAY reject egregious range-GET requests\n    such as requests with hundreds of ranges, requests with non-ascending\n    ranges, and so on.\n    \n    Such requests are fairly hard for Swift to process. Consider a Range\n    header that asks for the first byte of every 10th MiB in a 4 GiB\n    object, but in some random order. That\'ll cause a lot of seeks on the\n    object server, but the corresponding response body is quite small in\n    comparison to the workload.\n    \n    This commit makes Swift reject, with a 416 response, any ranged GET\n    request with more than fifty ranges, more than three overlapping\n    ranges, or more than eight non-increasing ranges.\n    \n    This is a necessary prerequisite for supporting multi-range GETs on\n    large objects. Otherwise, a malicious user could construct a Range\n    header with hundreds of byte ranges where each individual byterange\n    requires the proxy to contact a different object server. If seeking\n    all over a disk is bad, connecting all over the cluster is way worse.\n    \n    DocImpact\n    \n    Change-Id: I4dcedcaae6c3deada06a0223479e611094d57234\n',126,8,'SwiftStack'),(275661,4056,4087,'2014-09-24 08:39:01','2014-09-11 06:55:45','    Add container_count to policy_stat table\n    \n    Start tracking the container count per policy including reporting\n    it in account HEAD and supporting installations where the DB\n    existed before the updated schema.\n    \n    Migration is triggered by the account audtior; if the database is\n    un-migrated it will continue to report policy_stats without the per\n    policy container_count keys.\n    \n    Closes-Bug: #1367514\n    Change-Id: I07331cea177e19b3df303609a4ac510765a19162\n',691,29,'Intel'),(275663,4086,4086,'2014-09-23 14:55:16','2014-09-05 01:42:17','    Added instructions to create a label or UUID to the XFS volume and mount using it.\n    \n    Change-Id: Idcaf16a278d6c34770af9b1f17d69bdd94fb86b7\n',18,7,'independent'),(275665,4080,4080,'2014-09-17 18:22:53','2014-09-11 08:01:51','    Return correct number of changed partitions\n    \n    When a ring is rebalanced the number of changed partitions is counted.\n    Before this patch partitions might be rebalanced, but actually no data\n    is moved - for example, when a partition is assigned to the same device\n    as before. This results in a wrong number of reassigned partitions that\n    is shown to the user.\n    \n    This patch remembers the partition allocation before the rebalance, and\n    compares it to the new allocation after a rebalance. Only partitions\n    that are stored on a different device than before are counted.\n    \n    Partial-Bug: 1367826\n    Also-By: Florent Flament <florent.flament-ext@cloudwatt.com>\n    Change-Id: Iacfd514df3af351791f9191cef78cff1b3e2645f\n',31,8,'Red Hat'),(275667,4056,4056,'2014-09-23 09:11:44','2014-09-23 09:11:44','    Fix profile tests to clean up its tempdirs.\n    \n    Change-Id: I363651046cf414e14f15affd834043aabd5427c0\n',5,2,'SwiftStack'),(275669,869,869,'2014-09-18 16:02:47','2014-06-10 14:15:27','    Zero-copy object-server GET responses with splice()\n    \n    This commit lets the object server use splice() and tee() to move data\n    from disk to the network without ever copying it into user space.\n    \n    Requires Linux. Sorry, FreeBSD folks. You still have the old\n    mechanism, as does anyone who doesn\'t want to use splice. This\n    requires a relatively recent kernel (2.6.38+) to work, which includes\n    the two most recent Ubuntu LTS releases (Precise and Trusty) as well\n    as RHEL 7. However, it excludes Lucid and RHEL 6. On those systems,\n    setting \"splice = on\" will result in warnings in the logs but no\n    actual use of splice.\n    \n    Note that this only applies to GET responses without Range headers. It\n    can easily be extended to single-range GET requests, but this commit\n    leaves that for future work. Same goes for PUT requests, or at least\n    non-chunked ones.\n    \n    On some real hardware I had laying around (not a VM), this produced a\n    37% reduction in CPU usage for GETs made directly to the object\n    server. Measurements were done by looking at /proc/<pid>/stat,\n    specifically the utime and stime fields (user and kernel CPU jiffies,\n    respectively).\n    \n    Note: There is a Python module called \"splicetee\" available on PyPi,\n    but it\'s licensed under the GPL, so it cannot easily be added to\n    OpenStack\'s requirements. That\'s why this patch uses ctypes instead.\n    \n    Also fixed a long-standing annoyance in FakeLogger:\n    \n        >>> fake_logger.warn(\'stuff\')\n        >>> fake_logger.get_lines_for_level(\'warn\')\n        []\n        >>>\n    \n    This, of course, is because the correct log level is \'warning\'. Now\n    you get a KeyError if you call get_lines_for_level with a bogus log\n    level.\n    \n    Change-Id: Ic6d6b833a5b04ca2019be94b1b90d941929d21c8\n',610,21,'SwiftStack'),(275672,2912,2912,'2014-09-26 22:39:48','2014-09-25 00:48:49','    Fixes unit tests to clean up temporary directories\n    \n    This patch fixes the unit tests to remove the temporary directories\n    created during run of unit tests. Some of unit tests did not tear down\n    correctly, whatever it had set it up for running. This would over period\n    of time bloat up the tmp directory. As on date, there were around 49 tmp\n    directories left uncleared per round of unit tests. This patch fixes it.\n    \n    Change-Id: If591375ca9cc87d52c7c9c6dc16c9fb4b49e99fc\n',43,15,'HP'),(275673,1590,1590,'2014-09-22 12:16:24','2014-09-15 11:52:14','    direct_client not passing args between some functions\n    \n    The call to _get_direct_account_container in direct_get_account\n    has several of its args =None instead of set to the value passed\n    to direct_get_account.\n    \n    The same applies to _get_direct_account_container in\n    direct_get_container.\n    \n    The direct_get_container is only called by the account-reaper\n    and this bug will have limited impact on it. The marker,\n    maintained in reap_container, is ignored by direct_get_container.\n    This is not as bad as it sounds, if the account-reaper successfully\n    deletes the first 10K objects, assuming the container has > 10K\n    objects, the next call to direct_get_container will in fact return\n    the next 10K objects even though it sets marker=None (assuming the\n    first 10K objects were successfully deleted).\n    \n    This patch also updates test_direct_get_account and\n    test_direct_get_container to ensure the appropriate\n    args are included in the connection query_string.\n    \n    Closes-Bug: #1369558\n    Change-Id: If1c8aa1240d38354ebc9b1ebca92dc1c8c36cb5f\n',27,14,'HP'),(275675,441,441,'2014-09-28 06:08:55','2014-09-28 06:08:55','    Imported Translations from Transifex\n    \n    Change-Id: I59b68ecb6f07e2b71e4655699d0165007d764718\n',138,42,NULL),(275676,869,869,'2014-09-23 12:39:59','2014-09-23 12:32:42','    Remove unused option from ObjectReplicator.__init__\n    \n    disk_chunk_size is unused by the ObjectReplicator class. Note that it\n    *is* used by the object replicator process; it\'s just that\n    DiskFileManager is the one that pulls it out of the conf and pays\n    attention to it. Keeping it as an attribute on ObjectReplicator is\n    unnecessary.\n    \n    Change-Id: I1eeef7b33873b4c8bb269ca02dcb067098b6fded\n',0,1,'SwiftStack'),(275678,5596,5596,'2014-09-25 16:29:57','2014-09-25 16:29:57','    use get_container_info in ratelimit\n    \n    Everyone else cooperates to store the container_info cache in the env the\n    first time it\'s requested.  This should save a duplicate memcache hit on\n    requests that ratelimiting looks at.\n    \n    Change-Id: Ic6411d4619db6b53fafe9fdbf1d0a370d1258c38\n',26,27,'Rackspace'),(275680,5636,5636,'2014-09-27 23:10:48','2014-09-27 23:10:48','    Incorrect variable name in the diskfile.py\n    \n    You should use the suffix variable instead of the hash_ variable when\n    updates the hashes dictionary in the get_hashes().\n    \n    Fixes Bug1374777\n    \n    Change-Id: If9a7ab5b6d271385e4fdc79ff9c216047a2f4d7e\n',1,1,'independent'),(275682,978,5636,'2014-10-01 11:02:48','2014-09-27 23:49:38','    Some statements are evaluated twice in the setUp of the\n    TestObjectReplicator\n    \n    Remove the duplicated statements.\n    \n    Closes-Bug: #1374783\n    \n    Change-Id: If2b55e864fea497d7a7b218adf11eb7749c27765\n',2,2,'independent'),(275684,869,869,'2014-10-01 14:03:51','2014-10-01 14:03:51','    fix a comment\n    \n    Change-Id: I6310390f756bc0d326e56fceef32b630f0fe1ca1\n',1,1,'SwiftStack'),(275685,869,869,'2014-10-02 17:14:58','2014-10-02 17:14:58','    Fix ring-builder crash.\n    \n    If you adjust the replica count after adding devices but before the\n    first rebalance, the ring builder would crash.\n    \n    To reproduce:\n    \n        $ swift-ring-builder crashy.builder create 8 3 1\n        $ swift-ring-builder crashy.builder add r1z1-10.1.1.1:6000/sda1 1\n        $ swift-ring-builder crashy.builder set_replicas 5\n        $ swift-ring-builder crashy.builder rebalance\n    \n    Change-Id: Id91cf8680961ccf6e3db153577e99cad545bee9d\n',9,0,'SwiftStack'),(275686,229,2237,'2014-10-02 17:46:06','2014-09-30 15:08:59','    Ensure sys.exit called in fork_child after exception\n    \n    Currently, the fork_child() function in auditor.py does not\n    handle the case where run_audit() encounters an exception\n    properly.\n    \n    A simple case is where the /srv directory is set\n    with permissions such that the \'swift\' user cannot access it.\n    Such a situation causes a os.listdir() to return an OSError\n    exception.  When this happens the fork_child() process does not\n    run to completion and sys.exit() is not executed.  The process\n    that was forked off continues to run as a result.  Execution goes\n    back up to the audit_loop function which restarts the whole process.  The\n    end result is an increasing number of processes on the system\n    until the parent is terminated.  This can quickly exhaust the\n    process descriptors on a system.\n    \n    This change wraps run_audit() in a try block and adds an\n    exception handler that prints what exception was encountered.\n    The sys.exit() was moved to a finally: block so that it will\n    always be run, avoiding the creation of zombies.\n    \n    Change-Id: I89d7cd27112445893852e62df857c3d5262c27b3\n    Closes-bug: 1375348\n',18,2,'IBM'),(275688,229,229,'2014-09-25 11:04:31','2014-09-22 09:46:34','    updated hacking rules\n    \n    1) Added comment for H231, which we were already enforcing. H231\n    is for Python 3.x compatible except statements.\n    \n    2) Added check for H201, which we were enforcing in reviews\n    but waiting on hacking checks to be updated. H201 is for bare\n    except statements, and the update in upstream hacking is to\n    support the \"  # noqa\" flag on it.\n    \n    The H201 check catches some existing bare excepts that are fixed.\n    \n    Change-Id: I68638aa9ea925ef62f9035a426548c2c804911a8\n',60,64,'SwiftStack'),(275690,5645,5627,'2014-10-02 22:38:13','2014-10-01 09:37:47','    Fix metadata overall limits bug\n    \n    Currently metadata limits are checked on a per request basis. If\n    multiple requests are sent within the per request limits, it is\n    possible to exceed the overall limits.  This patch adds an overall\n    metadata check to ensure that multiple requests to add metadata to\n    an account/container will check overall limits before adding\n    the additional metadata.\n    \n    Change-Id: Ib9401a4ee05a9cb737939541bd9b84e8dc239c70\n    Closes-Bug: 1365350\n',175,7,'Rackspace'),(275692,4080,4080,'2014-09-30 20:05:41','2014-09-14 20:48:32','    Limit partition movement when adding a new tier\n    \n    When adding a new tier (region, zone, node, device) to an existing,\n    already balanced ring all existing partitions in the existing tiers of\n    the same level are gathered for reassigning, even when there is\n    not enough space in the new tier. This will create a lot of unnecessary\n    replication traffic in the backend network.\n    \n    For example, when only one region exists in the ring and a new region is\n    added, all existing parts are selected to reassign, even when the new\n    region has a total weight of 0. Same for zones, nodes and devices.\n    \n    This patch limits the number of partitions that are choosen to reassign\n    by checking for devices on other tiers that are asking for more\n    partitions.\n    \n    Failed devices are not considered when applying the limit.\n    \n    Co-Authored By: Florent Flament <florent.flament-ext@cloudwatt.com>\n    Change-Id: I6178452e47492da4677a8ffe4fb24917b5968cd9\n    Closes-Bug: 1367826\n',61,4,'Red Hat'),(275694,4075,4075,'2014-09-15 18:23:32','2014-07-09 16:04:20','    Let eventlet.wsgi.server log tracebacks when eventlet_debug is enabled\n    \n    The \"logging\" available in eventlet.wsgi.server/BaseHTTPServer doesn\'t\n    generally suite our needs, so it should be bypassed using a NullLogger in\n    production.  But in development it can be useful if tracebacks generated from\n    inside eventlet.wsgi (say a NameError in DiskFile.__iter__) end up in logs.\n    Since we already have eventlet_debug parsed inside of run_server we can skip\n    the NullLogger bypass and let stuff blast out to STDERR when configured for\n    development/debug logging.\n    \n    Change-Id: I20a9e82c7fed8948bf649f1f8571b4145fca201d\n',61,6,'Rackspace'),(275696,42,42,'2014-09-29 14:49:42','2014-09-29 14:49:42','    Fix up the return value of launch()\n    \n    This is \"obviously\" the right thing to do, except of course it\'s\n    pure sugar: the return value is not used anywhere. Except if someone\n    has a script that imports the whole thing somehow and then does\n    isinstance(dict). Because that is so much easier than submitting\n    a patch, I can imagine someone, somewhere doing that.\n    \n    The fix came in a patch by dfg, see review 121851.\n    \n    Change-Id: I39ddf70dc2d027b7db6e31097400248dc66eb137\n',7,3,'Red Hat'),(275698,2912,2912,'2014-09-26 09:44:35','2014-09-18 00:45:35','    Provides proper error handling on builder unpickle\n    \n    This patch provides the necessary error handling while unpickling\n    a builder file. Earlier if a builder file is empty/invalid/corrupted,\n    the stacktrace was shown to user with an exit code of 1. This fixes it\n    to show a user-friendly message and also returns the exit code of 2,\n    indicating there was a failure.\n    \n    Change-Id: I51eb24702c422299629f8053d4591dd10f5863f8\n    Closes-Bug: #1370680\n',156,8,'HP'),(275700,229,229,'2014-10-03 15:52:20','2014-10-03 10:17:00','    updated AUTHORS and CHANGELOG for 2.2.0\n    \n    Change-Id: I6c0bc1570f6a48439de5a029a86f1b582f30f8a6\n',70,1,'SwiftStack'),(275702,441,441,'2014-10-04 06:07:47','2014-10-04 06:07:47','    Imported Translations from Transifex\n    \n    Change-Id: I31b5e6b0f2922150902e1bfa52144302ee0c7a8e\n',0,252,NULL),(275703,4080,4080,'2014-10-06 10:04:14','2014-10-06 10:01:03','    Fix minor typo\n    \n    Fixes minor typo in one method and adds missing parameter in other\n    method. Only checked swift/container/reconciler.py for now.\n    \n    Change-Id: I5c648010f09b6e4b1fb0380bc97b266e680602f8\n',2,1,'Red Hat'),(275705,229,289,'2014-10-07 09:07:43','2014-05-15 15:30:13','    Refer multi node install to docs.openstack.org\n    \n    The multi-node install was so horribly outdated it still\n    refered to ubuntu 10.04. The install guide at docs.openstack.org\n    has a usable swift installation guide - link to it until such\n    time as this page can be fixed.\n    \n    Change-Id: I29fa334d9ffc9b63c8f31c664e7509b2f2577574\n',10,481,'OpenStack Foundation'),(275706,4080,4080,'2014-10-07 21:54:17','2014-10-07 21:54:17','    Add a reference to the OpenStack security guide\n    \n    Change-Id: I85b9591a17572eb57f315d7b8e6741455aef5817\n',8,0,'Red Hat'),(275707,1278,1278,'2014-09-25 16:27:25','2014-09-18 17:23:54','    Add new features to swift-drive-audit\n    \n    This patch adds two new features to swift-drive-audit. The first\n    is an option in the drive-audit.conf file that allows the operator\n    to prevent the drives ever being unmounted automatically,\n    regardless of the amount of errors present. This could be of\n    benefit in very small systems consisting of only one or two drives\n    where the operator would like to manually unmount/fix the\n    particular drive(s) and minimise any potential downtime.\n    \n    The second is another option in drive-audit.conf that allows the\n    operator to select a recon directory. This directory will then\n    have a drive.recon file which will keep an up-to-date record of\n    the swift drives and any errors associated with them. An example\n    of the output would be as follows:\n    \n    {\"/srv/node/disk2\": \"0\", \"/srv/node/disk3\": \"25\", \"/srv/node/disk0\": \"0\",\n    \"/srv/node/disk1\": \"0\", \"/srv/node/disk10\": \"0\", \"/srv/node/disk7\": \"0\",\n    \"/srv/node/disk4\": \"137\", \"/srv/node/disk5\": \"0\", \"/srv/node/disk8\": \"0\",\n    \"/srv/node/disk9\": \"0\", \"/srv/node/disk6\": \"0\", \"/srv/node/disk11\": \"60\"}\n    \n    This would allow the operator to monitor the errors on the swift\n    drives without having to spend time searching through logs. Also, if\n    this is accepted, it should be possible to add an option to\n    swift-recon that would keep track of this at a system level.\n    \n    Change-Id: Ib5dacf8622b7363e070c274c7c30c8ead448a055\n',21,8,'HP'),(275709,5623,5623,'2014-10-09 22:04:53','2014-10-09 21:55:35','    Fix unit tests failing in some cases\n    \n    TestZeroCopy used to fail when \'localhost\' resolved to an ipv6\n    address. https://github.com/eventlet/eventlet/issues/8\n    \n    Also, \"test_container_sync_realms.py:TestUtils.test_os_error\"\n    used to fail when unit tests were run as root user. This is\n    because despite os.chmod(), a root user still has permission\n    to access the file and hence OSError is not raised.\n    \n    Change-Id: Ife80b203358557999734515261814ce76c0e00cd\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n',18,13,'Red Hat'),(275712,4087,4087,'2014-10-11 17:09:50','2014-10-11 16:54:28','    Revert \"Refactor object PUT to make EC easier to add\"\n    \n    Changes in EC Design has negated the requirement for this patch.\n    This reverts commit 0ee555d0b0fed5611a179724c8e5018ac78d5d02.\n    \n    Change-Id: Ib764f6f4281bcb9ab18f6d0662a4d5c05d888ecf\n',49,132,'Intel'),(275714,869,869,'2014-10-16 14:47:07','2014-09-16 18:40:41','    Allow sending object metadata after data\n    \n    This lets the proxy server send object metadata to the object server\n    after the object data. This is necessary for EC, as it allows us to\n    compute the etag of the object in the proxy server and still store it\n    with the object.\n    \n    The wire format is a multipart MIME document. For sanity during a\n    rolling upgrade, the multipart MIME document is only sent to the\n    object server if it indicates, via 100 Continue header, that it knows\n    how to consume it.\n    \n    Example 1 (new proxy, new obj server):\n    \n       proxy: PUT /p/a/c/o\n              X-Backend-Obj-Metadata-Footer: yes\n    \n         obj: 100 Continue\n            X-Obj-Metadata-Footer: yes\n    \n       proxy: --MIMEmimeMIMEmime...\n    \n    Example2: (new proxy, old obj server)\n    \n       proxy: PUT /p/a/c/o\n              X-Backend-Obj-Metadata-Footer: yes\n    \n         obj: 100 Continue\n    \n       proxy: <obj body>\n    \n    Change-Id: Id38f7e93e3473f19ff88123ae0501000ed9b2e89\n',739,111,'SwiftStack'),(275715,869,869,'2014-10-14 18:19:54','2014-10-14 18:19:54','    Bump eventlet version\n    \n    This version adds in set_hundred_continue_headers(), which we need.\n    \n    Change-Id: I61efe15124632e1cb3eb8489cf70dbb1a5320eca\n',1,1,'SwiftStack'),(275717,869,869,'2014-10-10 17:19:57','2014-10-10 17:08:06','    Fix rebalance crash post-2.1.0 upgrade.\n    \n    If you had a builder file from an earlier version of Swift (before\n    6d77c37) and you attempted to rebalance it with a new version of Swift\n    (after 6d77c37, before this commit), you could get a crash.\n    \n    Commit 6d77c37 changed the calculation for parts_wanted slightly\n    (round up instead of round down), so if a rebalance is attempted\n    without recomputing parts_wanted, then swift-ring-builder crashes.\n    \n    The crash only occurs if the first command run is \"rebalance\". Adding\n    a device, removing a device, changing a device\'s weight, or changing\n    replica count (basically, anything that gives you a reason to\n    rebalance) will all cause parts_wanted to be recalculated, so\n    subsequent rebalances will succeed.\n    \n    Change-Id: I6f7a69701f74546a00d3183aa7763e9e708408c9\n',36,2,'SwiftStack'),(275718,5646,5646,'2014-10-10 12:51:53','2014-10-10 12:51:50','    swift-drive-audit: pass logger to get_errors\n    \n    Closes-Bug: #1379767\n    Change-Id: Ie8ec5e9ffb977ab39aedeb878e6aae9f0b62530b\n',2,2,'Wikimedia Foundation'),(275720,4064,4064,'2014-10-10 11:55:56','2014-10-07 15:25:59','    Ssync does not replicate custom object headers\n    \n    Closes-Bug: #1329093\n    \n    Change-Id: Ie9d80089a38d7a9b3464c66237d4d2d23331ebd5\n',18,6,'Rackspace'),(275722,5636,5636,'2014-10-12 00:10:43','2014-10-09 13:36:22','    Some assignment statements are redundant\n    \n    Don\'t need to initialize with false, only determine true conditional\n    directly.\n    \n    Closes-Bug: 1379149\n    \n    Change-Id: I8685896b8dd9f7008b8b2311a2ad2a56c95a8bc6\n',1,8,'independent'),(275724,5632,5632,'2014-10-08 09:59:47','2014-10-01 16:26:15','    Convert maximum length to integer in name_check\n    \n    This patch converts maximum_length to integer in\n    name_check middleware if read from proxy-server.conf\n    file.\n    \n    Change-Id: I28d66fd1b7ce56ca5540cb7189d084c36e063d43\n    Closes-Bug: 1372397\n',34,10,'NEC'),(275726,5596,5596,'2014-10-16 01:56:48','2014-10-16 01:56:48','    use replication_ip in ssync\n    \n    Update ssync_sender to use replication_ip and replication_port from the ring.\n    \n    Those attributes are supposed to allow for a separate replication network, and\n    are used by rsync replication.\n    \n    Change-Id: Ib4cc3cbc1503b85dfdfa0edab58a49c95eac5993\n',22,12,'Rackspace'),(275727,4064,4064,'2014-10-10 14:22:04','2014-10-10 02:04:44','    Fix bug with expirer and unicode\n    \n    Looks like I wasn\'t careful enough last time i fixed this bug- this\n    is basically the same deal, just further down the line. What happens\n    without this bug fix is you upload a object with a unicode name and\n    a x-delete-after header and when it does expire the customer object\n    gets removed but the expirer marker object doesn\'t.\n    \n    Change-Id: I82359c87a0919d71693e49ecf08e0f1eedc9d18e\n',44,11,'Rackspace'),(275729,1069,1069,'2014-10-24 15:23:33','2014-10-24 15:22:29','    Update Getting Started requirements versions\n    \n    These docs currently say we target ubuntu 10.04 and an eventlet version\n    that our requirements file does not allow. Update these versions.\n    \n    Change-Id: I052b6561f88ec90f865454e426032f1baf4586c0\n',2,2,'IBM'),(275730,869,869,'2014-10-24 15:34:45','2014-10-24 15:34:45','    Mention Python 2.7 in Getting Started guide\n    \n    Change-Id: I2992d1227f294d4cb1c6a8676137df44e231bd80\n',2,2,'SwiftStack'),(275731,5596,5596,'2014-10-27 16:29:07','2014-10-27 16:29:07','    reject problematic object names\n    \n    We had this problem:\n    \n        >> : x = \'\\xed\\xa0\\xbc\\xed\\xbc\\xb8\'\n        >> : x == x.decode(\'utf-8\').encode(\'utf-8\')\n        << : False\n    \n    That str contains two utf-8 codepoints, which I guess python is normalizing\n    into one unicode character, which it then encodes as one utf-8 codepoint.\n    Like this:\n    \n        >> : u\'\\ud83c\\udf38\'\n        << : u\'\\U0001f338\'\n    \n    I don\'t entirely understand that, but having a different byte representation\n    after round-tripping through unicode causes problems with replication and\n    listings.\n    \n    This patch just rejects anything that doesn\'t re-encode to the same thing.\n    If someone smarter wants to do something different, please speak up.\n    \n    Change-Id: I9ac48ac2693e4121be6585c6e4f5d0079e9bb3e4\n',6,1,'Rackspace'),(275733,4080,4080,'2014-10-29 12:45:15','2014-10-23 16:23:20','    Return verbose message if account quota exceeded\n    \n    This message is already used in the container quota middleware, so let\'s use it\n    in the account middleware too.\n    \n    Change-Id: I136fe6102c28cc8ccc021555c42ec7b0be716444\n    Closes-Bug: 1381875\n',11,3,'Red Hat'),(275735,4075,4075,'2014-10-30 14:03:56','2014-10-29 15:59:45','    Return 403 on unauthorized upload when over account quota\n    \n    If you try an unauthorized upload into a container that is over quota you get\n    a 403 instead of a 413, but if you try to unauthorized upload when an\n    *account* is over quota you can see the 413 even though the upload would have\n    been rejected by the authorize callback.  By wrapping the authorize callback\n    associated with the incoming request we can make sure to only return our 413\n    when the request would have been authorized otherwise.\n    \n    Drive by doc fixes thanks to acoles:\n    \n     * State that container_quotas should be after auth middleware in\n       the class doc string.\n     * Add note to proxy-server.conf.sample that account_quotas should\n       be after auth middleware.\n    \n    The equivalent statements are already in place for each quota\n    middleware.\n    \n    Doc-Impact\n    \n    Closes-Bug: #1387415\n    Change-Id: I2a88b3ec79d35bfdd73ea6ad64e376b7c7af4ea6\n',100,9,'Rackspace'),(275736,4080,4080,'2014-10-29 10:39:01','2014-10-29 10:34:53','    Update admin guide on handling drive failures\n    \n    Simply replacing a failed disk requires a very long time if the ring is not\n    changed, because all data will be replicated to a single new disk. This extends\n    the time to recover from missing replicas, and becomes even more important with\n    bigger disks.\n    \n    This patch updates the doc to include a faster alternative by setting the weight\n    of a failed disk to 0.  In this case the partitions from the failed disk are\n    distributed and replicated to the remaining disks in the cluster, and because\n    each disk gets only a fraction of the partitions it\'s also much faster.\n    \n    Change-Id: I16617756359771ad89ca5d4690b58a014f481d9b\n',13,2,'Red Hat'),(275738,2773,2773,'2014-11-06 14:52:04','2014-11-06 14:52:04','    Add Swift Browser as an associated project\n    \n    This is a JavaScript based browser for Swift.\n    \n    Change-Id: I2e304d4a0623c715f8712a358fef5067abc8935b\n',1,0,'Rackspace'),(275739,4080,4080,'2014-11-06 15:44:29','2014-11-06 15:44:29','    Rename Swiftbrowser in associated projects\n    \n    Let\'s use the full project name to avoid confusion with the recently added\n    Swiftbrowser based on AngularJS.\n    \n    Change-Id: Ib07338268a1593bc2882908b49c1fb4a130ff43d\n',1,1,'Red Hat'),(275741,2237,2237,'2014-10-27 17:27:14','2014-10-02 21:13:30','    Handle os.listdir failures in container-updater\n    \n    While investigating bug 1375348 I discovered the problem\n    reported there was not limited to the object-auditor.  The\n    container-updated has similar bugs.\n    \n    This patch catches the unhandled exception that can be thrown by\n    os.listdir.\n    \n    Change-Id: I7eed122bf6b663e6e7894ace136b6f4653db4985\n    Related-bug: 1375348\n',50,2,'IBM'),(275743,978,978,'2014-10-22 10:04:27','2014-10-22 09:28:43','    Change default keystone auth version to 3 in test/sample.conf\n    \n    The functional tests devstack gate job currently skips tests\n    that require keystone v3 API. In conjunction with changes to\n    devstack [0] this patch will cause the gate job to use keystone\n    v3 API and stop skipping those tests.\n    \n    Devstack sets auth version in its /etc/swift/test.conf by\n    uncommenting the value found in test/sample.conf, so the change\n    in this patch is sufficient to cause the v3 API to be used.\n    \n    The devstack patch [0] sets the correct auth url for the v3 API\n    and creates a fourth test account that is required for the\n    currently skipped tests to run.\n    \n    [0] change id I557de01bf196075f2f3adcdf4dd1b43756d8a0ae\n    \n    Change-Id: I44e159b939f5e3fc3780612823d12262013ea793\n',3,3,'HP'),(275745,832,229,'2014-11-07 22:21:02','2014-11-07 10:34:51','    added docs on specs workflow to CONTRIBUTING.md\n    \n    Change-Id: Id83d1da2a7a594a07fc5332b918539b3728e101b\n',16,1,'SwiftStack'),(275748,869,869,'2014-11-03 12:37:46','2014-10-22 13:18:34','    Foundational support for PUT of erasure-coded objects\n    \n    This commit makes it possible to PUT an object into Swift and have it\n    stored using erasure coding instead of replication.\n    \n    This works by splitting the incoming object into a number of segments,\n    erasure-coding each segment in turn to get fragments, then\n    concatenating the fragments into fragment archives. Segments are 1 MiB\n    in size, except the last, which is between 1 B and 1 MiB.\n    \n    +====================================================================+\n    |                             object data                            |\n    +====================================================================+\n    \n                                       |\n              +------------------------+----------------------+\n              |                        |                      |\n              v                        v                      v\n    \n    +===================+    +===================+         +==============+\n    |     segment 1     |    |     segment 2     |   ...   |   segment N  |\n    +===================+    +===================+         +==============+\n    \n              |                       |\n              |                       |\n              v                       v\n    \n         /=========\\             /=========\\\n         | pyeclib |             | pyeclib |         ...\n         \\=========/             \\=========/\n    \n              |                       |\n              |                       |\n              +--> fragment A-1       +--> fragment A-2\n              |                       |\n              |                       |\n              |                       |\n              |                       |\n              |                       |\n              +--> fragment B-1       +--> fragment B-2\n              |                       |\n              |                       |\n             ...                     ...\n    \n    Then, object server A gets the concatenation of fragment A-1, A-2,\n    ..., A-N, so its .data file looks like this (called a \"fragment archive\"):\n    \n    +=====================================================================+\n    |     fragment A-1     |     fragment A-2     |  ...  |  fragment A-N |\n    +=====================================================================+\n    \n    Since this means that the object server never sees the object data as\n    the client sent it, we have to do a few things to ensure data\n    integrity.\n    \n    First, the proxy has to check the Etag if the client provided it; the\n    object server can\'t do it since the object server doesn\'t see the raw\n    data.\n    \n    Second, if the client does not provide an Etag, the proxy computes it\n    and uses the MIME-PUT mechanism to provide it to the object servers\n    after the object body. Otherwise, the object would not have an Etag at\n    all.\n    \n    Third, the proxy computes the MD5 of each fragment archive and sends\n    it to the object server using the MIME-PUT mechanism. With replicated\n    objects, the proxy checks that the Etags from all the object servers\n    match, and if they don\'t, returns a 500 to the client. This mitigates\n    the risk of data corruption in one of the proxy --> object connections,\n    and signals to the client when it happens. With EC objects, we can\'t\n    use that same mechanism, so we must send the checksum with each\n    fragment archive to get comparable protection.\n    \n    There are a number of things _not_ included in this commit. Some of\n    them are listed here:\n    \n     * GET support for erasure-coded objects\n    \n     * two-step commit\n    \n     * deferred cleanup of old .data files\n    \n     * durability (daemon to reconstruct missing archives)\n    \n     * configurable segment size\n    \n    Co-Authored-By: Tushar Gohad <tushar.gohad@intel.com>\n    \n    Change-Id: I9c13c03616489f8eab7dcd7c5f21237ed4cb6fd2\n',485,62,'SwiftStack'),(275750,4075,869,'2014-11-10 15:07:44','2014-11-03 14:20:08','    Make resetswift customizable via environment\n    \n    Instead of recommending to edit resetswift to replace \"/dev/sdb1\" with\n    \"/srv/swift-disk\", use an environment variable instead. This way I can\n    set SAIO_BLOCK_DEVICE=/srv/swift-disk in my .bashrc, and then when I\'m\n    testing out changes to resetswift, I don\'t need to remember to edit\n    the modified script, nor do I end up submitting changes with the wrong\n    default in there.\n    \n    The variable defaults to /dev/sdb1, so if you use the script unmodified\n    and don\'t set SAIO_BLOCK_DEVICE, nothing changes for you.\n    \n    Change-Id: I741a8c91c2c54a4f32bc391cd794ef4206402753\n',10,9,'SwiftStack'),(275752,832,832,'2014-10-28 18:34:17','2014-06-13 19:12:31','    When a filesystem does\'t support xattr return a 507\n    \n    Currently when the object server tries to write an object\'s metadata\n    to a filesystem that doesn\'t support xattr, it errors with a stacktrace\n    and returns a 500 error back to the user with no information.\n    \n    This patch catches the resulting IOError when attempting to read or write\n    the xattr metadata, logs the error nicely and then returns a 507 error\n    back to the user.\n    \n    Seeing as this change is sending back a 507, it also catches and logs\n    the out of disk space errors (ENOSPC and EDQUOT).\n    \n    Change-Id: I31932b57582817a0b3b58dd315a996bd0bcbc99b\n    Closes-Bug: #966671\n',133,12,'Rackspace'),(275754,4080,4080,'2014-09-29 19:38:54','2014-09-16 14:46:08','    Fix bug in swift-ring-builder list_parts\n    \n    The number of shown replicas in the partition list might differ from the\n    actual number of replicas (as shown in the bugreport).\n    \n    This codes simply iterates for the builder._replica2part2dev and\n    remembers the number of replicas for each partition.\n    \n    The code to find the partitions was moved to swift/common/ring/utils.py\n    to make it easier to test, and a test to ensure the correct number of\n    replicas is returned was added.\n    \n    Closes-Bug: 1370070\n    Change-Id: Id6a3ed437bb86df2f43f8b0b79aa8ccb50bbe13e\n',64,19,'Red Hat'),(275756,898,898,'2014-11-14 20:47:04','2014-09-30 11:06:08','    Show the sum of every policy\'s amount in /recon/async\n    \n    After the release of Swift ver. 2.0.0, some recon responses do not\n    show each policy\'s information yet. To make things worse, some recon\n    results only count on policy-0\'s score, therefore the total is not\n    shown in the recon results.\n    \n    With this patch, async_pending count of recon results becomes\n    policy-aware. Suppose a number of async_pending files for policy-0 is 2\n    and a number for policy-1 is 3, recon sums up every policy\'s amount\n    as follows.\n    \n    $ curl http://<host>:<port>/recon/async\n    {\"async_pending\": 5} # It showed 2 before this commit\n    \n    Related-Bug: 1375332\n    Change-Id: Ifc88b8c9e06b9f022a926a87ed807e938e1e0412\n',14,6,'NTT'),(275757,978,978,'2014-11-14 10:44:41','2014-08-11 17:09:48','    Make in process functional tests use sample proxy-server.conf\n    \n    This patch was first motivated by noticing that the proxy\n    server pipeline used for in process functional tests was\n    out of date with respect to the pipeline in\n    /etc/proxy-server.conf.sample. Rather than cut and paste\n    the current pipeline into the in process setup, it seems\n    like a better idea would be to have the in process tests\n    always use the sample config.\n    \n    A further benefit is that in process functional tests will\n    pick up changes to the sample config introduced by patches -\n    previously test/functional/__init__.py would need to be\n    manually modified to run in process functional tests\n    on new middleware for example.\n    \n    Note: because the pipeline is now loaded using entry points,\n    \'python setup.py [develop|install]\' will now be needed\n    before running the tests.\n    \n    Obvious next steps would be to do the same for the backend\n    servers, and to allow alternative config files and dir\'s\n    to be specified, but this patch is the first step.\n    \n    Also drive-by fixes some typos in proxy-server.conf.sample\n    \n    Change-Id: If442bd7c2b1721ec92839c4490924ba33e1545d8\n',41,57,'HP'),(275759,978,4075,'2014-11-18 10:13:01','2014-11-17 12:30:15','    Always use FakeMemcache for in-process tests\n    \n    Better isolation and consistency for in-process functests to always use\n    the FakeMemcache.  If you want to test the real memcache you have real\n    functional tests.\n    \n    Change-Id: Ic483f794e122130bd7694c9a5f9a2b1cd0b9a653\n',1,6,'Rackspace'),(275761,978,5254,'2014-11-17 16:41:09','2014-11-17 11:33:41','    move slo, dlo after tempauth in pipeline\n    \n    Noticed that slo and dlo middleware were placed before\n    tempauth, they should be placed after\n    \n    DocImpact\n    \n    Change-Id: Ia931e2280125d846f248b23e219aebad14c66210\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',1,1,'Red Hat'),(275763,4075,4075,'2014-11-12 12:18:45','2014-11-11 17:03:29','    Prefer X-Backend-Timestamp for X-Newest\n    \n    When a X-Backend-Timestamp is available it would generally preferred\n    over a less specific value and sorts correctly against any X-Timestamp\n    values anyway.\n    \n    Change-Id: I08b7eb37ab8bd6eb3afbb7dee44ed07a8c69b57e\n',90,13,'Rackspace'),(275765,203,203,'2014-11-17 16:19:07','2014-11-17 16:11:05','    Adds v1 API documentation to doc/source/api\n    \n    After discussion https://review.openstack.org/#/c/129384/ moving\n    to the doc directory in swift repo.\n    \n    This lets us eliminate the object-api repo along with all the <service>-\n    api repos and move content to audience-centric locations.\n    \n    Change-Id: Ia0d9973847f7409a02dcc1a0e19400a3c3ecdf32\n',1240,1,'Rackspace'),(275767,47,47,'2014-11-19 09:11:55','2014-11-19 09:11:55','    Fix translation setup\n    \n    Fix the output directory, it should be swift/locale.\n    This fixes the importing of translations.\n    \n    Change-Id: I48311773c9d200c3b1739dc796618849416096ed\n',1,1,'SUSE'),(275769,289,441,'2014-11-20 06:35:52','2014-11-20 06:11:14','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Co-Authored-By: Pearl Yajing Tan <pearl.y.tan@seagate.com>\n    \n    Change-Id: Ifa3e292b8d5afbef8a99121b233e5ea596e672b7\n',1304,89,NULL),(275770,5038,5038,'2014-11-20 11:38:49','2014-11-20 11:38:49','    fix example typo\n    \n    5 * 1024 * 1024 = 5242880\n    \n    Change-Id: I0eeb6e2d9fbd79103cd8c658627344f73fed9498\n',2,2,'Kakao Corp.'),(275772,229,229,'2014-11-20 10:22:27','2014-11-20 10:22:27','    update AUTHORS\n    \n    Change-Id: I416e81b20a129377782f5d9298f8b8f5be079c27\n',5,0,'SwiftStack'),(275774,2237,2237,'2014-11-20 16:45:22','2014-11-20 15:56:58','    mock out os.listdir to return a list\n    \n    os.listdir returns a list of items.  The test case had been\n    written to return a single item which, though not really changing\n    the result of the test, was not the best approach.\n    \n    This patch updates the test case to return a list instead of a single\n    item.\n    \n    Change-Id: I793e0636440c0de0ca339c6592adec3e8b4ee1b4\n',2,2,'IBM'),(275776,978,1064,'2014-11-24 15:38:25','2014-11-22 15:35:10','    Fix 2 typos in admin_guide file\n    \n    Change-Id: Ibf1e5dbf6ff4747c7f23f6638321ab41bba3021b\n',2,2,'Comcast'),(275777,978,1064,'2014-11-24 15:35:06','2014-11-22 16:11:37','    Fix typos in overview_large_objects and versioning doc\n    \n    \n    Change-Id: I1a919ad1b0298d5817f9eb2caf5e3bd7b3243c2c\n',2,2,'Comcast'),(275779,978,1064,'2014-11-24 15:40:21','2014-11-22 15:38:48','    Fix typo in apache_deployment doc\n    \n    Change-Id: I42d76f544290dbda62633de90608d41caadac084\n',1,1,'Comcast'),(275781,5647,5647,'2014-11-25 15:44:30','2014-11-25 12:37:05','    Correct misspelled words\n    \n    In some files I found misspelling words.\n    \n    bin/swift-reconciler-enqueue#l26\n       primarly => primarily\n    swift/account/backend.py#l309\n       ommited => omitted\n    swift/container/replicator.py#l158\n       successfull => successful\n    test/unit/account/test_backend.py#1450\n       non_existant_policy_index => non_existent_policy_index\n    test/unit/account/test_backend.py#1451\n       \'test-non-existant-policy\'=> \'test-non-existent-policy\'\n    test/unit/account/test_backend.py#1453\n       non_existant_policy_index => non_existent_policy_index\n    \n    Change-Id: I976236e3200a6fbdc20be464acff182b6cface81\n',6,6,'independent'),(275782,5637,5637,'2014-11-25 00:00:05','2014-11-24 22:05:07','    Remove invalid connection checking in db_replicator\n    \n    Account/Container-replicator checks connection generation and timeout\n    in HTTP REPLICATE Request in _repl_to_node, but it doesn\'t really checks\n    connection but only construction of ReplConnection class.\n    This patch removes that invalid checking.\n    \n    Change-Id: Ie6b4062123d998e69c15638b741e7d1ba8a08b62\n    Closes-Bug: #1359018\n',2,12,'NTT'),(275784,2237,2237,'2014-11-20 16:48:38','2014-10-02 14:10:04','    Handle os.listdir failures in object-updater\n    \n    While investigating bug 1375348 I discovered the problem\n    reported there was not limited to the object-auditor.  The\n    object-updater has similar bugs.\n    \n    This patch catches the unhandled exception that can be thrown\n    by os.listdir if the self.devices directory is inaccessible.\n    \n    Change-Id: I6293b840916bb63cf9eebbc05068d9a3c871bdc3\n    Related-bug: 1375348\n',48,5,'IBM'),(275786,869,869,'2014-11-13 16:40:05','2014-11-13 16:40:05','    Make error limits survive a ring reload\n    \n    The proxy was storing the error count and last-error time in the\n    ring\'s internal data, specifically in the device dictionaries. This\n    works okay, but it means that whenever a ring changes, all the error\n    stats reset.\n    \n    Now the error stats live in the proxy server object, so they survive a\n    ring reload.\n    \n    Better yet, the error stats are now keyed off of the node\'s\n    IP/port/device triple, so if you have the same device in two rings\n    (like with multiple storage policies), then the error stats are\n    combined. If the proxy server sees a 507 for an objec request in\n    policy X, then that will now result in that particular object disk\n    being error-limited for requests in policies Y and Z as well.\n    \n    Change-Id: Icc72b68b99f37367bb16d43688e7e45327e3e022\n',151,75,'SwiftStack'),(275788,441,441,'2014-11-26 06:13:29','2014-11-26 06:13:29','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Ibf319f7cc1b5036ad8031776cf2c6018fb8a0159\n',63,64,NULL),(275789,229,229,'2014-11-26 14:21:33','2014-11-26 14:19:08','    Fix tempfile bugs from commit 6978275\n    \n    Commit 6978275 changed xprofile middleware\'s usage of mktemp\n    and moved to using tempfile. But it was clearly never tested,\n    because the os.close() calls never worked. This patch updates\n    that previous patch to use a context to open and close the file.\n    \n    Change-Id: I40ee42e8539551fd8e4dfb353f50146ab40a7847\n',10,12,'SwiftStack'),(275790,869,869,'2014-11-07 14:01:22','2014-11-07 13:53:46','    Reject object names with Unicode surrogates\n    \n    Technically, you can\'t encode surrogates into UTF-8 at all, but Python\n    2 lets you get away with it. Python 3 does not.\n    \n    We already have a check for surrogate pairs (commit 0080337), but not\n    one for lone surrogates. This commit forbids object names with lone\n    surrogates in them.\n    \n    The problem with surrogates is trivially reproducible:\n    \n        swift@saio:~$ python2.7\n        Python 2.7.3 (default, Feb 27 2014, 19:58:35)\n        [GCC 4.6.3] on linux2\n        Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n        >>> b\'\\xed\\xa0\\xbc\'.decode(\'utf-8\')\n        u\'\\ud83c\'\n        >>>\n    \n        swift@saio:~$ python3.3\n        Python 3.3.5 (default, Aug  4 2014, 15:27:24)\n        [GCC 4.6.3] on linux\n        Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n        >>> b\'\\xed\\xa0\\xbc\'.decode(\'utf-8\')\n        Traceback (most recent call last):\n          File \"<stdin>\", line 1, in <module>\n        UnicodeDecodeError: \'utf-8\' codec can\'t decode byte 0xed in position 0: invalid continuation byte\n        >>>\n    \n    See also http://bugs.python.org/issue9133\n    \n    Change-Id: I7c31022e8a028c3cdf2ed1586349509d96cfded9\n',10,1,'SwiftStack'),(275792,4075,4075,'2014-11-25 14:28:00','2014-11-21 17:28:13','    Add Expected Failure for ssync with sys-meta\n    \n    Sysmeta included with an object PUT persists with the PUT data - if an\n    internal operation such as POST-as-copy during partial failure, or ssync\n    with fast-POST (not supported), causes that data to be lost then the\n    associated sysmeta will also be lost.\n    \n    Since object sys-meta persistence in the face of a POST when the\n    original .data is unavailable requires fast-POST with .meta files the\n    probetest that validates object sys-meta persistence of a POST when the\n    most up-to-date copy of the object with sys-meta is unavailable\n    configures an InternalClient with object_post_as_copy = false.\n    \n    This non-default configuration option is not supported by ssync and\n    results in a loss of sys-meta very similar to the object sys-meta\n    failure you would see with object_post_as_copy = true when the COPY part\n    of the POST is unable to retrieve the most recently written object with\n    sys-meta.\n    \n    Until we can fix the default POST behavior to make metadata updates\n    without stomping on newer data file timestamps we should expect object\n    sys-meta to be \"very very best possible but not really guaranteed\n    effort\".\n    \n    Until we can fix ssync to replicate metadata updates without stomping on\n    newer data file timestamps we should expect this test to fail.\n    \n    When ssync replication of fast-POST metadata update is fixed this test\n    will fail signaling that the expected failure cruft should be removed,\n    but other parts of ssync replication will still work and some other bugs\n    can be fixed while we wait.\n    \n    Change-Id: Ifc5d49514de79b78f7715408e0fe0908357771d3\n',39,1,'Rackspace'),(275795,5254,5254,'2014-12-02 16:57:07','2014-12-02 16:57:07','    Removing unused method: _remaining_items\n    \n    Removing method _remaining_items from object controller class.\n    \n    The only caller to this function was removed as part of the\n    work to move all DLO functionality to middleware:\n    https://review.openstack.org/63326\n    \n    Change-Id: I7fbc208746bba8142ae51bf27cfa1979cae00301\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',0,22,'Red Hat'),(275796,5569,5569,'2014-12-02 16:24:32','2014-12-02 15:28:26','    Clean up empty account and container partitions directories.\n    \n    Because we iterate over these directories on a replication run,\n    and they are not (previously) cleaned up, the time to start the\n    replication increases incrementally for each stale directory\n    lying around.  Thousands of directories across dozens of disks\n    on a single machine can make for non-trivial startup times.\n    \n    Plus it just seems like good housekeeping.\n    Closes-Bug: #1396152\n    \n    Change-Id: Iab607b03b7f011e87b799d1f9af7ab3b4ff30019\n',31,5,'independent'),(275798,4075,4075,'2014-12-03 17:10:15','2014-12-03 16:54:43','    Fix reclaim on deleted containers\n    \n    The common db replicator\'s code path for reclaiming deleted db\'s beyond the\n    reclaim age was not covered by unittests, and a AttributeError snuck in.  In\n    writing the test that would cover the common code both for accounts and\n    containers I discovered another KeyError with the container conditional for\n    validating the container\'s fully reported status.\n    \n    This fixes both those issues and adds additional tests for the cleanup empty\n    account container partition and suffix directories.\n    \n    Change-Id: I2a1bfaefebd05b01231bf71dd908fcc49adb4c36\n',161,103,'Rackspace'),(275800,5254,5254,'2014-11-25 17:07:05','2014-11-24 16:44:42','    Fix container quota check during cross-account COPY\n    \n    Container quota is not currently checking Destination-Account header\n    which could cause quota to not be enforced in case of copies\n    \n    Change-Id: I43adb0d7d2fc14ba6c0ca419a52a5c3f138f799a\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',41,4,'Red Hat'),(275802,4075,4075,'2014-12-01 11:44:10','2014-12-01 11:44:10','    Raise ValueError for offset on Timestamp over limit\n    \n    We can\'t order a Timestamp with an offset larger than 16 hex digits\n    correctly, so we raise a ValueError if you try to create one.\n    \n    Change-Id: I8c8d4cf13785a1a8eb7416392263eae5242aa407\n',18,0,'Rackspace'),(275804,5254,229,'2014-12-04 10:41:11','2014-12-02 14:55:32','    added testing notes to the contributing doc\n    \n    Change-Id: Ifb83469dabbca435bd3df2c05089dc1a113c4460\n',36,1,'SwiftStack'),(275806,5155,5155,'2014-12-06 02:44:59','2014-12-05 23:43:52','    Fix the behavior of swift-ring-builder list_parts before rebalance\n    \n    The swift-ring-builder list_parts before rebalance failed abnormally so\n    this patch fix the behavior. After this patch applies the behavior is\n    completion normally with the following messages.\n    \n    Specified builder file \"<builder_file>\" is not rebalanced yet.\n    Please rebalance first.\n    \n    Closes-Bug: #1399529\n    Change-Id: I9e5db6da85de4188915c51bc401604733f0e1b77\n',16,0,'Fujitsu'),(275807,832,3,'2014-12-05 15:30:27','2014-12-05 03:30:40','    Workflow documentation is now in infra-manual\n    \n    Replace URLs for workflow documentation to appropriate parts of the\n    OpenStack Project Infrastructure Manual.\n    \n    Change-Id: I060e5f6869fd302a47a54556f31763b5ab668012\n',2,3,'OpenStack Foundation'),(275809,869,869,'2014-12-05 15:52:58','2014-12-04 18:37:24','    Speed up reading and writing xattrs for object metadata\n    \n    Object metadata is stored as a pickled hash: first the data is\n    pickled, then split into strings of length <= 254, then stored in a\n    series of extended attributes named \"user.swift.metadata\",\n    \"user.swift.metadata1\", \"user.swift.metadata2\", and so forth.\n    \n    The choice of length 254 is odd, undocumented, and dates back to the\n    initial commit of Swift. From talking to people, I believe this was an\n    attempt to fit the first xattr in the inode, thus avoiding a\n    seek. However, it doesn\'t work. XFS _either_ stores all the xattrs\n    together in the inode (local), _or_ it spills them all to blocks\n    located outside the inode (extents or btree). Using short xattrs\n    actually hurts us here; by splitting into more pieces, we end up with\n    more names to store, thus reducing the metadata size that\'ll fit in\n    the inode.\n    \n    [Source: http://xfs.org/docs/xfsdocs-xml-dev/XFS_Filesystem_Structure//tmp/en-US/html/Extended_Attributes.html]\n    \n    I did some benchmarking of read_metadata with various xattr sizes\n    against an XFS filesystem on a spinning disk, no VMs involved.\n    \n    Summary:\n    \n     name | rank | runs |      mean |        sd | timesBaseline\n    ------|------|------|-----------|-----------|--------------\n    32768 |    1 | 2500 | 0.0001195 |  3.75e-05 |           1.0\n    16384 |    2 | 2500 | 0.0001348 | 1.869e-05 | 1.12809122912\n     8192 |    3 | 2500 | 0.0001604 | 2.708e-05 | 1.34210998858\n     4096 |    4 | 2500 | 0.0002326 | 0.0004816 | 1.94623473988\n     2048 |    5 | 2500 | 0.0003414 | 0.0001409 | 2.85674781189\n     1024 |    6 | 2500 | 0.0005457 | 0.0001741 | 4.56648611635\n      254 |    7 | 2500 |  0.001848 |  0.001663 | 15.4616067887\n    \n    Here, \"name\" is the chunk size for the pickled metadata. A total\n    metadata size of around 31.5 KiB was used, so the \"32768\" runs\n    represent storing everything in one single xattr, while the \"254\" runs\n    represent things as they are without this change.\n    \n    Since bigger xattr chunks make things go faster, the new chunk size is\n    64 KiB. That\'s the biggest xattr that XFS allows.\n    \n    Reading of metadata from existing files is unaffected; the\n    read_metadata() function already handles xattrs of any size.\n    \n    On non-XFS filesystems, this is no worse than what came before:\n    \n    ext4 has a limit of one block (typically 4 KiB) for all xattrs (names\n    and values) taken together [1], so this change slightly increases the\n    amount of Swift metadata that can be stored on ext4.\n    \n    ZFS let me store an xattr with an 8 MiB value, so that\'s plenty. It\'ll\n    probably go further, but I stopped there.\n    \n    [1] https://ext4.wiki.kernel.org/index.php/Ext4_Disk_Layout#Extended_Attributes\n    \n    Change-Id: Ie22db08ac0050eda693de4c30d4bc0d620e7f7d4\n',3,3,'SwiftStack'),(275811,4087,4087,'2014-11-20 13:23:45','2014-10-13 19:07:56','    SAIO updates to support EC development environment.\n    \n    Added one more device per server but only include them\n    on the EC ring as probetests won\'t work with anything\n    other than 4 devices on the ring.\n    \n    See comment in swift.conf for EC development use.\n    \n    Change-Id: I9754554886be440ef53b7ffce4709b6f117d9280\n',55,11,'Intel'),(275813,869,869,'2014-12-12 12:29:31','2014-12-12 11:56:42','    Add tests for metadata on 304 and 412 responses\n    \n    Commit 1f67eb74 added support for If-[None-]Match on DLOs and SLOs. It\n    also made the 304 and 412 responses have the Content-Type and\n    X-Object-Meta-* headers from the object instead of just having the\n    Etag.\n    \n    Someone showed up in IRC today looking for this behavior, and was\n    happy to learn it\'s in newer Swift versions than the one they were\n    running. If we\'ve got clients depending on this, we should have some\n    unit tests to make sure we don\'t accidentally take it out again.\n    \n    Change-Id: If06149d13140148463004d426cb7ba4c5601404a\n',9,2,'SwiftStack'),(275814,229,229,'2014-12-14 20:23:36','2014-12-12 16:19:57','    AUTHORS and CHANGELOG update for 2.2.1 release\n    \n    Change-Id: Ib5c1bb632404573a7d8b9e2bfff9c02f47ab7446\n',51,0,'SwiftStack'),(275815,2689,2689,'2014-11-20 02:30:51','2014-11-18 15:57:06','    Rework `splice` and `tee`\n    \n    This patch reworks the bindings to `splice` and `tee` in order to fix a\n    (potential) bug when using the old `splice` binding and passing offsets\n    (see https://review.openstack.org/#/c/135319/ for a discussion of the\n    issue).\n    \n    The new binding code (based on https://github.com/NicolasT/tee-n-splice)\n    uses more `ctypes` features w.r.t. parameter and return value handling.\n    \n    It also introduces a test suite for both calls.\n    \n    Change-Id: Ib8084ca20fe7a199a00067da9386c2ccf618755c\n',454,84,'Scality'),(275817,313,313,'2014-10-09 16:45:20','2014-10-08 22:20:03','    Adjust MAX_FILE_SIZE during test on 32 bit systems\n    \n    The default MAX_FILE_SIZE of (5 * 2 ** 30 + 2) exceeds the\n    capacity of an int on 32 bit systems; adjust this default\n    down to (2 ** 30 + 2) if the default exceeds the maxsize of\n    an int on the platform running the tests.\n    \n    Closes-Bug: #1378810\n    \n    Change-Id: Iafa2ce90ceb2de4e968ad48580270c8c572a9c9c\n',23,1,'Canonical'),(275819,2689,2689,'2014-11-26 10:02:30','2014-11-26 10:02:30','    Splice: Use `operator.or_` instead of a lambda-expression\n    \n    Suggested by Samuel Merritt in https://review.openstack.org/#/c/135319/\n    \n    Change-Id: I5b86f25b42ffa6d4f9626dc6eb207ae0425933a8\n',4,2,'Scality'),(275821,68,3753,'2014-12-16 13:26:10','2014-12-15 15:56:13','    Remove unneeded condition\n    \n    The CName loopkup middleware checked a hostname against the configured\n    domains. This check is likely a remnant from when cname lookup only\n    supported a single hostname. Now, however, the configured domain is\n    actually a list of domains, so checking a single hostname will never\n    match. The check isn\'t really needed anyway, as it has been broken since\n    swift 1.10.\n    \n    Closes-Bug: #1402704\n    Change-Id: If9ff345b2c7c6d88f527cae643168bc725b26f8d\n',0,2,'CloudVPS'),(275823,2912,2912,'2014-12-18 14:19:12','2014-12-11 13:45:38','    Adds console logging to swift-drive-audit\n    \n    This patch adds console logging ability to swift-drive-audit.\n    There are cases where logging to console is necessary when drive-audit\n    is done. This can be consumed for flagging errors in monitoring tools\n    such as icinga.\n    \n    DocImpact\n    Change-Id: Ia1e1effcbd89bd2cf6d5b8c64019f1647c736a3a\n',7,1,'HP'),(275825,5254,5254,'2014-12-18 15:14:06','2014-12-08 21:29:30','    fix dlo manifest file getting versioned\n    \n    According to documentation dlo manifest files should not\n    be versioned. This patch fixes this issue and adds\n    some unit and functional for this scenario.\n    \n    Change-Id: Ib5b29a19e1d577026deb50fc9d26064a8da81cd7\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',47,13,'Red Hat'),(275828,4087,1141,'2014-12-15 12:02:20','2014-11-01 04:49:23','    EC: Allow tuning ec_object_segment_size per policy\n    \n    For \'erasure_coding\' type (EC) policies, objects are buffered up to\n    a defined \'segment size\' before they are erasure (en)coded.  There\n    is a desire to make this size configurable per policy given PyECLib\n    metadata/padding overheads and thus fragment sizes vary depending on\n    the EC scheme and ec_num_data_fragments/ec_num_parity_fragments values\n    chosen.  A cluster administrator setting up an EC policy may be able\n    to tune the object segment size value for a balance of space savings\n    and performance for a particular EC scheme.\n    \n    Changes:\n    \n     - Parsing support for \'ec_object_segment_size\' swift.conf option\n     - Add \'ec_segment_size\' property to ECStoragePolicy class\n     - Add unit test cases for ec_object_segment_size\n    \n    Co-Authored-By: Yuan Zhou <yuan.zhou@intel.com>\n    \n    DocImpact\n    Implements: blueprint ec-proxy-work\n    Change-Id: I3a9628b404e3921108c132093162331acb3e73d3\n',82,9,'Intel'),(275830,2689,2689,'2014-12-22 10:06:29','2014-12-19 11:31:07','    Add test coverage for `splice` and `tee` failure scenarios\n    \n    This patch adds 2 new tests for `swift.obj.diskfile.zero_copy_send`,\n    injecting a failure scenario when `tee` doesn\'t copy all bytes in one\n    go as it\'s expected to by the code, and one which tests whether the\n    code correctly trampolines when `splice` returns `EWOULDBLOCK`.\n    \n    This was suggested by Paul Luse in review 135319 (for 2a0a8ae00f2), and\n    now covers code paths which were previously untested.\n    \n    Change-Id: Ife84d772320d6214c93d8044feb613389f71e8da\n    See: https://review.openstack.org/#/c/135319/4/swift/common/splice.py,cm\n    See: 2a0a8ae00f2d3b7db255b0905b063e930f824f3d\n',85,1,'Scality'),(275833,4087,4087,'2015-01-05 13:05:05','2014-11-12 13:43:22','    Add node/pair index patch back into feature/EC\n    \n    It was in, it was out, now its back in.  This was not done\n    automagically via git based on changes that have been made\n    since it was last added its sorta hand stitched from\n    https://review.openstack.org/#/c/114084/3\n    \n    and therefore needs real review.\n    \n    Co-Authored-By: Samuel Merritt <sam@swiftstack.com>\n    Co-Authored-By: Yuan Zhou <dunk007@gmail.com>\n    Change-Id: I154cc32886c74c962ac30fcbc00ca6949c955903\n',179,42,'Intel'),(275834,4087,4087,'2015-01-05 13:05:05','2014-10-13 17:40:19','    Build up reconstructor with correct node selection\n    \n    The reconstructor does not operate on the full\n    node list for any given partition, only on its\n    left and right partners.  This is an incremental\n    change to the ongoing WIP on the reconstructor.\n    \n    blueprint ec-reconstructor\n    Change-Id: I6e9ec5fa1f7ce56ba3211034090dd908e079f91d\n',222,27,'Intel'),(275835,4075,4075,'2014-11-17 20:49:43','2014-11-17 20:29:45','    Consistently apply node error limiting rules in proxy\n    \n    All GET or HEAD requests consistently error limit nodes that return 507\n    and increment errors for nodes responding with any other 5XX.\n    \n    There were two places in the object PUT path where the proxy was error\n    limiting nodes and their behavior was inconsistent.  During expect-100\n    connect we would only error_limit nodes on 507, and during response we\n    would increment errors for all 5XX series responses.  This was pretty\n    hard to reason about and the divergence in behavior of questionable\n    value.\n    \n    An audit of base controller highlighted where make_requests would apply\n    error_limit\'s on 507 but not increment errors on other 5XX responses.\n    \n    Now anywhere we track errors on nodes we use error_limit on 507 and\n    error_occurred on any other 5XX series request.  Additionally a Timeout\n    or Exception that is logged through exception_occurred will bump errors -\n    which is consistent with the approach in \"Add Error Limiting to slow\n    nodes\" [1].\n    \n    1. https://review.openstack.org/#/c/112424/\n    \n    Change-Id: I67e489d18afd6bdfc730bfdba76f85a2e3ca74f0\n',194,11,'Rackspace'),(275837,5155,5155,'2014-12-25 03:24:44','2014-11-26 05:25:01','    Fix the GET\'s response code when there is a missing segment in LO\n    \n    This patch changes the response code from Internal Server Error to\n    Conflict when there is a missing segment and the position is first.\n    \n    Co-Authored-By: Samuel Merritt <sam@swiftstack.com>\n    Closes-Bug: #1386568\n    Change-Id: Iac175b4dc6ac9081436738697a27fe669acce0eb\n',307,97,'Fujitsu'),(275839,441,441,'2015-01-06 06:14:04','2015-01-06 06:14:04','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I50077e8a0a840f64b197fecf266f0c8fcd605804\n',169,141,NULL),(275840,869,869,'2015-01-06 10:18:23','2014-12-10 15:59:21','    Only move too-close-together replicas when they can spread out.\n    \n    Imagine a 3-zone ring, and consider a partition in that ring with\n    replicas placed as follows:\n    \n    * replica 0 is on device A (zone 2)\n    * replica 1 is on device B (zone 1)\n    * replica 2 is on device C (zone 2)\n    \n    Further, imagine that there are zero parts_wanted in all of zone 3;\n    that is, zone 3 is completely full. However, zones 1 and 2 each have\n    at least one parts_wanted on at least one device.\n    \n    When the ring builder goes to gather replicas to move, it gathers\n    replica 0 because there are three zones available, but the replicas\n    are only in two of them. Then, it places replica 0 in zone 1 or 2\n    somewhere because those are the only zones with parts_wanted. Notice\n    that this does *not* do anything to spread the partition out better.\n    \n    Then, on the next rebalance, replica 0 gets picked up and moved\n    (again) but doesn\'t improve its placement (again).\n    \n    If your builder has min_part_hours > 0 (and it should), then replicas\n    1 and 2 cannot move at all. A coworker observed the bug because a\n    customer had such a partition, and its replica 2 was on a zero-weight\n    device. He thought it odd that a zero-weight device should still have\n    one partition on it despite the ring having been rebalanced dozens of\n    times.\n    \n    Even if you don\'t have zero-weight devices, having a bunch of\n    partitions trade places on each rebalance isn\'t particularly good.\n    \n    Note that this only happens with an unbalanceable ring; if the ring\n    *can* balance, the gathered partitions will swap places, but they will\n    get spread across more zones, so they won\'t get gathered up again on\n    the next rebalance.\n    \n    Change-Id: I8f44f032caac25c44778a497dedf23f5cb61b6bb\n    Closes-Bug: 1400083\n',110,22,'SwiftStack'),(275842,5623,5623,'2015-01-06 14:38:23','2014-12-25 14:26:28','    Avoid unnecessary unlink() on every successful PUT\n    \n    If you do a strace on object-server PUT operation, you\'d see that\n    there\'s an unlink() sys call which _always_ fails with ENOENT.\n    \n    mkstemp() creates a temp file which is renamed later to it\'s final\n    object path in filesystem. Hence, on a successful object PUT, the\n    tempfile would never exist in its original location after rename.\n    \n    Change-Id: I805c7c200107e2d56278f0fb35692a51cb1edc0b\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n',92,6,'Red Hat'),(275844,978,978,'2015-01-06 16:57:17','2015-01-06 16:57:17','    Add undocumented options to keystoneauth sample config\n    \n    Adds is_admin and allow_overrides to the keystoneauth section\n    of proxy-server.conf.sample and also adds related comments to\n    the keystoneauth docstring.\n    \n    DocImpact\n    \n    Change-Id: I7c751880cb6742db7347f31c4d32b523e33da75b\n',31,3,'HP'),(275846,1216,1216,'2015-01-07 00:15:36','2015-01-07 00:13:33','    Substituted object storage paragraph with simple definition\n    \n    Change-Id: I32711fd10dfb1b84cbea9d05638b9ee002588104\n    Closes-bug: #1373925\n',3,3,'independent'),(275848,2689,2689,'2014-12-21 15:24:02','2014-12-18 17:09:10','    Add tests for unavailability of `tee` and `splice` in `libc`\n    \n    As suggested by Paul Luse in review 135319 (for 2a0a8ae00f2), this\n    brings test coverage of the `swift.common.splice` module up to 100%.\n    \n    The mechanism used to check whether the functions are looked up on `libc`\n    is somewhat ugly, but using a `PropertyMock` raising an `AttributeError`\n    as `side_effect` doesn\'t work: it results in `mock` creating a `Mock`\n    instance and returning it.\n    \n    Change-Id: I14828cfc2ae644dbd9ead8c20613b19cea8607f1\n    See: https://review.openstack.org/#/c/135319/4/swift/common/splice.py,cm\n    See: 2a0a8ae00f2d3b7db255b0905b063e930f824f3d\n',65,9,'Scality'),(275850,4075,4075,'2015-01-08 18:22:40','2015-01-08 18:22:40','    Fix a few edges where we lost python 2.6 support\n    \n    a.k.a. put my head in the sand about the reality of not supporting python 2.6\n    a little while longer.  We need to get something in the next release notes\n    about deprecating support for python 2.6 ASAP.  I don\'t really care enough\n    about it to keep cleaning up the junk we\'re going to let slip through not\n    testing python 2.6 in the gate.\n    \n    Change-Id: Ib36cd66bda29d75d3b5f4ef0a0ef7b824923df28\n',83,54,'Rackspace'),(275851,869,869,'2015-01-07 14:16:08','2014-12-17 13:48:42','    Add notion of overload to swift-ring-builder\n    \n    The ring builder\'s placement algorithm has two goals: first, to ensure\n    that each partition has its replicas as far apart as possible, and\n    second, to ensure that partitions are fairly distributed according to\n    device weight. In many cases, it succeeds in both, but sometimes those\n    goals conflict. When that happens, operators may want to relax the\n    rules a little bit in order to reach a compromise solution.\n    \n    Imagine a cluster of 3 nodes (A, B, C), each with 20 identical disks,\n    and using 3 replicas. The ring builder will place 1 replica of each\n    partition on each node, as you\'d expect.\n    \n    Now imagine that one disk fails in node C and is removed from the\n    ring. The operator would probably be okay with remaining at 1 replica\n    per node (unless their disks are really close to full), but to\n    accomplish that, they have to multiply the weights of the other disks\n    in node C by 20/19 to make C\'s total weight stay the same. Otherwise,\n    the ring builder will move partitions around such that some partitions\n    have replicas only on nodes A and B.\n    \n    If 14 more disks failed in node C, the operator would probably be okay\n    with some data not living on C, as a 4x increase in storage\n    requirements is likely to fill disks.\n    \n    This commit introduces the notion of \"overload\": how much extra\n    partition space can be placed on each disk *over* what the weight\n    dictates.\n    \n    For example, an overload of 0.1 means that a device can take up to 10%\n    more partitions than its weight would imply in order to make the\n    replica dispersion better.\n    \n    Overload only has an effect when replica-dispersion and device weights\n    come into conflict.\n    \n    The overload is a single floating-point value for the builder\n    file. Existing builders get an overload of 0.0, so there will be no\n    behavior change on existing rings.\n    \n    In the example above, imagine the operator sets an overload of 0.112\n    on his rings. If node C loses a drive, each other drive can take on up\n    to 11.2% more data. Splitting the dead drive\'s partitions among the\n    remaining 19 results in a 5.26% increase, so everything that was on\n    node C stays on node C. If another disk dies, then we\'re up to an\n    11.1% increase, and so everything still stays on node C. If a third\n    disk dies, then we\'ve reached the limits of the overload, so some\n    partitions will begin to reside solely on nodes A and B.\n    \n    DocImpact\n    \n    Change-Id: I3593a1defcd63b6ed8eae9c1c66b9d3428b33864\n',420,28,'SwiftStack'),(275853,4064,4064,'2015-01-09 08:35:50','2014-10-03 12:11:06','    Change black/white-listing to use sysmeta.\n    \n    The way we do this now involves a conf change and a proxy\n    reload which is a pain. You can now just set these:\n    \n    X-Account-Sysmeta-Global-Write-Ratelimit: WHITELIST\n    \n    or\n    \n    X-Account-Sysmeta-Global-Write-Ratelimit: BLACKLIST\n    \n    NOTE:\n    The existing proxy config settings: account_whitelist\n    and account_blacklist will continue to work.\n    \n    Change-Id: I532663f1d2c75d03170c5fdb9b330416822fbc88\n',135,87,'Rackspace'),(275855,5599,5599,'2015-01-06 02:39:51','2015-01-06 01:31:19','    Fix slo constraint according to the error message\n    \n    This patch allows to create a slo manifest when the manifest\n    includes only one segment less than min_segment_size.\n    \n    When putting a manifest for slo with only one segment less than\n    min_segment_size, it will fail as EntityTooSmall with the message\n    \"Each segment, except the last, must be at least min_segment_size\n    bytes.\" This behavior is different from the message because when\n    there is only one segment, the segment is absolutely the last\n    segment.\n    \n    Change-Id: I8f0203afe55536207a41e1267128f8378f1ba15f\n',22,2,'NTT'),(275857,978,978,'2015-01-09 14:38:23','2015-01-09 14:38:23','    Test that SLO disallows too small first segment if other segments\n    \n    SLO allows the first segment to be less than min_segment_size if\n    it is the only segment. Current tests verify that a single small\n    segment is allowed, and that multiple small segments are disallowed.\n    This patch adds a test to verify that SLO will disallow a manifest\n    with a small first segment followed by another correctly sized\n    segment.\n    \n    Change-Id: I920c0aee38e4e16c49bd84a3b772308a00794fa7\n',15,0,'HP'),(275859,42,42,'2015-01-10 17:19:47','2015-01-10 17:14:46','    Drop redundant index output\n    \n    The output of format_device() now includes index as the first \"dX\"\n    element, for example d1r1z2-127.0.0.1:6200R127.0.0.1:6200/db_\"\".\n    \n    Change-Id: Ib5f8e3a692fddbe8b1f4994787b2883130e9536f\n',5,4,'Red Hat'),(275861,5648,5648,'2015-01-10 01:07:45','2015-01-10 01:07:45','    Removing commented out test in test_db_replicator\n    \n    It removes test_dispatch test from test_db_replicator\n    which has been commented out for a while.\n    \n    Change-Id: Ia28fa923a65ad7d85804cbf6f7acef244741bab1\n    Closes-Bug: #1408502\n',0,17,'Acelio'),(275863,42,42,'2015-01-10 08:20:25','2015-01-10 08:20:25','    Mark the --region as mandatory\n    \n    We used to permit to omit region in the old parameter syntax, although\n    we now throw a warning if it\'s missing. In the new parameter syntax,\n    --region is mandatory. It\'s enforced by build_dev_from_opts in\n    swift/common/ring/utils.py.\n    \n    On the other hand, --replication-ip, --replication-port, and --meta\n    are not obligatory.\n    \n    Change-Id: Ia70228f2c99595501271765286431f68e82e800b\n',4,3,'Red Hat'),(275865,4075,4075,'2015-01-07 17:20:35','2014-12-11 01:59:52','    Fix large out of sync out of date containers\n    \n    As I understand it db replication starts with a preflight sync request\n    to the remote container server who\'s response will include the last\n    synced row_id that it has on file for the sending nodes database id.\n    \n    If the difference in the last sync point returned is more than 50% of\n    the local sending db\'s rows, it\'ll fall back to sending the whole db\n    over rsync and let the remote end merge items locally - but generally\n    there\'s just a few rows missing and they\'re shipped over the wire as\n    json and stuffed into some rather normal looking merge_items calls.\n    \n    The one thing that\'s a bit different with these remote merge_items calls\n    (compared to your average run of the mill eat a bunch of entries out of\n    a .pending file) is the is source kwarg.  When this optional kwarg comes\n    into merge_items it\'s the remote sending db\'s uuid, and after we eat all\n    the rows it sent us we update our local incoming_sync table for that\n    uuid so that next time when it makes it\'s pre-flight sync request we can\n    tell it where it left off.\n    \n    Now normally the sending db is going to push out it\'s rows up from the\n    returned sync_point in 1000 item diffs, up to 10 batches total (per_diff\n    and max_diffs options) - 10K rows.  If that goes well then everything is\n    in sync up to at least the point it started, and the sending db will\n    *also* ship over *it\'s* incoming_sync rows to merge_syncs on the remote\n    end.  Since the sending db is in sync with these other db\'s up to those\n    points so is the remote db now by way of the transitive property.  Also\n    note through some weird artifact that I\'m not entirely convinced isn\'t\n    an unrelated and possibly benign bug the incoming_sync table on the\n    sending db will often also happen to include it\'s own uuid - maybe it\n    got pushed back to it from another node?\n    \n    Anyway, that seemed to work well enough until a sending db got diff\n    capped (i.e. sent it\'s 10K rows and wasn\'t finished), when this happened\n    the final merge_syncs call never gets sent because the remote end is\n    definitely *not* up to date with the other databases that the sending db\n    is - it\'s not even up-to-date with the sending db yet!  But the hope is\n    certainly that on the next pass it\'ll be able to finish sending the\n    remaining items.  But since the remote end is who decides what the last\n    successfully synced row with this local sending db was - it\'s super\n    important that the incoming_sync table is getting updated in merge_items\n    when that source kwarg is there.\n    \n    I observed this simple and straight forward process wasn\'t working well\n    in one case - which is weird considering it didn\'t have much in the way\n    of tests.  After I had the test and started looking into it seemed maybe\n    the source kwarg handling got over-indented a bit in the bulk insert\n    merge_items refactor.  I think this is correct - maybe we could send\n    someone up to the mountain temple to seek out gholt?\n    \n    Change-Id: I4137388a97925814748ecc36b3ab5f1ac3309659\n',70,16,'Rackspace'),(275867,978,1020,'2015-01-15 10:43:42','2015-01-08 14:52:32','    Use TCP_NODELAY on outgoing connections\n    \n    On a loopback device (e.g., when proxy-server and object-server are on\n    same node), PUTs in the range 64-200K may experience a delay due to the\n    effect of Nagel interacting with the loopback MTU of 64K.\n    \n    This effect has been directly seen by Mark Seger and Rick Jones on a\n    proxy-server to object-server PUT. However, you could expect to see a\n    similar effect on replication via ssync if the object being replicated\n    is on a different drive on the same node.\n    \n    A prior change [1] related to Nagel set TCP_NODELAY on responses. This change\n    sets it on all outgoing connections.\n    \n    [1] I11f86df1f56fba1c6ab6084dc1f580c395f072dc\n    \n    Change-Id: Ife8885a42b289a5eb4ac7e4698f8889858bc8b7e\n    Closes-bug: 1408622\n',8,1,'HP'),(275869,5599,5599,'2015-01-15 21:20:16','2015-01-13 05:34:37','    Fix missing content length of Response\n    \n    This patch fixes swob.Response to set missing content\n    length correctly.\n    \n    When a child class of swob.Response is initialized with\n    both \"body\" and \"headers\" arguments which includes content\n    length, swob.Response might loose the acutual content length\n    generated from the body because \"headers\" will overwrite the\n    content length property after the body assignment.\n    \n    It\'ll cause the difference between headers\'s content length\n    and acutual body length. This would affect mainly 3rd party\n    middleware(s) to make an original response as follows:\n    \n    req = swob.Request.blank(\'/\')\n    req.method = \'HEAD\'\n    resp = req.get_response(app)\n    return HTTPOk(body=\'Ok\', headers=resp.headers)\n    \n    This patch changes the order of headers updating and then\n    fixes init() to set correct content length.\n    \n    Change-Id: Icd8b7cbfe6bbe2c7965175969af299a5eb7a74ef\n',55,0,'NTT'),(275872,869,869,'2014-12-08 15:05:29','2014-12-08 15:05:29','    Improve object-replicator startup time.\n    \n    The object replicator checks each partition directory to ensure it\'s\n    really a directory and not a zero-byte file. This was happening in\n    collect_jobs(), which is the first thing that the object replicator\n    does.\n    \n    The effect was that, at startup, the object-replicator process would\n    list each \"objects\" or \"objects-N\" directory on each object device,\n    then stat() every single thing in there. On devices with lots of\n    partitions on them, this makes the replicator take a long time before\n    it does anything useful.\n    \n    If you have a cluster with a too-high part_power plus some failing\n    disks elsewhere, you can easily get thousands of partition directories\n    on each disk. If you\'ve got 36 disks per node, that turns into a very\n    long wait for the object replicator to do anything. Worse yet, if you\n    add in a configuration management system that pushes new rings every\n    couple hours, the object replicator can spend the vast majority of its\n    time collecting jobs, then only spend a short time doing useful work\n    before the ring changes and it has to start all over again.\n    \n    This commit moves the stat() call (os.path.isfile) to the loop that\n    processes jobs. In a complete pass, the total work done is about the\n    same, but the replicator starts doing useful work much sooner.\n    \n    Change-Id: I5ed4cd09dde514ec7d1e74afe35feaab0cf28a10\n',57,62,'SwiftStack'),(275874,4086,4086,'2015-01-21 21:21:12','2014-12-08 23:28:48','    Implement OPTIONS verb for storage nodes.\n    \n    Many times new deployers get mysterious errors after first setting up their\n    Swift clusters. Most of the time, the errors are because the values in the ring\n    are incorrect (e.g. a bad port number). OPTIONS will be used in a ring checker\n    (which is WIP) that validates values in the ring.\n    \n    This patch includes OPTIONS for storage nodes and respective tests.\n    \n    Change-Id: Ia0033756d070bef11d921180e8d32a1ab2b88acf\n',222,33,'independent'),(275876,5623,5623,'2015-01-16 10:24:14','2015-01-12 12:51:46','    dlo: Update doc about manifest containing data\n    \n    Current behavior:\n    * If data/body is present in manifest file PUT request, the data/body gets\n      saved onto disk, just like for a normal object.\n    * Generally, this data in manifest file is never served on a GET response.\n      However, when the manifest object path itself is part of prefix, GET\n      response would contain data present in manifest file as well.\n    * The query param multipart-manifest=get meant to retrieve SLO manifest\n      also works in case of DLO manifest. Hence a COPY request with the\n      multipart-manifest=get query param would actually copy DLO manifest.\n    \n    How things should have been:\n    * The DLO manifest object is supposed to have no content and only have\n      X-Object-Manifest metadata header.\n    * Query param multipart-manifest=get is SLO specific and shouldn\'t have\n      any role in DLO.\n    \n    This change intends to only document current behaviour and not change it,\n    assuming there are users who have previously saved some content in DLO\n    manifest file and/or have been using multipart-manifest=get to fetch\n    and/or COPY the DLO manifest file with it\'s content.\n    \n    Change-Id: I0f6e175ad7752169ecf94df949336e0665928df7\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n',46,15,'Red Hat'),(275878,869,869,'2015-01-22 13:54:52','2015-01-07 16:50:58','    Make ThreadPools deallocatable.\n    \n    Currently, a ThreadPool acquires resources that last until process\n    exit. You can let the ThreadPool go out of scope, but that doesn\'t\n    terminate the worker threads or close file descriptors or anything.\n    \n    This commit makes it so you can .terminate() a ThreadPool object and\n    get its resources back. Also, after you call .terminate(), trying to\n    use the ThreadPool raises an exception so you know you\'ve goofed.\n    \n    I have some internal code that could really use this, plus it makes\n    the unit test run not leak resources, which is nice.\n    \n    Change-Id: Ibf7c6dc14c14f379421a79afb6c90a5e64b235fa\n',102,5,'SwiftStack'),(275880,869,869,'2015-01-22 12:07:27','2015-01-22 11:54:43','    Optimize replication of targeted devices/partitions.\n    \n    swift-object-replicator lets you specify --devices and --partitions to\n    perform a single replication pass over just those devices and\n    partitions. However, it still scans every device and every partition\n    to build up a list of jobs to do, then throws away the jobs for the\n    wrong devices and partitions. This isn\'t too bad with partitions since\n    it only wastes some CPU, but with devices, it results in unnecessary\n    disk IO.\n    \n    This commit pushes the device and partition filtering a little further\n    down into collect_jobs to avoid wasted work.\n    \n    Change-Id: Ia711bfc5a86ed4a080d27e08fe923cb4cb92da43\n',31,16,'SwiftStack'),(275882,978,978,'2014-09-09 13:09:37','2014-09-08 16:54:41','    Make probe tests tolerate deprecated policies\n    \n    A deprecated policy in swift.conf causes errors in\n    probe tests that may attempt to use that policy.\n    \n    This patch introduces a list ENABLED_POLICIES in\n    test/probe/common.py and changes probe tests to only\n    use policies contained in that list.\n    \n    Change-Id: Ie65477c15d631fcfc3a4a5772fbe6d7d171b22b0\n',31,23,'HP'),(275884,4075,4075,'2015-01-08 18:40:27','2014-12-30 00:22:44','    Add dispersion command to swift-ring-builder\n    \n    Output a dispersion report that shows how many parts have each replica count\n    at each tier along with some additional context.  Also the max_dispersion is a\n    good canary for what a reasonable overload might be.\n    \n    Also display a warning on rebalance if the ring\'s dispersion is sub-optimal.\n    \n    The primitive form of the dispersion graph is cached on the builder, but the\n    dispersion command will build it on the fly if you have a ring that was last\n    rebalanced before the change.\n    \n    Also add --force option to rebalance to make it write a ring even if less than\n    1% of parts moved.\n    \n    Try to clarify some dispersion and balance a little bit in the ring section of\n    the architectural overview.\n    \n    Co-Authored-By: Christian Schwede <christian.schwede@enovance.com>\n    Co-Authored-By: Darrell Bishop <darrell@swiftstack.com>\n    \n    Change-Id: I7696df25d092fac56588080722e0a4167ed2c824\n',357,37,'Rackspace'),(275886,4075,4075,'2015-01-16 14:32:51','2015-01-15 19:34:22','    Exclude empty tiers from max_replicas\n    \n    If you have ring with less failure domains at a tier than replicas the\n    max_replicas count for the failure domains at that tier already expect to have\n    a max_replicas > 1.  For example, on a two node deployment, each of the two\n    failure domains at the server tier is expected to have no more than *two*\n    replicas of any part (surely it would be a problem if either server had all\n    three replicas, but we expect some doubling).  If you have a third server, the\n    max_replicas drops from 2 to 1 at each of those failure domains as they should\n    only have at most a single copy of any partition or there\'s a dispersion\n    problem.\n    \n    But if that third server is being decommissioned and all of it\'s device\'s\n    weight are set to zero then you don\'t really have three failure domains at\n    that tier and the max_replicas should be go back to 2 not 1.  Also any parts\n    stuck in the tier with weight zero probably shouldn\'t be there - so you\'ve got\n    some kind of problem if there\'s *any* replicas in a zero weight tier\n    *regardless* of the number of failure domains.\n    \n    I came to this when I was playing around with a topology migration that was\n    moving a zone.  You start with two zones and everything is dispersed, you add\n    a third zone and everything gets even *more* dispersed, then you remove one of\n    the first zones that you\'re migrating off of and suddenly there\'s a problem\n    because the two zones you\'re migrating to have > 1 replica of some parts.  Two\n    zones was fine before, so what\'s the problem?\n    \n    Turns out the problem was a failure domain with zero weight still drains off a\n    replica from the max_replicas of the other failure domains at that tier.\n    \n    Eventually I think it\'s pretty sane that the operator would remove the zero\n    weight devices from the ring, and then max_replicas will go back to saying\n    each of the two failure domains at this tier may have at most 2 replicas.  But\n    because it\'s not always obvious when replication is finished just by looking\n    at partition placement theres a disconnect and window where things seem to be\n    saying it\'s worse than it really is.\n    \n    When a tier has zero weight max_replicas acts like the max_replicas at that\n    tier should be 0.  We do expect that occasionally a tier with zero weight will\n    have replicas assigned to it because min_part_hours - but I think thats also\n    bad and worth flagging as a dispersion problem - although maybe it\'s\n    conflating of seperate issues.\n    \n    Someone else might have a counter example where this would not be the desired\n    behavior, and I\'m not 100% sure it\'s going to always say the right thing in\n    every use case - but as it\'s done currently I\'ve got at least one concrete\n    example where I think the current behavior doesn\'t make sense.\n    \n    Change-Id: I68d47ff0667788442342d55b8041aed80d0b2161\n',81,13,'Rackspace');
INSERT INTO `scmlog` VALUES (275888,5649,5649,'2015-01-28 22:41:41','2015-01-28 22:12:57','    Fix typing mistake for doc\n    \n    Change-Id: If3d4e4d44676ef987f584db8cb462ecaed03a019\n',1,1,'H3C'),(275889,4075,4075,'2015-01-27 10:19:41','2015-01-27 10:19:41','    don\'t print cached dispersion if it\'s a lie\n    \n    Change-Id: I551fcaf274876861feb12848749590f220842d68\n',28,4,'Rackspace'),(275891,229,229,'2015-01-28 11:44:58','2015-01-27 20:50:33','    2.2.2 changelog and authors update\n    \n    Change-Id: I8c18cfc2cd03242cf3c662494999f255cb7831c6\n',63,0,'SwiftStack'),(275893,229,42,'2015-01-28 13:49:55','2015-01-28 12:21:25','    Allow set_overload to take value as percent\n    \n    ...and output overload as a percent like dispersion and balance.\n    \n    Also raise a warning if someone tries to set overload higher than 100%\n    (unless the specifically requested a percent value great than 100).\n    \n    Change-Id: Id030123153ea746671a8f1ca306d4b86e903fa22\n',80,25,'Red Hat'),(275895,42,42,'2015-01-27 13:23:08','2015-01-27 13:23:08','    Don\'t set the already set Connection: close\n    \n    Meaningless cleanup of the day. In my defence, I hope the next guy\n    doesn\'t have to grep throughout (the test is adjusted to signify).\n    \n    Change-Id: I9e10dd977d4ca48db1393519068ce0e286705433\n',2,4,'Red Hat'),(275897,4086,4086,'2015-01-30 00:25:28','2015-01-28 22:29:22','    Add server type in OPTIONS response\n    \n    Change-Id: I731872eaf2c878476525aa05fd60b9121be43e29\n',22,1,'independent'),(275899,1443,1443,'2015-01-29 18:20:31','2015-01-29 18:20:19','    Typos fixed\n    \n    Change-Id: I2c216a870ce299039dec9948dcdef3de0721b4da\n',1,1,'Cisco Systems'),(275900,704,704,'2015-01-29 09:11:09','2015-01-28 16:07:58','    Remove deprecated config variables\n    \n    I1f8f5064ea8028af60f167df9b97e215cdadba44 deprecated auth_host etc but the default\n    config still used them.  Ieac26806bd420aa08fc79bbc6a11eb6a1c15c7df then switched\n    devstack to using the new variables, but if the old variables still existed in the\n    default config, some installations were broken (e.g. XenServer CI)\n    \n    Partial-bug: 1415795\n    \n    Change-Id: I7076fa03ab531cbb1114918f75113620b65590dc\n',1,3,'Citrix'),(275902,869,869,'2015-01-12 10:02:52','2015-01-12 10:02:52','    Drop redundant check in SLO segment-size validation\n    \n    Change-Id: Idf459f37cd18c46421c2e7a1a0506e8f28da13b4\n',1,1,'SwiftStack'),(275904,5254,4075,'2015-01-14 11:16:32','2015-01-08 20:29:47','    Make more memcache options configurable\n    \n    More memcache options can be set in the memcache.conf or proxy-server.conf\n    \n     * connect_timeout\n     * pool_timeout\n     * tries\n     * io_timeout\n    \n    Options set in proxy-server.conf are considered more specific to the memcache\n    middleware.\n    \n    DocImpact\n    \n    Change-Id: I194d0f4d88c6cb8c797a37dcab48f2d8473e7a4e\n',176,5,'Rackspace'),(275906,869,869,'2015-01-22 16:10:22','2015-01-22 15:26:19','    Allow per-policy overrides in object replicator.\n    \n    The replicator already supports --devices and --partitions to restrict\n    its operation to a subset of devices and partitions. However,\n    operators don\'t always want to replicate a partition in all policies\n    since different policies (usually) have different rings.\n    \n    For example, if I know that policy 0\'s partition 1234 is has no\n    replicas on primary nodes due to over-aggressive rebalancing, I really\n    want to find a node where the partition isa and make the replicator\n    push it onto the primaries. However, if I haven\'t been messing with\n    policy 1\'s ring, its partition 1234 is fine. With the existing\n    replicator args, I get both or neither; this commit lets me get just\n    the useful one.\n    \n    Change-Id: Ib1d58fdd228a6ee7865321e65d7c04a891fa5c49\n',41,9,'SwiftStack'),(275908,5637,5637,'2015-02-02 22:01:29','2015-01-23 20:16:20','    Prevent redundant commenting by drive-audit\n    \n    The drive-audit detects error log about a device and comments out it\n    in /etc/fstab. When the error log is generated several times, it\n    comments out the line for each time.\n    This patch makes drive-audit to check if the device is already\n    commented out, and prevents redundant commenting out.\n    \n    Change-Id: Ia542d35b58552dde0f324bb9c42531f98c9058fa\n',3,1,'NTT'),(275910,229,229,'2015-02-03 22:12:03','2015-02-03 22:12:03','    added swift-ui browser to associated projects\n    \n    Change-Id: I23abd014b21d1a968fe7352f3915f02e3d4d47cf\n',1,0,'SwiftStack'),(275911,978,978,'2015-02-03 18:32:33','2015-02-03 18:24:41','    Don\'t skip account acl functional tests\n    \n    The functional tests covering account acls are skipped\n    if keystoneauth is in the pipeline, even if keystone auth\n    is not being used. Devstack configures the pipeline to have\n    both tempauth and keystoneauth, so these tests are always\n    skipped.\n    \n    This patch changes the condition for skipping account acl\n    to be based on tempauth being the auth service configured\n    for the tests.\n    \n    Change-Id: I378ec6aa0ba52d37a33796057e59a9ebfcab2574\n',4,4,'HP'),(275913,2689,2689,'2015-02-04 16:54:46','2015-02-04 16:54:46','    Add `swift-scality-backend` to associated projects\n    \n    Change-Id: I7fd56c7cf5b7634224b8a2876258cf1f6be447f1\n',1,0,'Scality'),(275914,978,978,'2015-02-03 11:57:06','2015-02-03 11:57:06','    Update auth_token section in documentation\n    \n    Bring docs in line with changes to auth_token config\n    defaults made in I7076fa03ab531cbb1114918f75113620b65590dc\n    \n    Change-Id: Ia21685ebd1f3ed7bdba9de2ebac9fdcce8495949\n',11,15,'HP'),(275916,4086,4086,'2015-02-05 00:29:36','2015-01-31 01:40:22','    Tests for the base class of storage nodes\n    \n    Change-Id: I8866e2360e30a239d5f6b4a5ed92344291184c2a\n',122,0,'independent'),(275918,4075,4075,'2015-01-07 18:16:47','2014-06-25 20:36:33','    Remove the X-Newest pre-flight request on X-Timestamp\n    \n    There is a standard LBYL race that can better be addressed by making the\n    EAFP case safer.\n    \n    Capture 409 Conflict during expect on PUT\n    \n    Similarly to how the proxy handles 412 on PUT, we will gather 409\n    responses in the proxy during _connect_put_node.  Rather than skipping\n    backend servers that already have a synced copy of an object we will\n    accept their response and return 202 immediately.\n    \n    This is particularly useful to internal clients who are using\n    X-Timestamp to sync transfers (e.g. container-sync and\n    container-reconciler).\n    \n    No observable change in client facing behavior except that swift is\n    faster to respond Accepted when it already has the data the client is\n    purposing to send.\n    \n    Change-Id: Ie400d5bfd9ab28b290abce2e790889d78726095f\n',69,34,'Rackspace'),(275920,229,229,'2015-02-05 11:52:41','2015-02-05 11:01:02','    Correct the config default for delay_auth_decision\n    \n    Updated proxy-server.conf-sample with the correct default. Also\n    updated the note on the overview-auth doc page.\n    \n    Change-Id: I5cd62a7a118a28f7b58f47b8d8d4d963f6bc7347\n',11,5,'SwiftStack'),(275921,441,441,'2015-02-06 06:10:34','2015-02-06 06:10:34','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I4b8411f84784a2825a24946c51f4c08ad01febc2\n',136,126,NULL),(275922,5155,5155,'2015-02-02 05:06:03','2014-12-09 04:44:52','    Allow hostnames for nodes in Rings\n    \n    This change modifies the swift-ring-builder and introduces new format\n    of sub-commands (search, list_parts, set_weight, set_info and remove)\n    in addition to add sub-command so that hostnames can be used in place\n    of an ip-address for the sub-commands.\n    The account reaper, container synchronizer, and replicators were also\n    updated so that they still have a way to identify a particular device\n    as being \"local\".\n    \n    Previously this was Change-Id:\n    Ie471902413002872fc6755bacd36af3b9c613b74\n    \n    Change-Id: Ieff583ffb932133e3820744a3f8f9f491686b08d\n    Co-Authored-By: Alex Pecoraro <alex.pecoraro@emc.com>\n    Implements: blueprint allow-hostnames-for-nodes-in-rings\n',2612,377,'Fujitsu'),(275924,5650,5650,'2015-02-09 18:28:22','2015-02-09 18:16:25','    Included sysmeta in the object info\n    \n    The cached info object dict did not include\n    the sysmeta.  This patch fixes that, and adds\n    a unit test.\n    \n    Change-Id: I092200e76586af322ed4ff7d194a1034b1ca0433\n',11,1,'IBM'),(275927,4087,4087,'2015-02-03 12:36:52','2015-01-04 12:06:04','    Updates to user documentation for Erasure Code Support\n    \n    Continuing to build up user docs as elements of the design\n    become more final.\n    \n    Change-Id: I5fe7c114e00189117767eaac5fe2b707a1d37850\n',77,20,'Intel'),(275929,898,898,'2015-01-23 10:48:38','2014-11-27 18:42:49','    Output logs of policy index\n    \n    To make it easier for Swift operators to specify problematic devices,\n    a policy index will be recorded in log files of proxy and storage servers\n    for each user request which is related to storage policy.\n    \n    This patch simply adds \'storage_policy_index\' field in a log format.\n    If there is no specified policy index, \'-\' is output in this field.\n    \n    Extra fix: Doc about the log line of storage nodes now properly reflects\n               \'server_pid\' field.\n    \n    DocImpact\n    \n    Change-Id: I7286ae85bcbcec73b5377dc115cbdb0f57d1b025\n    Implements: blueprint logging-policy-number\n',109,16,'NTT'),(275931,4080,5645,'2015-02-10 21:37:10','2015-02-09 17:51:01','    Add support for container TempURL Keys\n    \n    Change-Id: Ic22b0b84b657e6cac7e0062fa410eefb09bc0f4d\n    Co-Authored-By: Christian Schwede <christian.schwede@enovance.com>\n',128,21,'Rackspace'),(275933,1020,1020,'2015-02-11 12:02:38','2015-02-11 10:24:23','    API document update for container-level tempurl/formpost\n    \n    Tempurl and Formpost now support secret keys at the container\n    level [1]. Adds these headers:\n    \n        X-Container-Meta-Temp-Url-Key\n        X-Container-Meta-Temp-Url-Key-2\n    \n    DocImpact -- because headers need to be added to [2]\n    \n    [1] https://review.openstack.org/#/c/154293\n    [2] http://developer.openstack.org/api-ref-objectstorage-v1.html\n    \n    Change-Id: I157cd4a540dcc4a9b45bc3d806df152ab56e2354\n',30,18,'HP'),(275934,4064,4064,'2015-02-11 11:37:31','2015-02-11 11:37:31','    small bug with account to account copy\n    \n    Change-Id: I7fdf432666f7640082e9839b9dc3d7af94a0715f\n',10,0,'Rackspace'),(275935,4075,4075,'2015-02-11 16:43:44','2015-02-11 16:36:51','    Add developer tools section to associated projects\n    \n    vagrant-swift-all-in-one is being used and maintained by a number of swift\n    developers, it has an open source license.\n    \n    The ansible playbook project serves a similar goal but it\'s based on a Fedora\n    distribution and includes Swift-on-File support.\n    \n    Drive-by fix for the Swift-on-File link which has migrated to stackforge.\n    \n    Change-Id: Id7478d58adcead57cf56ac4e1d05c6556c8c9b7b\n',12,1,'Rackspace'),(275936,5645,5645,'2015-02-12 11:27:31','2015-02-11 12:44:08','    Update TempURL docs to include containers\n    \n    Change-Id: Ifb7c26b23ec81e3bde96b6e3bad0e950c0ca9408\n',7,8,'Rackspace'),(275938,898,898,'2015-01-20 18:42:20','2014-11-28 20:19:02','    Show each policy\'s information on quarantined files in recon\n    \n    After the release of Swift ver. 2.0.0, some recon responses do not\n    show each policy\'s information yet. To make things worse, some recon\n    results only count on policy-0\'s score, therefore the total is not\n    shown in the recon results.\n    \n    This patch makes the count of quarantined files policy-aware for recon\n    requests. Suppose a number of quarantined objects for policy-0 is 2\n    and a number for policy-1 is 3, recon sums up every policy\'s amount\n    and shows information for each policy as follows.\n    \n    $ curl http://<host>:<port>/recon/quarantined\n    {\"accounts\": 0, \"containers\": 0, \"objects\": 5, \"policies\": {\"0\":\n    {\"objects\": 2}, \"1\": {\"objects\": 3}}}\n    \n    Moreover, this patch adds stats for each policy in CLI output.\n    \n    Change-Id: I07217c635f6fc4ea809ddbc3d859c4e81c4fde37\n    Related-Bug: 1375327\n    Related-Bug: 1375332\n',84,9,'NTT'),(275940,4066,4066,'2015-02-12 11:30:21','2015-02-12 11:30:21','    refactor probe tests\n    \n    * refactor probe tests to use probe.common.ProbeTest\n    * move reset_environment functionality to ProbeTest.setUp()\n    * choose rings and policies that meet the criteria - raise SkipTest if\n    nothing matches\n    * replace all AssertionErrors in setup with SkipTest\n    \n    Change-Id: Id56c497d58083f5fd55f5283cdd346840df039d3\n',151,195,'independent'),(275942,5599,5599,'2015-02-10 12:52:15','2014-05-29 00:54:07','    Efficient Replication for Distributed Regions\n    \n    This change provides a efficient way of replication\n    between regions of a global distributed cluster.\n    \n    This approach makes object-replicator to push replicas\n    to a primary node in a remote region, then, to skip\n    pushing them to next primary node in the region with\n    expecting asynchronous replication.\n    \n    This implementation includes a couple of changes on\n    ssync_sender to allow object-replicator to delete local\n    handoff objects correctly. One is to return a list of existing\n    objects in remote region. The list includes local paths of the\n    objects which exist both on the local device and the remote device.\n    The other is supporting existence check for specified objects.\n    It requires the object list build by the first change. When\n    the object list is given, ssync_sender does only missing_check\n    based on the list. These changes are needed because current\n    swift can not handle the existence check in object-level.\n    \n    Note that this feature will work partially (i.e. only when\n    primary-to-primary) with rsync.\n    \n    Implements: blueprint efficient-replication\n    Change-Id: I5d990444d7977f4127bb37f9256212c893438df1\n',509,51,'NTT'),(275944,978,978,'2015-02-12 21:44:36','2015-02-12 21:30:37','    Fix ssync send_delete\n    \n    The ssync_sender send_delete method treats its\n    timestamp argument as a string when in fact it is\n    passed a Timestamp object. As a result the method\n    always raises an exception and deletes are never\n    replicated.\n    \n    This patch fixes bug and adds unit and probe tests\n    to verify expected behavior.\n    \n    Closes-Bug: 1421425\n    \n    Change-Id: I664fb8d5dfea7362313037a67927ea90021c3f62\n',86,3,'HP'),(275946,898,898,'2015-02-12 05:12:56','2015-02-12 05:12:56','    Logging a policy index when container PUT request conflicts\n    \n    This is a continuing work of patch afdbf73. This patch enables\n    proxy-server to log a policy index when container PUT request\n    conflicts with existing container\'s policy index.\n    \n    Change-Id: I6d40044c510632a0f61b817a9af2f6c13a721d39\n    Implements: blueprint logging-policy-number\n',6,1,'NTT'),(275948,869,869,'2015-02-12 13:28:29','2015-02-12 09:59:48','    Fix account-reaper\n    \n    As part of commit efb39a5, the account reaper grew a bind_port\n    attribute, but it wasn\'t being converted to int, so naturally \"6002\"\n    != 6002, and it wouldn\'t reap anything.\n    \n    The bind_port was only used for determining the local devices. Rather\n    than fix the code to call int(), this commit removes the need for\n    bind_port entirely by skipping the port check. If your rings have IPs,\n    this is the same behavior as pre-efb39a5, and if your rings have\n    hostnames, this still works.\n    \n    Change-Id: I7bd18e9952f7b9e0d7ce2dce230ee54c5e23709a\n',11,4,'SwiftStack'),(275950,978,978,'2015-02-12 15:32:25','2015-02-11 17:49:41','    Fix logger test coupling\n    \n    Two tests fail if test/unit/common/test_daemon.py is excluded\n    from the test set:\n    \n    test.unit.common.test_utils.TestUtils.test_swift_log_formatter\n    test.unit.common.test_utils.TestStatsdLoggingDelegation.test_thread_locals\n    \n    They fail because they assert that logger.txn_id is None,\n    when previous tests cause txn_id to be set. This coupling is masked\n    when test_daemon.py is included because it reloads the common/utils\n    module, and is executed just before test.unit.common.test_utils.\n    \n    The coupling can be observed by running, for example:\n    \n    nosetests ./test/unit/common/middleware/test_except.py ./test/unit/common/test_utils.py\n    or\n    nosetests ./test/unit/proxy ./test/unit/common/test_utils.py\n    \n    The failing tests should reset logger thread_locals before making\n    assertions. test_utils.reset_loggers() attempts this but is broken\n    because it sets thread_local on the wrong object.\n    \n    Changes in this patch:\n     - fix reset_loggers() to reset the LogAdapter thread local state\n     - add a reset_logger_state decorator to call reset_loggers\n       before and after a decorated method\n     - use the decorator for increased isolation of tests that previously\n       called reset_loggers only on exit\n    \n    Change-Id: If9aa781a2dd1929a47ef69322ec8c53263d47660\n',35,19,'HP'),(275952,4066,4066,'2015-02-12 20:36:12','2015-02-12 20:32:35','    move test comments around\n    \n    should make later refactoring easier\n    \n    Change-Id: I7af399a14c8bc78fcfc438e4440d2f023c8aa5db\n',136,87,'independent'),(275954,4075,4075,'2015-02-13 08:04:56','2015-02-12 16:15:42','    Minor cleanup post efficent multi-region replication\n    \n    One log line had a typo, and I refactored the per object cleanup code out of\n    update_deleted into the per object hashdir cleanup method.\n    \n    Change-Id: I19d03d0706a75bd8ec2fe327a1eb1b5ec36de6d2\n',7,10,'Rackspace'),(275956,978,978,'2015-02-09 18:08:15','2015-01-29 14:26:01','    Make container GET call authorize when account not found\n    \n    When an account was not found, ContainerController would\n    return 404 unconditionally for a container GET or HEAD request,\n    without checking that the request was authorized.\n    \n    This patch modifies the GETorHEAD method to first call any\n    callback method registered under \'swift.authorize\' in the\n    request environ and prefer any response from that over the 404.\n    \n    Closes-Bug: 1415957\n    \n    Change-Id: I4f41fd9e445238e14af74b6208885d83698cc08d\n',76,0,'HP'),(275958,441,441,'2015-02-13 06:10:44','2015-02-13 06:10:44','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I7655ef8e64b6700be9b8aaa6387c36de32a2d7b8\n',218,208,NULL),(275960,229,229,'2015-02-15 17:14:31','2015-02-15 17:14:31','    added swift_source to ratelimit info calls\n    \n    Change-Id: I2b4ccb809c0f4505098e261f546f53c27440dd43\n',5,1,'SwiftStack'),(275961,441,441,'2015-02-16 06:30:54','2015-02-16 06:30:54','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I013976c6192a8bff891c9050f829ae7a1e2fec59\n',94,94,NULL),(275962,5645,5645,'2015-02-14 10:05:19','2015-02-12 16:39:48','    Add functional tests for container TempURLs\n    \n    Change-Id: I7f54594df1522d72dd1d13556be0b9d33e811b30\n',175,1,'Rackspace'),(275964,4066,4066,'2015-02-13 16:55:45','2015-02-13 16:55:45','    more probe test refactoring\n    \n    * move get_to_final_state into ProbeTest\n    * get rid of kill_servers\n    * add replicators manager and updaters manager to ProbeTest\n    \n    (this is all going someplace, i promise)\n    \n    Change-Id: I8393a2ebc0d04051cae48cc3c49580f70818dbf2\n',41,47,'independent'),(275966,229,229,'2015-02-17 13:24:33','2015-02-16 14:00:24','    update the getting started doc\n    \n    Change-Id: I0a96bcf692bb240f3ab5aab7fefd294a07735a83\n',29,20,'SwiftStack'),(275968,4075,4075,'2015-02-13 13:11:40','2015-02-13 13:11:40','    Promote some of the best developers I know to CORE Emeritus\n    \n    Change-Id: I4095bdbb2c137615bf9492e373a837daadea8920\n',10,3,'Rackspace'),(275970,978,978,'2015-02-19 17:46:10','2015-02-17 10:27:44','    Update guest VM OS recommendation in SAIO doc\n    \n    The target development platform has changed to Ubuntu 14.04 [1].\n    This patch makes the suggested SAIO platform the same.\n    \n    Also, remove pointer to wiki page for other platform install\n    instructions that either redirects back to this SAIO doc or\n    to another wike page and then a dead link.\n    \n    [1] I0a96bcf692bb240f3ab5aab7fefd294a07735a83\n    \n    DocImpact\n    \n    Change-Id: I9f96104b5437c1f1f28f924c048ef83cf03338f4\n',1,5,'HP'),(275971,869,869,'2015-02-20 11:04:24','2015-02-20 11:04:24','    Make proxy_logging close the WSGI iterator\n    \n    PEP 333 says that the WSGI framework will call .close() on the\n    iterator returned by a WSGI application once it\'s done, provided such\n    a method exists. So, if our code wraps an iterator, then we have to\n    call .close() on it once we\'re done with it. proxy_logging wasn\'t.\n    \n    Since WSGIContext gets it right, I looked at making proxy_logging use\n    WSGIContext. However, WSGIContext is all about forcing the first chunk\n    out of the iterator so that it can capture the final HTTP status and\n    headers; it doesn\'t help if you want to look at every chunk.\n    proxy_logging wants every chunk so it can count the bytes sent.\n    \n    This didn\'t hurt anything in Swift, but pconstantine was complaining\n    in IRC that our failure to call .close() was goofing up some other\n    middleware he had.\n    \n    Change-Id: Ic6ea0795ccef6cda2b5c6737697ef7d58eac9ab4\n',24,0,'SwiftStack'),(275973,5651,5651,'2015-02-19 15:43:31','2015-02-18 11:56:11','    Add support of x-remove- headers for container-sync\n    \n    If the used tool to send header doesn\'t support empty headers (older versions\n    of curl), x-remove can be used to remove metadata.\n    sync-key and sync-to metadata, used by container-sync, can now be removed using\n    x-remove headers.\n    \n    Change-Id: I0edb4d5425a99d20a973aa4fceaf9af6c2ddecc0\n',7,3,'OVH'),(275975,898,898,'2015-01-29 16:07:50','2014-12-12 10:37:33','    Output account-reaper\'s logs for PolicyError\n    \n    By some operational mistakes, policy settings can be inconsistent among\n    servers of swift cluster. Before this patch, if a policy setting of the\n    server where account-reaper daemon is running is different from other\n    servers, reap_object process failed without outputing error logs and\n    count up remaining objects.\n    \n    Change-Id: Ic84fef7b49c77f0197f0bec4d41401686114d50e\n    Related-Bug: 1375384\n',46,2,'NTT'),(275978,869,869,'2015-02-20 12:36:43','2015-01-12 17:36:56','    Make GetOrHeadHandler take an optional chunk size.\n    \n    If given the chunk size, chunks are yielded to the client in exactly\n    that size (except the last chunk). Data read from the object server\n    will be buffered until there\'s a full chunk.\n    \n    This is good for EC because we can set this to the size of a fragment,\n    then instantiate a bunch of these things and read one chunk from each,\n    then decode and send it on up the line.\n    \n    It even works with the download-resumption logic; any\n    buffered-but-not-yielded bytes are thrown away, so we don\'t have to\n    worry about Frankenfragments getting into the decoder.\n    \n    Change-Id: Iec69ded49d1735a793c6a82984146903100ee443\n',83,7,'SwiftStack'),(275980,869,869,'2015-02-20 12:36:43','2015-01-27 13:54:59','    First pass at EC GET path\n    \n    This handles the happy and slightly-less-happy paths for EC GET and\n    HEAD.\n    \n    In the happy path, enough fragment archives are found to reconstitute\n    the object. Also, 404s in EC containers work.\n    \n    Theoretically, EC GET will resume downloads like replicated GET if an\n    object server fails halfway through. That\'s not really tested yet,\n    though. There are tests for some of the lower-level functionality, but\n    there isn\'t one that kills an object server partway through.\n    \n    The approach is basically Clay\'s approach with the two object\n    controllers. The proxy server picks the right one based on the\n    container\'s storage policy. The vast majority of the old\n    ObjectController is the same, but the class name changed to\n    BaseObjectController, and then there\'s a couple derived classes to\n    hold EC-specific and replication-specific behavior.\n    \n    Change-Id: I988335aa1954d1e9d092c2eab3b3da9d89d1c19e\n',493,145,'SwiftStack'),(275982,1141,1141,'2015-03-02 18:19:42','2015-02-08 01:21:06','    EC: Multi-phase commit conversation for PUTs\n    \n    For erasure-coded PUTs, object servers have a requirement to keep\n    the previous version of .data file for an object around, in case\n    the most recent PUT for that object (in case of object-overwrite,\n    for instance) didn\'t complete successfully on a quorum of nodes.\n    The reconstructor eventually will clean up the old .data files\n    after confirming a successful PUT.\n    \n    The object server/reconstructor needs a mechanism to tell if a set\n    of EC fragment archives constitute a successful/durable PUT for an\n    object.  Multi-phase commit conversation as implemented by this\n    patch is a solution.  Basic flow looks like:\n    \n     * proxy server erasure codes and streams the object fragments to\n       (ec_ndata + ec_nparity) object servers\n     * object servers store objects as EC archives and upon finishing\n       object data/metadata write, send a 1st-phase response to proxy\n     * upon quorum of object server responses, the proxy initiates\n       2nd-phase by sending \"commit\" confirmations to object servers\n     * upon receipt of commit message, object servers store a 0-byte\n       data file as \'<timestamp>.durable\' indicating successful PUT,\n       and send a final response to the proxy server\n     * proxy waits for a minimal number (2) of object servers to\n       respond with a success (2xx) status before responding to the\n       client with a successful status\n    \n    The multi-phase conversation is implemented via MIME documents\n    which provides us the ability to keep within the WSGI semantics\n    and handle both phases of PUT in a single HTTP transaction.  We\n    use 100-continue responses as a machanism to signal the end of\n    phase1/successful object data/metadata write to the proxy server.\n    \n    Example conversation on the wire:\n    \n      proxy: PUT /p/a/c/o\n             Transfer-Encoding\': \'chunked\'\n             Expect\': \'100-continue\'\n             X-Backend-Obj-Multiphase-Commit: yes\n    \n      obj:   100 Continue\n             X-Obj-Multiphase-Commit: yes\n    \n      proxy: --MIMEboundary\n             X-Document: object body\n    \n             <obj_data>\n    \n             --MIMEboundary\n             X-Document: object metadata\n             Content-MD5: <footer_meta_cksum>\n    \n             <footer_meta>\n    \n             --MIMEboundary\n    \n      <object server writes data, metadata>\n    \n      obj:   100 Continue\n    \n      <quorum>\n    \n      proxy: X-Document: put commit\n    \n             commit_confirmation\n    \n             --MIMEboundary--\n    \n      <object server writes ts.durable state>\n    \n      obj:   20x\n    \n      <proxy waits to receive >=2 2xx responses>\n    \n      proxy: 2xx -> client\n    \n    Note: This patch extends DiskFile and DiskFileWriter APIs for\n    .durable state file manipulation.  New functions:\n      DiskFileWriter::write_durable_timestamp(timestamp)\n      DiskFile::is_durable()\n    \n    UpgradeImpact\n    Implements: blueprint ec-proxy-work\n    Change-Id: Id05593b4fa7a393d62a96f8c1627383a8e0b0340\n',618,74,'Intel'),(275983,4080,4080,'2015-02-10 20:32:35','2015-02-10 18:22:35','    Fix swift-recon --all help message\n    \n    There are three options missing in the \"--all\" option help message. Let\'s add\n    them to make it less error-prone if someone wants to copy-paste the command.\n    \n    Unfortunately a line break \"\\n\" doesn\'t work, thus forcing all options into a\n    single line using tabs.\n    \n    Change-Id: I38a7a1d8bb267b00b1d9776228f6c6fe794808d0\n',2,2,'Red Hat'),(275985,5599,5599,'2015-02-19 00:09:31','2015-02-12 16:18:54','    Fix efficient replication handoff delete\n    \n    Current code might delete local handoff objects incorrectly\n    when remote node requires whole of the objects at poking\n    because empty cand_objs won\'t be applied to the delete candidate\n    objects list.\n    \n    This patch ensures the delete candidate objects list always\n    will be updated (i.e. it will be empty list when the poke job\n    find whole local objects are required by remote), and then,\n    handle deleting objects correctly according to the delete\n    candidate.\n    \n    This patch includes a test written by Clay Gerrard at [1].\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    \n    1: https://review.openstack.org/#/c/155542/\n    \n    Change-Id: Ie8f75ed65c7bfefbb18ddccd9fe0e41b72dca0a4\n',54,10,'NTT'),(275987,1020,1020,'2015-02-23 15:57:20','2014-11-25 14:42:42','    Add multiple reseller prefixes and composite tokens\n    \n    This change is in support of Composite Tokens and Service Accounts\n    (see http://specs.openstack.org/openstack/swift-specs/specs/in_progress/\n    service_token.html)\n    \n    During coding, minor changes were made compared to the original\n    specification. See https://review.openstack.org/138771 for these changes.\n    \n    DocImpact\n    \n    Change-Id: I6072b4efb3a479a8e0cc2d9c11ffda5764b55e30\n',2036,193,'HP'),(275989,4064,4064,'2015-02-24 09:31:38','2015-02-24 09:31:38','    swift-ring-builder remove doesn\'t print message (tabbing error)\n    \n    Change-Id: Iaf4f6168a52e5c67dca5ebdcf9421848cf30dee8\n',2,2,'Rackspace'),(275991,978,978,'2015-02-24 17:14:41','2015-02-24 17:14:41','    Fix failing tox -e py26 tests\n    \n    assertNotIn was new in python 2.7\n    \n    Change-Id: I8447065e1f95162843fc1b92689c4bfab8792b6e\n',1,1,'HP'),(275993,869,869,'2015-02-24 10:12:16','2015-02-24 10:12:16','    Clean up a couple deprecation warnings\n    \n    Change-Id: Ic293402702981cea124d0dc57e95341fda7eaf99\n',2,2,'SwiftStack'),(275995,42,42,'2015-02-24 17:48:20','2015-02-24 17:47:07','    Clean up a couple of deprecated uses of e.message\n    \n    Using the style from existing statements elsewhere in the file.\n    \n    Change-Id: I3270d0c69e7446bbfd5bbc784c4e6911a5600478\n',6,6,'Red Hat'),(275997,978,978,'2015-02-25 17:51:19','2015-02-24 15:12:33','    Enable override of container update headers\n    \n    Crypto middleware needs to arrange for alternative\n    values of etag and content-type to be sent to container\n    servers with updates, since these will be encrypted with\n    a different key than the etag and content-type stored on\n    the object server.\n    \n    Erasure coding apparently needs a similar capability.\n    \n    This patch modifies the object server to overwrite the etag\n    and content-type values in the container update headers with\n    values that may optionally be specified by middleware in\n    X-Backend-Container-Update-Override-* headers.\n    \n    Using the X-Backend- prefix ensures that these headers\n    cannot be sent or seen by clients.\n    \n    A new probe test verifies the propagation of override\n    values from an internal client through the proxy, to\n    object server, to container server and then returned\n    in a container listing.\n    \n    Change-Id: I7d846ed54ff173d08c66c6d5b0ecf7dff27f5a87\n',128,6,'HP'),(275999,229,229,'2015-02-26 14:32:31','2015-02-26 14:21:47','    fixed ugly code pattern in probe tests\n    \n    Change-Id: I242f095ea0ca8d6d69c3b2258cce6b51c7963dce\n',25,25,'SwiftStack'),(276000,441,441,'2015-02-27 06:14:07','2015-02-27 06:14:07','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I5032584721e390a999c84c7d4a4b0cd9c3555192\n',102,102,NULL),(276001,4075,4075,'2015-02-26 11:48:45','2015-02-26 11:45:58','    Add tempauth back to /info\n    \n    Our functional tests are skipping Account ACL tests when using tempauth\n    because it does not register itself with in swift.common.utils._swift_info\n    \n    Add the register_swift_info call back to the filter_factory function in the\n    tempauth from which it was removed, and add a test to validate creating the\n    filter will add the middleware to global info dict.\n    \n    Change-Id: I3761da3241601c93245796beb5d29bf3f36d69f6\n',7,2,'Rackspace'),(276003,4075,4075,'2015-02-26 12:30:30','2015-02-26 12:30:30','    Make functests retry auth immediately\n    \n    I don\'t think we need to backoff after a 401 - we have a perfectly valid\n    response telling us exactly what we should do so we can do that right away and\n    move on.\n    \n    Assuming you run functional tests at least once a day, according to\n    http://xkcd.com/1205/ and my benchmarks you can spend roughly a full day\n    reviewing this change and still come out ahead.\n    \n    Change-Id: I27c42c4ee3254eb32aad4d3dac08b16b3a43d611\n',4,1,'Rackspace'),(276005,4086,4086,'2015-02-26 01:26:02','2015-02-06 21:33:59','    Ring checker in swift-recon\n    \n    This patch validates the server end points on the ring. And also generates\n    a report on issues found.\n    \n    Change-Id: I913799a35d5c9178164021cfb7fcb448141b058b\n',168,0,'independent'),(276007,832,832,'2015-03-03 16:18:58','2015-03-02 09:21:00','    Fixed links in multi-server Swift documentation\n    \n    The link to the ubuntu installation guide was incorrect and 404\'ing.\n    \n    This change updates page to point (anchor) to the install guide\n    section of docs.openstack.org, so it will always point to the latest\n    versions of the install documentation.\n    \n    It also updates the deep links to the current install guides for the\n    past few releases.\n    \n    As links continue to get outdated or we forget to add new ones, the\n    anchor link at the top of the page will probably still work.\n    \n    Change-Id: I38299c03370936eb41992a953aa9d10b01a8396b\n    Closes-Bug: #1147331\n',25,6,'Rackspace'),(276009,869,869,'2015-03-04 12:39:49','2015-03-03 18:01:11','    Fix EC chunking\n    \n    EC objects weren\'t always getting split into even-size fragments,\n    depending on the rate at which things got read from the network. All\n    the bytes would still be there, but the fragment sizes could be\n    non-uniform. This fixes the chunker to make fragment sizes uniform.\n    \n    Change-Id: I1a311f58caeef2644c67c24dd2c0f1c1945997d5\n',38,9,'SwiftStack'),(276011,5254,5254,'2015-03-05 14:03:23','2015-03-05 11:34:57','    fix small py26 compatibility issue\n    \n    Change-Id: Iea80914a7852523d170043121284f645acad0f7c\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',2,2,'Red Hat'),(276012,5254,5254,'2015-03-05 09:05:38','2015-03-03 16:39:09','    Use Container override header to update etag and size\n    \n    Add two new headers to ec footer message to override\n    the etag and size values when updating\n    the container servers.\n    \n    In the case of EC, the object server calculates the\n    etag and size of the FA and not the whole object,\n    so we need to use the container override header to store\n    the object\'s value in the container database.\n    \n    Change-Id: I12dea597889b1227bddeda995f703346bc2be7e1\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',20,5,'Red Hat'),(276014,4075,4075,'2015-03-06 10:39:43','2015-03-05 22:02:43','    Fix EC download when data nodes is not divisiable by two.\n    \n    We\'ve had a couple of bugs with non-even data nodes for EC, so the default\n    controller.obj TestCase for EC does a 3+1.  I added a simple GET test with a\n    body and it should fail on master, and pass with the change to the\n    ECStoragePolicy.fragment_size property.\n    \n    Change-Id: I63e11a920a14f01cb12296f81c1d5e8e9957f4d4\n',127,71,'Rackspace'),(276016,4087,4087,'2015-03-03 14:23:23','2015-03-03 14:23:23','    Minor cleanup in proxy obj controller\n    \n    - removed some dead code\n    - update some comments\n    \n    Change-Id: Ia3a163e9928ff2399985f9ad60b5a93e37f5fb99\n',18,23,'Intel'),(276018,4087,4087,'2015-03-05 08:57:00','2015-03-03 18:06:59','    Ssync fix for EC PUT path\n    \n    The recent multi-phase PUT patch calls set_hundred_continue_response_headers()\n    on wsgi_input regarldess of whether a multi-phase PUT is happening.  Ssync\n    uses a FileLikeIter for wsgi_input when updating files so pukes on this call.\n    \n    I believe the right fix is to simply not make the call unless you are doing\n    multi-phase as defined by the header.\n    \n    Change-Id: Ia3354cdfd9c3049c3568e4cffbe2c853d8c108bd\n',3,2,'Intel'),(276020,4075,4075,'2015-02-26 18:31:41','2015-02-26 16:37:16','    Fix object replicator partition cleanup\n    \n    Probetests discovered two issues with the current state of the\n    object-replicator as a result of the attempts to clean up changes\n    related to efficient cross-region replication.\n    \n    Known failures are:\n    \n      * rsync replication when configured with no sync_method in the config\n        fails to clean up a handoff partition\n      * ssync replication when there is only one region fails to cleanup a\n        handoff partition\n    \n    In both cases the path resulting in the failure moved through the\n    implicit else clause (dangling elif) of the partition cleanup code path.\n    In the ssync case the failure came form a miss on the first if branch\n    when delete_objs would be None if there is no remote regions.  In the\n    rsync case the failure came from a miss on the second elif condition\n    when looking for an entry in the conf dict and not setting a default.\n    \n    This change adds unittests for both failures that should fail in a\n    reasonable way against master without requiring a probetest run against\n    other configs, as well as rephrasing the logic in the partition cleanup\n    handling to try and make the logic flow more explicit.\n    \n    Change-Id: Ic59d998a3e36a3eb3e509d9fdf7096e812281357\n',83,5,'Rackspace'),(276022,978,978,'2015-02-27 11:54:50','2015-02-27 11:54:50','    Minor change to the service token sample test config\n    \n    Make the sample test config project for tester5 be test5\n    to match the configured account in proxy-server.conf-sample.\n    That way the sample test config will work if uncommented.\n    \n    Change-Id: I57144fe153775de51c950cfc101fcdf34dfac5e8\n',1,1,'HP'),(276024,5254,5254,'2015-03-06 14:35:40','2015-03-06 14:35:40','    fixing small typos in associated projects doc\n    \n    Change-Id: Ia4555acc1763a58cdf605530219ea4e4586ad517\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',4,4,'Red Hat'),(276027,1141,1141,'2015-03-11 13:12:33','2015-03-11 10:16:46','    Bring EC API calls in sync with PyECLib 1.0\n    \n    Changes in PyECLib 1.0:\n    \n      * All PyECLib exceptions consolidated into one (ECDriverError)\n        with improved error handling\n      * Uses liberasurecode-provided EC backends\n        (some semantic/error reporting changes)\n      * EC backend names brought in sync with liberasurecode\n        (flat_xor_3 -> flat_xor_hd_3,\n         flat_xor_4 -> flat_xor_hd_4,\n         jerasure_rs_cauchy_orig -> jerasure_rs_cauchy)\n    \n    Change-Id: I941541f8043c8a4851815df654e467d42f00c357\n',6,13,'Intel'),(276028,4087,4075,'2015-03-12 19:33:12','2015-03-11 19:53:38','    Prefer policy to policy_index\n    \n    When a policy must be associated with an operation (particularly in\n    a method/function signature), adopt the convention of using the\n    policy instance (instead of just the policy_index).\n    \n    This puts the earnest on the caller to make the decision if it can\n    safely assume the legacy policy was intended.\n    \n     * added StoragePolicyCollection.legacy property to name the legacy Policy-0\n    \n    On the wire operations will still prefer the policy_index (normally\n    provided in the X-Backend-Storage-Policy-Index header).  If the\n    called service can not translate the provided policy index to a\n    valid policy it should return a client error.\n    \n     * object-server will return 400 Bad Request for unknown policy\n     * ssync_reciever will raise HTTPBadRequest for unknown policy\n    \n    The DiskFile API now requires ObjectController.get_diskfile (and\n    it\'s derivitives, from_hash and from_audit_location) to accept the\n    policy instead of the policy index.  Implementations of DiskFile\n    that previously expected the policy_idx keyword parameter will need\n    to be modified to accept the policy instance.  It is still possible\n    to ignore policy (e.g.  swift.obj.mem_diskfile), but creating a\n    swift.obj.diskfile.DiskFile always requires a policy and will raise\n    a TypeError if called directly with policy=None.\n    \n    The Auditor will skip audit locations for unknown policies (like the\n    updater and replicator) to avoid potentially quarantining objects it\n    doesn\'t know how how to property audit - it will still log a warning\n    when it encounters a datadir for an unknown policy - but it will not\n    attempt to audit locations in that datadir.\n    \n    Change-Id: Ic02e46dd8a9312588fb65091fc0a58bf39f80102\n',862,559,'Rackspace'),(276029,4075,4087,'2015-03-13 14:47:20','2015-03-13 07:19:43','    Rename RUGGEDIZE to SSYNC\n    \n    RUGGEDIZE was REPLICATION (and still is on master) however is only\n    used for SSYNC and is also used for EC so we\'ll just call it SSYNC\n    to avoid confusion.  Also added a note that REPLICATE for the obj\n    server is used by both replication and EC and really just does\n    a get_hashes() at the remote end.\n    \n    DocImpact\n    \n    Change-Id: I0a6d554eb3326a5fd3fc41135a8615ec7b24551f\n',81,77,'Intel'),(276031,229,4078,'2015-03-13 15:34:18','2014-12-17 10:29:04','    List valid EC types in error\n    \n    List the avaiable EC algorithms if a unsupported EC algorithms found in\n    swift.conf\n    \n    PyECLib provides a module level attribute that containers all the supported\n    erasure coding algorithms. This patch makes Swift checkes that first before\n    creating the EC instance.\n    \n    Change-Id: Ie32f59847ed99e2dbce5b7596637a74cd9758eba\n    Signed-off-by: Yuan Zhou <yuan.zhou@intel.com>\n',11,3,'INTC'),(276033,869,869,'2015-03-06 15:06:50','2015-03-06 15:06:50','    Small optimization to ring builder.\n    \n    We were already checking this condition a few lines up; no need to do\n    it again.\n    \n    Change-Id: I066c635c8dfa3c3a1e9a944decae2f41e2c689c9\n',2,4,'SwiftStack'),(276035,5599,5599,'2015-03-09 03:18:25','2015-03-09 03:18:25','    Fix param description on _make_request\n    \n    make_requests requires a list of headers but _make_request needs\n    just headers dictionary (not a list).\n    \n    Change-Id: Iaf7ba32de3702bf2189f41e42041b561c9d1b57b\n',1,2,'NTT'),(276037,5623,5623,'2015-03-04 12:33:56','2014-10-08 19:49:39','    fsync() on directories\n    \n    renamer() method now does a fsync on containing directory of target path\n    and also on parent dirs of newly created directories, by default.\n    This can be explicitly turned off in cases where it is not\n    necessary (For example- quarantines).\n    \n    The following article explains why this is necessary:\n    http://lwn.net/Articles/457667/\n    \n    Although, it may seem like the right thing to do, this change does come\n    at a performance penalty. However, no configurable option is provided to\n    turn it off.\n    \n    Also, lock_path() inside invalidate_hash() was always creating part of\n    object path in filesystem. Those are never fsync\'d. This has been\n    fixed.\n    \n    Change-Id: Id8e02f84f48370edda7fb0c46e030db3b53a71e3\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n',194,17,'Red Hat'),(276040,978,4075,'2015-03-17 08:43:22','2015-03-13 17:46:38','    Per-policy DiskFileRouter\n    \n    This is the simplest way I saw to sandbox off the existing DiskFile\n    implementation and allow all EC specific behavior changes to be\n    encapsulated on the ECDiskFileManager and it\'s subclasses.\n    \n    There\'s a few layout issues in the diskfile module that make it less\n    than optimal for this design - the fact that it takes three classes\n    to define a DiskFile not the least amoung them.\n    \n    This change doesn\'t add any EC specific behavior - it\'s mearly an\n    example of how per-policy DiskFile routing might look - the router\n    is very simple and the implications of routing to a per-policy\n    manager look relatively clean against the policy plubming.\n    \n    Change-Id: Ied7bebe1f03d7b719fe9bad5d0626e7c3ecf3881\n',154,57,'Rackspace'),(276042,4075,4075,'2015-03-17 12:51:28','2015-03-10 15:02:49','    Bypass paste.deploy\'s loadcontext to read a config from a string\n    \n    We need a good way to make a default config internal client work on\n    upgrades without a config on disk.  This would work until we can get\n    a patch upstream against paste.deploy that will accept a URI\n    object.\n    \n    Change-Id: Ibeeb354bf67ef978aba99ac416aa9d10016b9893\n',53,4,'Rackspace'),(276044,978,978,'2015-03-20 13:22:25','2015-03-17 08:32:57','    Per-policy DiskFile classes\n    \n    Adds specific disk file classes for EC policy types.\n    \n    The new ECDiskFile and ECDiskFileWriter classes are used\n    by the ECDiskFileManager.\n    \n    ECDiskFileManager is registered with the DiskFileRouter for\n    use with EC_POLICY type policies.\n    \n    Change-Id: I22f915160dc67a9e18f4738c1ddf068344e8ad5d\n',637,34,'HP'),(276046,869,869,'2015-03-23 15:55:35','2015-03-21 22:50:51','    EC: Support If-Match and If-None-Match on GET+HEAD\n    \n    Change-Id: Ie709a2326b3e5c698effc928b7a15e8f9b596d42\n',99,7,'SwiftStack'),(276047,869,869,'2015-03-23 15:47:02','2015-03-04 15:43:41','    EC: support single ranges for GET requests\n    \n    This commit adds support for single-range GET requests to\n    erasure-coded objects. A single-range GET request is a request with a\n    single byte-range in its Range header.\n    \n    Examples:\n      * Range: bytes=10485760-15728640\n      * Range: bytes=1048576-\n      * Range: bytes=-8192\n    \n    This is sufficient to make SLO and DLO ranged-GET requests work.\n    \n    Note that multi-range GET requests are supported for replicated\n    objects, but not yet for erasure-coded objects. Such support will be\n    forthcoming in a future commit.\n    \n    For reference, multi-range GET requests have Range headers with more\n    than one byte-range.\n    \n    Examples:\n      * Range: bytes=4096-8191,1048576-2097152\n      * Range: 100-200,-300\n    \n    These are much less common than single-range requests, but for feature\n    parity with replicated objects, Swift will end up supporting them for\n    erasure-coded objects as well. Just not now.\n    \n    Change-Id: I635c71bcb1a2cdec4a20f10ba8406856498792dc\n',734,52,'SwiftStack'),(276049,4087,4087,'2015-03-23 12:43:12','2015-03-20 09:32:20','    Make get_dev_path() treat mount_check literally...\n    \n    Only specifically check for a mount point if called for and if\n    not then check to make sure that a dir exists unless the caller\n    overrides all checks.\n    \n    This allows for VM testing to simulate a drive failure by\n    removing a directory.  Its needed for EC reconstructor testing\n    and provides general goodness in that even if mount_check (conf)\n    is not set it will now make sure the dir exists (unless overridden)\n    \n    blueprint ec-reconstructor\n    \n    Change-Id: I1226f28bbd1910b2dd262db5d50adc8aff3be21a\n',88,19,'Intel'),(276051,229,229,'2015-03-23 21:49:07','2015-03-23 21:49:07','    better functional test for ranged GETs\n    \n    Change-Id: I8a7df447635da033879ba08e6be909bea46db805\n',6,1,'SwiftStack'),(276053,441,441,'2015-03-16 06:10:17','2015-03-16 06:10:17','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I0058932520e008aa4bde7ce34d6c9f25424684b4\n',116,106,NULL),(276054,5599,5599,'2015-02-23 01:13:40','2015-02-23 00:26:30','    Fix ContainerBroker to use policy-0 in default\n    \n    Fix ContainerBroker to initialize as policy-0 on policy_stat\n    table in default when storage_policy_index argument is NOT given.\n    \n    Current ContainerBroker makes policy-1 stats in default because\n    the \"None\" value will be passed through to the last function of\n    db access query (i.e. a query like as \"INSERT INTO policy_stat\n    (storage_policy_index) VALUES (None)\" will appear) which results\n    in a row \"(1, 0, 0)\" (the first value is the policy index) by\n    the PRIMARY KEY constraint on sqlite.\n    \n    In worst case, container db keeps two policies, and then, ContainerBroker.get_info\n    might return invalid (non-touched) policy_stat information as container information.\n    (See tests in detail)\n    \n    When using ContainerBroker with no storage_policy_index argument,\n    it should always act policy-0 simply.\n    \n    Note that this patch doesn\'t affect immediately Swift behavior because\n    current swift ensures to use policy-0 on \"Container-Server\" when invalid\n    policy (includes None) is given. However, we should recheck also in\n    ContainerBroker for safety to prevent the unfortunate behavior above.\n    \n    Change-Id: If64f0c94c069a2cc3140c99f21b8d371c183e28a\n',40,0,'NTT'),(276056,5599,5599,'2015-03-13 04:39:16','2015-03-13 04:39:16','    Fix the prefix of messages caputured from stderr\n    \n    Swift caputures both sys.stdout and sys.stderr messages and\n    transfers them to syslog. However, whole of the messages\n    uses the \"STDOUT:\" prefix, currently.\n    \n    It will be quite confusable for debugging purpose because we\n    cannot make sure whether \"Swift didn\'t caputure stderr\" or\n    \"Swift captured stderr but didn\'t show it\" when we want to log\n    some stderr messages.\n    \n    This patch enables to allow a new prefix \"STDERR:\" and use it\n    for sys.stderr.\n    \n    Change-Id: Idf4649e9860b77c3600a5cd0a3e0bd674b31fb4f\n',49,43,'NTT'),(276058,1141,4080,'2015-03-16 14:16:49','2015-03-13 13:19:44','    Bump PyECLib version to >= 1.0.3\n    \n    ECPyECLibException has been removed in 1.0.1, among other\n    API/error handling enhancements in 1.0.3. Let\'s make sure\n    the right version is used.\n    \n    Change-Id: Ie6e0c1b491017dd5096b14c23b610abc22b03d6a\n',1,0,'Red Hat'),(276059,5649,5649,'2015-03-16 23:30:37','2015-03-16 23:30:37','    Add the missing \"file\" keyword for print\n    \n    All non-keyword arguments are converted to strings and written to\n    the stream, the argument \"sys.stderr\" should be given keyword\n    \"file\" as keyword argument.\n    \n    Change-Id: I1f9c4e41ed7a1d3246eae9179fd9221c0a834292\n',4,4,'H3C'),(276061,978,2749,'2015-03-10 10:51:40','2015-03-06 21:18:48','    Allow swift-object-info to inspect .meta and .ts files\n    \n    Removing the check for \".data\" extension makes it check\n    *any* file for metadata, so it works with .meta and .ts\n    filetypes.\n    \n    Change-Id: I43966d371218ad39414e9282cde579e48370a2a7\n    Closes-Bug:1425679\n',1,1,'BinaryFlows'),(276063,441,441,'2015-03-18 06:11:23','2015-03-18 06:11:23','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I2e0a6053fec208b3eea9a68416fdc616da0631a9\n',50,48,NULL),(276065,5599,5599,'2015-03-20 09:21:09','2015-03-20 00:59:15','    Fix a lack of method arguments at tempauth\n    \n    This fixes a kind of trivial issue with TypeError caused by a lack\n    of method argument at calling.\n    \n    When using \'Authorization\' header with tempauth, tempauth calls\n    _get_user_groups with 3 arguments (includes self) on current code\n    but the method requires 4 arguments so it will go to fail with 500.\n    \n    This patch fixes to take correct arguments and adds an unit test\n    for the case.\n    \n    Closes-Bug:1434465\n    \n    Change-Id: Ibf00c41fa8e5cfdaf49bc4d571e575d7f229ebfe\n',22,2,'NTT'),(276066,978,978,'2015-03-20 16:13:57','2015-02-25 17:33:44','    Enable in-process functional test policy to be configured\n    \n    Currently the in-process tests build a 2 replica, 4 partition,\n    2 device object ring. This patch allows an alternative policy\n    and ring to be specified for testing via environment variables\n    that may optionally be set.\n    \n    SWIFT_TEST_IN_PROCESS_CONF_DIR - This points the test setup to a\n      directory which may have a swift.conf file and ring file. The\n      test setup will then prefer these conf files over the samples\n      in \'/etc\'.\n    \n    SWIFT_TEST_POLICY - This causes the in-process test to\n      use the specified policy from the swift.conf file and its\n      associated ring for testing (first copying the conf and ring file\n      and modifying device parameters to suit in-process testing). If\n      not set, the tests will use the default policy.\n    \n    The in-process tests now start sufficient object servers for the\n    ring file being tested against.\n    \n    This should allow in-process functional testing of various policies\n    and rings (e.g. EC policies) without needing to reconfigure an SAIO\n    for each test scenario.\n    \n    The refactoring of the in_process test setup code should also\n    allow easier addition of other \'hard-coded\' test policies/rings\n    in the future.\n    \n    Change-Id: I24f5a13de3d296b400da1691dcb53423a9f8a463\n',255,45,'HP'),(276068,1051,1051,'2015-03-21 08:43:19','2015-03-21 08:42:23','    Fix typo in swift/test/unit/account/test_backend.py\n    \n    Change-Id: I6cab110599019471b4005f1584fc26fa2a85d02e\n',1,1,'NTT'),(276070,978,978,'2015-03-18 12:43:03','2015-03-18 12:43:03','    Test swift-object-info opens meta and ts files\n    \n    Adds a unit test to verify the change made in [1], i.e. that\n    swift-object-info will read from .meta and .ts files as well\n    as .data files.\n    \n    [1] change I43966d371218ad39414e9282cde579e48370a2a7\n    \n    Change-Id: I82dde36e3a96db1a21cfe9a4cca0d941e543dfd0\n    Related-Bug: 1425679\n',11,0,'HP'),(276072,5254,5254,'2015-03-21 12:30:58','2015-02-17 16:55:34','    Refactoring the PUT method\n    \n    Extracting large chunks of the PUT method into smaller\n    methods to improve maintainability and reuse of code.\n    \n    Based on the work that Clay Gerrard started:\n    https://review.openstack.org/#/c/77812/\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    \n    Change-Id: Id479fc5b159a2782361ac4a6e4a6d8bbaee4fe85\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',424,245,'Red Hat'),(276074,1278,1278,'2015-03-23 11:38:32','2015-03-12 15:40:39','    Add swift-recon feature to track swift-drive-audit error count\n    \n    This is a follow-on from a previous commit which added recon info\n    for swift-drive-audit (https://review.openstack.org/#/c/122468/).\n    \n    Here, the \"--drievaudit\" option is added to swift-recon tool. This\n    feature gives the statistics for the system-wide drive errors flagged\n    by swift-drive-audit. An example of the output is as follows:\n    (verbose mode)\n    \n    swift-recon --driveaudit -v\n    ===============================================================================\n    --> Starting reconnaissance on 5 hosts\n    ===============================================================================\n    [2015-03-11 17:13:39] Checking drive-audit errors\n    -> http://1.2.3.4:6000/recon/driveaudit: {\'drive_audit_errors\': 14}\n    -> http://1.2.3.5:6000/recon/driveaudit: {\'drive_audit_errors\': 0}\n    -> http://1.2.3.6:6000/recon/driveaudit: {\'drive_audit_errors\': 37}\n    -> http://1.2.3.7:6000/recon/driveaudit: {\'drive_audit_errors\': 101}\n    -> http://1.2.3.8:6000/recon/driveaudit: {\'drive_audit_errors\': 0}\n    [drive_audit_errors] low: 0, high: 101, avg: 30.4, total: 152, Failed: 0.0%, no_result: 0, reported: 5\n    ===============================================================================\n    \n    Change-Id: Ia16c52a9d613eeb3de1a5a428d88dd1233631912\n',95,0,'HP'),(276076,441,441,'2015-03-24 06:06:33','2015-03-24 06:06:33','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I6ae0dd0c34ac1d7173acacdd0dd4896619592e0c\n',38,62,NULL),(276079,4078,4078,'2015-03-25 11:59:46','2015-03-10 09:46:12','    Fix copy from different type policy\n    \n    Make Proxy switch to the right object controller when do cross policy\n    copy.\n    \n    Currently a COPY will be one GET + one PUT. These two requests are using\n    the same object controller instance. We need to change the GET request to\n    use the right object controller based on policy info.\n    \n    Change-Id: I926f04a60e046760d73713a387316d68f054ae1c\n',57,2,'INTC'),(276080,4075,4075,'2015-03-24 11:09:54','2015-03-20 15:57:52','    Cleanup ECDiskFile classes\n    \n    All previously module level methods are attached only to the manager\n    now.  Standardized on the signature `self.manager.module_level_method`\n    in DiskFile(Reader|Writer).  As an inconvenience this means we can no\n    longer override the ECDiskFile\'s .get_ondisk_files to add the fragment\n    index before calling the ECDiskFileManager\'s .get_ondisk_files; as a\n    benifit we\'re no longer shadowing the the ECDiskFileManager\'s\n    .get_ondisk_files method with an ECDiskFile method of the same name\n    (instead we highlight the fact that there is minor difference in\n    DiskFile and ECDiskFile\'s _get_ondisk_file implementation that could\n    easily be re-factored out post-merge).\n    \n    Removed an EC specific change from DiskFileWriter\'s put method.\n    This should limit the DiskFile changes when merged to master:\n    \n      * policy_index->policy\n      * module_level_method->self.manager.module_level_method\n      * new DiskFileWriter method for durable \"commit\"\n    \n    Fixed DiskFileManager classmethod\'s which create DiskFile\'s to use the\n    per-manager DiskFile class - and updated associated test mocks.  We should\n    evaluable adequate auditor test coverage for the ECDiskFile classes.\n    \n    Refactored test.unit.obj.test_diskfile to make use of test mixins which more\n    easily allow for implementation specific as well as common test methods.\n    \n    Change-Id: I4aac6ab7b1b5171fcab6281729eb9a01e2e99f15\n',1794,1702,'Rackspace'),(276082,4080,978,'2015-03-25 10:21:56','2015-03-17 20:20:19','    Add commit method to interface of DiskFile\n    \n    - Move the object server PUT path call to commit() outside of\n      multi-phase commit conditional scope so that it is always called\n      at end of PUT.  Otherwise multipart commit will need to be\n      implemented in ssync just to get a durable file created after\n      ssync\'ing a fragment archive.\n    \n    - Make DiskFileWriter (sub)class implementation decide whether\n      a durable file should be created or not based on policy type.\n      Legacy DiskFileWriter does NOT create a durable file,\n      ECDiskFileWriter does create a durable file.\n    \n    - move the durable file creation to run in a separate thread\n    \n    - add an fsync of the durable file\n    \n    - add a call to hash_cleanup_listdir after the durable file has been\n      written - the existing call after the data file has been renamed\n      is ineffective with EC policy\n    \n    - catch IOErrors and OSError in write_durable_timestamp and raise\n      DiskFileErrors\n    \n    - Added unit tests to verify changes and to verify that a durable\n      file is not created for a replication policy and is created for a\n      EC policy.\n    \n    Change-Id: If733f8cf1d088f79d0547b2f5292418f636d1b43\n',266,38,'HP'),(276084,4078,869,'2015-03-25 15:32:02','2015-03-24 17:00:33','    EC: fix PUT with If-None-Match: *\n    \n    Change-Id: Ia12c5124d2ab476de72552fff7e4466355c9f49b\n',48,10,'SwiftStack'),(276086,4078,4078,'2015-03-26 14:27:46','2015-03-26 11:11:04','    Make ssync unit tests ignore local swift.conf\n    \n    Fixes ssync unit tests when EC policy was specified as the default\n    one in swift.conf.\n    \n    In 853a6f15f06bd832153ef0129ee5f395e0f199ec some EC part of ssync was\n    set to \'pass\'. This patch uses patch_policies in the test so it can\n    ignore the swift.conf.\n    \n    Change-Id: I7ad906adc13daacd5c673d821b1d88d0eddfe7d8\n    Signed-off-by: Yuan Zhou <yuan.zhou@intel.com>\n',2,6,'INTC'),(276087,869,869,'2015-03-26 12:02:16','2015-03-24 14:19:05','    EC: better failure handling for GETs\n    \n    If one of the fragment-archive GETs threw an exception while fetching\n    (like ChunkWriteTimeout if things were slow, or KeyError if I couldn\'t\n    spell), then the connection would just hang. Now these exceptions are\n    caught and the connection is aborted.\n    \n    There\'s also a change in the GET path where the initial connections\n    are made: now it uses a ContextPool so we don\'t leak greenthreads even\n    if one of the fetches throws an exception.\n    \n    Change-Id: I210d3a2936775bc343019d7bb6a6a2346662fd41\n',108,24,'SwiftStack'),(276088,4075,4075,'2015-03-26 16:27:28','2015-03-19 21:07:37','    Multiple Fragment Archive support for suffix hashes\n    \n    Erasure coded objects must encode the fragment archive index in the datafile\n    name to ensure proper behavior in failure.  In order to identify incosistent\n    suffixes in the partition between adjacent nodes the suffix hashes must encode\n    their conents per fragment index.\n    \n    This changes builds on the per-policy DiskFile branch to introduce this\n    behavior and minimize code churn for the replicated DiskFile implemenation.\n    \n    Co-Authored-By: Paul Luse <paul.e.luse@intel.com>\n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    Change-Id: I114a124b69eaa8a94f7ebcaea4c469d01582bbab\n',1300,471,'Rackspace'),(276090,4075,5254,'2015-03-27 01:33:11','2015-03-14 14:38:02','    Extract EC PUT to ECObjController\n    \n    Add some tests, fix some bugs, clean up the diff the master.\n    \n    You should look at the Router thing - trying to adopt a pattern we\n    used on the object-server.\n    \n    Change-Id: I17b2d4fcd60ad0a574be37031ec0ce51a3514326\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',1801,1132,'Red Hat'),(276092,869,869,'2015-03-28 09:41:52','2015-03-26 16:34:24','    EC: don\'t mix different fragment archives\n    \n    If an EC object is PUT twice, but not all the nodes are up for the\n    second PUT, then a future GET might see some fragment archives for the\n    old object and some for the new object. Naively combining these leads\n    to garbage being sent to the client. While a smart client can avoid\n    this by checking the MD5, a dumb client will just happily eat the\n    garbage it was given, and that\'s no good.\n    \n    This commit just 503s when that happens so the client doesn\'t get\n    garbage. There\'s lots more work we could do to handle this better, but\n    for now, this\'ll at least keep clients from getting garbage.\n    \n    Change-Id: I19dc963d61978bf18f2b417dd5da96775c1b5dbc\n',108,1,'SwiftStack'),(276093,4075,978,'2015-03-27 12:36:42','2015-03-26 16:56:45','    Make ECDiskFile require a fragment index\n    \n    Whether its passed via constructor or in metadata to the\n    writer.put(), an ECDiskFile must have a fragment index for\n    its .data file. Raise a DiskFileError otherwise.\n    \n    Other changes: rename ECDiskFileManager.fname_to_ts to\n    parse_on_disk_filename, make it return timestamps as Timestamp\n    instances, and fragment index as an int and raise DiskFileError\n    if it detect a bad or missing fragment index for a .data file\n    extension.\n    \n    Rename ECDiskFileManager.ts_to_fname to make_on_disk_filename,\n    make it accept timestamps as Timestamp instances, and\n    make it raise DiskFileError if it detects a bad or missing\n    fragment index for a .data file extension.\n    \n    Change-Id: I1b2fd6fffc1ea13f2f777d228ff5c3e1849b6b67\n',326,99,'HP'),(276095,229,4075,'2015-03-29 16:48:25','2015-03-27 21:16:26','    Guard against invalid Policy\n    \n    Don\'t return 400 invalid policy *index* to the client - and try to\n    remember that object server 4XX errors are for the *real* client not\n    the proxy with 404 being a very special case.\n    \n    Return 503 if a policy rollout when south.\n    \n    Fixup and cleanup some tests.\n    \n    Change-Id: I50ae92f9722c1d78d6714ed0d5c40f8df20afa5c\n',38,41,'Rackspace'),(276097,4075,4075,'2015-03-29 21:25:32','2015-03-27 20:10:02','    Fix AttributeError and logging in ECAppIter\n    \n    I added some tests when I was reviewing another fix and fixed some other bugs.\n    \n    Change-Id: I92544df2ebb0e6ef57f5588c0180bfa24d9ea21b\n',459,193,'Rackspace'),(276099,5155,5155,'2015-03-30 17:21:49','2015-03-30 17:17:48','    Removed an unused variable in decode_segments_from_fragments\n    \n    Removed an unused valiable in decode_segments_from_fragments method.\n    \n    Change-Id: Iae004f5136bb60a0c8b1c88b765c5fedde9f9b7b\n',0,2,'Fujitsu'),(276100,4075,4075,'2015-03-30 01:16:19','2015-03-20 13:38:44','    Add Fragment Index filter support to ssync\n    \n    This patch applies some of the changes needed for the\n    object-reconstructor into the per-policy diskfile work:\n    \n      * add frag_index kwarg to ECDiskFileManager yield_hashes\n      * make ssync aware of fragment index\n    \n    Change-Id: I38821363697a7a6db44a0dcc7be5232e2a93ab06\n',791,348,'Rackspace'),(276102,978,978,'2015-03-30 16:07:57','2015-03-30 15:54:52','    Minor cleanup to EC yield_hashes and gather_ondisk_files\n    \n    Refactors ECDiskFileManager.hash_cleanup_listdir to allow\n    code to be shared with yield_hashes and remove duplicated\n    calls to gather_ondisk_files.\n    \n    Add tests to verify that yield_hashes does cleanup the\n    hash dir.\n    \n    Adds commentary to ECDiskFileManager._gather_ondisk_file.\n    \n    Change-Id: Ifbb7537787cf36e8934fae69a433152be148db78\n',105,24,'HP'),(276103,978,978,'2015-03-30 19:06:35','2015-03-30 19:06:35','    Even more cleanup to EC on-disk file cleanup\n    \n    This tried hard to make cleanup_ondisk_files in\n    ECDiskFileManager a little prettier, but is hampered\n    by keeping in step with legacy  hash_cleanup_listdir\n    behaviour. But its a little better.\n    \n    Change-Id: I6b5dbf7b1b2c764fbda65ceb46e5aa45def04cba\n',11,8,'HP'),(276104,832,4078,'2015-04-01 16:14:52','2014-12-24 11:52:34','    Update contianer sync to use internal client\n    \n    This patch changes container sync to use Internal Client instead\n    of Direct Client.\n    \n    In the current design, container sync uses direct_get_object to\n    get the newest source object(which talks to storage node directly).\n    This works fine for replication storage policies however in\n    erasure coding policies, direct_get_object would only return part\n    of the object(it\'s encoded as several pieces). Using Internal\n    Client can get the original object in EC case.\n    \n    Note that for the container sync put/delete part, it\'s working in\n    EC since it\'s using Simple Client.\n    \n    Signed-off-by: Yuan Zhou <yuan.zhou@intel.com>\n    \n    DocImpact\n    Change-Id: I91952bc9337f354ce6024bf8392046a1ecf6ecc9\n',272,108,'INTC'),(276106,1451,1451,'2015-03-24 11:07:56','2015-03-19 17:25:57','    Fix common misspellings\n    \n    Wikipedia\'s list of common misspellings [1] has a machine-readable\n    version.  This patch fixes those misspellings mentioned in the list\n    which don\'t have multiple right variants (as e.g. \"accension\", which can\n    be both \"accession\" and \"ascension\"), such misspellings are left\n    untouched.  The list of changes was manually re-checked for false\n    positives.\n    \n    [1] https://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings/For_machines\n    \n    Change-Id: Ic9a5438629664f7cea216413a28acc0e8992da05\n    Signed-off-by: Martin Kletzander <mkletzan@redhat.com>\n',10,9,'Red Hat'),(276108,5623,5623,'2015-03-05 19:01:38','2015-03-05 19:01:38','    Handle ENOSPC in mkstemp()\n    \n    mkstemp() can fail with ENOSPC when filesystem runs out of inodes.\n    And fallocate() used to raise DiskFileNoSpace for all OSErrors.\n    \n    Change-Id: I8c95cb710107d8e481d068b00eda53dd805c00a5\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n',54,6,'Red Hat'),(276110,4087,1141,'2015-03-25 12:02:48','2015-03-13 01:36:53','    Bump eventlet version to 0.16.1\n    \n    This version adds support for multiple 100-continue responses\n    via the API send_hundred_continue_response(), which we need for\n    the two-phase scheme for PUTs with Erasure Coding\n    \n    Change-Id: I7154ef1dd96ab761894b09d5e6abf98a453f7b64\n',1,1,'Intel'),(276112,5254,4075,'2015-03-27 13:13:31','2015-03-26 21:43:48','    Add Swift Design Principles to CONTRIBUTING.md\n    \n    This is based of work started a few design summits ago [1].\n    \n    With EC getting close I felt like I could the inspiration.\n    \n    1. https://etherpad.openstack.org/p/juno_swift_core_principles\n    \n    Change-Id: I90fa56d67003080fe3d7bc4e0fad053e3b0c8504\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',23,0,'Rackspace'),(276114,4087,4087,'2015-04-01 20:17:03','2014-10-28 09:51:06','    Erasure Code Reconstructor\n    \n    Here\'s a run down of the big things in here:\n    \n    - addition of reconstruct_fa() function called from ssync_sender that\n    performs the actual reconstruction while sending the object over to\n    the receiver\n    \n    - guts of reconstructor sorta follow replicator but there\'s not a\n    notiong of update() and upate_deleted().  There is a single job\n    processor and jobs are processed partition by partition.  At the\n    end of processing a partition, the ECrecon will try to remove it\n    and it may or may not work depending on whether everything was\n    deleted or not (conditionally on whether the job was moving data\n    or syncing)\n    \n    - various ssync changes that correspond to what the ECRecon is doing\n    and how multi-FI support is built in but most of those are on a\n    different patch\n    \n    There are still opportunities to add unit tests\n    \n    blueprint ec-reconstructor\n    Change-Id: I7d15620dc66ee646b223bb9fff700796cd6bef51\n',2410,351,'Intel'),(276116,978,978,'2015-04-02 15:36:28','2015-03-30 18:35:15','    Fix ssync sender behavior for EC reconstructor jobs\n    \n    Fixes to ssync with EC:\n    \n    - With EC ssync may send a specific fragment archive index to\n      the receiver (a \'revert\') and then remove that fragment archive\n      from the sender node. If that fragment archive is the only one\n      on the local node then any .durable file for same timestamp\n      should also be removed, otherwise the .durable should be left\n      in place.\n    \n    - Adds a purge() method to ECDiskFile which ssync_sender can call\n      to remove an archive file from disk. This encapsulates the EC\n      specific behavior in the ECDiskFile class.\n    \n    - Change reconstruct_fa() to raise a DiskFileError if it fails\n      to build a diskfile-like-thing.\n    \n    - ssync continues to make progress if an fragment archive can\'t\n      be built.\n    \n    - Adds ssync_sender and diskfile unit tests.\n    \n    - Adds end-to-end ssync test for EC ssync_revert and sync_only\n     jobs.\n    \n    - enable easier upgrades to missing_check protocol phase by\n      making sender and receiver parsing of missing check lines\n      less brittle. This could prove useful for detecting when\n      receiver only needs a .durable file for existing .data file.\n    \n    Change-Id: Ice42333f1ab21efd8a080195a5a6c7cf08fc272d\n',784,111,'HP'),(276118,4087,4075,'2015-04-01 20:18:02','2015-03-13 11:15:05','    EC Reconstructor Probe Tests\n    \n    - BASIC REBUILD: put object, delete part, run ECrecon, get obj\n    and confirm etag. Do this for part deleted on one node, 2\n    adjacent nodes, and 2 nodes that are not partners.\n    \n    - BASIC REVERT:  kill 2 primaries then PUT an obj so we know\n    handoffs have FAs on them, make sure we can GET.  Kill a\n    3rd primary so we know a subsequent GET will use them\n    both.  Restore primaries and run ECrecon on the handoffs\n    then confirm we can GET the full object and confirm that\n    the handoffs are totally empty.\n    \n    - BASIC DELETE REVERT:  test to make sure deletes are\n    propogated\n    \n    More ideas:\n    - more tests!\n    -- revert with all ECrecons running\n    -- rebuild when the remote note has newer .data without a\n    .durable\n    - deterministic control over races between ECrecons\n    \n    blueprint ec-reconstructor\n    Co-Authored-By: paul luse <paul.e.luse@intel.com>\n    Change-Id: I5eefc96ccabda9ec9d2fd91fdee7b6c55f96e966\n',457,9,'Rackspace'),(276120,832,832,'2015-04-02 16:50:00','2015-04-02 16:50:00','    Make sure COPY requests are routed correctly\n    \n    This change makes sure COPY requests are routed through the correct\n    controller instance type for the policy. And really all Clay, we\n    found the issue and wrote a gist.. I\'m just throwing it up as a\n    patch, so it\'s in the system.\n    \n    Change-Id: I68cfa30c4fcf3bcfb74a7a7614f083b0bd6a40a3\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n',22,13,'Rackspace'),(276122,239,239,'2014-04-17 16:24:14','2014-04-17 16:24:14','    Opening stable/icehouse\n    \n    Set defaultbranch in .gitreview for convenience.\n    \n    Change-Id: I286c3d324e36e153e582063d83799ff9fe7115e1\n',1,0,'OpenStack Foundation'),(276123,229,229,'2014-06-18 15:28:33','2014-06-06 11:46:41','    properly quote www-authenticate header value\n    \n    HTTP header values should be quoted. Since the WWW-Authenticate\n    header value contains user-supplied strings, it\'s important to\n    ensure it\'s properly quoted to ensure the integrity of the protocol.\n    \n    Previous to this patch, the URL was unquoted and then the unquoted\n    value was returned in the header. This patch re-quotes the value\n    when it is set on the response.\n    \n    This is filed as CVS-2014-3497\n    \n    Fixes bug 1327414\n    \n    Change-Id: If8bd8842f2ce821756e9b4461a18a8ac8d42fb8c\n',36,1,'SwiftStack'),(276124,229,5627,'2014-10-07 11:13:34','2014-10-01 09:37:47','    Fix metadata overall limits bug\n    \n    Currently metadata limits are checked on a per request basis. If\n    multiple requests are sent within the per request limits, it is\n    possible to exceed the overall limits.  This patch adds an overall\n    metadata check to ensure that multiple requests to add metadata to\n    an account/container will check overall limits before adding\n    the additional metadata.\n    \n    This is a backport to the stable/icehouse branch for commit SHA\n    5b2c27a5874c2b5b0a333e4955b03544f6a8119f.\n    \n    Closes-Bug: 1365350\n    \n    Conflicts:\n    	swift/common/db.py\n    	swift/container/server.py\n    \n    Change-Id: Id9fca209c9c1216f1949de7108bbe332808f1045\n',216,7,'Rackspace'),(276125,2237,4087,'2014-10-22 13:25:18','2014-04-14 15:19:22','    Fix testcase test_print_db_info_metadata()\n    \n    Test compares cluster info to hardcoded expected data and wasn\'t\n    sorting the two sets of things being compared leading to some\n    sporadic unit test failures.\n    \n    Change-Id: I3ef98260a62c15d06ba8cc196196d4e90abca3f0\n    (cherry picked from commit 856c15539a958dabe3b8a1f22d305048ca39de9a)\n',4,2,'Intel'),(276126,2237,2237,'2014-10-22 13:26:11','2014-09-30 15:08:59','    Ensure sys.exit called in fork_child after exception\n    \n    Currently, the fork_child() function in auditor.py does not\n    handle the case where run_audit() encounters an exception\n    properly.\n    \n    A simple case is where the /srv directory is set\n    with permissions such that the \'swift\' user cannot access it.\n    Such a situation causes a os.listdir() to return an OSError\n    exception.  When this happens the fork_child() process does not\n    run to completion and sys.exit() is not executed.  The process\n    that was forked off continues to run as a result.  Execution goes\n    back up to the audit_loop function which restarts the whole process.  The\n    end result is an increasing number of processes on the system\n    until the parent is terminated.  This can quickly exhaust the\n    process descriptors on a system.\n    \n    This change wraps run_audit() in a try block and adds an\n    exception handler that prints what exception was encountered.\n    The sys.exit() was moved to a finally: block so that it will\n    always be run, avoiding the creation of zombies.\n    \n    Change-Id: I89d7cd27112445893852e62df857c3d5262c27b3\n    Closes-bug: 1375348\n    (cherry picked from commit 301a96f664d58b4ccad8e3cbf5d5a889cc76790f)\n',18,2,'IBM'),(276127,875,875,'2015-02-19 22:08:21','2015-02-19 22:07:11','    Add \'func\' tox environment\n    \n    Jenkins job configs have changed to execute swift functional tests\n    via tox, but stable/icehouse is missing required tox target.  This\n    adds it to exec tests in test/functional similar to .functests.\n    \n    Change-Id: I09c0b45de91a3cc20dcb0092a3e03e1b3c7554ff\n',3,0,'HP'),(276128,229,978,'2015-04-13 23:35:08','2015-04-03 18:46:20','    Prevent unauthorized delete in versioned container\n    \n    An authenticated user can delete the most recent version of any\n    versioned object who\'s name is known if the user has listing access\n    to the x-versions-location container. Only Swift setups with\n    allow_version setting are affected.\n    \n    This patch closes this bug, tracked as CVE-2015-1856.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Christian Schwede <info@cschwede.de>\n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    \n    Closes-Bug: 1430645\n    \n    Change-Id: Icde494a9a2c851034813cbc3855a20335b643f09\n',110,5,'HP'),(276129,1413,1266,'2014-08-20 17:01:58','2014-06-16 09:55:19','    Fix swift-recon --auditor bug\n    \n    I introduced a bug in swift-recon --auditor, which Christian\n    Schwede uncovered.  Christian proposed a fix which replaces the\n    generator nested_get_value with a recursive function which\n    returns just one instance of a key.  Christian\'s fix will break\n    the parallel object auditor patch which uses the generator to\n    return all instances of a particular key in a nested dictionary\n    and then sums those values.\n    \n    This alternative fix sums over all values returned by\n    nested_get_value, as is done in the parallel auditor patch.\n    \n    Change-Id: I6ac403395ab42d11161d6df266e8fbd5a2af9a64\n    (cherry picked from commit 203515718a2bee8334bd4936201f00a929ccbd89)\n',9,9,'HP'),(276131,239,239,'2014-10-16 17:04:32','2014-10-16 17:04:03','    Opening stable/juno\n    \n    Set defaultbranch in .gitreview for convenience.\n    \n    Change-Id: Ia1e67fdd719507166bdb36fbbbfc768d649c9ee0\n',1,0,'OpenStack Foundation'),(276132,229,5569,'2014-12-04 15:01:47','2014-12-02 15:28:26','    Clean up empty account and container partitions directories.\n    \n    Because we iterate over these directories on a replication run,\n    and they are not (previously) cleaned up, the time to start the\n    replication increases incrementally for each stale directory\n    lying around.  Thousands of directories across dozens of disks\n    on a single machine can make for non-trivial startup times.\n    \n    Plus it just seems like good housekeeping.\n    Closes-Bug: #1396152\n    \n    Change-Id: Iab607b03b7f011e87b799d1f9af7ab3b4ff30019\n',31,5,'independent'),(276133,229,978,'2015-04-13 23:34:46','2015-04-03 17:05:36','    Prevent unauthorized delete in versioned container\n    \n    An authenticated user can delete the most recent version of any\n    versioned object who\'s name is known if the user has listing access\n    to the x-versions-location container. Only Swift setups with\n    allow_version setting are affected.\n    \n    This patch closes this bug, tracked as CVE-2015-1856.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Christian Schwede <info@cschwede.de>\n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    \n    Closes-Bug: 1430645\n    \n    Change-Id: I74448c12bc4d4cd07d4300f452cf3dd6f66ca70a\n',129,6,'HP'),(276134,5652,5652,'2015-05-11 09:10:06','2015-05-05 12:31:22','    X-Auth-Token should be a bytestring.\n    \n    Change-Id: I2aa941d74883e17e9548b0144a4a2e2db33aba95\n    Closes-Bug: 1451773\n    (cherry picked from commit 1faad248f833735585aa8f6135babceb46fbb6f8)\n',5,1,'independent'),(276135,5652,1111,'2015-07-01 14:39:29','2015-06-26 08:54:22','    Increase httplib._MAXHEADERS\n    \n    Python 2.7.9+ and 3.2.6+ limits the number of maximum headers in httplib to 100\n    [1,2,3]. This setting is too low for Swift.\n    \n    By default the maximum number of allowed headers depends on the number of max\n    allowed metadata settings plus a default value of 32 for regular http headers.\n    If for some reason this is not enough (custom middleware for example) it can be\n    increased with the extra_header_count constraint.\n    \n    [1] https://bugs.python.org/issue16037\n    [2] https://hg.python.org/cpython/raw-file/15c95b7d81dc/Misc/NEWS\n    [3] https://hg.python.org/cpython/raw-file/v3.2.6/Misc/NEWS\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Matthew Oliver <matt@oliver.net.au>\n    Co-Authored-By: Thomas Herve <therve@redhat.com>\n    \n    Cherry picked from commit edfca861b6fa39972df276fb1f37aa81583a605d\n    \n    Conflicts:\n    	swift/common/constraints.py\n    	test/functional/__init__.py\n    	test/functional/swift_test_client.py\n    	test/unit/proxy/test_server.py\n    \n    Change-Id: I388fd697ec88476024b0e9f1ae75ba35ff765282\n',30,1,'Red Hat'),(276136,229,4075,'2014-12-04 15:06:53','2014-12-03 16:54:43','    Fix reclaim on deleted containers\n    \n    The common db replicator\'s code path for reclaiming deleted db\'s beyond the\n    reclaim age was not covered by unittests, and a AttributeError snuck in.  In\n    writing the test that would cover the common code both for accounts and\n    containers I discovered another KeyError with the container conditional for\n    validating the container\'s fully reported status.\n    \n    This fixes both those issues and adds additional tests for the cleanup empty\n    account container partition and suffix directories.\n    \n    Change-Id: I2a1bfaefebd05b01231bf71dd908fcc49adb4c36\n',161,103,'Rackspace'),(276138,229,1475,'2015-07-29 10:03:19','2015-07-10 13:04:44','    Fixes for mock 1.1\n    \n    The new release of mock 1.1 is more strict. It helped to find bugs in\n    tests.\n    \n    Closes-Bug: #1473369\n    Change-Id: Id179513c6010d827cbcbdda7692a920e29213bcb\n',7,7,'eNovance'),(276139,229,4075,'2015-08-26 07:54:02','2015-07-23 22:36:21','    Disallow unsafe tempurl operations to point to unauthorized data\n    \n    Do not allow PUT tempurls to create pointers to other data. Specifically\n    disallow the creation of DLO object manifests by returning an error if a\n    non-safe tempurl request includes an X-Object-Manifest header regardless of\n    the value of the header.\n    \n    This prevents discoverability attacks which can use any PUT tempurl to probe\n    for private data by creating a DLO object manifest and then using the PUT\n    tempurl to head the object which would 404 if the prefix does not match any\n    object data or form a valid DLO HEAD response if it does.\n    \n    This also prevents a tricky and potentially unexpected consequence of PUT\n    tempurls which would make it unsafe to allow a user to download objects\n    created by tempurl (even if they just created them) because the result of\n    reading the object created via tempurl may not be the data which was uploaded.\n    \n    [CVE-2015-5223]\n    \n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    \n    Closes-Bug: 1453948\n    \n    Change-Id: I91161dfb0f089c3990aca1b4255b520299ef73c8\n',85,1,'Rackspace'),(276140,978,978,'2015-03-19 11:08:06','2015-03-19 11:02:09','    Tighten up recon middleware unit tests\n    \n    Adds a test for get_expirer_info() and tightens up\n    the test for get_async_info().\n    \n    While reviewing [1] I noticed that the existing tests on\n    master will not catch a bug creeping into the arg strings\n    that these methods pass to from_recon_cache().\n    \n    [1] https://review.openstack.org/#/c/163889\n    \n    Change-Id: Iee6f12aeff684d70435dbeea769ccc181021be79\n',14,0,'HP'),(276142,869,869,'2015-03-30 17:47:28','2015-01-11 13:41:35','    Add some debug output to the ring builder\n    \n    Sometimes, I get handed a builder file in a support ticket and a\n    question of the form \"why is the balance [not] doing $thing?\". When\n    that happens, I add a bunch of print statements to my local\n    swift/common/ring/builder.py, figure things out, and then delete the\n    print statements. This time, instead of deleting the print statements,\n    I turned them into debug() calls and added a \"--debug\" flag to the\n    rebalance command in hopes that someone else will find it useful.\n    \n    Change-Id: I697af90984fa5b314ddf570280b4585ba0ba363c\n',93,8,'SwiftStack'),(276144,4080,4080,'2015-04-10 10:06:40','2015-02-18 10:17:23','    Set connection timeout in container sync\n    \n    Container sync might get stuck without a connection timeout if the remote proxy\n    is not responding.\n    \n    This patch sets a default timeout of 5.0 seconds for the connection attempt. The\n    value is much higher than other connection timeouts inside Swift (0.5); however\n    there might be a much higher latency to the remote peer, thus playing it safe.\n    There is also a retry if the attempt timed out.\n    \n    Note that this setting only applies to the connection request itself. Setting\n    this timeout does not apply when the remote proxy goes away during a request.\n    \n    Also added a short test to ensure urlopen is called with the timeout value.\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    \n    Change-Id: Ic08a55157fa91fe1316653781adf4d66eead61bc\n    Partial-Bug: 1419916\n',31,4,'Red Hat'),(276146,229,229,'2015-04-13 23:34:10','2015-03-20 10:17:25','    Prevent unauthorized delete in versioned container\n    \n    An authenticated user can delete the most recent version of any\n    versioned object who\'s name is known if the user has listing access\n    to the x-versions-location container. Only Swift setups with\n    allow_version setting are affected.\n    \n    This patch closes this bug, tracked as CVE-2015-1856\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Christian Schwede <info@cschwede.de>\n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    \n    Closes-Bug: 1430645\n    Change-Id: Ibacc7413afe7cb6f77d92e5941dcfdf4768ffa18\n',129,6,'SwiftStack'),(276147,229,229,'2015-04-01 12:41:44','2015-04-01 12:41:25','    make `git review` easier\n    \n    Change-Id: I6032a7915586db6da25aafccf3dced581b37df9c\n',1,0,'SwiftStack'),(276148,229,1141,'2015-04-13 22:57:42','2014-06-30 11:14:28','    Add support for policy types, \'erasure_coding\' policy\n    \n    This patch extends the StoragePolicy class for non-replication storage\n    policies, the first one being \"erasure coding\".\n    \n    Changes:\n    \n     - Add \'policy_type\' support to BaseStoragePolicy class\n     - Disallow direct instantiation of BaseStoragePolicy class\n    \n     - Subclass BaseStoragePolicy\n    \n       - \"StoragePolicy\":\n         . Replication policy, default\n         . policy_type = \'replication\'\n    \n       - \"ECStoragePolicy\":\n         . Erasure Coding policy\n         . policy_type = \'erasure_coding\'\n         . Private member variables\n           ec_type (EC backend),\n           ec_num_data_fragments (number of fragments original\n             data split into after erasure coding operation),\n           ec_num_parity_fragments (number of parity fragments\n           generated during erasure coding)\n         . Private methods\n           EC specific attributes and ring validator methods.\n    \n     - Swift will use PyECLib, a Python Erasure Coding library, for\n       erasure coding operations. PyECLib is already an approved\n       OpenStack core requirement.\n       (https://bitbucket.org/kmgreen2/pyeclib/)\n    \n     - Add test cases for\n       - \'policy_type\' StoragePolicy member\n       - policy_type == \'erasure_coding\'\n    \n    DocImpact\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Paul Luse <paul.e.luse@intel.com>\n    Co-Authored-By: Samuel Merritt <sam@swiftstack.com>\n    Co-Authored-By: Christian Schwede <christian.schwede@enovance.com>\n    Co-Authored-By: Yuan Zhou <yuan.zhou@intel.com>\n    Change-Id: Ie0e09796e3ec45d3e656fb7540d0e5a5709b8386\n    Implements: blueprint ec-proxy-work\n',779,104,'Intel'),(276150,229,4075,'2015-04-13 22:57:42','2015-03-31 22:35:37','    Update test infrastructure\n    \n     * Get FakeConn ready for expect 100 continue\n     * Use debug_logger more and with better interfaces\n     * Fix patch_policies to be less annoying\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    Co-Authored-By: Tushar Gohad <tushar.gohad@intel.com>\n    Co-Authored-By: Paul Luse <paul.e.luse@intel.com>\n    Co-Authored-By: Samuel Merritt <sam@swiftstack.com>\n    Co-Authored-By: Christian Schwede <christian.schwede@enovance.com>\n    Co-Authored-By: Yuan Zhou <yuan.zhou@intel.com>\n    Change-Id: I28c0a3539d994cbb8e6b94d63a23ed4ea6cb956d\n',411,251,'Rackspace'),(276152,4075,978,'2015-04-14 00:52:16','2015-03-17 08:32:57','    Per-policy DiskFile classes\n    \n    Adds specific disk file classes for EC policy types.\n    \n    The new ECDiskFile and ECDiskFileWriter classes are used by the\n    ECDiskFileManager.\n    \n    ECDiskFileManager is registered with the DiskFileRouter for use with\n    EC_POLICY type policies.\n    \n    Refactors diskfile tests into BaseDiskFileMixin and BaseDiskFileManagerMixin\n    classes which are then extended in subclasses for the legacy\n    replication-type DiskFile* and ECDiskFile* classes.\n    \n    Refactor to prefer use of a policy instance reference over a policy_index\n    int to refer to a policy.\n    \n    Add additional verification to DiskFileManager.get_dev_path to validate the\n    device root with common.constraints.check_dir, even when mount_check is\n    disabled for use in on a virtual swift-all-in-one.\n    \n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    Co-Authored-By: John Dickinson <me@not.mn>\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Tushar Gohad <tushar.gohad@intel.com>\n    Co-Authored-By: Paul Luse <paul.e.luse@intel.com>\n    Co-Authored-By: Samuel Merritt <sam@swiftstack.com>\n    Co-Authored-By: Christian Schwede <christian.schwede@enovance.com>\n    Co-Authored-By: Yuan Zhou <yuan.zhou@intel.com>\n    Change-Id: I22f915160dc67a9e18f4738c1ddf068344e8ad5d\n',4543,1412,'HP'),(276153,4075,869,'2015-04-14 00:52:17','2014-09-16 18:40:41','    Allow sending object metadata after data\n    \n    This lets the proxy server send object metadata to the object server\n    after the object data. This is necessary for EC, as it allows us to\n    compute the etag of the object in the proxy server and still store it\n    with the object.\n    \n    The wire format is a multipart MIME document. For sanity during a\n    rolling upgrade, the multipart MIME document is only sent to the\n    object server if it indicates, via 100 Continue header, that it knows\n    how to consume it.\n    \n    Example 1 (new proxy, new obj server):\n    \n       proxy: PUT /p/a/c/o\n              X-Backend-Obj-Metadata-Footer: yes\n    \n         obj: 100 Continue\n            X-Obj-Metadata-Footer: yes\n    \n       proxy: --MIMEmimeMIMEmime...\n    \n    Example2: (new proxy, old obj server)\n    \n       proxy: PUT /p/a/c/o\n              X-Backend-Obj-Metadata-Footer: yes\n    \n         obj: 100 Continue\n    \n       proxy: <obj body>\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    Co-Authored-By: John Dickinson <me@not.mn>\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Tushar Gohad <tushar.gohad@intel.com>\n    Co-Authored-By: Paul Luse <paul.e.luse@intel.com>\n    Co-Authored-By: Christian Schwede <christian.schwede@enovance.com>\n    Co-Authored-By: Yuan Zhou <yuan.zhou@intel.com>\n    Change-Id: Id38f7e93e3473f19ff88123ae0501000ed9b2e89\n',1333,175,'SwiftStack'),(276154,4075,869,'2015-04-14 00:52:17','2014-10-22 13:18:34','    Foundational support for PUT and GET of erasure-coded objects\n    \n    This commit makes it possible to PUT an object into Swift and have it\n    stored using erasure coding instead of replication, and also to GET\n    the object back from Swift at a later time.\n    \n    This works by splitting the incoming object into a number of segments,\n    erasure-coding each segment in turn to get fragments, then\n    concatenating the fragments into fragment archives. Segments are 1 MiB\n    in size, except the last, which is between 1 B and 1 MiB.\n    \n    +====================================================================+\n    |                             object data                            |\n    +====================================================================+\n    \n                                       |\n              +------------------------+----------------------+\n              |                        |                      |\n              v                        v                      v\n    \n    +===================+    +===================+         +==============+\n    |     segment 1     |    |     segment 2     |   ...   |   segment N  |\n    +===================+    +===================+         +==============+\n    \n              |                       |\n              |                       |\n              v                       v\n    \n         /=========\\             /=========\\\n         | pyeclib |             | pyeclib |         ...\n         \\=========/             \\=========/\n    \n              |                       |\n              |                       |\n              +--> fragment A-1       +--> fragment A-2\n              |                       |\n              |                       |\n              |                       |\n              |                       |\n              |                       |\n              +--> fragment B-1       +--> fragment B-2\n              |                       |\n              |                       |\n             ...                     ...\n    \n    Then, object server A gets the concatenation of fragment A-1, A-2,\n    ..., A-N, so its .data file looks like this (called a \"fragment archive\"):\n    \n    +=====================================================================+\n    |     fragment A-1     |     fragment A-2     |  ...  |  fragment A-N |\n    +=====================================================================+\n    \n    Since this means that the object server never sees the object data as\n    the client sent it, we have to do a few things to ensure data\n    integrity.\n    \n    First, the proxy has to check the Etag if the client provided it; the\n    object server can\'t do it since the object server doesn\'t see the raw\n    data.\n    \n    Second, if the client does not provide an Etag, the proxy computes it\n    and uses the MIME-PUT mechanism to provide it to the object servers\n    after the object body. Otherwise, the object would not have an Etag at\n    all.\n    \n    Third, the proxy computes the MD5 of each fragment archive and sends\n    it to the object server using the MIME-PUT mechanism. With replicated\n    objects, the proxy checks that the Etags from all the object servers\n    match, and if they don\'t, returns a 500 to the client. This mitigates\n    the risk of data corruption in one of the proxy --> object connections,\n    and signals to the client when it happens. With EC objects, we can\'t\n    use that same mechanism, so we must send the checksum with each\n    fragment archive to get comparable protection.\n    \n    On the GET path, the inverse happens: the proxy connects to a bunch of\n    object servers (M of them, for an M+K scheme), reads one fragment at a\n    time from each fragment archive, decodes those fragments into a\n    segment, and serves the segment to the client.\n    \n    When an object server dies partway through a GET response, any\n    partially-fetched fragment is discarded, the resumption point is wound\n    back to the nearest fragment boundary, and the GET is retried with the\n    next object server.\n    \n    GET requests for a single byterange work; GET requests for multiple\n    byteranges do not.\n    \n    There are a number of things _not_ included in this commit. Some of\n    them are listed here:\n    \n     * multi-range GET\n    \n     * deferred cleanup of old .data files\n    \n     * durability (daemon to reconstruct missing archives)\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    Co-Authored-By: John Dickinson <me@not.mn>\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Tushar Gohad <tushar.gohad@intel.com>\n    Co-Authored-By: Paul Luse <paul.e.luse@intel.com>\n    Co-Authored-By: Christian Schwede <christian.schwede@enovance.com>\n    Co-Authored-By: Yuan Zhou <yuan.zhou@intel.com>\n    Change-Id: I9c13c03616489f8eab7dcd7c5f21237ed4cb6fd2\n',3881,556,'SwiftStack'),(276155,4075,4078,'2015-04-14 00:52:17','2014-12-24 11:52:34','    Update container sync to use internal client\n    \n    This patch changes container sync to use Internal Client instead\n    of Direct Client.\n    \n    In the current design, container sync uses direct_get_object to\n    get the newest source object(which talks to storage node directly).\n    This works fine for replication storage policies however in\n    erasure coding policies, direct_get_object would only return part\n    of the object(it\'s encoded as several pieces). Using Internal\n    Client can get the original object in EC case.\n    \n    Note that for the container sync put/delete part, it\'s working in\n    EC since it\'s using Simple Client.\n    \n    Signed-off-by: Yuan Zhou <yuan.zhou@intel.com>\n    \n    DocImpact\n    Change-Id: I91952bc9337f354ce6024bf8392046a1ecf6ecc9\n',334,112,'INTC'),(276156,4075,4075,'2015-04-14 00:52:17','2015-04-03 16:23:14','    Fix account reaper for > 3 replicas\n    \n    There\'s a pre-existing IndexError in the pop from the container node\n    list in reaper\'s reap_object method for object rings with a replica\n    count greater than the container replica count.  Which is more likely\n    on EC storage policies.\n    \n    When making the backend direct delete requests to the nodes once the\n    container node\'s list is exhausted the generic exception handler logs\n    the error and breaks out of any other backend object requests - but\n    the reaper marches forward and eventually the tombstones are\n    replicated.\n    \n    This change just cycles the container headers across all the nodes -\n    which seems reasonable enough - but could certainly garner\n    bikeshedding.\n    \n    Change-Id: I5897d00b0a8c1e05884945dd93d9ce891b207001\n',47,22,'Rackspace'),(276157,4075,4087,'2015-04-14 00:52:17','2014-10-28 09:51:06','    Erasure Code Reconstructor\n    \n    This patch adds the erasure code reconstructor. It follows the\n    design of the replicator but:\n      - There is no notion of update() or update_deleted().\n      - There is a single job processor\n      - Jobs are processed partition by partition.\n      - At the end of processing a rebalanced or handoff partition, the\n        reconstructor will remove successfully reverted objects if any.\n    \n    And various ssync changes such as the addition of reconstruct_fa()\n    function called from ssync_sender which performs the actual\n    reconstruction while sending the object to the receiver\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    Co-Authored-By: John Dickinson <me@not.mn>\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Tushar Gohad <tushar.gohad@intel.com>\n    Co-Authored-By: Samuel Merritt <sam@swiftstack.com>\n    Co-Authored-By: Christian Schwede <christian.schwede@enovance.com>\n    Co-Authored-By: Yuan Zhou <yuan.zhou@intel.com>\n    blueprint ec-reconstructor\n    Change-Id: I7d15620dc66ee646b223bb9fff700796cd6bef51\n',5038,234,'Intel'),(276158,4075,4087,'2015-04-14 00:52:17','2014-07-03 15:59:33','    Erasure Code Documentation\n    \n    This patch adds all the relevant EC documentation to\n    the source tree. Notable additions are:\n      - Updated SAIO documentation\n      - Updates to existing swift documentation; and\n      - Erasure Coding overview\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    Co-Authored-By: John Dickinson <me@not.mn>\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Tushar Gohad <tushar.gohad@intel.com>\n    Co-Authored-By: Samuel Merritt <sam@swiftstack.com>\n    Co-Authored-By: Christian Schwede <christian.schwede@enovance.com>\n    Co-Authored-By: Yuan Zhou <yuan.zhou@intel.com>\n    Change-Id: I0403016a4bb7dad9535891632753b0e5e9d402eb\n    Implements: blueprint swift-ec\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',947,151,'Intel'),(276160,5155,5155,'2015-03-25 14:56:45','2015-03-23 11:29:16','    Clarify the description of backward compatibility in Keystoneauth\'s docstring\n    \n    If no prefix implies for the operator_roles and/or service_roles\n    parameters applies to all reseller_prefixes in the code.\n    But from backward comatibility point of view, the service_roles\n    parameter is newly introduced parameter so it is better to clarify\n    the docstring.\n    \n    Change-Id: I8b0d5aeff785c21b8a8b0f5b20f774fad868016d\n',3,3,'Fujitsu'),(276162,229,5645,'2015-04-14 13:14:40','2015-02-14 10:19:16','    Add additional func tests for TempURLs\n    \n    Change-Id: I25097c87d0a06c283b8ee5067b840f0a22776369\n',36,1,'Rackspace'),(276164,229,4080,'2015-04-14 13:15:15','2015-03-31 08:51:18','    Check if device name is valid when adding to the ring\n    \n    Currently device names can be empty or start and/or end with spaces.\n    This can create unexpected results, for example these three commands\n    are all valid:\n    \n    swift-ring-builder account.builder add \"r1z1-127.0.0.1:6000/\" 1\n    swift-ring-builder account.builder add \"r1z1-127.0.0.1:6000/sda \" 1\n    swift-ring-builder account.builder add \"r1z1-127.0.0.1:6000/ meta\" 1\n    \n    This patch validates device names and prevents empty names or names\n    starting and/or ending with spaces.\n    \n    Also fixed the test \"test_warn_at_risk\" - the test passed if the\n    exception was not raised.\n    \n    Closes-Bug: 1438579\n    \n    Change-Id: I811b0eae7db503279e6429d985275bbab8b29c9f\n',48,2,'Red Hat'),(276166,229,1020,'2015-04-14 13:15:15','2015-02-25 13:54:55','    Support HTTP_X_SERVICE_IDENTITY_STATUS in keystoneauth\n    \n    Keystone\'s auth_token now supports delay denial when\n    a service token is invalid. This change handles\n    the consequences for determining 401 vs 403 responses.\n    \n    Related-Bug: #1422389\n    \n    Change-Id: I90ba062e357cccea061c7101463b82b7c5e69293\n',28,1,'HP'),(276168,229,5155,'2015-04-14 13:15:15','2015-03-23 13:47:22','    Refactor the getting roles logic in _keystone_identity\n    \n    The list_from_csv in swift.common.utils is used from the composite\n    auth token support and this method has been used in\n    _integral_keystone_identity. There is same logic in\n    _keystone_identity so the logic would be replaced with list_from_csv.\n    \n    Change-Id: I3d72a34e6fc21fbe1d7331954695b1e3e1b67816\n',20,3,'Fujitsu'),(276170,229,1715,'2015-04-14 16:00:37','2015-04-08 15:00:27','    Fix broken test_policy_IO_override test\n    \n    Since the existing check depends on how quickly the test\n    passes, it causes to the unpredictable behavior and may break\n    the test.\n    \n    This commit removes the unnecessary dependency on the\n    current time and leaves only the check that timestamp is\n    greater than 0.\n    \n    Change-Id: I3321e9aba0df52cb78523710b26f310f35801674\n    Closes-Bug: #1441599\n',1,2,'Mirantis'),(276171,229,1278,'2015-04-14 16:00:37','2015-03-24 13:54:00','    Add lowest option to swift-recon disk usage output\n    \n    Currently there is a \"--top\" option when running swift-recon for\n    disk usage stats. This option lists the x disks with the highest\n    disk usage in descending order.\n    \n    This feature adds a \"--lowest\" option which does the opposite and\n    lists the y disks with lowest disk usage in ascending order.\n    \n    Have also updated the docs section with --top and --lowest options\n    \n    Change-Id: Ic15d407fe010a31995c2bdd9fb88548a1057f569\n',27,3,'HP'),(276172,229,4080,'2015-04-14 16:00:37','2015-04-12 22:35:56','    Add test for swift_recon.disk_usage\n    \n    Change-Id: I4cab7aa6df3f0e1933e52ee5dbbb829f30604f10\n',50,0,'Red Hat'),(276173,229,4075,'2015-04-14 16:00:37','2015-03-27 15:50:38','    Check if REST API version is valid\n    \n    Swift doesn\'t check if the used API version is valid. Currently there\n    is only one valid REST API version, but that might change in the\n    future.\n    \n    This patch enforces \"v1\" or \"v1.0\" as the version string when accessing\n    account, containers and objects.\n    \n    The list of accepted version strings can be manually overridden using a\n    comma-separated list in swift.conf to make this backward-compatible.\n    The constraint loader has been modified slightly to accept strings as\n    well as integers.\n    \n    Any request to an account, container, and object which does not\n    provide the correct version string will get a 400 BadRequest response.\n    \n    The allowed api versions are by default excluded from /info.\n    \n    Co-Authored-By: Christian Schwede <christian.schwede@enovance.com>\n    Co-Authored-By: John Dickinson <me@not.mn>\n    \n    Closes Bug #1437442\n    \n    Change-Id: I5ab6e236544378abf2eab562ab759513d09bc256\n',110,10,'Rackspace'),(276174,229,229,'2015-04-14 16:00:37','2015-03-23 12:00:28','    2.3.0 authors and changelog updates\n    \n    Change-Id: I5a46437a718e2a29fd289bde7bec45db4ee873bd\n',75,4,'SwiftStack'),(276175,229,4075,'2015-04-14 16:06:24','2015-04-14 15:24:58','    fixup random test failure\n    \n    Change-Id: I053cec441623e7556d6cdfbc1d271c5cdf21aa8b\n',2,1,'Rackspace'),(276176,4080,4080,'2015-04-15 06:36:06','2015-04-14 10:52:36','    More tests for swift recon\n    \n    Change-Id: I8d568c0f6fbe1c01d97491740aebf299deb63732\n',120,0,'Red Hat'),(276177,978,47,'2015-04-14 21:55:47','2015-04-15 09:43:26','    Fix untranslatable string\n    \n    The word \"number\" is not marked for translation, we cannot just add\n    it this way to a string.\n    Instead create two separate strings.\n    \n    Change-Id: I0396f1d7405987ed1c57f0344e1c5ebeca30a2e3\n    Closes-Bug: #1444327\n',10,4,'SUSE'),(276179,441,441,'2015-04-15 06:07:23','2015-04-15 06:07:23','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I15b1d475d157bfb74ff7a68400cf06596488aa93\n',538,344,NULL),(276181,1278,1278,'2015-04-15 13:44:42','2015-04-15 11:32:32','    Update swift-recon doc with more options\n    \n    The swit-recon tool has had several functional additions\n    added recently but not all of these have been added to the docs.\n    \n    This change adds the following options to the manpages:\n    \n      --human-readable\n      --validate-servers\n      --sockstat\n      --driveaudit\n      --region\n      --timeout\n    \n    Also fixes a typo on line 78 (cop -> copy)\n    \n    Change-Id: Id083b32a60473ad5a2b9ac1d092528d230521c86\n',13,1,'HP'),(276183,441,441,'2015-04-16 06:06:35','2015-04-16 06:06:35','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I48ba06f4801ff2d7856d67e74d2b1f76c550fcf4\n',41,31,NULL),(276184,978,4075,'2015-04-15 23:33:32','2015-04-15 15:31:06','    Don\'t apply the wrong Etag validation to rebuilt fragments\n    \n    Because of the object-server\'s interaction with ssync sender\'s\n    X-Backend-Replication-Headers when a object (or fragment archive) is\n    pushed unmodified to another node it\'s ETag value is duped into the\n    recieving ends metadata as Etag.  This interacts poorly with the\n    reconstructor\'s RebuildingECDiskFileStream which can not know ahead of\n    time the ETag of the fragment archive being rebuilt.\n    \n    Don\'t send the Etag from the local source fragment archive being used as\n    the basis for the rebuilt fragent archive\'s metadata along to ssync.\n    \n    Change-Id: Ie59ad93a67a7f439c9a84cd9cff31540f97f334a\n',143,34,'Rackspace'),(276186,5599,5599,'2015-04-15 05:55:08','2015-04-14 23:22:14','    Small minor refactor on ec diskfile\n    \n    To be more helpful, add an inline comment and remove\n    unnecessary assignment.\n    \n    Change-Id: Ia9c6993dfa03c238736955de8b0f5c1a7d5d1b65\n',2,1,'NTT'),(276188,4080,5599,'2015-04-16 12:55:40','2015-04-15 11:25:13','    Fix best response to return correct status\n    \n    Current best response could return \"503 Internal Server Error\".\n    However, \"503\" means \"Service Unavailable\". (The status int of\n    Internal Server Error is 500)\n    \n    This patch fixes the response status as \"503 Service Unavailable\"\n    \n    Change-Id: I88b8c52c26b19e9e76ba3375f1e16ced555ed54c\n',3,4,'NTT'),(276190,1456,2749,'2015-04-16 09:20:14','2015-03-12 23:18:33','    More user-friendly output for object metadata\n    \n    Split out system, user and other metadata in swift-object-info. Print\n    every position line by line instead of raw dict representation, so it\n    would be easier to parse with tools such as grep.\n    \n    Co-Authored-By: Ricardo Ferreira <ricardo.sff@gmail.com>\n    Co-Authored-By: Kamil Rykowski <kamil.rykowski@intel.com>\n    \n    Change-Id: Ia78da518c18f7e26016700aee87efb534fbd2040\n    Closes-Bug: #1428866\n',125,12,'BinaryFlows'),(276192,229,229,'2015-04-20 14:53:51','2015-04-20 14:53:51','    updated .gitreview to simplify process\n    \n    Change-Id: Ibb6f76d36c002c741212299c8914e4c65a126c02\n',1,0,'SwiftStack'),(276193,5596,5596,'2015-05-04 20:17:12','2015-04-29 21:33:44','    initial import of go code\n    \n    Better build instructions coming...  For now, get yourself a saio with go\n    installed then do something like:\n    \n        mkdir -p $GOPATH/src/github.com/openstack\n        ln -s ~/swift $GOPATH/src/github.com/openstack/swift\n        cd $GOPATH/src/github.com/openstack/swift/go\n        make get test all\n    \n    Change-Id: Ie26249355eccb7d1c37565c42cf5df028b54a95f\n',8362,0,'Rackspace'),(276194,5596,5596,'2015-05-05 17:58:18','2015-05-05 17:41:50','    Don\'t quarantine on missing data files\n    \n    Fixes a couple of places where race conditions can cause unnecessary\n    quarantines.\n    \n    Change-Id: I3a8509bb3055ab681a42479ff827e8a48172ea31\n',7,2,'Rackspace'),(276195,5596,5596,'2015-05-09 01:59:04','2015-05-09 01:57:20','    go: clean up and add to obj tests\n    \n    Add a few object server tests and clean up the existing ones.\n    Still a lot more tests needed.\n    \n    Change-Id: Ib13dc096a0e7f08b611e5997e21cbc716fd08379\n',205,86,'Rackspace'),(276197,5596,5596,'2015-05-14 22:38:08','2015-05-14 22:38:08','    go: lower-case incoming ETag\n    \n    Lower-case request ETag on PUT, so comparisons work correctly.\n    \n    Change-Id: I769b8ef81dae0d9cb7c9da3753b98b8e00d0293f\n',52,1,'Rackspace'),(276198,5596,5596,'2015-05-26 19:16:33','2015-05-15 15:40:32','    go: log 499 on client early disconnect\n    \n    If a client disconnects early, hummingbird currently returns a 500 status\n    while python-swift returns 499.\n    \n    This really only affects what gets logged.\n    \n    Change-Id: I9d6fbf4a10cb7b876c142d8d6320a2974d239e00\n',49,5,'Rackspace'),(276199,5596,5596,'2015-05-15 16:49:45','2015-05-15 16:45:46','    go: check error returns part 1\n    \n    Check error returns for a few places we\'d ignored them.\n    \n    There will be a few of these - I think it\'s better to clean up in small\n    increments rather than one giant commit that\'s hard to get merged.\n    \n    Change-Id: I69c00c0cf4bba552ad73176fdd75874ff25f0a94\n',59,28,'Rackspace'),(276201,5596,5596,'2015-05-15 18:16:39','2015-05-15 17:55:53','    go: replace ghetto getpwnam with os/user\n    \n    Parsing /etc/passwd was always goofy, but some stuff that came up when\n    googling \"golang getpwnam\" led me to believe this functionality just\n    didn\'t exist in the go standard library.\n    \n    Then I ran across os/user a few days ago, which is exactly what\'s needed.\n    \n    Change-Id: I937f0a1397c70dc3f7b5b77d939deb10d6c7c480\n',46,30,'Rackspace'),(276203,5596,5596,'2015-05-28 22:19:33','2015-05-18 22:24:46','    go: object server SYNC report newer files\n    \n    Have the object server stick a header on the conflict response to SYNC when a\n    newer file exists.\n    \n    This allows the replicator to remove local files that are out of date, and maybe\n    later it can be smart enough to pull down the newer file on non-handoff\n    replication.\n    \n    Also adds quarantine for file audit errors on replicate.\n    \n    Change-Id: If0b83f4899e89a43c5f732008848b62165c355df\n',176,26,'Rackspace'),(276205,5596,5596,'2015-06-09 16:17:42','2015-05-31 02:26:02','    go: ring self-reloading\n    \n    Add automatic self-reloading to the ring.\n    \n    Change-Id: Ie07fd64a6179f094fd422b31865bf868618017bf\n',224,90,'Rackspace'),(276207,5596,5596,'2015-06-10 03:51:50','2015-06-10 03:51:50','    go: fix output of /recon/mounted\n    \n    /recon/mounted didn\'t match swift\'s, which made drivescout not work.\n    \n    Change-Id: I8fd8825a93a177871bce941b196b7be7079f11a1\n',13,1,'Rackspace'),(276209,5596,5596,'2015-06-11 20:00:27','2015-06-11 20:00:27','    go: make full disk log message debug-level\n    \n    When a drive fills up, having that error-level log can make a lot of noise.\n    \n    Change-Id: I9475138b5d8819f69d340706b94702442ede8408\n',1,1,'Rackspace'),(276210,5596,5596,'2015-06-10 20:35:35','2015-06-10 20:35:35','    go: limit replication per disk\n    \n    Change the concurrency model used by the object replicator.\n    \n    It now launches a goroutine per drive, then uses a channel as a semaphore\n    around single partitions to limit concurrency.\n    \n    The idea is to prevent replication workers from stacking up on a bad disk,\n    since it\'ll make that disk even worse, and also tie up the whole replicator.\n    \n    Change-Id: I5bbee41398e60ee906df607e9a0d41503d6a9f9a\n',20,42,'Rackspace'),(276212,5596,5596,'2015-06-18 18:34:54','2015-06-18 08:49:58','    go: document replication\n    \n    A little writeup on how the hummingbird replicator differs from python-swift.\n    \n    Change-Id: I26c5c680bf866590f1ee7cbb4f1cd414af1aa5ca\n',41,0,'Rackspace'),(276214,4067,4067,'2015-06-23 19:10:37','2015-06-17 19:47:52','    go: check for empty path parts in object server\n    \n    Change-Id: Ic8d981cef147bd8fc9b99217211e0fc24434fb41\n',71,0,'Rackspace'),(276215,4067,4067,'2015-06-24 19:04:09','2015-06-24 19:03:57','    go: make use of filepath.Join() in objectserver main\n    \n    Change-Id: I0a0c9c4cf6450a1c837a3e893d5a89d0d0157b96\n',3,3,'Rackspace'),(276217,4067,4067,'2015-06-24 18:46:09','2015-06-24 18:46:09','    go: check for content length parse error on gets in object server\n    \n    Change-Id: I9fd8b189dd04d52ddc8555c144110b18bb3f1c78\n',5,0,'Rackspace'),(276219,5596,5596,'2015-06-18 20:01:01','2015-06-05 21:46:51','    go: restructure cmd/hummingbird.go\n    \n    Restructure the command-line parsing to use the flag library.\n    \n    I expect there will be more work in this area, but for now this allows us to\n    propogate flags like --once down to where the daemons actually run.\n    \n    The daemons can be ran in the foreground with \"hummingbird object\",\n    \"hummingbird object-replicator\", etc.  All daemons accept the flags -c [config],\n    to specify the config file and -d, which tells it to close stdout after\n    starting.\n    \n    So \"hummingbird start object\" now runs \"hummingbird object -d -c [config]\" in\n    the background.\n    \n    This change also much improves the output of \"hummingbird -h\"\n    \n    Change-Id: Ia3bae49b3a56936ba31356cbe53b8741bed068ec\n',188,133,'Rackspace'),(276221,5596,5596,'2015-06-23 17:15:59','2015-06-21 00:06:05','    go: add a few unit tests\n    \n    Add a couple of unit tests.\n    \n    Rename cutils.go to xattr.go, since that\'s the only thing in there now, and\n    it no longer uses C.\n    \n    Change-Id: I7fac62a22a80c9880ca71a6e7561ae185d320a7b\n',149,55,'Rackspace'),(276223,5596,5596,'2015-06-19 07:35:57','2015-06-11 19:43:14','    go: always asynchronous finalize PUT and DELETE\n    \n    Make container updates, hash dir cleanup, and hash invalidation always\n    asynchronous.  fsyncs are always synchronous now- we can revisit that\n    later.\n    \n    Change-Id: I3a96ee765846ece770bd9f76a2f409a34b1862c4\n',35,47,'Rackspace'),(276225,5596,5596,'2015-06-29 21:54:44','2015-06-29 21:50:45','    go: fix unpickling problem\n    \n    There\'s a problem where the pickle stack winds up containing a subslice of\n    itself when creating a new list type object.  Since they point to the same\n    memory, when it modifies the stack, it also modifies the item in the stack,\n    which is wrong.\n    \n    Fix it by making a copy of that subslice and pushing it instead.\n    \n    I looked around, but nothing else seems to retain a reference to state.mark().\n    \n    Change-Id: Ia94b1f73d3e50e6597f2e77da5bf0306a4a6a8c1\n',17,1,'Rackspace'),(276227,5596,5596,'2015-06-20 22:17:43','2015-06-19 13:53:28','    go: fix x-delete-at updates\n    \n    Fix X-Delete-At updates, which were broken in a number of ways.\n    \n    Change-Id: I702ecf1b30947d1c29def651e1112945de67c925\n',336,126,'Rackspace'),(276229,4067,4067,'2015-06-30 18:14:40','2015-06-29 18:20:11','    go: check err on call to get free space on object puts\n    \n    Change-Id: I6749fb755154028330c93d0e86cef5b4174c645d\n',5,1,'Rackspace'),(276230,4067,4067,'2015-06-30 18:12:20','2015-06-29 18:32:05','    go: check err on call to get free space on object sync\n    \n    Change-Id: Icf00c6c5347a26f9ad7b19f6f3ca88384271c0bf\n',5,1,'Rackspace'),(276232,5596,5596,'2015-06-30 23:06:53','2015-06-30 23:02:03','    go: return metadata as map[string]string\n    \n    Just build a new map with the stricter type when reading in metadata. It\'s not\n    very expensive and it gets rid of goofy .(string) casts all over the place.\n    \n    Change-Id: I4c1d5b2e57bd1343ac1031d72a275b219eafbeb0\n',45,49,'Rackspace'),(276234,4067,4067,'2015-06-30 19:29:26','2015-06-30 19:16:56','    go: make unpickle mark() return error if mark is not found\n    \n    Change-Id: I7b10aaff8bd738cc26e2646ffa58f47004247d90\n',33,7,'Rackspace'),(276236,4067,4067,'2015-06-26 21:48:22','2015-06-26 21:48:22','    go: add targeted replication\n    \n    Change-Id: I81fd3cd6d522e482cd3b6712e21b61673065eb73\n',176,19,'Rackspace'),(276238,5599,1141,'2015-04-20 01:22:24','2015-04-15 17:34:48','    Bump PyECLib version from 1.0.3 to 1.0.7\n    \n    In addition to fixing several bugs, 1.0.7 eliminates the need for a\n    few work-around code in Swift.  This code was only to hide issues in\n    the current version, but it also ends up breaking some third-party\n    integration.  In order to enable expected functionality and to avoid\n    dealing with deprecation issues right from the beginning, we need to\n    bump the minium PyECLib requirement to 1.0.7.\n    \n    Change-Id: I03e059e7335656c22be28ffd6157b56e13bdfc1b\n',1,1,'Intel'),(276239,5653,5653,'2015-04-20 17:03:25','2015-04-20 17:03:25','    Included step in development_saio.rst for installing dependencies in requirements.txt.\n    \n    Change-Id: I6ed1704148e5ae1e3164d10080c350d81856f7a9\n',1,1,'IBM'),(276241,869,869,'2015-04-20 16:47:10','2015-04-20 16:47:10','    SAIO instructions: ensure ~/bin exists before copying into it\n    \n    Change-Id: I16cd211b00b529ccc4b46f6b10497c32b6741896\n',1,0,'SwiftStack'),(276243,229,5599,'2015-04-20 16:48:10','2015-04-20 00:18:25','    Use reconstruct insetad of decode/encode\n    \n    With bumping PyECLib up to 1.0.7 on global requirements,\n    we can use the \"reconstruct\" function directly instead\n    of the current hack doing decode/encode on reconstructor.\n    That is because the hack was for treating PyECLib < 1.0.7\n    (strictly jearsure scheme) reconstruction bug so we don\'t\n    have to do decode/encode anymore.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Change-Id: I69aae495670e3d0bdebe665f73915547a4d56f99\n',41,8,'NTT'),(276245,869,5654,'2015-04-16 11:41:55','2015-02-19 17:38:10','    Fix conflict SLO reponse\n    \n    This patch fixes Swift to respond \"409 Conflict\"\n    when a segment object path of the manifest on PUT SLO\n    is same as requested object path. It is because\n    the request will overwrite the segment and then it\n    will absolutely cause \"409 Conflict\" on GET SLO.\n    \n    e.g.:\n    \n    request:\n    PUT \"http://hostname/v1/AUTH_account/container/segment_object_00?multipart-manifest=put\"\n    \n    manifest file:\n    [{\"path\" : \"container/segment_object_00\", \"etag\" : \"<etag of segment_object_00>\", \"size_bytes\" : <size of segment_object_00>},\n    {\"path\" : \"container/segment_object_01\", \"etag\" : \"<etag of segment_object_01>\", \"size_bytes\" : <size of segment_object_01>},\n    {\"path\" : \"container/segment_object_02\", \"etag\" : \"<etag of segment_object_02>\", \"size_bytes\" : <size of segment_object_02>}]\n    \n    Change-Id: I4f4f7b9dbeb6a7c355b801c7e0ae560aa19a70b4\n    Closes-Bug: 1417936\n',57,1,'Nippon Telegraph and Telephone Corporation'),(276247,869,869,'2015-04-22 15:35:32','2015-04-20 12:17:56','    Make RingBuilders deep-copy-able\n    \n    We used to be able to deep-copy RingBuilder objects, but the addition\n    of debug logging (8d3b3b2) broke that since you can\'t deep-copy a\n    Python logger. This commit fixes that.\n    \n    Swift doesn\'t really deep-copy RingBuilders anywhere, but third-party\n    code might.\n    \n    Change-Id: If8bdadd93d9980db3d8a093f32d76ca604de9301\n',34,2,'SwiftStack'),(276249,4075,4075,'2015-04-23 19:39:16','2015-04-23 19:39:16','    Simplify ring.builder.RingBuilder.__deepcopy__\n    \n    Only container classes (lists, sets, dicts, graphs, collections,\n    etc) need to track objects they deepcopy in the memo dict -\n    particularly when they may contain other containers!  As they\n    recreate a new container with the same items as themselves, they\'ll\n    reference the memo for each item they contain before making a\n    deepcopy of it, and place a reference to the copied item into memo\n    after they do.  Trying to help out some other container class in\n    this endeavor by attempting to add ourselves to the memo dict in\n    some useful manor on their behalf however; is not helpful.\n    \n    All we need to do to make sure we\'re being a good __deepcopy__\n    implementation is make sure we pass on memo to our calls of deepcopy\n    so that other container classes can avoid making additional\n    deepcopy\'s of our containers if they already have a memorized copy\n    (which would be odd since unique instances of RingBuilders aren\'t\n    expected to share state, but hey - python doesn\'t have private\n    attributes so you never know!)\n    \n    Change-Id: Ifac444dffbf79d650b2d858f6282e05d8ea741a0\n',1,3,'Rackspace'),(276251,978,978,'2015-04-16 14:34:02','2015-04-15 23:03:21','    Make the reaper use same timestamp for replica deletes\n    \n    The account reaper is using a unique timestamp when deleting\n    replicas of the same resource. This will result in unnecessary\n    replication traffic after reaping.\n    \n    This patch makes the reaper use a single timestamp per resource.\n    \n    Probe test is modified to check that delete times are equal\n    across replicas before replicators run.\n    \n    test_direct_client.py is modified to check that it uses explicit\n    timestamp when passed to direct_delete_[object|container]\n    methods.\n    \n    Drive-by bug fixes in the probe test e.g. it was not sending\n    X-Backend-Storage-Policy-Index when doing a direct GET to check\n    object state, so the 404s being verified could in fact be due\n    to diskfile not existing rather than diskfile being deleted.\n    \n    Closes-Bug: 1442879\n    Change-Id: I8bab22d66308bb9d3294e1e0def017c784228423\n',150,26,'HP'),(276253,978,978,'2015-04-21 14:13:25','2015-02-26 15:16:22','    Fix tempauth acl checks when simplejson has no speedups\n    \n    As documented in linked bug report, tempauth unit tests\n    were seen to fail on a system where simplejson was\n    installed but without the speedups extension. This\n    is because the tempauth account acl validation checks\n    that values are type str, but without the speedups\n    extension the json parser is returning unicode objects.\n    \n    Fix is to have the acl validator tolerate those objects\n    being unicode or str.\n    \n    Also change common/bufferedhttp.py to coerce ring device\n    to type str when constructing a path, in order to avoid\n    a UnicodeDecodeError when httplib sends a message that\n    has non-ascii header values.\n    \n    Change-Id: I01524282cbaa25dc4b6dfa09f3f4723516cdba99\n    Closes-Bug: 1425776\n',73,30,'HP'),(276255,239,239,'2015-04-16 22:08:47','2015-04-16 22:08:47','    Set default branch to stable/kilo\n    \n    Open stable/kilo branch by setting defaultbranch for git-review.\n    \n    Change-Id: I81bcda30f99173416eaaa3f1d42da32f3ab5b6d2\n',1,0,'OpenStack Foundation'),(276256,229,4075,'2015-04-21 11:28:40','2015-04-15 15:31:06','    Don\'t apply the wrong Etag validation to rebuilt fragments\n    \n    Because of the object-server\'s interaction with ssync sender\'s\n    X-Backend-Replication-Headers when a object (or fragment archive) is\n    pushed unmodified to another node it\'s ETag value is duped into the\n    recieving ends metadata as Etag.  This interacts poorly with the\n    reconstructor\'s RebuildingECDiskFileStream which can not know ahead of\n    time the ETag of the fragment archive being rebuilt.\n    \n    Don\'t send the Etag from the local source fragment archive being used as\n    the basis for the rebuilt fragent archive\'s metadata along to ssync.\n    \n    Closes-Bug: 1446800\n    Change-Id: Ie59ad93a67a7f439c9a84cd9cff31540f97f334a\n',143,34,'Rackspace'),(276257,229,1141,'2015-04-21 11:29:25','2015-04-15 17:34:48','    Bump PyECLib version from 1.0.3 to 1.0.7\n    \n    In addition to fixing several bugs, 1.0.7 eliminates the need for a\n    few work-around code in Swift.  This code was only to hide issues in\n    the current version, but it also ends up breaking some third-party\n    integration.  In order to enable expected functionality and to avoid\n    dealing with deprecation issues right from the beginning, we need to\n    bump the minium PyECLib requirement to 1.0.7.\n    \n    Closes-Bug: 1446727\n    Change-Id: I03e059e7335656c22be28ffd6157b56e13bdfc1b\n',1,1,'Intel'),(276258,229,5599,'2015-04-21 11:29:36','2015-04-20 00:18:25','    Use reconstruct insetad of decode/encode\n    \n    With bumping PyECLib up to 1.0.7 on global requirements,\n    we can use the \"reconstruct\" function directly instead\n    of the current hack doing decode/encode on reconstructor.\n    That is because the hack was for treating PyECLib < 1.0.7\n    (strictly jearsure scheme) reconstruction bug so we don\'t\n    have to do decode/encode anymore.\n    \n    Closes-Bug: 1446801\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Change-Id: I69aae495670e3d0bdebe665f73915547a4d56f99\n',41,8,'NTT'),(276259,229,47,'2015-04-21 11:29:50','2015-04-20 11:15:35','    Release Import of Translations from Transifex\n    \n    Manual import of Translations from Transifex. This change also removes\n    all po files that are less than 66 per cent translated since such\n    partially translated files will not help users.\n    \n    This updates also recreates all pot (translation source files) to\n    reflect the state of the repository.\n    \n    This change needs to be done manually since the automatic import does\n    not handle the proposed branches and we need to sync with latest\n    translations.\n    \n    Note: This is part of importing of translations, there are no new\n    translations for this project, thus only the pot file gets updated.\n    \n    Change-Id: I0cbfdae3bd1662da54c58e91a13f49419eba9b2d\n',539,345,'SUSE'),(276261,5623,5623,'2015-04-29 12:19:40','2015-04-29 12:11:59','    Fix incorrect passing of file object to fsync()\n    \n    swift.common.utils.fsync() requires a file descriptor as argument\n    but file object handle was being passed.\n    \n    Change-Id: I316b58f6bc37de0945eff551e4e50565653664f5\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n',3,4,'Red Hat'),(276263,832,4080,'2015-04-28 11:48:49','2015-04-27 08:52:18','    Add missing docstring in direct_client\n    \n    Added a missing docstring to the direct_delete_container method.\n    \n    Also checked other docstrings in the same file and fixed a wrong docstring\n    element in direct_delete_object. Added raises: docstring entry to all methods\n    that raise an Exception.\n    \n    Change-Id: If463a0f9ddff3fe2d13f6d97fcfa955e91d0f01f\n',19,2,'Red Hat'),(276265,978,978,'2015-04-28 10:53:05','2015-04-28 10:45:50','    Fix intermittent container replicator test failure\n    \n    Intermittent failure of this test could be due to\n    insufficient time elapsing between either the local\n    and remote db\'s being created or during the\n    debug_timing calls. This patch forces greater timestamp\n    separation and forces debug_timing to always log timings.\n    \n    Also add message to the failign assertion so if this does\n    fail again we get some clue as to why.\n    \n    Closes-Bug: 1369663\n    \n    Change-Id: I4b69b2e759d586a14abd0931a68dbdf256d57c32\n',15,10,'HP'),(276267,869,869,'2015-04-21 18:42:32','2015-04-21 17:38:04','    Bulk upload: treat user xattrs as object metadata\n    \n    Currently, if you PUT a single object, then you can also associate\n    metadata with it by putting it in the request headers, prefixed with\n    \"X-Object-Meta\". However, if you\'re bulk-uploading objects, then you\n    have no way to assign any metadata.\n    \n    The tar file format* allows for arbitrary UTF-8 key/value pairs to be\n    associated with each file in an archive (as well as with the archive\n    itself, but we don\'t care about that here). If a file has extended\n    attributes, then tar will store those as key/value pairs.\n    \n    This commit makes bulk upload read those extended attributes, if\n    present, and convert those to Swift object metadata. Attributes\n    starting with \"user.meta\" are converted to object metadata, and\n    \"user.mime_type\"** is converted to Content-Type.\n    \n    For example, if you have a file \"setup.py\":\n    \n        $ setfattr -n user.mime_type -v \"application/python-setup\" setup.py\n        $ setfattr -n user.meta.lunch -v \"burger and fries\" setup.py\n        $ setfattr -n user.meta.dinner -v \"baked ziti\" setup.py\n        $ setfattr -n user.stuff -v \"whee\" setup.py\n    \n    This will get translated to headers:\n    \n        Content-Type: application/python-setup\n        X-Object-Meta-Lunch: burger and fries\n        X-Object-Meta-Dinner: baked ziti\n    \n    Swift will handle xattrs stored by both GNU and BSD tar***. Only\n    xattrs user.mime_type and user.meta.* are processed; others are\n    ignored.\n    \n    This brings bulk upload much closer to feature-parity with non-bulk upload.\n    \n    * The POSIX 1003.1-2001 (pax) format, at least. There are a few\n      different, mutually-incompatible tar formats out there, because of\n      course there are. This is the default format on GNU tar 1.27.1 or\n      later.\n    \n    ** http://standards.freedesktop.org/shared-mime-info-spec/latest/ar01s02.html#idm140622087713936\n    \n    *** Even with pax-format tarballs, different encoders store xattrs\n        slightly differently; for example, GNU tar stores the xattr\n        \"user.rubberducky\" as pax header \"SCHILY.xattr.user.rubberducky\",\n        while BSD tar (which uses libarchive) stores it as\n        \"LIBARCHIVE.xattr.user.rubberducky\". One might wonder if this is\n        some programmer\'s attempt at job security.\n    \n    Change-Id: I5e3ce87d31054f5239e86d47c45adbde2bb93640\n',129,1,'SwiftStack'),(276269,441,441,'2015-05-05 06:08:09','2015-05-05 06:08:09','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I9b0156c7fc315182d80604bf353586455bbc34d1\n',61,462,NULL),(276270,4075,4075,'2015-04-27 14:01:32','2015-04-27 13:29:50','    Fix account replication during pre-storage-policy upgrade\n    \n    Old account schemas don\'t send the storage_policy_index key for container rows\n    during replication, and if the recieving end is already running an upgraded\n    server it is surprised with a KeyError.  Normally this would work itself out\n    if the old schema recieved any updates from container layer, or a new\n    container is created, or requires a row sync from another account database -\n    but if the account databases have rows out of sync and there\'s no activity in\n    the account otherwise, there\'s nothing to force the old schemas to be\n    upgraded.\n    \n    Rather than force the old schema that already has a complete set of container\n    rows to migrate even in the absense of activity we can just fill in default\n    legacy value for the storage policy index and allow the accounts to get back\n    in sync and migrate the next time a container update occurs.\n    \n    FWIW, I never able to get a cluster upgrade to get stuck in this state without\n    some sort of account failure that forced them to get their rows out of sync\n    (in my cause I just unlinked a pending and then made sure to force all my\n    account datbases to commit pending files before upgrading - leading to an\n    upgraded cluster that absolutly needed account-replication to solve a row\n    mismatch for inactive accounts with old schemas)\n    \n    Closes-Bug #1424108\n    \n    Change-Id: Iaf4ef834eb24f0e11a52cc22b93a864574fabf83\n',41,1,'Rackspace'),(276272,4080,4080,'2015-05-06 19:53:09','2015-05-06 19:53:09','    Add missing statsd metrics section for object-reconstructor\n    \n    Change-Id: Id3f98e5f637ff537a387262b40f21c05876fca91\n',25,0,'Red Hat'),(276273,42,42,'2015-05-07 13:17:15','2015-05-07 13:16:15','    Spell \"rebalance\" right in swift-ring-builder.1\n    \n    See Red Hat bug #1218269.\n    \n    Change-Id: I814eb4b3c0821f5a8df5feea2bda3a964aace536\n',1,1,'Red Hat'),(276274,978,5652,'2015-05-07 14:28:35','2015-05-05 12:31:22','    X-Auth-Token should be a bytestring.\n    \n    Change-Id: I2aa941d74883e17e9548b0144a4a2e2db33aba95\n    Closes-Bug: 1451773\n',5,1,'independent'),(276276,1111,1111,'2015-05-08 18:04:19','2015-05-08 08:41:39','    Update my mailmap entry\n    \n    Change-Id: I5d21a55d0fa4cab6eaa6ff426819aa1dc997de2f\n',3,2,'Red Hat'),(276277,869,869,'2015-04-16 11:42:12','2015-04-16 11:42:12','    Functional test for SLO PUT overwriting one of its own segments\n    \n    Change-Id: I4855816848f4fdb148d0b82735cf79bc68429617\n',20,0,'SwiftStack'),(276279,869,869,'2015-05-04 15:08:51','2015-05-04 15:08:51','    Bump up a timeout in a test\n    \n    Got a slow crappy VM like I do? You might see this fail\n    occasionally. Bump up the timeout a little to help it out.\n    \n    Change-Id: I8c0e5b99012830ea3525fa55b0811268db3da2a2\n',1,1,'SwiftStack'),(276281,869,869,'2015-05-08 17:48:48','2015-05-08 15:55:14','    Remove workaround for old eventlet version\n    \n    Swift now requires eventlet >= 0.16.1, so we can get rid of this\n    workaround for a bug in eventlet 0.9.16.\n    \n    Change-Id: I4a1200b9bd9266896a704a840fda0d1b720bc86d\n',2,91,'SwiftStack'),(276282,2470,2470,'2015-05-08 14:24:58','2015-05-08 11:45:12','    Properly re-raise exceptions in proxy_logging\n    \n    Previously, this could encounter TypeErrors, presumably because\n    sys.exc_clear() was called somewhere in the block of code between\n    catching the exception and re-raising.\n    \n    Related-Bug: 1181146\n    Change-Id: Iadeea3f61e70bf83dc0eb063fdb27edd16f3ca32\n',3,1,'SwiftStack'),(276284,5623,5623,'2015-03-02 14:39:58','2015-01-20 12:14:32','    Allow rsync to use compression\n    \n    From rsync\'s man page:\n    -z, --compress\n    With this option, rsync compresses the file data as it is sent to the\n    destination machine, which reduces the amount of data being transmitted --\n    something that is useful over a slow connection.\n    \n    A configurable option has been added to allow rsync to compress, but only\n    if the remote node is in a different region than the local one.\n    \n    NOTE: Objects that are already compressed (for example: .tar.gz, .mp3)\n    might slow down the syncing process.\n    \n    On wire compression can also be extended to ssync later in a different\n    change if required. In case of ssync, we could explore faster\n    compression libraries like lz4. rsync uses zlib which is slow but offers\n    higher compression ratio.\n    \n    Change-Id: Ic9b9cbff9b5e68bef8257b522cc352fc3544db3c\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n',163,24,'Red Hat'),(276286,4087,4087,'2015-05-12 15:21:13','2015-05-12 15:21:13','    Remove 1 line of dead code from EC reconstructor\n    \n    Assuming nobody intentionally left this in here for some reason...\n    \n    Change-Id: I4bf43bb3828e062c0342557243076ed62d6790f4\n',0,1,'Intel'),(276288,4075,4075,'2015-05-20 17:50:07','2015-05-20 17:50:07','    Add Swift Inspector to assoicated projects\n    \n    Change-Id: I5b5448674ea455119a51509ab5e7cd11a764b5a7\n',1,0,'Rackspace'),(276289,978,978,'2015-05-13 11:05:13','2015-05-01 13:02:29','    Cleanup and extend end to end ssync tests\n    \n    Extends the existing end to end ssync tests with\n    a test using replication policy.\n    \n    Also some cleanup and improvements to the test framework e.g. rather\n    than faking the connection between sender and receiver, use a real\n    connection and wrap it to capture traffic for verification.\n    \n    Change-Id: Id71d2eb3fb8fa15c016ef151aacf95f97196a902\n',238,108,'HP'),(276291,5599,5599,'2015-05-22 16:58:04','2015-05-22 16:58:04','    Add swift-durability-calculator line to docs\n    \n    This commits add a line (link and small doc) for\n    swift-durability-calculator which provides a browser based\n    durability calculation tool to docs as an associated project.\n    \n    Change-Id: I4ea8015f512616dc25072080bef79b8734971ccf\n',1,0,'NTT'),(276293,869,869,'2015-05-26 11:38:57','2015-05-06 16:29:06','    EC: don\'t 503 on marginally-successful PUT\n    \n    On EC PUT in an M+K scheme, we require M+1 fragment archives to\n    durably land on disk. If we get that, then we go ahead and ask the\n    object servers to \"commit\" the object by writing out .durable\n    files. We only require 2 of those.\n    \n    When we got exactly M+1 fragment archives on disk, and then one\n    connection timed out while writing .durable files, we should still be\n    okay (provided M is at least 3). However, we\'d take our M > 2\n    remaining successful responses and pass that off to best_response()\n    with a quorum size of M+1, thus getting a 503 even though everything\n    worked well enough.\n    \n    Now we pass 2 to best_response() to avoid that false negative.\n    \n    There was also a spot where we were getting the quorum size wrong. If\n    we wrote out 3 fragment archives for a 2+1 policy, we were only\n    requiring 2 successful backend PUTs. That\'s wrong; the right number is\n    3, which is what the policy\'s .quorum() method says. There was a spot\n    where the right number wasn\'t getting plumbed through, but it is now.\n    \n    Change-Id: Ic658a199e952558db329268f4d7b4009f47c6d03\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Closes-Bug: 1452468\n',125,49,'SwiftStack'),(276295,4087,4075,'2015-05-26 12:50:31','2015-04-17 16:30:30','    Exclude local_dev from sync partners on failure\n    \n    If the primary left or right hand partners are down, the next best thing\n    is to validate the rest of the primary nodes.  Where the rest should\n    exclude not just the left and right hand partners - but ourself as well.\n    \n    This fixes a accidental noop when partner node is unavailable and\n    another node is missing data.\n    \n    Validation:\n    \n    Add probetests to cover ssync failures for the primary sync_to nodes for\n    sync jobs.\n    \n    Drive-by:\n    \n    Make additional plumbing for the check_mount and check_dir constraints into\n    the remaining daemons.\n    \n    Change-Id: I4d1c047106c242bca85c94b569d98fd59bb255f4\n',118,49,'Rackspace'),(276297,5655,5655,'2015-05-26 11:23:58','2015-05-25 15:13:01','    fixup!Patch of \"parse_content_disposition\" method to meet RFC2183\n    \n    The spec of Content-Disposition does not require a space character after\n    comma: http://www.ietf.org/rfc/rfc2183.txt\n    \n    Change-Id: Iff438dc36ce78c6a79bb66ab3d889a8dae7c0e1f\n    Closes-Bug: #1458497\n',8,2,'independent'),(276299,1111,2470,'2015-05-27 13:38:45','2015-05-20 00:39:41','    Allow SLO PUTs to forgo per-segment integrity checks\n    \n    While manifests still require \'etag\' and \'size_bytes\' fields for each\n    segment (to catch user errors like \'etaf\' or \'size_btyes\'), an explicit\n    null for either will skip that particular integrity check and instead\n    use whatever value is retrieved when HEADing the segment. So, if a user\n    uploads a manifest like:\n    \n        [{\"path\": \"/con/obj_seg_1\", \"etag\": null, \"size_bytes\": 1048576},\n         {\"path\": \"/con/obj_seg_2\", \"etag\": \"etag2\", \"size_bytes\": null},\n         {\"path\": \"/con/obj_seg_3\", \"etag\": null, \"size_bytes\": null}]\n    \n    then the etag will only be verified for the /con/obj_seg_2 segment,\n    and the segment size will only be verified for the /con/obj_seg_1\n    segment. However, the manifest that\'s ultimately stored (and can be\n    retrieved with a ?multipart-manifest=get query-string) will still look\n    like:\n    \n        [{\"name\": \"/con/obj_seg_1\", \"hash\": \"etag1\", \"bytes\": 1048576, ...},\n         {\"name\": \"/con/obj_seg_2\", \"hash\": \"etag2\", \"bytes\": 1048576, ...},\n         {\"name\": \"/con/obj_seg_3\", \"hash\": \"etag3\", \"bytes\": 1234, ...}]\n    \n    This allows the middleware to continue performing integrity checks on\n    object GET.\n    \n    Change-Id: I2c4e585221387dd02a8679a50398d6b614407b12\n    DocImpact\n',172,16,'SwiftStack'),(276301,229,229,'2015-05-27 12:28:04','2015-05-27 12:28:04','    drop Python 2.6 testing support\n    \n    Change-Id: I78f21e5794e8ba7a095f03d279247516a241f555\n',3,4,'SwiftStack'),(276302,869,869,'2015-05-26 16:43:55','2015-05-26 16:43:55','    Remove simplejson from swift-recon\n    \n    Since we\'re dropping Python 2.6 support, we can rely on stdlib\'s json\n    and get rid of our dependency on simplejson.\n    \n    All swift-recon was doing with json was decoding a JSON response (from\n    the recon middleware) and printing it to the terminal. This still\n    works just fine.\n    \n    Change-Id: I28cf25a7c2856f230d4642c62fb8bf9c4d37e9e5\n',1,4,'SwiftStack'),(276304,441,441,'2015-05-28 06:08:12','2015-05-28 06:08:12','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I0c7b2bdb0edcc3bb3fa06903ec8457ca5e2dd688\n',527,527,NULL),(276306,5637,5637,'2015-05-19 05:30:40','2014-11-24 21:44:03','    Add process name checking into swift-init\n    \n    Swift-init uses pid files to detect existing swift processes by pid.\n    However, it mistakes an unrelated process for a swift process and makes\n    a wrong decision, when the unrelated process is running with pid written\n    in swift pid files.\n    This patch adds process name checking into swift-init and enable it to remove\n    invalid pid files in such situation.\n    \n    Change-Id: Ibca026bdfbdacdd92c8763e1eb15d98293c70656\n    Closes-Bug: #1327106\n',241,118,'NTT'),(276308,5599,5599,'2015-05-13 13:09:07','2015-04-24 02:15:36','    Remove confusable query string on post as copy\n    \n    Current post as copy routine (i.e. POST object with post_as_copy option\n    turned on) on Object Controller uses \"multipart-manifest\" query string\n    which is feeded to env[\'copy_hook\'] to decide which data (the manifest or\n    object pointed by the manifest) should be copied.\n    \n    However, the way using the query string will confuse operators looking at\n    logging system (or analyzing the log) because whole POST object requests\n    have \'multipart-manifest=get\' like as:\n    \n    POST /v1/AUTH_test/d4c816b24d38489082f5118599a67920/manifest-abcde%3Fmultipart-manifest%3Dget\n    \n    We cannot know whether the query string was added by hand\n    (from user) or not. In addition, the query isn\'t needed by the\n    backend conversation between proxy-server and object-server.\n    (Just needed by \"copy_hook\" on the proxy controller!)\n    \n    To remove the confusable query string and to keep the log to be clean,\n    this patch introduces new environment variable \"swift.post_as_copy\"\n    and changes proxy controller and the copy_hook to use the new env.\n    \n    This item was originally discussed at\n    https://review.openstack.org/#/c/177132/\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    \n    Change-Id: I0cd37520eea1825a10ebd27ccdc7e9162647233e\n',89,13,'NTT'),(276310,869,869,'2015-05-28 16:05:57','2015-05-28 15:30:47','    Remove simplejson from tests\n    \n    Since we\'re dropping Python 2.6 support, we can rely on stdlib\'s json\n    and get rid of our dependency on simplejson.\n    \n    This commit just takes simplejson out of the unit and functional\n    tests. They still pass.\n    \n    Change-Id: I96f17df81fa5d265395a938b19213d2638682106\n',6,4,'SwiftStack'),(276311,978,869,'2015-05-29 11:16:53','2015-05-26 16:19:54','    Remove simplejson from staticweb\n    \n    Since we\'re dropping Python 2.6 support, we can rely on stdlib\'s json\n    and get rid of our dependency on simplejson.\n    \n    This lets us get rid of some redundant Unicode encoding. Before, we\n    would take the container-listing response off the wire,\n    JSON-deserialize it (str -> unicode), then pass each of several fields\n    from each entry to get_valid_utf8_str(), which would encode it,\n    (unicode -> str), decode it (str -> unicode), and then encode it again\n    (unicode -> str) for good measure.\n    \n    The net effect was that each object\'s name would, in the proxy server,\n    go str -> unicode -> str -> unicode -> str.\n    \n    By replacing simplejson with stdlib json, we get a guarantee that each\n    container-listing entry\'s name, hash, content_type, and last_modified\n    are unicodes, so we can stop worrying about them being valid UTF-8 or\n    not. This takes an encode and decode out of the path, so we just have\n    str -> unicode -> str. While it\'d be ideal to avoid this, the first\n    transform (str -> unicode) happens when we decode the\n    container-listing response body (json.loads()), so there\'s no way out.\n    \n    Change-Id: I00aedf952d691a809c23025b89131ea0f02b6431\n',11,33,'SwiftStack'),(276313,978,978,'2015-05-27 15:01:11','2015-04-27 09:17:46','    Make SSYNC receiver return a reponse when initial checks fail\n    \n    The ssync Receiver performs some checks on request parameters\n    in initialize_request() before starting the exchange of missing\n    hashes and updates e.g. the destination device must be available;\n    the policy must be valid. Currently if any of these checks fails\n    then the receiver just closes the connection, so the Sender gets\n    no useful response code and noise is generated in logs by httplib\n    and wsgi Exceptions.\n    \n    This change moves the request parameter checks to the Receiver\n    constructor so that the HTTPExceptions raised are actually sent\n    as responses. (The \'connection close\' exception handling still\n    applies once the \'missing_check\' and \'updates\' handshakes are in\n    progress.)\n    \n    Moving initialize_request() revealed the following lurking bug:\n     * initialize_request() sets\n           req.environ[\'eventlet.minimum_write_chunk_size\'] = 0\n     * this was previously ineffective because the Response environ\n       had already been copied from Request environ before this value\n       was set, so the Response never used the value :/\n     * Now that it is effective (a good thing) it causes the empty string\n       yielded by the receiver when there are no missing hashes in\n       missing_checks() to be sent to the sender immediately. This makes\n       the Sender.readline() think there has been an early disconnect\n       and raise an Exception (a bad thing), as revealed by\n       test/unit/obj/test_ssync_sender.py:TestSsync.test_nothing_to_sync\n    \n    The fix for this is to simply make the receiver skip sending the empty\n    string if there are no missing object_hashes.\n    \n    Change-Id: I036a6919fead6e970505dccbb0da7bfbdf8cecc3\n',105,27,'HP'),(276315,978,978,'2015-05-27 15:01:43','2015-04-27 16:39:23','    Remove _ensure_flush() from SSYNC receiver\n    \n    The Receiver._ensure_flush() method in ssync_receiver.py has\n    the following comment:\n    \n        Sends a blank line sufficient to flush buffers.\n    \n        This is to ensure Eventlet versions that don\'t support\n        eventlet.minimum_write_chunk_size will send any previous data\n        buffered.\n    \n        If https://bitbucket.org/eventlet/eventlet/pull-request/37\n        ever gets released in an Eventlet version, we should make\n        this yield only for versions older than that.\n    \n    The reference pull request was included with eventlet 0.14 [1] and\n    swift now requires >=0.16.1 so it is safe to remove _ensure_flush()\n    and save > 8k bytes per SSYNC response.\n    \n    [1] https://bitbucket.org/eventlet/eventlet/commits/4bd654205a4217970a57a7c4802fed7ff2c8b770\n    \n    Change-Id: I367e9a6e92b7ea75fe7e5795cded212657de57ed\n',9,24,'HP'),(276317,1456,3160,'2015-05-25 11:47:47','2014-10-21 09:24:25','    Replaced setting run_pause with standard interval\n    \n    The deprecated directive `run_pause` should be replaced with the more\n    standard one `interval`. The `run_pause` should be still supported for\n    backward compatibility. This patch updates object replicator to use\n    `interval` and support `run_pause`. It also updates its sample config\n    and documentation.\n    \n    Co-Authored-By: Joanna H. Huang <joanna.huitzu.huang@gmail.com>\n    Co-Authored-By: Kamil Rykowski <kamil.rykowski@intel.com>\n    \n    Change-Id: Ie2a3414a96a94efb9273ff53a80b9d90c74fff09\n    Closes-Bug: #1364735\n',35,22,'Aptira'),(276319,1111,1111,'2015-06-01 07:00:39','2015-06-01 06:50:33','    Make swift-recon compatible for servers without storage policies\n    \n    Swift recon introduced a new key for storage policies, and the CLI expected this\n    key in the server response. However, if one updates the CLI but not yet the\n    server an exception will be raised, because there is no default value and no\n    check if the key is included in the response.\n    \n    This change checks if the policies key is included in the response and updates\n    one test to ensure backward compability.\n    \n    Closes-Bug: 1453599\n    \n    Change-Id: I7c7a90f9933bec2ab45595df9dc600a6cba65666\n',12,10,'Red Hat'),(276321,978,978,'2015-06-01 18:27:26','2015-06-01 17:57:25','    Tighten up overall metadata size tests\n    \n    Overall metadata size constraint is enforced in the container and account\n    backends as well as in the proxy controllers. Whereas the proxy controller\n    can check that constraints are not exceeded by a single PUT or POST request,\n    the backend checks that constraints are not exceeded by the aggregate of all\n    PUTs and POSTs.\n    \n    The current functional tests only exercise the proxy controller checks, since\n    they test for a 400 when sending excessive metadata in a single POST. This patch\n    adds a test for a 400 when a single metadata item in a POST causes the backend\n    aggregate constraints check to go over limit.\n    \n    The extra coverage of the new assertions can be seen by modifying\n    swift/common/db.DatabasBroker.validate_metadata() to always return None\n    immediately - only the new assertions fail when functests are run.\n    \n    Change-Id: I1489e29686013cbd3d70283d8756b548aea3c2e1\n',16,0,'HP'),(276323,583,583,'2015-06-02 19:20:27','2015-05-13 21:18:02','    Handle Disk IO error Exception in swift account auditor\n    \n    Swift account auditor fails to quarantine corrupt db due to\n    Disk IO error. This patch fixes that by handling Disk IO Error\n    Exception.\n    \n    Closes-Bug:1169189\n    Change-Id: I031ee2a5775e4a88d4fb00d972d553936147c42e\n',26,0,'NEC'),(276325,869,5596,'2015-06-01 12:11:43','2015-05-31 23:10:15','    Don\'t quarantine on read_metadata ENOENT\n    \n    An operation that removes an existing .ts or .meta out from under another\n    concurrent operation at the right point can cause the whole object to be\n    needlessly quarantined.\n    \n    Closes-Bug: #1451520\n    \n    Change-Id: I37d660199e54411d0610889f9ee230b13747244b\n',52,1,'Rackspace'),(276327,978,1111,'2015-06-03 14:13:14','2015-06-02 19:51:39','    Fix testing issues\n    \n    When functional tests are run in tox and an exception is raised when connecting\n    to Swift (for example: Swift not running, missing python-keystoneclient package\n    used by python-swiftclient) 0 tests are executed, but tox returns a success.\n    \n    An exception is raised during tests, caused by a missing python-keystoneclient\n    in python-swiftclient. Instead of adding python-keystoneclient as a dependency\n    in python-swiftclient the package is added to the test-requirements.txt in Swift\n    itself. Note that adding python-keystoneclient to the test-requirements in\n    python-swiftclient is not sufficient (it\'s already in there).\n    \n    The exception in setup_package() is catched by the openstack.nose_plugin, thus\n    disabling this plugin for now as well.\n    \n    Also fixing two test errors seen on the gate regarding the tempurl middleware.\n    \n    There was also an update to tox, environment variables were no longer passed\n    with versions >= 2.0 (http://tox.readthedocs.org/en/latest/changelog.html).\n    Swift test environment variables have been added to the passenv to re-enable the\n    former behavior, as well as environment variables required to pass proxy\n    settings.\n    \n    This also led to skipped tempauth tests, and together with the missing\n    python-keystoneclient no tests were executed.\n    \n    Related-Bug: 1461440\n    Related-Bug: 1455102\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    \n    Change-Id: Ideea071017d04912c60ed0bc76532adbb446c31d\n',18,10,'Red Hat'),(276329,869,869,'2015-06-03 11:42:00','2015-03-20 09:56:30','    EC: support multiple ranges for GET requests\n    \n    This commit lets clients receive multipart/byteranges responses (see\n    RFC 7233, Appendix A) for erasure-coded objects. Clients can already\n    do this for replicated objects, so this brings EC closer to feature\n    parity (ha!).\n    \n    GetOrHeadHandler got a base class extracted from it that treats an\n    HTTP response as a sequence of byte-range responses. This way, it can\n    continue to yield whole fragments, not just N-byte pieces of the raw\n    HTTP response, since an N-byte piece of a multipart/byteranges\n    response is pretty much useless.\n    \n    There are a couple of bonus fixes in here, too. For starters, download\n    resuming now works on multipart/byteranges responses. Before, it only\n    worked on 200 responses or 206 responses for a single byte\n    range. Also, BufferedHTTPResponse grew a readline() method.\n    \n    Also, the MIME response for replicated objects got tightened up a\n    little. Before, it had some leading and trailing CRLFs which, while\n    allowed by RFC 7233, provide no benefit. Now, both replicated and EC\n    multipart/byteranges avoid extraneous bytes. This let me re-use the\n    Content-Length calculation in swob instead of having to either hack\n    around it or add extraneous whitespace to match.\n    \n    Change-Id: I16fc65e0ec4e356706d327bdb02a3741e36330a0\n',1696,305,'SwiftStack'),(276331,179,179,'2015-06-07 12:53:25','2015-06-06 17:42:41','    Object are sorted and concatenated by swift in cardinal order.\n    \n    Modified values in example in decimal to be more precise,\n    added a small description on Object are sorted and concatenated\n    by swift in cardinal order as a small phrase would be sufficient.\n    \n    Change-Id: I914ded4e5726e50bb93b05759c3bfb76edda53ab\n    backport: none\n    Closes-Bug: #1383893\n',5,4,NULL),(276332,5656,5656,'2015-06-05 14:26:45','2015-04-28 13:18:32','    The hash_cleanup_listdir function should only be called when necessary.\n    \n    Introduced a conditional that will specify to _finalize_put() whether\n    the put() method is being called within the context of ECDiskFileWriter.\n    \n    Included some unit tests that will test the number of calls to\n    hash_cleanup_listdir() during put(), commit(), and delete()\n    operations.\n    \n    Change-Id: I287b2648591fdbf686898dc9047beda80a64da0c\n',69,7,'IBM'),(276334,4068,4068,'2015-06-03 15:32:25','2015-06-03 08:16:06','    Change usage help and Attention messages to warnings\n    \n    Change-Id: I1396aaffe36e739606f15f7fef37b11bd83f1fc1\n',10,8,'HP'),(276336,978,5155,'2015-06-04 15:08:13','2015-06-02 17:00:42','    Add metadata size tests on the border\n    \n    This patch adds a test for a 204 when a single metadata item in a POST causes\n    the backend aggregate constraints check to be on the border.\n    \n    Background:\n    Overall metadata size constraint is enforced in the container and\n    account backends as well as in the proxy controllers.\n    Whereas the proxy controller can check that constraints are not exceeded\n    by a single PUT or POST request, the backend checks that constraints are not\n    exceeded by the aggregate of all PUTs and POSTs.\n    \n    The change [1] added a test for a 400 when a single metadata item in\n    a POST causes the backend aggregate constraints check to go over limit.\n    \n    [1] I1489e29686013cbd3d70283d8756b548aea3c2e1\n    \n    Change-Id: Iac86ea71240ddde177e625c279c21aef67659d10\n',18,4,'Fujitsu'),(276338,1475,1475,'2015-06-09 00:22:39','2015-06-09 00:22:12','    Add six requirement\n    \n    The six module is needed to add Python 3 support to Swift.\n    \n    Change-Id: Ie637ed3458c7ff56c26834bca73203ed55604d74\n',1,0,'eNovance'),(276340,179,179,'2015-06-15 22:10:45','2015-06-15 22:10:45','    Replace it.next() with next(it) for py3 compat\n    \n    The Python 2 next() method of iterators was renamed to __next__() on\n    Python 3. Use the builtin next() function instead which works on Python\n    2 and Python 3.\n    \n    Change-Id: Ic948bc574b58f1d28c5c58e3985906dee17fa51d\n',350,350,NULL),(276341,869,869,'2015-06-17 11:31:55','2015-06-15 13:36:36','    Use just IP, not port, when determining partition placement\n    \n    In the ring builder, we place partitions with maximum possible\n    dispersion across tiers, where a \"tier\" is region, then zone, then\n    IP/port,then device. Now, instead of IP/port, just use IP. The port\n    wasn\'t really getting us anything; two different object servers on two\n    different ports on one machine aren\'t separate failure\n    domains. However, if someone has only a few machines and is using one\n    object server on its own port per disk, then the ring builder would\n    end up with every disk in its own IP/port tier, resulting in bad (with\n    respect to durability) partition placement.\n    \n    For example: assume 1 region, 1 zone, 4 machines, 48 total disks (12\n    per machine), and one object server (and hence one port) per\n    disk. With the old behavior, partition replicas will all go in the one\n    region, then the one zone, then pick one of 48 IP/port pairs, then\n    pick the one disk therein. This gives the same result as randomly\n    picking 3 disks (without replacement) to store data on; it completely\n    ignores machine boundaries.\n    \n    With the new behavior, the replica placer will pick the one region,\n    then the one zone, then one of 4 IPs, then one of 12 disks\n    therein. This gives the optimal placement with respect to durability.\n    \n    The same applies to Ring.get_more_nodes().\n    \n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    \n    Change-Id: Ibbd740c51296b7e360845b5309d276d7383a3742\n',158,125,'SwiftStack'),(276343,229,3753,'2015-06-06 12:54:41','2014-12-16 11:15:19','    Allow default reseller prefix in domain_remap middleware\n    \n    Previously, the reseller prefix needed to be provided in the host name\n    even when the domain was unique to that reseller. With the\n    default_reseller_prefix, any domain which matches in this middleware,\n    will will be passed on with a reseller prefix, whether or not it was\n    provided.\n    \n    Change-Id: I5aa5ce78ad1ee2e3660cce4c3e07306f8999f02a\n    Implements: blueprint domainremap-reseller-domains\n',50,13,'CloudVPS'),(276345,4056,4056,'2015-06-18 12:43:50','2015-05-14 22:14:15','    Allow 1+ object-servers-per-disk deployment\n    \n    Enabled by a new > 0 integer config value, \"servers_per_port\" in the\n    [DEFAULT] config section for object-server and/or replication server\n    configs.  The setting\'s integer value determines how many different\n    object-server workers handle requests for any single unique local port\n    in the ring.  In this mode, the parent swift-object-server process\n    continues to run as the original user (i.e. root if low-port binding\n    is required), binds to all ports as defined in the ring, and forks off\n    the specified number of workers per listen socket.  The child, per-port\n    servers drop privileges and behave pretty much how object-server workers\n    always have, except that because the ring has unique ports per disk, the\n    object-servers will only be handling requests for a single disk.  The\n    parent process detects dead servers and restarts them (with the correct\n    listen socket), starts missing servers when an updated ring file is\n    found with a device on the server with a new port, and kills extraneous\n    servers when their port is found to no longer be in the ring.  The ring\n    files are stat\'ed at most every \"ring_check_interval\" seconds, as\n    configured in the object-server config (same default of 15s).\n    \n    Immediately stopping all swift-object-worker processes still works by\n    sending the parent a SIGTERM.  Likewise, a SIGHUP to the parent process\n    still causes the parent process to close all listen sockets and exit,\n    allowing existing children to finish serving their existing requests.\n    The drop_privileges helper function now has an optional param to\n    suppress the setsid() call, which otherwise screws up the child workers\'\n    process management.\n    \n    The class method RingData.load() can be told to only load the ring\n    metadata (i.e. everything except replica2part2dev_id) with the optional\n    kwarg, header_only=True.  This is used to keep the parent and all\n    forked off workers from unnecessarily having full copies of all storage\n    policy rings in memory.\n    \n    A new helper class, swift.common.storage_policy.BindPortsCache,\n    provides a method to return a set of all device ports in all rings for\n    the server on which it is instantiated (identified by its set of IP\n    addresses).  The BindPortsCache instance will track mtimes of ring\n    files, so they are not opened more frequently than necessary.\n    \n    This patch includes enhancements to the probe tests and\n    object-replicator/object-reconstructor config plumbing to allow the\n    probe tests to work correctly both in the \"normal\" config (same IP but\n    unique ports for each SAIO \"server\") and a server-per-port setup where\n    each SAIO \"server\" must have a unique IP address and unique port per\n    disk within each \"server\".  The main probe tests only work with 4\n    servers and 4 disks, but you can see the difference in the rings for the\n    EC probe tests where there are 2 disks per server for a total of 8\n    disks.  Specifically, swift.common.ring.utils.is_local_device() will\n    ignore the ports when the \"my_port\" argument is None.  Then,\n    object-replicator and object-reconstructor both set self.bind_port to\n    None if server_per_port is enabled.  Bonus improvement for IPv6\n    addresses in is_local_device().\n    \n    This PR for vagrant-swift-all-in-one will aid in testing this patch:\n    https://github.com/swiftstack/vagrant-swift-all-in-one/pull/16/\n    \n    Also allow SAIO to answer is_local_device() better; common SAIO setups\n    have multiple \"servers\" all on the same host with different ports for\n    the different \"servers\" (which happen to match the IPs specified in the\n    rings for the devices on each of those \"servers\").\n    \n    However, you can configure the SAIO to have different localhost IP\n    addresses (e.g. 127.0.0.1, 127.0.0.2, etc.) in the ring and in the\n    servers\' config files\' bind_ip setting.\n    \n    This new whataremyips() implementation combined with a little plumbing\n    allows is_local_device() to accurately answer, even on an SAIO.\n    \n    In the default case (an unspecified bind_ip defaults to \'0.0.0.0\') as\n    well as an explict \"bind to everything\" like \'0.0.0.0\' or \'::\',\n    whataremyips() behaves as it always has, returning all IP addresses for\n    the server.\n    \n    Also updated probe tests to handle each \"server\" in the SAIO having a\n    unique IP address.\n    \n    For some (noisy) benchmarks that show servers_per_port=X is at least as\n    good as the same number of \"normal\" workers:\n    https://gist.github.com/dbishop/c214f89ca708a6b1624a#file-summary-md\n    \n    Benchmarks showing the benefits of I/O isolation with a small number of\n    slow disks:\n    https://gist.github.com/dbishop/fd0ab067babdecfb07ca#file-results-md\n    \n    If you were wondering what the overhead of threads_per_disk looks like:\n    https://gist.github.com/dbishop/1d14755fedc86a161718#file-tabular_results-md\n    \n    DocImpact\n    \n    Change-Id: I2239a4000b41a7e7cc53465ce794af49d44796c6\n',1981,246,'SwiftStack'),(276347,4075,4087,'2015-06-19 16:30:11','2015-06-13 11:03:56','    EC Ssync:  Update parms to include node and frag indices\n    \n    Previously we sent the ssync backend frag index based on the node\n    index.  We need to be more specific for ssync to handle both sync\n    and revert cases so now we send the frag index based on the job\n    contents (as determined by the ec recon)) and the node index\n    as a new header based on, well, the node index.\n    \n    The rcvr can now validate the incoming pair to reject (400) when\n    a primary node is being asked to accept fragments that don\'t\n    belong to it.  Additionally, by having the frag index the\n    rcvr can reject (409) an attempt to accept a fragment when its\n    a handoff and already has one that needs to be reverted.\n    \n    Fixes-bug: #1452619\n    Change-Id: I8287b274bbbd00903c1975fe49375590af697be4\n',147,7,'Intel'),(276349,869,869,'2015-06-18 16:12:41','2015-06-18 12:58:03','    Get better at closing WSGI iterables.\n    \n    PEP 333 (WSGI) says: \"If the iterable returned by the application has\n    a close() method, the server or gateway must call that method upon\n    completion of the current request[.]\"\n    \n    There\'s a bunch of places where we weren\'t doing that; some of them\n    matter more than others. Calling .close() can prevent a connection\n    leak in some cases. In others, it just provides a certain pedantic\n    smugness. Either way, we should do what WSGI requires.\n    \n    Noteworthy goofs include:\n    \n      * If a client is downloading a large object and disconnects halfway\n        through, a proxy -> obj connection may be leaked. In this case,\n        the WSGI iterable is a SegmentedIterable, which lacked a close()\n        method. Thus, when the WSGI server noticed the client disconnect,\n        it had no way of telling the SegmentedIterable about it, and so\n        the underlying iterable for the segment\'s data didn\'t get\n        closed.\n    \n        Here, it seems likely (though unproven) that the object server\n        would time out and kill the connection, or that a\n        ChunkWriteTimeout would fire down in the proxy server, so the\n        leaked connection would eventually go away. However, a flurry of\n        client disconnects could leave a big pile of useless connections.\n    \n      * If a conditional request receives a 304 or 412, the underlying\n        app_iter is not closed. This mostly affects conditional requests\n        for large objects.\n    \n    The leaked connections were noticed by this patch\'s co-author, who\n    made the changes to SegmentedIterable. Those changes helped, but did\n    not completely fix, the issue. The rest of the patch is an attempt to\n    plug the rest of the holes.\n    \n    Co-Authored-By: Romain LE DISEZ <romain.ledisez@ovh.net>\n    \n    Change-Id: I168e147aae7c1728e7e3fdabb7fba6f2d747d937\n    Closes-Bug: #1466549\n',105,38,'SwiftStack'),(276351,5254,5254,'2015-05-15 19:44:20','2015-05-13 20:10:59','    move replication code to ReplicatedObjectController\n    \n    Moving _connect_put_node, send_file, _transfer_data and _store_object\n    methods to ReplicatedObjectController. Each one of these methods are\n    specific to replication policy.  EC policy implements their own\n    version of them.\n    \n    Of these four methods, only _store_object and _connect_put_node are\n    required to be implemented by the policy specific Object Controllers.\n    \n    Change-Id: Ifc72461b77dbfdaae9d63417f1286e8b5da3ca4e\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',210,170,'Red Hat'),(276353,179,179,'2015-06-24 19:07:44','2015-06-12 23:40:51','    Fixed Formatting Error in Swift -Form Post middleware section.\n    \n    Fixed Formatting error in ``action=”SWIFT_URL``” => action=”``SWIFT_URL``”\n    \n    Change-Id: Id461129ef7f5b6412f94d36920c942a4181c0eb7\n    Closes-Bug: #1464740\n',1,1,NULL),(276355,1111,1111,'2015-06-22 14:49:59','2015-06-22 14:48:41','    Add note about updatedb to the docs\n    \n    Change-Id: Ia1aa0bb1f93ee487e2f7ddf76a7a08efa8f3ba41\n',10,0,'Red Hat'),(276357,1111,1475,'2015-06-23 07:29:15','2015-05-25 18:28:02','    Replace xrange() with six.moves.range()\n    \n    Patch generated by the xrange operation of the sixer tool:\n    https://pypi.python.org/pypi/sixer\n    \n    Manual changes:\n    \n    * Fix indentation for pep8 checks\n    * Fix TestGreenthreadSafeIterator.test_access_is_serialized of\n      test.unit.common.test_utils:\n      replace range(1, 11) with list(range(1, 11))\n    * Fix UnsafeXrange docstring, revert change\n    \n    Change-Id: Icb7e26135c5e57b5302b8bfe066b33cafe69fe4d\n',170,141,'eNovance'),(276359,5599,4087,'2015-06-23 02:14:02','2015-05-25 14:41:42','    Add policy support to dispersion tools\n    \n    Doesn\'t work for anything other than policy 0. updated to allow user\n    to specify policy name on cmd line (as with object-info) which\n    then makes populate/report work with 3x, 2x, or EC style policies\n    \n    Change-Id: Ib7c298f0f6d666b1ecca25315b88539f45cf9f95\n    Closes-Bug: 1458688\n',60,19,'Intel'),(276361,1111,1111,'2015-06-26 14:35:40','2015-06-26 08:54:22','    Increase httplib._MAXHEADERS\n    \n    Python 2.7.9+ and 3.2.6+ limits the number of maximum headers in httplib to 100\n    [1,2,3]. This setting is too low for Swift.\n    \n    By default the maximum number of allowed headers depends on the number of max\n    allowed metadata settings plus a default value of 32 for regular http headers.\n    If for some reason this is not enough (custom middleware for example) it can be\n    increased with the extra_header_count constraint.\n    \n    [1] https://bugs.python.org/issue16037\n    [2] https://hg.python.org/cpython/raw-file/15c95b7d81dc/Misc/NEWS\n    [3] https://hg.python.org/cpython/raw-file/v3.2.6/Misc/NEWS\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Matthew Oliver <matt@oliver.net.au>\n    Co-Authored-By: Thomas Herve <therve@redhat.com>\n    \n    Change-Id: I388fd697ec88476024b0e9f1ae75ba35ff765282\n',28,2,'Red Hat'),(276363,179,179,'2015-06-24 23:58:50','2015-06-24 21:07:16','    Fixed Errors in Swift-Form Post middleware section rst.\n    \n    Inline markup cannot be nested in RST.\n    Fixing markups by using a single option for the whole line and making\n    some minor error corrections.\n    \n    Change-Id: I42bfd7dfe5c93a69436ecc5d154f2e61ca83fa82\n',17,17,NULL),(276365,4075,4075,'2015-06-26 12:49:26','2015-06-25 01:35:07','    Fix ValueError in ssync_receiver\n    \n    httplib\'s putheader method will cast whatever you give it to a string.\n    where we allow the default dict.get default of None to be passed to\n    putheader unmodified ssync_receiver is surpised that the non-empty\n    string isn\'t able to be converted to an integer.\n    \n    We can avoid surprising the ssync_receiver in this way by sending the\n    empty string as a better default.\n    \n    Change-Id: Ie9df9927ff4d3dd3f334647f883b2937d0d81030\n',71,2,'Rackspace'),(276367,5599,5599,'2015-06-24 22:30:47','2015-06-22 23:24:19','    Add one more test for ssync_receiver\n    \n    To prevent 409 conflict on a primary node during ssyncing,\n    ssync-receiver should add x-ssync-backend-frag-index generated from\n    x-ssync-backend-node-index of the SSYNC replication request header.\n    The change is done by previous work[1], but we need more test for that.\n    \n    This patch addes one more assertion if the x-ssync-backend-frag-index\n    is in the ssync subrequest correctly.\n    \n    *BONUS*\n    Fix some weird mock and add some sanities.\n    \n    1: https://review.openstack.org/#/c/191521/\n    \n    Change-Id: I27aff713c69017c0bc4c60b4833184e1285595d7\n',70,6,'NTT'),(276369,179,179,'2015-07-03 00:14:16','2015-07-03 00:05:36','    Fix Python 3 issues\n    \n    * Replace long with six.integer_type\n    \n    six.integer_type :In Python 2, this is long and int, and in Python 3,\n    just int.\n    \n    \'long\' is an undefined variable in py3.\n    \n    Change-Id: Ibe4c5d0d81fe883f4fe33be93a68d814a228ad28\n',3,3,NULL),(276370,5657,5657,'2015-07-02 10:31:48','2015-06-26 10:57:35','    Correcting minor grammatical errors\n    \n    1. Removing unnecessary semi colon\n    2. Removing unnecessary content\n    \n    Change-Id: Ie95403a4d96db2b8465e75495061fc059098c922\n',4,5,'Rackspace'),(276372,5656,5656,'2015-06-26 16:46:58','2015-06-18 14:21:06','    EC Reconstructor: Do not reconstruct existing fragments.\n    \n    The EC reconstructor needs to verify that the fragment needing to\n    be reconstructed does not reside in the collection of node responses.\n    Otherwise, resources will be spent unnecessarily reconstructing\n    the fragment. Moreover, this could cause a segfault on some backends.\n    \n    This change adds the necessary verification steps to make sure\n    that a fragment will only be rebuilt in the case it is missing from\n    the other fragment archives.\n    \n    Added some tests to provide coverage for these scenarios.\n    \n    Change-Id: I91f3d4af52cbc66c9f7ce00726f247b5462e66f9\n    Closes-Bug: #1452553\n',153,37,'IBM'),(276374,5656,5656,'2015-07-01 17:12:23','2015-05-18 14:08:25','    After the .durable has been written, fsync the directory.\n    \n    Added try-except statements in _finalize_durable() to fsync the directory\n    after a successful fsync of the .durable file.\n    \n    Added test_commit_fsync_dir_raises_DiskFileErrors() for testing whether\n    certain assertions hold for the change to include fsync_dir().\n    \n    Some more error details have been included in the logger.\n    \n    Closes-Bug: #1470651\n    Change-Id: I4791d75ade8542678369ba0811ef39af6e955cc6\n',86,12,'IBM'),(276376,832,4075,'2015-06-29 11:38:01','2015-06-25 01:44:10','    Make ssync_sender a better HTTP client\n    \n    When a server responses with an error - if that error includes a body - the\n    client should read the body.  This cleans up some ugly eventlet/wsgi.server log\n    output related to chunked transfer disconnect (invalid literal for int() with\n    base 16).\n    \n    Change-Id: Ibd06ddee9f216fce07fa33c3a7d8306b59eb6d77\n    Closes-Bug: #1466138\n',4,0,'Rackspace'),(276378,229,229,'2015-07-06 13:57:03','2015-07-02 09:54:30','    update AUTHORS file\n    \n    Change-Id: I509ceeb522bd83c407beb40c22c2924a1d92b8ff\n',16,2,'SwiftStack'),(276380,229,5650,'2015-07-08 04:55:00','2015-07-04 17:08:32','    Add CORS unit tests to base\n    \n    In earlier versions of swift when a request was made with an\n    existing origin, but without any CORS settings in the container,\n    it was possible to get an unhandled exception due to a method call\n    on the \"None\" return of cors.get(\'allow_origin\', \'\').\n    \n    Unit tests have been added to assert that this problem cannot go\n    undetected again.\n    \n    Change-Id: Ia74896dabe1cf5a307c551b15a43ab1fd789c213\n    Fixes: bug 1468782\n',34,2,'IBM'),(276382,453,453,'2015-06-28 22:08:35','2015-06-28 22:04:46','    fix api overview document\n    \n    The content about Object Storage HTTP requests constraints seems to\n    be a table but broken, this patch fixes it into correct rst table format.\n    \n    Change-Id: I1b4c62da3e6d91add3ee0218707c1628c8f04b33\n',3,8,'HP'),(276384,179,179,'2015-07-03 01:00:28','2015-07-03 00:45:58','    Replace xrange() with six.moves.range()\n    \n    xrange is no longer available in py3.\n    replacing xrange with range from six.moves\n    \n    Change-Id: Ib863c316a0724bd9c4f53c2e5a8d1bcd42c4dc5a\n',3,3,NULL),(276386,1111,1111,'2015-07-02 05:20:23','2015-05-29 10:11:44','    Ignore invalid PIDs in swift-init\n    \n    While reviewing ab9f6340 I recognized that invalid pids in the pid files raise\n    an exceptions (in case it is not a number), and also accept a 0 that is\n    impossible to use as a pid for any Swift process. In the latter case the process\n    was recognized as runnning, even if it did not - and thus restarting didn\'t\n    worked.\n    \n    This patch ensures a better handling of any non-numeric value and also removes a\n    pid file if it uses 0 as the pid.\n    \n    Change-Id: I09c415c7a75e4b9a0574a08f46f48fff5bb11d02\n',36,2,'Red Hat'),(276388,441,441,'2015-07-09 06:14:56','2015-07-09 06:14:56','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I9ff1dde06be45fc7d6c441a1e1c07221f839a9a1\n',219,182,NULL),(276389,1475,1475,'2015-06-24 09:39:55','2015-06-24 09:36:37','    Replace dict.iteritems() with dict.items()\n    \n    The iteritems() of Python 2 dictionaries has been renamed to items() on\n    Python 3. According to a discussion on the openstack-dev mailing list,\n    the overhead of creating a temporary list using dict.items() on Python 2\n    is very low because most dictionaries are small:\n    \n    http://lists.openstack.org/pipermail/openstack-dev/2015-June/066391.html\n    \n    Patch generated by the following command:\n    \n        sed -i \'s,iteritems,items,g\' \\\n          $(find swift -name \"*.py\") \\\n          $(find test -name \"*.py\")\n    \n    Change-Id: I6070bb6c684be76e8e77222a7d280ec6edd43496\n',79,79,'eNovance'),(276391,5254,5254,'2015-05-19 20:27:06','2015-05-19 20:27:06','    add object post and delete methods to BaseObjectController\n    \n    Adding post and delete methods to BaseObjectController that can\n    be overriden by ObjectCOntroller subclasses. These methods are\n    similar to the PUT and GET methods that were introduced as part\n    of the EC work\n    \n    Change-Id: I197364bc3e2f2287c0afc8948863e3cdeab90383\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',35,10,'Red Hat'),(276393,4075,4075,'2015-07-01 01:18:58','2015-06-30 17:24:13','    Fix race in test_server.TestObjectController.test_PUT_ssync_multi_frag\n    \n    If the test ran across a one second boundary it would fail because while\n    the timestamp normalization was doing some rounding it was making no\n    attempt to reuse the same timestamp on subsequent requests.\n    \n    Change-Id: Ic560032bcfacd6f0d10cfc0f4f10e5d6c2bc8dd5\n',2,1,'Rackspace'),(276395,1475,1475,'2015-07-10 16:37:11','2015-07-10 13:04:44','    Fixes for mock 1.1\n    \n    The new release of mock 1.1 is more strict. It helped to find bugs in\n    tests.\n    \n    Closes-Bug: #1473369\n    Change-Id: Id179513c6010d827cbcbdda7692a920e29213bcb\n',8,8,'eNovance'),(276396,229,229,'2015-07-07 21:18:19','2015-06-06 13:03:15','    add domain_remap to /info\n    \n    Also added the value of default_reseller_prefix to /info. I did not\n    add the reseller_prefixes value to /info because deployers may not\n    want to expose all of the resellers that are available.\n    \n    Change-Id: I9ca2f002dc395913bb646390d6908dfb8f554df1\n',28,2,'SwiftStack'),(276398,869,869,'2015-07-02 08:16:03','2015-06-11 15:40:28','    Add ring-builder analyzer.\n    \n    This is a tool to help developers quantify changes to the ring\n    builder. It takes a scenario (JSON file) describing the builder\'s\n    basic parameters (part_power, replicas, etc.) and a number of\n    \"rounds\", where each round is a set of operations to perform on the\n    builder. For each round, the operations are applied, and then the\n    builder is rebalanced until it reaches a steady state.\n    \n    The idea is that a developer observes the ring builder behaving\n    suboptimally, writes a scenario to reproduce the behavior, modifies\n    the ring builder to fix it, and references the scenario with the\n    commit so that others can see that things have improved.\n    \n    I decided to write this after writing my fourth or fifth hacky one-off\n    script to reproduce some bad behavior in the ring builder.\n    \n    Change-Id: I114242748368f142304aab90a6d99c1337bced4c\n',697,89,'SwiftStack'),(276400,869,869,'2015-07-02 08:16:09','2015-06-24 17:07:32','    Stop moving partitions unnecessarily when overload is on.\n    \n    When overload was on and in use, the ring builder was unnecessarily\n    moving partitions. It would converge on a good solution and settle\n    down eventually, but it moved more partitions than necessary along the\n    way.\n    \n    There are three partition gatherers used in the ring builder:\n    dev-removed, dispersion, and weight, in that order. The dev-removed\n    gatherer will pick up all partitions on removed devices. The\n    dispersion gatherer picks up replicas of partitions that are\n    suboptimally dispersed. The weight gatherer picks up partitions on\n    devices which are overweight.\n    \n    The weight gatherer was not overload-aware, so it would pick up\n    partitions that did not need to move. Consider a device that would\n    normally have 100 partitions assigned, assume we set overload to 0.1\n    so that this device will hold up to 110 (10 extra) for the sake of\n    dispersion, and assume the device actually has 104 partitions assigned\n    to it. The correct behavior is to gather nothing from this device\n    because it has fewer than the maximum. Prior to this commit, the\n    weight gatherer would remove 4 partitions from this device; they would\n    subsequently be reassigned by the overload-aware partition placer\n    (_reassign_parts()). In a ring with multiple overloaded devices, the\n    builder would pick up some partitions from each, shuffle them, and\n    then assign them back to those same devices. Obviously, this just\n    created extra replication work for no benefit.\n    \n    Now, the weight gatherer takes overload into account, and will no\n    longer needlessly gather partitions.\n    \n    That\'s not all, though; this change worsened the behavior of a ring\n    with more overload than necessary. Before, the ring would balance as\n    best it could, using the minimal amount of overload. With the\n    weight-gatherer change, the ring builder will stop gathering\n    partitions once a device reaches its maximum-permissible assignment\n    including overload.\n    \n    For example, imagine a 3-replica, 4-zone ring with overload=0.2 and\n    weights:\n    \n      z1: 100\n      z2: 60\n      z3: 60\n      z4: 60\n    \n    Since z1 has more than 1/3 of the weight, z2, z3, and z4 must take\n    more than their fair share for the sake of dispersion.\n    \n    Now, turn up the weights some:\n    \n      z1: 100\n      z2: 80\n      z3: 80\n      z4: 80\n    \n    Overload is no longer needed; this ring can balance. However, z2, z3,\n    and z4 would end up keeping more than their fair share since (a) they\n    already had extra due to earlier conditions, and (b) the weight\n    gatherer won\'t pick up partitions from them since they\'re not\n    overburdened once it takes overload into account.\n    \n    To fix this, we compute the minimum overload factor required for\n    optimal dispersion and then use min(user-input-overload,\n    minimum-overload) during rebalance. This way, we don\'t overload\n    devices more than the user says, but if the user sets overload higher\n    than necessary, we\'ll still give the best balance possible.\n    \n    Change-Id: If5666ba654ee25da54f9144f3b78840273a49627\n',402,17,'SwiftStack'),(276402,832,832,'2015-07-09 15:19:32','2015-07-09 15:19:32','    Ring builder code clean up follow up patch\n    \n    This is a simple change that cleans up a NIT from Sam\'s \'stop moving\n    partitions unnecessarily when overload is on\' patch.\n    \n    Change-Id: I9d9f1cc23e2bb625d8e158f4d3f64e10973176a1\n',1,1,'Rackspace'),(276404,229,5658,'2015-07-08 16:37:31','2015-07-08 15:18:22','    Fix Container Sync example\n    \n    Container-sync realm uses cluster_ as a prefix to specify clusters\'\n    names. At use, the prefix should not be included. Fixing the examples\n    and sample conf to make it clearer that only the name of the cluster\n    should be passed.\n    \n    Change-Id: I2e521d86faffb59e1b45d3f039987ee023c5e939\n',12,12,'IBM'),(276406,4075,4075,'2015-07-07 18:12:09','2015-07-07 18:02:53','    Cleanup error messages in ECDiskFileWriter.commit\n    \n    I think the error messages make better sense and it\'s more obvious what the\n    error handling code was trying to bring to the surface for operators.\n    \n    If you run this test with nosetests --verbose --nocapture\n    \n    test_diskfile.py:TestECDiskFile.test_commit_fsync_dir_raises_DiskFileErrors\n    \n    ... you can review most of the potential log output\n    \n    Change-Id: I40c9d77f44e087ee61d9642e924b0a4039d6ca9a\n',23,42,'Rackspace'),(276408,179,179,'2015-07-09 21:56:29','2015-07-08 18:38:22','    Replace reduce and unichr , these are no longer available in py3\n    \n    * Replace reduce() with six.moves.reduce()\n    * Replace unichr with six.unichr\n    \n    Change-Id: I2038e47e0a6522dd992fd2a4aeff981cf7750fe0\n',7,4,NULL),(276410,229,229,'2015-07-14 20:49:08','2015-07-14 20:49:08','    remove Python 2.6 from the classifier\n    \n    Change-Id: I67233e9c7b69826242546bd6bd98c24b81070579\n',0,1,'SwiftStack'),(276411,5155,5155,'2015-07-15 08:53:46','2015-07-14 15:33:45','    Make logic of unit tests responsive to the method names\n    \n    The two methods, test_authorize_succeeds_for_tenant_name_in_roles and\n    test_authorize_succeeds_for_tenant_id_in_roles, have names that don\'t\n    match what they are testing. tenant_name and tenant_id need to be\n    switched.\n    \n    Change-Id: I7cb0a7d2b2111127fd5d6b55f2da6a3eadf2235d\n',4,4,'Fujitsu'),(276413,179,179,'2015-07-05 11:08:35','2015-07-05 10:59:50','    Replace dict.iteritems() with dict.items() in bin directory of swift.\n    \n    The iteritems() of Python 2 dictionaries has been renamed to items() on\n    Python 3.\n    \n    Change-Id: I4bdc064c90bab56cd60f2dca2a5a78426ffbb31c\n',4,4,NULL),(276416,5659,5659,'2015-07-15 17:02:13','2015-06-24 14:01:30','    go: adding middleware & routing framework\n    \n    Add middleware & routing framework for hummingbird\n    \n    It allows hummingbird to statically chain middlewares to both object & proxy server.\n    It also adds a routing library written by the patch co-author.\n    \n    Change-Id: Iaa4d1e8c72caff554a86dbf638077483dfb4ebc7\n    Co-Authored-By: Michael Barton<mike@weirdlooking.com>\n',1164,651,'Rackspace'),(276417,5596,5596,'2015-07-15 22:00:04','2015-07-14 17:56:14','    go: fix expect 100-continue in replicator\n    \n    Sort of.  I mean it\'s not ideal, but it\'s probably better than it was.\n    We might switch to some non-HTTP protocol for replication later, since\n    we can design it to better deal with the information flow.\n    \n    Change-Id: I4571e3dc08a81c3712e1e5c5e97f3578a2ea1465\n',257,3,'Rackspace'),(276419,4067,4067,'2015-07-21 18:52:30','2015-07-20 18:31:35','    go:  Adds memcache ring\n    \n    Change-Id: I21b416e3b84510ac83fd7603c761be353dd6e461\n',818,0,'Rackspace'),(276420,5596,5596,'2015-07-23 18:51:48','2015-07-23 18:51:48','    go: goroutine leak\n    \n    fix a goroutine leak in container updates\n    \n    Change-Id: I0fcead9b280d8ad03e3b44a1826966b0b5339153\n',1,1,'Rackspace'),(276422,5596,5596,'2015-07-23 17:46:20','2015-07-23 17:46:20','    go: allow profiling\n    \n    This hooks up the pprof http handlers, so the server can always be profiled.\n    \n    Change-Id: Iba234667f018919b9c15a66483527c5289e0b2f7\n',7,0,'Rackspace'),(276424,5596,5596,'2015-07-21 22:40:51','2015-07-21 19:49:51','    go: wait for availability on REPLICATE\n    \n    This makes the REPLICATE call wait a bit for a concurrency slot to become\n    available before returning an error (currently hard coded at 60 seconds).\n    \n    It\'s expected that this will slow down replication passes somewhat, but we\n    should continue to do the same amount of actual work.\n    \n    Change-Id: I47169b5d8c8cf9875c0e78c8b7e8b5667dfe03a2\n',67,34,'Rackspace'),(276426,5596,5596,'2015-07-30 16:27:38','2015-07-28 01:16:38','    go: fix expecttransport memory usage\n    \n    DumpRequestOut wasn\'t really working.  It\'s meant to be a debugging function,\n    and it just writes the whole request, body and all, into a buffer, then strips\n    out the headers.  That means it can use a ton of memory.  So this just\n    serializes the request ourselves, which is bad and ugly, but at least it kind\n    of works.\n    \n    Change-Id: Iafd4ec8bf7ffbf2506310722853b055d422228f1\n',26,8,'Rackspace'),(276427,5596,5596,'2015-07-29 21:00:26','2015-07-29 20:58:00','    go: make replicateDevice more defensive\n    \n    If anything causes replicateDevice to panic, log that.\n    \n    Also close the window where panics could cause it to not release the\n    concurrency semaphore.\n    \n    Open a debug http port so we can profile, get stack traces, etc.\n    \n    Change-Id: Iddb18bf7d3fbcc9de95a8ce63d3308f91a5223a4\n',25,8,'Rackspace'),(276429,4067,4067,'2015-07-20 19:35:47','2015-07-20 19:33:41','    go: add ability to lock device/drive with file on file system\n    \n    Change-Id: I0aa432e1d35a25dc38713e85ca472a3343f7dbdc\n',52,4,'Rackspace'),(276431,5596,5596,'2015-07-31 20:54:55','2015-07-31 19:49:24','    go: fix timing issue in ring test\n    \n    Change-Id: Id555f69f74f786e4a8c61fd64d8dc4ba9cbbba39\n',10,9,'Rackspace'),(276433,5596,5596,'2015-08-13 20:42:56','2015-08-04 23:24:49','    go: replicator rewrite\n    \n    The replicator no longer uses HTTP, really.  It uses HTTP to set up a\n    TCP connection, then does a simple json protocol over it for replication.\n    \n    We\'re just tired of fighting with go\'s Expect: 100-continue handling.\n    \n    See doc.go for details on the protocol.\n    \n    Change-Id: I007beadc7c1682cca91f6bc389c1319713cc6f04\n',668,1351,'Rackspace'),(276434,5596,5596,'2015-08-31 18:57:58','2015-08-31 18:56:55','    go: replicator fix\n    \n    switch from r.Read(..) to io.ReadFull(r, ...) in the replicator to make sure we\n    read the full json document.\n    \n    Change-Id: I37402a731eb17d1397589e4a90016eece75bd368\n',3,2,'Rackspace'),(276435,5254,5254,'2015-04-06 16:35:58','2015-03-25 13:19:36','    Select policy when running functional test\n    \n    Add ability to select a storage policy when running\n    the functional tests by defining the environment variable\n    SWIFT_TEST_POLICY.\n    \n    This patch was first introduced by Janie Richling in\n    feature/ec: https://review.openstack.org/#/c/166097\n    \n    Co-Authored-By: Janie Richling <jrichli@us.ibm.com>\n    Co-Authored-By: Christian Schwede <christian.schwede@enovance.com>\n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    \n    Change-Id: Id96354546088df137def0ae7fd434baf64ed0c51\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',78,14,'Red Hat'),(276437,179,179,'2015-07-16 18:36:52','2015-07-09 07:35:47','    Replace python print operator with print function (pep H233, py33)\n    \n    \'print\' function is compatible with 2.x and 3.x python versions\n    Link : https://www.python.org/dev/peps/pep-3105/\n    \n    Python 2.6 has a __future__ import that removes print as language syntax,\n    letting you use the functional form instead\n    \n    Change-Id: I9d9ca5766a2773a7b4071e280f00361d16b85383\n',330,323,NULL),(276439,5660,5660,'2015-07-18 15:19:43','2015-07-18 14:37:16','    Minor change in development saio setup doc\n    \n    Make the test-requirements install command uniform with the rest of the\n    setup commands in the page by using the $HOME, instead of hardcoding\n    the folder path.\n    \n    Change-Id: I8da7a191a301601e27f894f8268238d77b150ede\n',1,1,'Indix'),(276440,869,869,'2015-07-20 17:03:20','2015-07-20 17:03:20','    Add comment about ResumingGetter.used_source_etag\n    \n    This confused a couple developers and took about ten minutes to\n    unravel in IRC; let\'s leave a clue for the next person.\n    \n    Change-Id: I356c8c7a44de23f02eaf68d23a39c9eb4c203ff1\n',7,0,'SwiftStack'),(276441,4075,4075,'2015-07-21 09:57:54','2015-07-21 09:56:13','    Fix Associated Projects link on Getting Started\n    \n    Change-Id: I50be656bc5868242489f97c96a1feaef171933e0\n',1,1,'Rackspace'),(276442,179,179,'2015-07-21 19:23:00','2015-07-21 19:23:00','    unit tests: Replace \"self.assert_\" by \"self.assertTrue\"\n    \n    The assert_() method is deprecated and can be safely replaced by assertTrue().\n    This patch makes sure that running the tests does not create undesired\n    warnings.\n    \n    Change-Id: I0602ba39ef93263386644ee68088d5f65fcb4a71\n',785,758,NULL),(276444,1111,1111,'2015-07-22 10:58:57','2015-07-22 10:43:17','    Removing commented out code in test/unit/account/test_backend.py\n    \n    Noticed this while reviewing another change. Looks like the test itself already\n    ensures correct functionality of the reclaim() method in AccountBroker without\n    the commented code, thus removing this stale code.\n    \n    Change-Id: I6a26a7591adef9fd794ca68a4e9c493d1127f93c\n',0,14,'Red Hat'),(276446,5661,5661,'2015-07-22 00:49:05','2015-07-14 16:56:44','    Add two functional tests for delimiter.\n    \n    The first test verifies that a delimiter will trim entries beyond the\n    first matching instance of delimiter (after the given matching prefix,\n    if any) and squash duplicates.  So, when setting the delimiter\n    to \"-\", given blobs \"test\", \"test-foo\" and \"test-bar-baz\", we expect\n    only \"test\" (no matching delim) and \"test-\" (trim all characters after\n    the first \"-\", and squash duplicates).\n    \n    The second test verifies that when a prefix is provided, the delimiter\n    will trim entries beyond the first matching instance of the delimiter\n    *after the given prefix*.  So \"bar, \"bazar\" which both match the\n    prefix \"ba\" will be returned as \"bar\" (no delimiter after the matching\n    prefix) and \"baza\" (after matching the prefix the remainder after the\n    the *next* matching delimiter \"a\" is trimmed).\n    \n    Change-Id: I49a2aa8722f83e87b7d211e5c26827e93963d92a\n',28,0,'Bounce Storage'),(276448,441,441,'2015-07-23 06:11:27','2015-07-23 06:11:27','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I94cf347564cb33977f33b1e64259bcb39a8cf809\n',73,100,NULL),(276450,179,179,'2015-07-20 21:41:58','2015-07-20 21:41:58','    Metaclass Python 3.x Compatibility\n    \n    use \"six.add_metaclass\" instead of \"__metaclass__\"\n    \n    Change-Id: I57390fec40afe3a965be3215db8f79b9cf862a70\n',3,3,NULL),(276452,1475,1475,'2015-07-15 16:56:33','2015-05-27 17:27:47','    Get StringIO and cStringIO from six.moves\n    \n    * replace \"from cStringIO import StringIO\"\n      with \"from six.moves import cStringIO as StringIO\"\n    * replace \"from StringIO import StringIO\"\n      with \"from six import StringIO\"\n    * replace \"import cStringIO\" and \"cStringIO.StringIO()\"\n      with \"from six import moves\" and \"moves.cStringIO()\"\n    * replace \"import StringIO\" and \"StringIO.StringIO()\"\n      with \"import six\" and \"six.StringIO()\"\n    \n    This patch was generated by the stringio operation of the sixer tool:\n    https://pypi.python.org/pypi/sixer\n    \n    Change-Id: Iacba77fec3045f96773d1090c0bd48613729a561\n',88,85,'eNovance'),(276454,1475,1475,'2015-07-15 16:56:33','2015-05-27 18:01:37','    Replace StringIO with BytesIO for WSGI input\n    \n    wsgi.input is a binary stream (bytes), not a text stream (unicode).\n    \n    * Replace StringIO with BytesIO for WSGI input\n    * Replace StringIO(\'\') with StringIO() and replace WsgiStringIO(\'\') with\n      WsgiStringIO(): an empty string is already the default value\n    \n    Change-Id: I09c9527be2265a6847189aeeb74a17261ddc781a\n',158,121,'eNovance'),(276456,5599,5599,'2015-07-22 02:01:32','2015-07-13 01:12:43','    Fix 499 client disconnected on COPY EC object\n    \n    Currently, a COPY request for an EC object might go to fail as 499 Client\n    disconnected because of the difference between destination request content\n    length and actual transferred bytes.\n    \n    That is because the conditional response status and content length for\n    an EC object range GET is handled at calling the response instance on\n    proxy server. Therefore the calling response instance (resp()) will change\n    the conditional status from 200 (HTTP_OK) to 206 (PartialContent) and will\n    change the content length for the range GET.\n    \n    In EC case, sometimes Swift needs whole stored contents to decode a segment.\n    It will make 200 HTTP OK response from object-server and proxy-server\n    will unfortunately set whole content length to the destination content\n    length and it makes the bug 1467677.\n    \n    This patch introduces a new method \"fix_conditional_response\" for\n    swift.common.swob.Response that calling _response_iter() and cached the\n    iter in the Response instance. By calling it, Swift can set correct condtional\n    response any time after setting whole content_length to the response\n    instance like EC case.\n    \n    Change-Id: If85826243f955d2f03c6ad395215c73daab509b1\n    Closes-Bug: #1467677\n',71,5,'NTT'),(276458,78,78,'2015-07-24 17:11:49','2015-07-24 17:09:48','    Fix six typos on swift documentation\n    \n    mechanisim => mechanism\n        http://docs.openstack.org/developer/swift/cors.html\n    overridde => override\n       http://docs.openstack.org/developer/swift/deployment_guide.html\n    extentsions => extensions\n      http://docs.openstack.org/developer/swift/development_ondisk_backends.html\n    reuqest => request\n      http://docs.openstack.org/developer/swift/logs.html\n    suport => support\n      http://docs.openstack.org/developer/swift/overview_architecture.html\n    mininum => minimum\n      http://docs.openstack.org/developer/swift/overview_erasure_code.html\n    \n    $ git diff | diffstat\n     cors.rst | 2 +-\n     deployment_guide.rst | 2 +-\n     development_ondisk_backends.rst | 2 +-\n     logs.rst | 2 +-\n     overview_architecture.rst | 2 +-\n     overview_erasure_code.rst | 2 +-\n     6 files changed, 6 insertions(+), 6 deletions(-)\n    \n    Change-Id: I8e095f4c216b2cfae48dff1e17d387048349f73c\n    Closes-Bug: #1477877\n',6,6,'Fujitsu'),(276460,898,898,'2015-07-24 22:21:25','2015-07-24 10:42:10','    Fix swift-object-info to show policy index at deep working directory\n    \n    If swift-object-info command is executed at deeper working directory\n    than \'objects-*\' directory, it cannot parse policy index from file path\n    so it does not show appropriate policy index. This patch fixes this\n    problem by simply extracting the full path of a target object file.\n    \n    Change-Id: Idb734106a44b6121119c9b1dc8cdaaf4c6c28c31\n    Closes-Bug: 1469951\n',43,1,'NTT'),(276462,4075,4075,'2015-07-24 20:31:45','2015-07-24 11:09:10','    Use right most occurrence object dir in diskfile.extract_policy\n    \n      I like using the rightmost one more; it\'s basically\n      /operator-defined/mountpoint/objects/part/suffix/hash/ts.data, so I\n      don\'t see any opportunity for other things named \"objects\" to creep in on the\n      right of the real objects-N dir; but I could see some admin using\n      /srv/object-storage/ or something\n    \n        -- Torgomatic The Wise\n    \n    Change-Id: I0a63a3e02df091a5ee2e110a345183012e357a2f\n',4,10,'Rackspace'),(276464,869,869,'2015-07-27 14:41:12','2015-07-20 11:58:35','    Rename WsgiStringIO -> WsgiBytesIO.\n    \n    If we\'re going to have a subclass of BytesIO, having \"StringIO\" in its\n    name is just asking for confusion.\n    \n    Change-Id: I695ab3105b1a02eb158dcf0399ae91888bc1c0ac\n',24,24,'SwiftStack'),(276465,4075,4075,'2015-07-07 15:13:20','2015-07-07 15:13:20','    Add save command to ring-builder-analyzer\n    \n     * cleanup command => ring builder function mapping\n     * cleanup ParseCommandError/ValueError message building\n    \n    Change-Id: I4be2aa963ce4f43035f02371d8388abd7a76536c\n',96,46,'Rackspace'),(276467,978,978,'2015-07-01 09:59:37','2015-06-30 18:56:23','    EC tests should use ECDiskFileManager\n    \n    Some EC tests in proxy/test_server.py use the replication\n    DiskFileManager to open diskfiles. That works because it\n    turns out that DiskFileManager is robust to the frag index\n    being stitched onto the end of the timestamp in filenames,\n    but it would be better to test using the ECDiskFileManager\n    for EC diskfiles.\n    \n    Also, drive-by deletion of some duplicated lines.\n    \n    Change-Id: Ie3adb607d8c34a469df7d0f6f542ed5ba9a2dac0\n',12,13,'HP'),(276469,179,179,'2015-07-18 14:12:58','2015-07-18 14:12:58','    Deprecated xreadlines() usage fixed\n    \n    Change-Id: Iadf42c2f86f78c11259e21c88b4aef51db3441ad\n',1,1,NULL),(276471,4088,4088,'2015-07-08 12:52:30','2015-06-25 02:06:54','    Fix reconstructor stats mssage.\n    \n    Calculate reconstruction job count and remaining time that\n    would be inappropriate for user. Use real partition count would\n    be suitable for user.\n    \n    Change-Id: I6b025854baf4757dddf9d7fe7bc2cece58a49157\n    Closes-Bug: #1468298\n',112,17,'SwiftStack'),(276473,1475,1475,'2015-07-24 11:48:28','2015-05-25 18:26:38','    Use six to fix imports on Python 3\n    \n    Get configparser, queue, http_client modules from six.moves.\n    \n    Patch generated by the six_moves operation of the sixer tool:\n    https://pypi.python.org/pypi/sixer\n    \n    Change-Id: I666241ab50101b8cc6f992dd80134ce27327bd7d\n',46,33,'eNovance'),(276475,5662,5662,'2015-07-22 15:27:26','2015-07-22 15:27:26','    Updated tox setup instructions on Development Guidelines\n    \n    The instructions suggest updating the ownership of the swift.egg-info\n    directory may be required and provide a cmd to do so.  Said cmd assumes user\n    \'swift\' exists, but tox will require the current user to have access to the\n    directory to perform updates, moreover user swift may not exist at all.\n    \n    Change-Id: I63951970553c086ff4f1ac65a81559ba69166494\n',1,1,'IBM'),(276477,978,179,'2015-07-28 12:00:00','2015-07-21 18:06:32','    test/(functional, probe): Replace \"self.assert_\" by \"self.assertTrue\"\n    \n    The assert_() method is deprecated and can be safely replaced by assertTrue().\n    This patch makes sure that running the tests does not generate warnings\n    all over the screen.\n    \n    Change-Id: I74705c6498249337bfdf955d62e0ad972035bc1f\n',308,294,NULL),(276478,978,869,'2015-07-28 12:23:14','2015-07-22 15:40:55','    functests: use assertIn and assertNotIn\n    \n    We have a bunch of assertions like\n    \n        self.assertTrue(resp.status in (200, 204))\n    \n    Sometimes we get smart about failure messages and have something like\n    \n        self.assertTrue(resp.status in (200, 204), resp.status)\n    \n    so we can see what the status was when it failed.\n    \n    Since we don\'t have to support Python 2.6 any more, we can use\n    assertIn/assertNotIn and get nice failure messages for free.\n    \n    Change-Id: I2d46c9969d41207a89e01017b4c2bc533c3d744f\n',97,97,'SwiftStack'),(276479,179,179,'2015-07-07 22:46:37','2015-07-07 22:46:37','    cPickle is deprecated in py3, replacing it from six.moves\n    \n    cPickle is deprecated and should be replaced with six.moves\n    to provide py2 and py3 compatibility.\n    \n    Change-Id: Ibad990708722360d188c641e61444d50a16a1e93\n',22,22,NULL),(276481,179,179,'2015-07-17 23:47:23','2015-07-11 22:46:41','    Modify zip usage for python3 where necessary.\n    \n    py2 zip() is eager but py3 zip() and six.moves.zip() are lazy,\n    changing ones that require eager evaluation.\n    \n    Change-Id: Ic9f6bccd7f57772158581905794f8d23b05f4223\n',14,5,NULL),(276483,179,179,'2015-07-26 21:32:06','2015-07-24 21:19:47','    Modifying Lambda function tuple usage for python3\n    \n    Current tuple unpacking is not supported in python3\n    \n    Change-Id: I15a8e977684d19154cf2233caf1174f6983ac9e2\n',4,2,NULL),(276485,179,179,'2015-07-13 00:07:13','2015-07-13 00:07:13','    Fix a minor python issue related with string.split\n    \n    Replacing string.split(value, \',\') with value.split(\',\'):\n    the string.split() function was removed in Python 3\n    \n    Change-Id: I9ed241a894ac698da33df75a774a56ae2824fadf\n',1,2,NULL),(276487,4075,978,'2015-07-24 21:51:10','2015-04-15 16:17:23','    Filter Etag key from ssync replication-headers\n    \n    ssync rx sends a header X-Backend-Replication-Headers whose value is a\n    list of headers that the source object has. This list extends the list\n    of allowed headers on the target object server, so that the target\n    object metadata is faithfully reconstructed to match the source.\n    \n    Unfortunately the combination of lower() and title() operations on\n    header keys results in the source \'ETag\' value being added to the target\n    metadata under the key \'Etag\' in addition to the \'ETag\' key that the\n    receiving server adds (note different capitilization), both having\n    the same value.\n    \n    The spurious \'Etag\' metadata is potentially confusing for humans\n    inspecting the object metadata and complicates tests that wish to\n    assert the equality of two object metadata dicts. See for example the\n    test in test_ssync_sender.py that this patch cleans up.\n    \n    Furthermore, the possibility of having both Etag and ETag keys has\n    required a workaround in the EC reconstructor [1].\n    \n    [1] reconstructor fix change id: Ie59ad93a67a7f439c9a84cd9cff31540f97f334a\n    \n    Change-Id: I0c89cf7924a4471bb6d268b5ef3884e2d2cb4286\n',144,5,'HP'),(276489,441,441,'2015-07-29 06:36:01','2015-07-29 06:36:01','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Ic30cb1dc8f12280a52cc1f07a1cf516397ed680e\n',76,75,NULL),(276490,978,978,'2015-07-29 13:30:56','2015-07-29 12:36:35','    Remove unused code in swift/obj/server.py\n    \n    keep_cache was defined twice\n    \n    Change-Id: I5f775f618669e3dabfc3bc54dd7bd2cd7f00b2f0\n',0,3,'HP'),(276492,229,5663,'2015-07-29 21:40:28','2015-07-28 19:15:25','    Swift documentation for first-time contributors.\n    \n    In this change, there are proposed improvement to Swift documentation aimed at\n    first-time contributors. They include a simplification of the Getting\n    Started page and a new page with some basic instructions/commands that the\n    first-time contributor should know. In addition, it shows some common errors\n    that the first-time contributor may find when executing git rebase and\n    information on how to track your changes.\n    \n    Change-Id: I704202955093736b2f3b4102a649690a0392c6b0\n',155,19,'IBM'),(276494,229,4088,'2015-07-29 22:25:44','2015-07-30 13:11:00','    Remove error_suppression_interval, error_suppression_limit options.\n    \n    These two options is belong to proxy-server, not account-replicator.\n    \n    Change-Id: Ie030ecffd213e56db32df77c69b847479d96308f\n',0,13,'SwiftStack'),(276496,1475,1475,'2015-07-30 09:33:18','2015-07-30 00:16:06','    Fix pep8 E265 warning of hacking 0.10\n    \n    Fix the warning E265 \"block comment should start with \'# \'\" added in pep\n    1.5.\n    \n    Change-Id: Ib57282e958be9c7cddffc7bca34fbbf1d4c460fd\n',56,56,'eNovance'),(276498,1475,1475,'2015-07-30 09:33:41','2015-07-30 00:28:44','    Fix warning pep8 E128 warning of hacking 0.10\n    \n    Fix the warning E128: \"continuation line under-indented for visual\n    indent\" of pep8.\n    \n    Change-Id: Ie6c6ae341fe3d6281f2095c1d756d552fa5937f9\n',95,88,'eNovance'),(276500,1475,1475,'2015-07-30 09:33:41','2015-07-29 23:46:58','    Fix pep8 E warning for hacking 0.10\n    \n    Fix pep8 warnings of the E category of hacking 0.10:\n    \n    * E113: unexpected indentation\n    * E121: continuation line under-indented for hanging indent\n    * E122: continuation line missing indentation or outdented\n    * E123: closing bracket does not match indentation of opening bracket\'s\n      line\n    * E126: continuation line over-indented for hanging indent\n    * E251: unexpected spaces around keyword / parameter equals\n    \n    Change-Id: I0b24eebdf1a37dc1b572b6c9a3d3d4832d050237\n',50,57,'eNovance'),(276502,1475,1475,'2015-07-30 09:33:41','2015-07-27 11:34:07','    Update hacking to 0.10.0\n    \n    Replace the whitelist of flake8 checks (select) with a blacklist\n    (ignore).  It makes possible to disable a single check, which was not\n    possible before. This new approach permits to enable new tests more\n    easily and see which checks are currently disabled.\n    \n    Only new checks are disabled, this change doesn\'t run less checks than\n    before. Currently, many checks are disabled, but following changes will\n    fix these new warnings.\n    \n    When the \"select\" option of flake8 is used in tox.ini, the \"ignore\"\n    option is ignored. It is not possible to use \"select\" and \"ignore\"\n    options at the same time. See the code in pep8 (flake8 is based on\n    pep8):\n    \n    https://github.com/PyCQA/pep8/blob/d48eef071003952ed0f98445dc3dc6bc29618f9c/pep8.py#L1808\n    \n    The purpose of flake8 is to enhance the coding style, but also to help\n    to detect common bugs. Blacklisting checks permits to detect new bugs\n    when upgrading the tools. For example, new checks were recently added to\n    help porting code to Python 3.\n    \n    This change permits to use pbr 1.0 and newer which is required to\n    support Python 3. Previously, hacking 0.8.1 was used, but hacking 0.8 is\n    incompatible with pbr 1.0 and newer (hacking 0.8 requires pbr<1.0).\n    \n    pbr 1.0 is required to use environment markers on requirements to\n    install dnspython on Python 2 and dnspython3 on Python 3.\n    \n    Change-Id: I41d63b9467083d7606ad18aaa398ca7738b27fae\n',20,10,'eNovance'),(276504,1551,1127,'2015-07-24 13:40:24','2015-06-24 16:54:02','    Support keystone v3 domains in swift-dispersion\n    \n    This provides the capability to specify a project_name,\n    project_domain_name and user_domain_name in /etc/swift/dispersion.conf.\n    If this values are set in dispersion.conf they get populated to the\n    swift-client.  With this it is possible to have a specific dispersion\n    project specified, which is not the keystone default domain.  Changes\n    were applied to swift-dispersion-populate and swift-dispersion-report.\n    Relevant man pages, the example dispersion.conf and the admin guide were\n    updated accordingly.\n    \n    DocImpact\n    Closes-Bug: #1468374\n    \n    Change-Id: I0e716f8d281b4d0f510bc568bcee4a13fc480ff7\n',46,2,'SAP SE'),(276506,978,978,'2015-07-30 12:21:00','2015-06-08 19:40:56','    Refactor diskfile\n    \n    This patch mostly eliminates the duplicate code that was\n    deliberately left in place during EC review to avoid major\n    churn of the diskfile module prior to the kilo release.\n    \n    This focuses on obvious de-duplication and shuffling code\n    between classes. It deliberately does not attempt to\n    hammer out every last piece of de-duplication where that\n    would introduce more complex changes - that can come later.\n    \n    Code is moved from the module level and from ECDiskFile*\n    classes into new BaseDiskFile* classes.\n    \n    Concrete classes for replication and EC policy retain their\n    existing names i.e. DiskFile[Manager|Writer|Reader|] and\n    ECDiskFile[Manager|Writer|Reader|] respectively.\n    \n    Knock-on changes:\n    \n    - fix bug whereby get_hashes was ignoring self.reclaim_age\n      and always using the default arg value.\n    \n    - replication diskfile manager now deletes a tombstone that is older\n      than reclaim_age even when there is a newer .meta file.\n    \n    - replication diskfile manager will no longer raise an\n      AssertionError if only a .meta file is found during\n      hash_cleanup_listdir.\n    \n    - fix stale test in test_auditor.py: test_with_tombstone test\n      setup was convoluted (probably dates back to when object puts\n      did not clean up the object dir). Now that they do you have to\n      try harder to create a dir with a tombstone and a data file.\n    \n    Change-Id: I963e0d0ae0d6569ad1de605034c529529cbb4f9a\n',592,573,'HP'),(276508,4075,4075,'2015-07-24 21:24:55','2015-07-23 16:46:48','    Fix string formatting in dispersion cli command\n    \n     ... and add a basic test that would have prevented the regression\n    \n    Change-Id: I4c5f643ee291dcc1397ca951450459d8b8ad0bbd\n',28,8,'Rackspace'),(276510,4056,4056,'2015-07-30 14:39:55','2015-07-30 14:32:08','    Fix regression in WSGI server SIGHUP behavior\n    \n    The SIGHUP receipt used to pop us out of an os.wait() where now, it\'s in\n    a \"green\" wait() and Timeout() combo, some part of which eats the signal\n    receipt.  This causes the while loop condition to never get checked and\n    SIGHUP no longer works as a server reload command.\n    \n    The fix is to loop at least every 0.5 seconds, as a trade-off between\n    not busy-waiting and checking the \"keep running\" condition often enough\n    to feel responsive.\n    \n    Change-Id: I95283b8b7cfc2998ab5813e0ad3ca1fa231696c8\n    Closes-Bug: #1479972\n',10,5,'SwiftStack'),(276512,179,179,'2015-07-12 14:48:35','2015-07-12 14:48:35','    sys.exc_type/exc_value/exc_traceback are Deprecated\n    \n    sys.exc_info() contains a tuple of these three.\n    \n    Change-Id: I530cbeb37c43da98b4924db41f6604871077bd47\n',1,1,NULL),(276514,978,978,'2015-08-03 10:21:37','2015-06-05 13:06:29','    Make test_proxy work independent of env vars\n    \n    test.unit.common.test_internal_client.TestSimpleClient.test_proxy\n    will fail if the environment has http_proxy set and does not have\n    no_proxy=127.0.0.1 set. This seems to be because urllib overrides\n    any proxy arg passed to the Request with the env http_proxy var,\n    unless the Request host is in no_proxy.\n    \n    We don\'t need to test urllib, so this patch changes the test to\n    simply ensure that swift code does pass the correct proxy arg to\n    urllib2.urlopen. That avoids testers having to make sure their\n    env vars are compliant to successfully run unit tests. While it is\n    reasonable to think that 127.0.0.1 is in the no_proxy list, it\n    shouldn\'t be a requirement pass swift tests.\n    \n    Change-Id: Iff91acdb76fabe7056b3e90e2756e27fe5105817\n',45,40,'HP'),(276516,5664,5664,'2015-08-03 16:28:31','2015-08-03 16:28:31','    Convert docstring to a comment in test_denied_DELETE_of_versioned_object unit test.\n    \n    Docstrings cause issues for nose and created non standard test output for this test.\n    \n    Change-Id: I91e6450480567de0ee0b18d3efae01a4b94f0a86\n',3,4,'Oracle'),(276518,1043,1043,'2015-08-04 10:14:25','2015-08-04 10:14:25','    Fix typo of \'receive\'\n    \n    Change-Id: Ic01defa8d48ba4b7f4bd6cbe4d59b9bab468a36c\n',1,1,'NTT'),(276519,441,441,'2015-08-04 06:29:11','2015-08-04 06:29:11','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I9f0e5fd25ec143fb87de1895794764dea4587f93\n',54,54,NULL),(276520,4088,4088,'2015-08-05 22:09:40','2015-08-05 22:09:40','    Add extra_header_count to document and config.\n    \n    Change-Id: Iec86b488d71553c295afe7098822ce2046df9546\n',9,1,'SwiftStack'),(276521,4075,229,'2015-07-22 01:19:58','2015-05-23 15:40:03','    do container listing updates in another (green)thread\n    \n    The actual server-side changes are simple. The tests are a different\n    matter. Many changes were needed to the object server tests to\n    handle the now-async calls to the container server. In an effort to\n    test this properly, some drive-by changes were made to improve tests.\n    \n    I tested this patch by doing zero-byte object writes to one container\n    as fast as possible. Then I did it again while also saturating 2 of the\n    container replica\'s disks. The results are linked below.\n    \n    https://gist.github.com/notmyname/2bb85acfd8fbc7fc312a\n    \n    DocImpact\n    \n    Change-Id: I737bd0af3f124a4ce3e0862a155e97c1f0ac3e52\n',360,179,'SwiftStack'),(276523,4075,4075,'2015-07-22 19:32:46','2015-07-22 19:32:46','    Cleanup nits from container_update_timeout\n    \n    Change-Id: Ib17fc9a027db267350abc5a7db4e3172dfff7913\n',44,59,'Rackspace'),(276525,4075,4075,'2015-08-04 23:45:40','2015-08-04 23:15:37','    Fix TypeError if backend response doesn\'t have expected headers\n    \n    There was some debug logging mixed in with some error handling on PUTs\n    that was relying on a very specific edge would only encounter a set of\n    backend responses that included the expected set of headers to diagnoise\n    the failure.\n    \n    But the backend responses may not always have the expected headers.\n    \n    The proxy debug logging should be more robust to missing headers.\n    \n    It\'s a little hard to follow, but if you look `_connect_put_node` in\n    swift.proxy.controller.obj - you\'ll see that only a few connections can\n    make their way out of the initial put connection handling with a \"resp\"\n    attribute that is not None.  In the happy path (e.g. 100-Continue) it\'s\n    explictly set to None, and in most errors (Timeout, 503, 413, etc) a new\n    connection will be established to the next node in the node iter.\n    \n    Some status code will however allow a conn to be returned for validation\n    in `_check_failure_put_connections`, i.e.\n    \n      * 2XX (e.g. 0-byte PUT would not send Expect 100-Continue)\n      * 409 - Conflict with another timestamp\n      * 412 - If-None-Match that encounters another object\n    \n    ... so I added tests for those - fixing a TypeError along the way.\n    \n    Change-Id: Ibdad5a90fa14ce62d081e6aaf40aacfca31b94d2\n',47,4,'Rackspace'),(276527,42,42,'2015-08-05 15:33:29','2015-08-05 15:33:29','    Having said H, I, J, we ought to say K\n    \n    In the long run, we might want to stop these updates. But this\n    decision is above my pay grade.\n    \n    Change-Id: I335558e1da8052be1b215fbad51244b47af3d81b\n',7,0,'Red Hat'),(276529,179,179,'2015-08-05 22:25:46','2015-08-05 22:25:46','    pep8 fix: assertEquals -> assertEqual\n    \n    assertEquals is deprecated in py3 in\n    dir : test/unit/account/*\n    \n    Change-Id: I70415197df1b0d58d4d6e219733c13a9c9cdfff7\n',25,25,NULL),(276531,179,179,'2015-08-05 22:32:02','2015-08-05 22:32:02','    pep8 fix: assertEquals -> assertEqual\n    \n    assertEquals is deprecated in py3, fixing in:\n    dir: test/unit/cli/*\n    \n    Change-Id: I9a2fc1f717beafd5fa8408942046e310e8de0318\n',60,60,NULL),(276533,2313,2313,'2015-08-06 09:28:51','2015-08-06 09:28:51','    pep8 fix: assertEquals -> assertEqual\n    \n    assertEquals is deprecated in py3 in the following dir:\n    test/probe/*\n    \n    Change-Id: Ie08dd7a8a6c48e3452dfe4f2b41676330ce455d5\n',69,69,'IBM'),(276535,179,179,'2015-08-06 00:18:52','2015-08-06 00:18:52','    pep8 fix: assertEquals -> assertEqual\n    \n    assertEquals is deprecated in py3 in\n    dir: test/unit/container/*\n    \n    Change-Id: I3333022ed63ce03198bc73147246d91d2442a440\n',738,738,NULL),(276537,5254,2313,'2015-08-05 22:23:54','2015-08-05 14:51:32','    pep8 fix: assertEquals -> assertEqual\n    \n    assertEquals is deprecated in py3 in the following dir:\n    test/functional/*\n    \n    Change-Id: Iee7f8ffca9838ccc521107180697d91ac9559405\n',118,118,'IBM'),(276539,2313,2313,'2015-08-06 13:36:26','2015-08-06 10:01:17','    pep8 fix: assertEquals -> assertEqual\n    \n    assertEquals is deprecated in py3 in the following dir:\n    test/unit/proxy/*\n    \n    Change-Id: Ie2c7e73e1096233a10ee7fbf6f88386fa4d469d6\n',620,620,'IBM'),(276541,153,153,'2015-08-07 21:57:08','2015-08-07 21:57:08','    Fix a spelling typo in comment\n    \n    s/automaticaly/automatically/ for swift/proxy/controllers/obj.py\n    \n    Change-Id: I405441383739637e0b13746d6f4e2bad1c874b4d\n    Signed-off-by: Zhao Lei <zhaolei@cn.fujitsu.com>\n',1,1,'independent'),(276543,153,153,'2015-08-07 22:21:37','2015-08-07 22:07:01','    Fix some spelling typo in comments\n    \n    s/overide/override for object-expirer.conf and sample.\n    s/automaticaly/automatically for swift/proxy/controllers/obj.py\n    \n    Change-Id: Ife107c7a1005a5d4959288db50a7f8f33c522dd4\n    Signed-off-by: Zhao Lei <zhaolei@cn.fujitsu.com>\n',3,3,'independent'),(276545,978,978,'2015-08-07 16:25:13','2015-07-28 10:31:54','    Replace assertTrue(not <condition>) with assertFalse(<condition>)\n    \n    The replacement of assert_ with assertTrue [1] resulted in a number of\n    tests using calls of the form assertTrue(not <condition>). This patch\n    replaces those with assertFalse(<condition>).\n    \n    [1] change I74705c6498249337bfdf955d62e0ad972035bc1f\n    \n    Change-Id: I78b49558f4425c2335df187b1793d1e4b3c514b1\n',32,31,'HP'),(276547,978,4075,'2015-08-03 14:29:30','2015-07-20 13:06:48','    Handle removed suffix dirs the same as empty suffix dirs\n    \n    When hashes suffix dirs, the directory might have gotten cleaned up while\n    still appearing in hashes.pkl.  It would even get cleaned up the next time.\n    \n    For example, given this really old tombstone:\n    \n        objects/846/3d0/d3a20154d0a828a032aba6860397c3d0/1432267961.41808.ts\n    \n    Prior to this commit, a call to get_hashes() would reap the old\n    tombstone and any empty containing dirs, but the resulting hashes.pkl\n    would still contain {\'3d0\': \'d41d8cd98f00b204e9800998ecf8427e\'} even\n    though there\'s no such suffix dir any more.\n    (\"d41d8cd98f00b204e9800998ecf8427e\" is the MD5 of the empty string.)\n    \n    Then, a *subsequent* get_hashes() call would omit 3d0 from the resulting\n    hash, so then hashes.pkl would no longer contain 3d0. This difference\n    would result in a little useless replication traffic while nodes without\n    a particular part/suffix pair, but who disagreed on how that showed up\n    in hashes.pkl, tried to push their version of nothing to one another.\n    \n    Now, an empty suffix dir doesn\'t appear in hashes.pkl at all, whether\n    it\'s for replication or EC, or whether it\'s for the get_hashes() call\n    that reaped the suffix dirs or not.\n    \n    Co-Author: Samuel Merritt <sam@swiftstack.com>\n    \n    Change-Id: Ie1bfb1cc56d0fc030c6db42f97b55d140695cf1f\n',18,34,'Rackspace'),(276549,5254,5254,'2015-08-07 14:11:32','2014-11-09 13:13:27','    versioned writes middleware\n    \n    Rewrite object versioning as middleware to simplify the PUT method\n    in the object controller.\n    \n    The functionality remains basically the\n    same with the only major difference being the ability to now\n    version slo manifest files. dlo manifests are still not\n    supported as part of this patch.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    \n    DocImpact\n    Change-Id: Ie899290b3312e201979eafefb253d1a60b65b837\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n',1843,1007,'Red Hat'),(276551,2316,2316,'2015-08-05 09:29:07','2015-07-27 14:19:09','    +Document method to avoid rsync filling root drive\n    \n    When rsync pushes to a remote node with an unmounted drive and if\n    certain steps are not taken, rsync may attempt to write files to\n    the local drive at the location where the drive was mounted.\n    \n    There are two suggested solutions for this issue:\n      1) Set the permissions for all mount points in /srv/node/\n           to root:root 755\n      2) Mount the drives elsewhere and symlink the drives to /srv/.../\n    \n    The first method ensures that only root and not the swift user\n    can write in the /srv/.../ directories.\n    \n    The second method will prompt a broken link issue if rsync\n    attempts to write to an unmounted drive.\n    \n    Change-Id: I60ce4ed9ef8401768d5f78b6806cbb2e2a65303e\n    Closes-Bug: #1470576\n',27,0,'TBM'),(276553,179,179,'2015-08-07 19:28:35','2015-08-06 00:55:36','    pep8 fix: assertEquals -> assertEqual\n    \n    assertEquals is deprecated in py3,changes in\n    dir:\n    *test/unit/obj/*\n    *test/unit/test_locale/*\n    \n    Change-Id: I3dd0c1107165ac529f1cd967363e5cf408a1d02b\n',766,766,NULL),(276555,179,179,'2015-07-28 21:03:05','2015-07-28 21:03:05','    test/unit: Replace python print operator with print function (pep H233, py33)\n    \n    \'print\' function is compatible with 2.x and 3.x python versions\n    Link : https://www.python.org/dev/peps/pep-3105/\n    \n    Python 2.6 has a __future__ import that removes print as language syntax,\n    letting you use the functional form instead\n    \n    Change-Id: I94e1bc6bd83ad6b05695c7ebdf7cbfd8f6d9f9af\n',25,20,NULL),(276557,5248,5248,'2015-08-04 01:49:29','2015-06-26 17:27:31','    Speed up reaper for a big account delete and some better error handling\n    \n    In run_forever mode, run the reaper on all three copies of the account\n    DB instead of just the first one and shard the containers between them.\n    \n    Change-Id: Id182e89dad70df9d6d9988523861b8085d74c765\n',126,23,'Rackspace'),(276559,978,869,'2015-08-12 04:35:20','2015-08-11 10:17:20','    Fix 500 in versioned writes with bad Destination\n    \n    When this code lived in the proxy, it was protected by an \"except\n    HTTPException\" clause in proxy.Application.handle_request(). When it\n    moved to middleware, it lost that, and then things like\n    constraints.check_name_format that raised HTTPException would cause\n    500s. The HTTPException would make it all the way out to catch_errors\n    and get translated to a 500.\n    \n    This commit just wraps a couple try/excepts around the bits in\n    versioned writes that can raise HTTPException. I tried to make it use\n    wsgify so I could get that for free, but that wound up being a real\n    pain because env/start_response are plumbed through pretty much the\n    whole versioned-writes middleware.\n    \n    Closes-Bug: 1483705\n    \n    Change-Id: Ife165bf709e64f313ed07c779b21914045e51f25\n',25,11,'SwiftStack'),(276560,2517,2517,'2015-08-06 11:02:40','2015-08-06 10:13:02','    Fix shebang of commands\n    \n    Fix shebang of following commands.\n      $ grep \'#!/usr/bin/python\' swift/bin/*\n      swift/bin/swift-account-info:#!/usr/bin/python\n      swift/bin/swift-container-info:#!/usr/bin/python\n      swift/bin/swift-container-sync:#!/usr/bin/python\n      swift/bin/swift-recon:#!/usr/bin/python\n      swift/bin/swift-ring-builder:#!/usr/bin/python\n      swift/bin/swift-ring-builder-analyzer:#!/usr/bin/python\n    \n    Change-Id: I564d1d8abd76eba57730fc2f30263b0a0f809867\n    Closes-Bug: #1481623\n',6,6,'Fujitsu'),(276562,978,978,'2015-08-03 15:05:17','2015-08-03 14:58:24','    Test that get_hashes ignores only removed hash dir\n    \n    Add test for case not yet covered by unit tests: suffix dir\n    has two hash dirs, one with expired tombstone. That hash dir gets\n    removed and its hash is not included in the suffix hash, but the\n    remaining hash dir\'s hash is reported.\n    \n    Change-Id: I031a022daed6b8a66dfd04bea1b4d5eebcb882b3\n',31,0,'HP'),(276564,179,179,'2015-07-31 07:37:33','2015-06-27 23:26:47','    Adding bandit for security static analysis testing in swift\n    \n    This change adds a basic bandit config for Swift. It can be invoked\n    by running the tox environment for bandit;\n        tox -e bandit\n    \n    This is an initial step for using bandit with Swift\n    and it should be revisited to improve the testing as more is learned\n    about the specific needs of the Swift code base.As per now some tests\n    are excluded as they were used on purpose.\n    \n    https://wiki.openstack.org/wiki/Security/Projects/Bandit\n    \n    Implements: blueprint swift-bandit\n    \n    Change-Id: I621be9a68ae9311f3a6eadd1636b05e646260cf2\n',156,0,NULL),(276566,5665,5665,'2015-08-14 16:49:41','2015-08-14 16:46:35','    Fix some minor typos\n    \n    Fixed some typos in function name and comments.\n    \n    Change-Id: Ida76ab4b331a51b71e57650702acc136e66ba4b2\n',6,6,'nokia'),(276567,591,591,'2015-07-23 11:35:02','2015-06-16 17:42:58','    Time synchronization check in recon.\n    \n    This change add call time to recon middleware and param --time to\n    recon CLI. This is usefull for checking if time in cluster is\n    synchronized.\n    \n    Change-Id: I62373e681f64d0bd71f4aeb287953dd3b2ea5662\n',219,37,'Seznam.cz'),(276569,4075,4075,'2015-07-30 15:49:23','2015-07-30 15:30:35','    Add a probetest for HUP/reload\n    \n    This would have been enough to catch the regression, and we can extend\n    them as we work on any future ehancements to our process management.\n    \n    Change-Id: I9a1b57aa15663380c45cf783afc8212ab4ffbace\n',111,4,'Rackspace'),(276571,832,1111,'2015-08-17 16:30:49','2015-08-06 07:21:15','    Make swift-ring-builder filename usage more consistent\n    \n    Sometimes the given argument is internally altered and another filename is used\n    without a note to the operator. Even worse, a given .ring.gz filename is\n    sometimes written out as builder file, without updating the corresponding\n    .builder file.\n    \n    There is already a method to parse the given argv and return the name of the\n    builder and ring file. However, it\'s rarely used and no warning is given to the\n    user if it is altered. This patch uses the already parsed builder and ring file\n    name instead of argv[1], and also adds a note to the user if the used filename\n    is differently to the one given as argument.\n    \n    Closes-Bug: 1482096\n    Change-Id: I2f8ef23aeab8b07caaa799f7dcd57e684b4b2ad2\n',40,19,'Red Hat'),(276573,5662,5662,'2015-08-18 00:03:10','2015-08-03 17:45:56','    Doc instructions for post rebase steps\n    \n    Improve the \'first_contribution_swift\' by adding instructions for how to\n    rebuild swift following a rebase.\n    \n    Change-Id: If5c91dc4e1e8d1712bbd8b326c675967fb4b8c15\n',32,5,'IBM'),(276575,978,5666,'2015-08-18 16:31:51','2015-08-12 15:00:45','    Keep user id and project id in subrequests env\n    \n    Keep HTTP_X_USER_ID and HTTP_X_PROJECT_ID to be available as\n    user_id and project_id in storage.objects.outgoing.bytes in\n    ceilometer when downloading a multipart object.\n    \n    Change-Id: I0f4734f021e5d6e84d48ed9bebeb321d7a9590ad\n    Closes-Bug: #1477283\n',11,1,'independent'),(276577,229,229,'2015-08-17 22:13:42','2015-08-17 22:13:42','    move global statement up a few lines\n    \n    Change-Id: I190d2d530c6c0525d988cc88b0965b48a291fffb\n',1,1,'SwiftStack'),(276579,1475,1475,'2015-08-19 12:05:01','2015-07-27 18:55:01','    pep8: Fix hacking H232 warnings (octal)\n    \n    Fix warnings \"H232: Python 3.x incompatible octal 000001234 should be\n    written as 0o1234\".\n    \n    Change-Id: I9a7bbb034357783885ac3e18fe1e9e32a5951616\n',3,4,'eNovance'),(276580,1475,1475,'2015-08-19 12:05:01','2015-08-16 10:34:26','    pep8: replace deprecated calls to assert_()\n    \n    The TestCase.assert_() has been deprecated in Python 2.7. Replace it\n    with assertTrue() or even better methods (assertIn, assertNotIn,\n    assertIsInstance) which provide better error messages.\n    \n    Change-Id: I21c730351470031a2dabe5238693095eabdb8964\n',13,14,'eNovance'),(276581,229,869,'2015-08-19 19:34:29','2015-08-19 10:42:28','    Add OpenStack release names to changelog\n    \n    I can never remember the mapping of real version numbers to the\n    OpenStack names.\n    \n    Change-Id: Ib7c5ae4ff2a33018364698eb34f8df1622719fab\n',18,8,'SwiftStack'),(276583,583,583,'2015-08-21 02:47:04','2015-07-14 10:03:18','    Emit warning log in object replicator\n    \n    When the object-replicator encounters handoffs_first and\n    handoff_delete options as enabled it should emit a log\n    warning indicating that it should be changed back to the\n    default before the next \"normal\" rebalance.\n    \n    Closes-Bug: #1457262\n    \n    Change-Id: If9dc2796c18ed3cf13da920831e2d5c2ae9f12a0\n',23,2,'NEC'),(276584,5155,5155,'2015-08-18 11:40:02','2014-12-03 06:15:16','    Enable Object Replicator\'s failure count in recon\n    \n    This patch makes the count of object replication failure in recon.\n    And \"failure_nodes\" is added to Account Replicator and\n    Container Replicator.\n    \n    Recon shows the count of object repliction failure as follows:\n    $ curl http://<ip>:<port>/recon/replication/object\n    {\n        \"replication_last\": 1416334368.60865,\n        \"replication_stats\": {\n            \"attempted\": 13346,\n            \"failure\": 870,\n    	\"failure_nodes\": {\n                \"192.168.0.1\": {\"sdb1\": 3},\n                \"192.168.0.2\": {\"sdb1\": 851,\n                                \"sdc1\": 1,\n                                \"sdd1\": 8},\n                \"192.168.0.3\": {\"sdb1\": 3,\n                                \"sdc1\": 4}\n    	},\n            \"hashmatch\": 0,\n            \"remove\": 0,\n            \"rsync\": 0,\n            \"start\": 1416354240.9761429,\n            \"success\": 1908\n        },\n        \"replication_time\": 2316.5563162644703,\n        \"object_replication_last\": 1416334368.60865,\n        \"object_replication_time\": 2316.5563162644703\n    }\n    \n    Note that \'object_replication_last\' and \'object_replication_time\' are\n    considered to be transitional and will be removed in the subsequent\n    releases. Use \'replication_last\' and \'replication_time\' instead.\n    \n    Additionaly this patch adds the count in swift-recon and it will be\n    showed as follows:\n    $ swift-recon object -r\n    ========================================================================\n    =======\n    --> Starting reconnaissance on 4 hosts\n    ========================================================================\n    =======\n    [2014-11-27 16:14:09] Checking on replication\n    [replication_failure] low: 0, high: 0, avg: 0.0, total: 0, Failed: 0.0%,\n    no_result: 0, reported: 4\n    [replication_success] low: 3, high: 3, avg: 3.0, total: 12,\n    Failed: 0.0%, no_result: 0, reported: 4\n    [replication_time] low: 0, high: 0, avg: 0.0, total: 0, Failed: 0.0%,\n    no_result: 0, reported: 4\n    [replication_attempted] low: 1, high: 1, avg: 1.0, total: 4,\n    Failed: 0.0%, no_result: 0, reported: 4\n    Oldest completion was 2014-11-27 16:09:45 (4 minutes ago) by\n    192.168.0.4:6002.\n    Most recent completion was 2014-11-27 16:14:19 (-10 seconds ago) by\n    192.168.0.1:6002.\n    ========================================================================\n    =======\n    \n    In case there is a cluster which has servers, a server runs with this\n    patch and the other servers run without this patch. If swift-recon\n    executes on the server which runs with this patch, there are unnecessary\n    information on the output such as [failure], [success] and [attempted].\n    Because other servers which run without this patch are not able to\n    send a response with information that this patch needs.\n    Therefore once you apply this patch, you also apply this patch to other\n    servers before you execute swift-recon.\n    \n    DocImpact\n    Change-Id: Iecd33655ae2568482833131f422679996c374d78\n    Co-Authored-By: Kenichiro Matsuda <matsuda_kenichi@jp.fujitsu.com>\n    Co-Authored-By: Brian Cline <bcline@softlayer.com>\n    Implements: blueprint enable-object-replication-failure-in-recon\n',222,130,'Fujitsu'),(276586,5599,5599,'2015-08-23 04:38:33','2015-05-13 00:43:59','    Fix the missing SLO state on fast-post\n    \n    When using fast-post and POST (i.e. metadata update) is requested to\n    a SLO manifest files, current Swift drops the \'X-Static-Large-Object\'\n    header from the existing metadata. It results in breaking the SLO\n    state because the manifest missing the \'X-Static-Large-Object\' metadata\n    will be maintained as a normal files.\n    \n    This patch fixes object-server to keep the existing\n    \'X-Static-Large-Object\' flag and then keep the SLO state.\n    \n    Change-Id: Ib1eb569071372c322dd105c52baeeb094003291e\n    Closes-bug: #1453807\n',13,4,'NTT'),(276588,2313,2313,'2015-08-17 16:05:56','2015-08-17 13:54:44','    Quorum on durable response is too low\n    \n    Increase the .durable quorum from 2 to \"parity + 1\" to guarantee\n    that we will never fail to rebuild an object.  Otherwise, with\n    low durable responses back (< parity + 1), the putter objects\n    return with failed attribute set to true, thereby failing the\n    rebuild of fragments for an object.\n    \n    Change-Id: I80d666f61273e589d0990baa78fd657b3470785d\n    Closes-Bug: 1484565\n',19,5,'IBM'),(276590,5155,5155,'2015-08-25 07:52:18','2015-08-25 07:52:18','    Fix typo of a comment in replicator\n    \n    The typo was introduced by patch 138342 (sorry) so I fix it.\n    \n    Change-Id: Id5126802d281ef7ee9be128bd2152c0d2584160e\n',1,1,'Fujitsu'),(276592,5663,5663,'2015-08-21 14:14:31','2015-08-21 14:14:31','    New troubleshooting case in documentation.\n    \n    Added a new troubleshooting case for the \"First Contribution to Swift\"\n    documentation page.\n    \n    Change-Id: I182ba702b49b28409fe56becae93326e5f63dcd0\n',26,1,'IBM'),(276594,4075,4075,'2015-08-21 18:43:41','2015-08-21 14:04:46','    Minor cleanup handoff mode warnings\n    \n      * message is a little clearer\n      * test is a little stronger\n    \n    Change-Id: I745cde7f4a46dafc80ab42d39e6ccc92aa3b746e\n',32,18,'Rackspace'),(276596,4075,4075,'2015-08-24 11:20:02','2015-08-21 18:14:55','    Use correct Storage-Policy header for REPLICATE requests\n    \n    Under some concurrency the object-replicator could potentially send the\n    wrong X-Backed-Storage-Policy-Index header to it\'s partner nodes during\n    replication if there were multiple storage policies on the same node\n    because of a race where multiple jobs being processed concurrently would\n    mutate some shared state on the ObjectReplicator instance.\n    \n    Instead of using shared stated on the ObjectReplicator instance when\n    mutating the default headers send with REPLICATION requests each job\n    will copy them into a local where they can safely be updated.\n    \n    Change-Id: I5522db57af7e308b1f9d4181f14ea14e386a71fd\n',111,9,'Rackspace'),(276598,832,832,'2015-08-25 11:31:59','2015-08-25 11:24:49','    Follow up patch to fix a multiline import NITPIC\n    \n    This change cleans up test/unit/obj/test_replicator.py\'s imports\n    to use only 1 version of multiline import syntaxes (\' \\\' vs \'()\').\n    I don\'t really mind which, but we should be consistant, at least\n    in the same file.\n    \n    This is a follow up for patch 215857.\n    \n    Change-Id: Ie2d328c25865b19092c493981a803ee246a9d7a5\n',2,2,'Rackspace'),(276600,2470,2470,'2015-08-24 14:33:57','2015-08-24 20:36:22','    Fix use of delimiter in account listings\n    \n    Previously, account listings that used the delimiter query param could\n    omit some containers if they ended with the character that follows the\n    delimiter.\n    \n    See If196e3075612b121ef8da4a9128167d00a248c27 for the corresponding fix\n    for container listings.\n    \n    Change-Id: I57fcb97e51f653f5f4e306a632fcb3a0fb148c4e\n',18,9,'SwiftStack'),(276602,1475,1475,'2015-08-19 17:12:51','2015-08-16 11:06:52','    pep8: Fix usage of the l10n _(\'...\') function\n    \n    Fix the pep8 warning H702 \"Formatting operation should be outside of\n    localization method call\".\n    \n    For the logger, pass parameters as indexed parameters instead of using\n    the string str%args operator, the logger is more reliable in case of\n    formatting error.\n    \n    Change-Id: If418bc155f6a6c0a00f63e3d87ebe4addf4aae55\n',11,10,'eNovance'),(276604,869,869,'2015-08-20 13:24:38','2015-08-20 13:24:38','    Fix 500 for bogus Range request to 0-byte object.\n    \n    The proxy was trying to pop a byterange off a Range header that didn\'t\n    contain syntactically-valid byteranges. This worked about as well as\n    you\'d expect. Now we detect the bogus value and remove the header\n    entirely.\n    \n    Change-Id: I24b92f900d33ec79880c7db2870378489d5a6810\n',46,1,'SwiftStack'),(276606,5667,5667,'2015-08-22 22:50:50','2015-07-28 09:41:12','    Add container sync probe test to SAIO default set\n    \n    SAIO Configuration and documentation changes enabling to run the\n    container sync probe test by default\n    \n    Change-Id: Iccf59533d0d4fe72549d318339ab125d04dde006\n    Related-Bug: #1476623\n',14,1,'independent'),(276608,5155,179,'2015-08-20 11:42:58','2015-07-28 20:35:25','    test/(functional/probe):Replace python print operator with print function (pep H233, py33)\n    \n    \'print\' function is compatible with 2.x and 3.x python versions\n    Link : https://www.python.org/dev/peps/pep-3105/\n    \n    Python 2.6 has a __future__ import that removes print as language syntax,\n    letting you use the functional form instead\n    \n    Change-Id: I416c6ac21ccbfb91ec328ffb1ed21e492ef52d58\n',36,38,NULL),(276610,5668,5668,'2015-08-20 18:40:52','2015-08-20 18:40:52','    Fix the comment in [1].\n    \n    (line 259) parameter(op) of object_update method is \'PUT\' or\n    \'DELETE\' not \'POST\' or \'DELETE\'.\n    \n    [1]: swift/obj/updater.py\n    \n    Change-Id: I876a620ba8e09e69fba7156b12e69445c229e160\n',1,1,'NTT'),(276612,978,978,'2015-08-25 11:05:41','2015-08-25 11:05:41','    Fix swob.Range docstring\n    \n    Bad ranges cause a ValueError to be raised, not an empty\n    ranges list.\n    \n    Change-Id: I118bd2f7dc08ff5198870f4093c6eb350506c8ed\n',2,2,'HP'),(276614,869,869,'2015-08-24 23:11:34','2015-08-24 23:11:34','    Allow pep8 of a single file\n    \n    Now you can run\n    \n       $ tox -e pep8 path/to/file.py [path/to/file2.py [...]]\n    \n    to run pep8 against just those files[1]. This is quite a bit faster\n    than a full pep8 run, and the faster feedback is nice when you\'re\n    fiddling with some formatting to placate pep8.\n    \n    Of course, you can still run \"tox -e pep8\" to check the whole source\n    tree, just as before this commit.\n    \n    [1] It\'ll still run against bin/swift* as well, but that\'s still a lot\n    faster than running against all our .py files.\n    \n    Change-Id: I81b4363fb95a34ff0f5c346b2b24f2047154f502\n',1,1,'SwiftStack'),(276616,1475,1475,'2015-08-19 17:12:58','2015-08-16 11:18:49','    pep8: Don\'t override \'_\' symbol\n    \n    Fix pep8 warning F402 \"import \'_\' from line 51 shadowed by loop\n    variable\".\n    \n    Change-Id: I139060ff5d298a8b0f0f8e529a5737478fb5daf5\n',2,3,'eNovance'),(276618,229,4075,'2015-08-26 08:06:52','2015-07-23 22:36:21','    Disallow unsafe tempurl operations to point to unauthorized data\n    \n    Do not allow PUT tempurls to create pointers to other data. Specifically\n    disallow the creation of DLO object manifests by returning an error if a\n    non-safe tempurl request includes an X-Object-Manifest header regardless of\n    the value of the header.\n    \n    This prevents discoverability attacks which can use any PUT tempurl to probe\n    for private data by creating a DLO object manifest and then using the PUT\n    tempurl to head the object which would 404 if the prefix does not match any\n    object data or form a valid DLO HEAD response if it does.\n    \n    This also prevents a tricky and potentially unexpected consequence of PUT\n    tempurls which would make it unsafe to allow a user to download objects\n    created by tempurl (even if they just created them) because the result of\n    reading the object created via tempurl may not be the data which was uploaded.\n    \n    [CVE-2015-5223]\n    \n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    \n    Change-Id: I11e68830009d3f6bff44ae4011a41b67139146f6\n    Closes-Bug: 1453948\n',85,1,'Rackspace'),(276620,229,869,'2015-08-26 08:06:57','2015-08-11 09:10:13','    Better scoping for tempurls, especially container tempurls\n    \n    It used to be that a GET of a tempurl referencing a large object would\n    let you download that large object regardless of where its segments\n    lived. However, this led to some violated user expectations around\n    container tempurls.\n    \n    (Note on shorthand: all tempurls reference objects. However, \"account\n    tempurl\" and \"container tempurl\" are shorthand meaning tempurls\n    generated using a key on the account or container, respectively.)\n    \n    Let\'s say an application is given tempurl keys to a particular\n    container, and it does all its work therein using those keys. The user\n    expects that, if the application is compromised, then the attacker\n    only gains access to the \"compromised-container\". However, with the old\n    behavior, the attacker could read data from *any* container like so:\n    \n    1) Choose a \"victim-container\" to download\n    \n    2) Create PUT and GET tempurl for any object name within the\n       \"compromised-container\". The object doesn\'t need to exist;\n       we\'ll create it.\n    \n    3) Using the PUT tempurl, upload a DLO manifest with\n       \"X-Object-Manifest: /victim-container/\"\n    \n    4) Using the GET tempurl, download the object created in step 3. The\n       result will be the concatenation of all objects in the\n       \"victim-container\".\n    \n    Step 3 need not be for all objects in the \"victim-container\"; for\n    example, a value \"X-Object-Manifest: /victim-container/abc\" would only\n    be the concatenation of all objects whose names begin with \"abc\". By\n    probing for object names in this way, individual objects may be found\n    and extracted.\n    \n    A similar bug would exist for manifests referencing other accounts\n    except that neither the X-Object-Manifest (DLO) nor the JSON manifest\n    document (SLO) have a way of specifying a different account.\n    \n    This change makes it so that a container tempurl only grants access to\n    objects within its container, *including* large-object segments. This\n    breaks backward compatibility for container tempurls that may have\n    pointed to cross container *LO\'s, but (a) there are security\n    implications, and (b) container tempurls are a relatively new feature.\n    \n    This works by having the tempurl middleware install an authorization\n    callback (\'swift.authorize\' in the WSGI environment) that limits the\n    scope of any requests to the account or container from which the key\n    came.\n    \n    This requires swift.authorize to persist for both the manifest request\n    and all segment requests; this is done by having the proxy server\n    restore it to the WSGI environment prior to returning from __call__.\n    \n    [CVE-2015-5223]\n    \n    Co-Authored-By: Clay Gerrard <clayg@swiftstack.com>\n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    Co-Authored-By: Christian Schwede <cschwede@redhat.com>\n    Co-Authored-By: Matthew Oliver <matt@oliver.net.au>\n    \n    Change-Id: Ie6d52f7a07e87f6fec21ed8b0ec1d84be8b2b11c\n    Closes-Bug: 1449212\n',333,68,'SwiftStack'),(276622,1141,1141,'2015-08-25 17:07:37','2015-08-18 07:24:19','    Restrict PyECLib version to 1.0.7\n    \n    v1.0.9 rev of PyECLib replaces Jerasure with a native EC\n    implementation (liberasurecode_rs_vand) as the default\n    EC scheme.  Going forward, Jerasure will not be bundled\n    with PyPI version of PyECLib as it used to be, until\n    v1.0.7.\n    \n    This is an interim change to Swift requirements until we\n    get v1.0.9 PyECLib included into global-requirements and\n    ready patches that change Swift default ec_type (for doc,\n    config samples and unit tests) from \"jerasure_rs_vand\"\n    to \"liberasurecode_rs_vand.\"\n    \n    Change-Id: Ica4fee2cdea2bc7f5edd0e51ad637a4457faf3b4\n',1,1,'Intel'),(276624,5599,5599,'2015-08-25 08:03:34','2015-07-06 13:21:40','    Fix EC GET backend stream iteration state\n    \n    In EC case, When GET object requested, proxy-server always makes a log\n    line \"Client disconnected on read\" even though the request succeeded.\n    \n    That is because ECAppIter class doesn\'t maintain a bunch of backend\n    stream when closing the app_iter. It will cause unfortunately\n    GeneratorExit on backend stream ResumingGetter.\n    \n    This patch fixes to set non_client_disconnected to propagate the state\n    to the backend streams when the range iteration stopped successful.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    \n    Change-Id: I77af9807816bea1444d66534a17e2a210bcf09f8\n    Closes-Bug: #1472201\n',100,1,'NTT'),(276626,229,229,'2015-08-31 10:53:01','2015-08-21 13:39:41','    Updated CHANGELOG, AUTHORS, and .mailmap for 2.4.0 release.\n    \n    Change-Id: Ic6301146b839c9921bb85c4f4c1e585c9ab66661\n',158,4,'SwiftStack'),(276628,5669,5670,'2015-08-28 06:54:06','2015-08-28 11:49:43','    Remove duplicate X-Backend-Storage-Policy-Index key\n    \n    There is duplicate \'X-Backend-Storage-Policy-Index\' dictionary key in unit.obj.test_server.py.\n    One key has fixed policy index value, and another has random value.\n    Unittest should done with random policy index, so remove key which is set fixed value.\n    \n    Change-Id: Ic91fcf44d48297d0feee33c928ca682def9790a3\n',0,1,'NTT'),(276630,4075,4075,'2015-08-28 11:38:05','2015-08-27 18:35:09','    Make ssync_sender send valid chunked requests\n    \n    The connect method of ssync_sender tells the remote connection that it\'s\n    going to send a valid HTTP chunked request, but if the remote end needs\n    to respond with an error of any kind sender throws HTTP right out the\n    window, picks up his ball, and closes the socket down hard - much to the\n    surprise of the eventlet.wsgi server who up to this point had been\n    playing along quite nicely with this \'SSYNC\' nonsense assuming that\n    everyone here is consenting mature adults.\n    \n    If you\'re going to make a \"Transfer-Encoding: chunked\" request have the\n    good decency to finish the job with a proper \'0\\r\\n\\r\\n\'. [1]\n    \n    N.B. It might be possible to handle an error status during the\n    initialize_request phase with some sort of 100-continue support, but\n    honestly it\'s not entirely clear to me when the server isn\'t going to\n    close the connection if the client is still expected to send the body\n    [2] - further if the error comes later during missing_check or updates\n    we\'ll for sure want to send the chunk transfer termination line before\n    we close down the socket and this way we cover both.\n    \n    1. Really, eventlet.wsgi shouldn\'t be so blasted brittle about this [3]\n    2. https://lists.w3.org/Archives/Public/ietf-http-wg/2005AprJun/0007.html\n    3. https://github.com/eventlet/eventlet/commit/c3ce3eef0b4d0dfdbfb1ec0186d4bb204fb8ecd5\n    \n    Closes-Bug #1489587\n    Change-Id: Ic17c6c3075553f8cf6ef6213e62a00282f0d01cf\n',37,2,'Rackspace'),(276632,4075,4087,'2015-08-27 21:09:41','2015-08-12 13:32:50','    EC GET path: require fragments to be of same set\n    \n    And if they are not, exhaust the node iter to go get more.  The\n    problem without this implementation is a simple overwrite where\n    a GET follows before the handoff has put the newer obj back on\n    the \'alive again\' node such that the proxy gets n-1 fragments\n    of the newest set and 1 of the older.\n    \n    This patch bucketizes the fragments by etag and if it doesn\'t\n    have enough continues to exhaust the node iterator until it\n    has a large enough matching set.\n    \n    Change-Id: Ib710a133ce1be278365067fd0d6610d80f1f7372\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    Closes-Bug: 1457691\n',828,116,'Intel'),(276634,5599,5599,'2015-08-23 05:38:08','2015-05-15 06:44:12','    eventlet.posthook related code needn\'t anymore\n    \n    In the past, older Swift seemed to use eventlet.posthooks scheme for the\n    logging on proxy with posthooklogger method. However, for now, Swift\n    attaches no method to eventlet.posthooks everywhere so we don\'t have\n    to maintain the posthooks anymore.\n    \n    Change-Id: Ie63941a202d448532d980252a4d25575f8edab9c\n',9,2,'NTT'),(276636,5654,5654,'2015-08-26 11:32:06','2015-08-17 16:50:56','    Fix dispersion-reports error message\n    \n    This patch fixes Swift to show message\n    \"No objects to query. Has swift-dispersion-populate been run?\"\n    for \"swift-dispersion-report —object-only”\n    with no container for object dispersion.\n    \n    Change-Id: I82da56709cfc296a27f5180681709bc56adbc13d\n    Closes-Bug: #1468120\n',60,3,'Nippon Telegraph and Telephone Corporation'),(276638,5656,5656,'2015-09-01 15:11:25','2015-09-01 15:08:44','    Included reference in swift.obj.diskfile to enumerate the string\n    used for data file paths.\n    \n    Change-Id: Ie22caa678bc00dfc43fabec7efbbb9f34490f1b5\n',4,0,'IBM'),(276640,5599,5599,'2015-08-12 07:41:36','2015-07-22 10:39:22','    Fix EC range GET/COPY handling\n    \n    When range GET (or COPY) for an EC object requested, if the requested range\n    starts from more than last segments alignment (i.e.\n    ceil(object_size/segment_size) * segment_size), proxy server will return\n    the original content length w/o body, though Swift should return an error\n    massage as a body and the length of message as the content length.\n    The current behavior will cause stuck on some client. (e.g. curl)\n    \n    This patch fixes that proxy enables to return correct response, even if such\n    an over range requested.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    \n    Change-Id: I21f81c842f563ac4dddc69011ed759b744bb20bd\n    Closes-Bug: #1475499\n',95,8,'NTT'),(276642,869,869,'2015-09-01 15:19:50','2015-09-01 15:19:50','    Preserve traceback in swift-dispersion-report\n    \n    Commit c690bcb fixed a bug in the dispersion report, but changed this\n    from a bare \"raise\" to \"raise err\", which loses the traceback. Not a\n    big deal, but worth putting back IMO.\n    \n    Change-Id: Id5b72153a4b8df8e3faaf1fa3fb2040e28ba85cc\n',1,1,'SwiftStack'),(276644,5146,5146,'2015-09-01 10:51:20','2015-09-01 10:51:20','    Adds useful dispersion info from changelog\n    \n    Change-Id: I1a45088fc32620b02ff9a754b02ec1eb75a59d6e\n',15,0,'IBM'),(276646,978,978,'2015-08-26 16:30:23','2015-08-26 16:30:23','    Add test that a tempurl POST cannot set a DLO manifest header\n    \n    Follow up to [1] to add tests for tempurl POSTs not being allowed\n    to set a DLO manifest header.\n    \n    [1] I11e68830009d3f6bff44ae4011a41b67139146f6\n    \n    Change-Id: I7c0ad5a936f71e56c599b8495a586913d3334422\n    Related-Bug: 1453948\n',52,13,'HP'),(276648,2313,2313,'2015-08-18 17:43:26','2015-08-07 16:24:28','    Add unit test for container_update for unmounted device\n    \n    This unit test case gains coverage for container/update.py\n    where a device (i.e. sda1) is not mounted and the code\n    responds with a warning logger that the device is not\n    mounted and continues.  Coverage increases 2% as a result.\n    \n    Change-Id: I33d247a930b28604093df4ade1ce7dbbd24aac54\n',34,1,'IBM'),(276650,1111,1111,'2015-09-02 10:53:09','2015-09-02 10:52:34','    Test if container_sweep is executed on unmounted devices\n    \n    This change ensures that container_sweep is not run if a device is not mounted\n    and mount_check is set to True.\n    \n    Change-Id: I823083c8431d9e61fd426508033ec9188503957b\n',12,1,'Red Hat'),(276652,1616,1616,'2015-09-02 17:42:31','2015-09-02 17:18:03','    [Labs] Update links to Cloud Admin Guide\n    \n    Update links to the Cloud Admin Guide after the\n    RST conversion of that book altered URLs.\n    \n    Change-Id: I899f8938498b744e62887968a65e58c00ef27f1b\n',1,1,'independent'),(276654,179,179,'2015-09-01 07:07:09','2015-08-02 21:29:13','    Replace a / b with a // b to use integer division where needed\n    \n    Change-Id: I72c81faa62786e140b0de00e3a04934bf1b5adbd\n',11,11,NULL),(276656,441,441,'2015-09-05 06:17:51','2015-09-05 06:17:51','    Imported Translations from Transifex\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I2d92b8e34a665fb0bb4c048cfb0c59de295dfce6\n',1246,122,NULL),(276658,5596,5596,'2015-09-03 22:31:06','2015-09-03 22:06:31','    go: improve replication logging\n    \n    Make REPCONN return more sensical response codes.\n    Log errors in REPCONN handler.\n    Track and log files and amount of data transferred by replicator.\n    Sneak in not calculating hashes for handoff replication, since I noticed I\n    forgot that.\n    \n    Change-Id: I6f0ceee0d0b5546f7e97574579d8445beec18248\n',39,10,'Rackspace'),(276660,5248,5248,'2015-09-04 16:10:41','2015-09-04 16:10:41','    go: add a couple timers to see about GetHashes vrs Sync time\n    \n    Change-Id: I9fca1583e3f00bf29bf16628b10885498e21efb7\n',6,1,'Rackspace'),(276662,5248,5248,'2015-09-04 17:27:42','2015-09-04 17:26:45','    go: assign startTime to Now at beginning of replication run\n    \n    Change-Id: Ie488611c790398c76928ce6286771516201c83b8\n',2,1,'Rackspace'),(276664,5248,5248,'2015-09-04 22:13:53','2015-09-04 22:13:53','    go: replicator log time spent getting remote hashes\n    \n    Change-Id: Iad15050f2203dd6893aae70cd9f6685337f1b926\n',5,3,'Rackspace'),(276665,5248,5248,'2015-09-10 13:33:36','2015-09-10 11:09:30','    go: change dir permissions to what swift does\n    \n    Change-Id: If9eea04107dd03e3aafe3abcf4448f14483f62f2\n',9,9,'Rackspace'),(276666,5659,5659,'2015-08-25 14:52:07','2015-08-25 14:52:07','    go: Collecting runtime metrics\n    \n    Starts collecting & sending runtime metrics for both object server & object replicator to statsd server. It uses following statsd client library  https://github.com/cactus/go-statsd-client.\n    \n    To enable this, set the following configuration entries\n    \n        log_statsd_host = localhost\n        log_statsd_port = 8125\n        log_statsd_metric_prefix =  myserver\n        statsd_collection_pause = 10 # Go metrics collection pause interval in seconds\n    If log_statsd_host is not set, this feature is disabled.\n    \n    As collecting runtime metrics is expensive operation, it is suggested to keep statsd_collection_pause interval to 10 seconds or more.\n    \n    Change-Id: Ia9a7ec2b0949d5d02b3da6da50ff8e38f10bf59d\n',73,1,'Rackspace'),(276668,5248,4075,'2015-09-03 23:00:55','2015-08-12 15:57:33','    Better error output in TestHealthCheck\n    \n     * drive-by .gitignore for go/bin\n    \n    Change-Id: I30e0f489b5c915eeb84a399bec0946ed99a3fc1e\n',4,1,'Rackspace'),(276670,5248,5248,'2015-09-04 17:34:06','2015-09-03 22:54:51','    go: use recon diskusage so you can weed out unmounted drives\n    \n    Change-Id: Ice7b38f18f408500215b6ce8ebe39d669f57a0be\n',20,9,'Rackspace'),(276672,5248,5248,'2015-09-11 18:34:18','2015-09-11 12:36:27','    go: make BeginReplication concurrent\n    \n    Change-Id: I84b537f15810fc24d443aa51b4c9df93437a503d\n',37,15,'Rackspace'),(276673,5596,5596,'2015-09-17 19:59:45','2015-09-17 19:59:45','    go: add a way to terminate replication cleanly\n    \n    Add a flag to syncfilerequest to terminate the state machine cleanly.\n    \n    Change-Id: Icea8baa03036db5d80b12c3e0cf95af189338d6b\n',19,1,'Rackspace'),(276674,5596,5596,'2015-07-31 19:22:53','2015-07-30 19:54:15','    go: fix some panics in unpickle\n    \n    Fix a few cases where PickleLoads panics on invalid pickles instead of\n    returning an error.  I found all of these with go-fuzz.  It\'s super cool.\n    https://github.com/dvyukov/go-fuzz\n    \n    Change-Id: I7e73df4afc077977570fa8706e84846a69ffae7d\n',42,1,'Rackspace'),(276676,5663,5663,'2015-08-21 13:45:00','2015-07-09 23:10:05','    Improving statistics sent to Graphite.\n    \n    Currently, statistics are organized by command. However, it would also be\n    useful to display statistics organized by policy. Different policies may be\n    based on different storage properties (ie, faster disks).\n    With this change, all the statistics for object timers will be sent per policy\n    as well.\n    Policy statistics reporting will use policy index and the name in Graphite will\n    show as proxy-server.object.policy.<policy-index>.<verb>, etc.\n    Updated unit tests for per-policy stat reporting and added new unit tests for\n    invalid cases.\n    Updated documentation in the Administrator\'s Guide to reflect this new\n    aggregation.\n    \n    Change-Id: Id70491e4833791a3fb8ff385953d69018514cd9c\n',212,28,'IBM'),(276678,4075,4087,'2015-09-08 14:58:11','2015-08-27 11:02:27','    Fix invalid frag_index header in ssync_sender when reverting EC tombstones\n    \n    Back in d124ce [1] we failed to recognize the situation where a revert\n    job would have an explicit frag_index key wth the literal value None\n    which would take precedence over the dict.get\'s default value of \'\'.\n    Later in ssync_receiver we\'d bump into the ValueError converting \'None\'\n    to an int (again).\n    \n    In ssync_sender we now handle literal None\'s correctly and should\n    hopefully no longer put this invalid headers on the wire - but for belts\n    and braces we\'ll also update ssync_receiver to raise a 400 series error\n    and ssync_sender to better log the error messages.\n    \n    1. https://review.openstack.org/#/c/195457/\n    \n    Co-Author: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Author: Alistair Coles <alistair.coles@hp.com>\n    Change-Id: Ic71ba7cc82487773214030207bb193f425319449\n    Closes-Bug: 1489546\n',254,20,'Intel'),(276680,4075,4075,'2015-09-14 17:17:29','2015-09-14 17:17:29','    Fix typo in Deployment Guide and add some formatting\n    \n    Change-Id: I58703162bf3e9f39656a5e511bd8fe845793bca2\n',4,4,'Rackspace'),(276681,978,2313,'2015-09-15 09:40:39','2015-09-14 16:01:39','    Update EC Support on how to build an EC ring with replicas count\n    \n    This doc is being updated to specify the replicas count parameter\n    to build an EC ring that enforces both data and parity placements\n    for each partition.\n    \n    Change-Id: I770ad268e4017e610be3357e89b89f0b7d3c18af\n    Closes-Bug: 1487203\n',16,3,'IBM'),(276683,5671,5671,'2015-09-07 08:00:18','2015-06-16 12:47:26','    Allows to configure the rsync modules where the replicators will send data\n    \n    Currently, the rsync module where the replicators send data is static. It\n    forbids administrators to set rsync configuration based on their current\n    deployment or needs.\n    \n    As an example, the rsyncd configuration example encourages to set a connections\n    limit for the modules account, container and object. It permits to protect\n    devices from excessives parallels connections, because it would impact\n    performances.\n    \n    On a server with many devices, it is tempting to increase this number\n    proportionally, but nothing guarantees that the distribution of the connections\n    will be balanced. In the worst scenario, a single device can receive all the\n    connections, which is a severe impact on performances.\n    \n    This commit adds a new option named \'rsync_module\' to the *-replicator sections\n    of the *-server configuration file. This configuration variable can be\n    extrapolated with device attributes like ip, port, device, zone, ... by using\n    the format {NAME}. eg:\n        rsync_module = {replication_ip}::object_{device}\n    \n    With this configuration, an administrators can solve the problem of connections\n    distribution by creating one module per device in rsyncd configuration.\n    \n    The default values are backward compatible:\n        {replication_ip}::account\n        {replication_ip}::container\n        {replication_ip}::object\n    \n    Option vm_test_mode is deprecated by this commit, but backward compatibility is\n    maintained. The option is only effective when rsync_module is not set. In that\n    case, {replication_port} is appended to the default value of rsync_module.\n    \n    Change-Id: Iad91df50dadbe96c921181797799b4444323ce2e\n',247,76,'OVH'),(276685,5146,5146,'2015-09-13 19:10:17','2015-09-02 04:13:29','    Fixes recon bug with initially missing rings\n    \n    Previously the recon middleware was doing a basic scan for object\n    rings that exist at init time. In situations where an object-server\n    was started without an object ring present, but received one shortly\n    after, recon still would not report it in the /recon/ringmd5 response.\n    This persists even when object-server gleefully chugs along after\n    picking up the ring, and recon\'s behavior would only be corrected by\n    an object-server reload/restart.\n    \n    This change brings the middleware a bit more up to date to use the\n    common POLICIES instance to determine what policies were already loaded\n    based on configuration, and derives the path for each ring.\n    \n    This effectively makes the config the source of truth for what rings\n    *should* be present, rather than what\'s present at startup. Since we\n    already dynamically check in ReconMiddleware.get_ring_md5 whether each\n    of the predetermined ring files exist, recon now correctly reports a\n    previously-missing ring whenever it falls into place.\n    \n    Change-Id: Ia079418e54ffac5e01ef6a15511f5069b7fe83ea\n',208,71,'IBM'),(276687,2313,2313,'2015-09-11 14:49:41','2015-09-08 16:11:33','    Reconstructor GET excludes user_agent in log\n    \n    To make it easier for users to deduce in the log to find out\n    where the request originates from, it is necessary to include\n    the user_agent field in the reconstructor for a GET method\n    and to have this particular log consistent with other servers\'\n    methods.\n    \n    Change-Id: I0ca7443436e97c2db64c966ab4d73c5c12a1f059\n    Closes-Bug: 1491871\n    Co-Authored-By: Kota Tsuyuzakai <tsuyuzaki.kota@lab.ntt.co.jp>\n',30,10,'IBM'),(276689,4075,4075,'2015-09-18 13:54:52','2015-09-18 13:54:52','    Fix recon tests on SAIO with multiple policies\n    \n    Recon middleware used to only look on rings that exist on disk when it was\n    started, so if a test didn\'t create a ring in the temp swift_dir it can expect\n    the middleware to not report it.\n    \n    However, after we started looking at policies to determine rings [1] - we need\n    to be more careful to patch policies to match up with the test requirements.\n    On development environments with only the legacy default polices the existing\n    recon tests were passing by accident - but not in my environment.\n    \n    This change will patch policies for the TestCase so that tests will pass for\n    me.  Individual test methods that have more specific policy requirements for\n    the test can continue to @patch_policies just for those tests but in general\n    the existing test_methods all seem to expect legacy policies - so we just make\n    the default for the TestCase legacy_only.\n    \n    Change-Id: I778a0a59091ca8870e1cab985f3ec426eb045ab7\n',1,0,'Rackspace'),(276691,978,4075,'2015-09-10 11:07:04','2015-08-27 15:09:29','    Fix purge for tombstone only REVERT job\n    \n    When we revert a partition we normally push it off to the specific\n    primary node for the index of the data files in the partition.  However,\n    when a partition is devoid of any data files (only tombstones) we build\n    a REVERT job with a frag_index of None.\n    \n    This change updates the ECDiskFile\'s purge method to be robust to\n    purging tombstones when the frag_index is None.\n    \n    Add probetest to validate tombstone only revert jobs will clean\n    themselves up if they can validate they\'re in-sync with part-replica\n    count nodes - even if one of the primaries is down (in which case they\n    sync tombstones with other handoffs to fill in for the primaries)\n    \n    Change-Id: Ib9a42f412fb90d51959efce886c0f8952aba8d85\n',90,33,'Rackspace'),(276693,5656,5656,'2015-09-18 15:25:32','2015-09-09 15:33:45','    Reconstructor logging to omit 404 warnings\n    \n    Currently, the replicator does not log warning messages\n    for 404 responses. We would like the reconstructor to\n    do the same, as 404s are not considered unusual, and\n    are already handled by the object server.\n    \n    Change-Id: Ia927bf30362548832e9f451923ff94053e11b758\n    Closes-Bug: #1491883\n',18,2,'IBM'),(276695,978,978,'2015-09-21 10:06:29','2015-09-21 10:01:54','    Fix .coveragrc to prevent nose tests error\n    \n    Since v4.0 the coverage package raises an error if unrecognized\n    options are found in .coveragrc [1]. Previously they were ignored. The\n    ignore-errors option therefore causes nosetests with coverage to error\n    because the option should be ignore_errors (underscore not hyphen).\n    \n    [1] https://bitbucket.org/ned/coveragepy/src/tip/CHANGES.rst\n    \n    Change-Id: Ic488801b7cc43217f9e2a4ed945e06505b667608\n',1,1,'HP'),(276696,978,978,'2015-09-21 20:15:08','2015-09-11 16:04:08','    diskfile: make get_ondisk_files return a dict\n    \n    get_ondisk_files gathers a dict with more info than just the set\n    of data, ts and/or meta files, but only returns the\n    set of files to the DiskFile class. The other info\n    in the dict may be useful policy specific implementations, so\n    return the whole dict.\n    \n    Also, refactor _get_ondisk_file to move duplicated code into the\n    BaseDiskFile open() method.\n    \n    Change-Id: I7a17d26b7ed7f7c593f577332937793419c03cfa\n    Co-Authored-By: Paul Luse <paul.e.luse@intel.com>\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n',75,112,'HP'),(276697,4075,5599,'2015-09-21 23:24:01','2015-09-16 06:54:57','    Fix client disconnect during multhiphase commit\n    \n    This patch add a test to figure out the failure case behavior of\n    object-server when the connection from proxy-server disconnected\n    during commit phase. Especially, this patch was made to focus on\n    making sure whether or not contaienr updates occurs in the situation.\n    \n    In the process of working on that test we made the behavior of the\n    object-server when the connection from the proxy-server disconnected\n    during the commit phase - reasonable.\n    \n    We capture the IOError/ValueError\'s that eventlet.wsgi might barf out\n    really close to the wsgi_input read and translate them to a\n    swift.common.exceptions.ChunkReadError so we can handle them at a higher\n    level in the ObjectController\'s generic PUT disconnect handling.\n    \n    Since that test went so well, we refactored the other ones to use some\n    common context management and wrote a few more.\n    \n    Co-Author: Clay Gerrard <clay.gerrard@gmail.com>\n    Change-Id: I60c98172e524869b06bdf23fd1c4e1bce7a98f80\n',424,276,'NTT'),(276699,441,441,'2015-09-22 07:36:39','2015-09-22 07:36:39','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I800cbf3d5cbc510b60cdf4f407d91b9216830094\n',9236,3,NULL),(276701,4075,4075,'2015-09-22 12:15:27','2015-09-17 09:54:30','    Fix proxy handling of EC client disconnect\n    \n    The ECObjectController was unconditionally sending down the frag archive\n    commit document after the client source stream terminated - even if the\n    client disconnected early.\n    \n    We can detect early disconnect in two ways:\n    \n      1. Content-Length and not enough bytes_transfered\n    \n         When eventlet.wsgi is reading from a Content-Length body the\n         readable returns the empty string and our iterable raises\n         StopIteration - but we can check content-length against\n         bytes_transfered and know if the client disconnected.\n    \n      2. Transfer-Encoding: chunked - w/o a 0\\r\\n\\r\\n\n    \n         When eventlet.wsgi is reading from a Transfer-Encoding: chunked\n         body the socket read returns the empty string, eventlet.wsgi\'s\n         chunked parser raises ValueError (which we translate to\n         ChunkReadError*) and we know we know the client disconnected.\n    \n    ... if we detect either of these conditions the proxy should:\n    \n      1. *not* send down the commit document to object servers\n      2. disconnect from backend servers\n      3. log the client disconnect\n    \n    Oddly the code on master was only messing up the first part.  Backend\n    connections were terminated (gracefully after the commit document), and\n    then the disconnect was being logged as 499.\n    \n    So now we only send down the commit document on a successful complete\n    client HTTP request (either whole Content-Length, or clean\n    Transfer-Encoding: chunked 0\\r\\n\\r\\n).\n    \n     * To detect the early disconnect on Transfer-Encoding: chunked a new\n    swift.common.exceptions.ChunkReadError is used to translate\n    eventlet.wsgi\'s more general IOError and ValueErrors into something\n    more appropriate to catch and handle closer to our generic\n    ChunkReadTimeout handling.\n    \n    Co-Author: Alistair Coles <alistair.coles@hp.com>\n    Closes-Bug: #1496205\n    Change-Id: I028a530aba82d50baa4ee1d05ddce18d4cce4e81\n',163,28,'Rackspace'),(276703,229,2470,'2015-09-23 09:23:39','2015-08-11 00:42:30','    Add the ability to specify ranges for SLO segments\n    \n    Users can now include an optional \'range\' field in segment descriptions\n    to specify which bytes from the underlying object should be used for the\n    segment data. Only one range may be specified per segment. Note that the\n    \'etag\' and \'size_bytes\' fields still describe the backing object as a\n    whole. So, if a user uploads a manifest like:\n    \n        [{\"path\": \"/con/obj_seg_1\", \"etag\": null, \"size_bytes\": 1048576,\n          \"range\": \"0-1023\"},\n         {\"path\": \"/con/obj_seg_2\", \"etag\": null, \"size_bytes\": 1048576,\n          \"range\": \"512-4095\"},\n         {\"path\": \"/con/obj_seg_1\", \"etag\": null, \"size_bytes\": 1048576,\n          \"range\": \"-2048\"}]\n    \n    then the segment will consist of the first 1024 bytes of /con/obj_seg_1,\n    followed by bytes 513 through 4096 (inclusive) of /con/obj_seg_2, and\n    finally bytes 1046528 through 1048576 (i.e., the last 2048 bytes) of\n    /con/obj_seg_1.\n    \n    ETag generation for SLOs had been updated to prevent collisions when\n    using different ranges for the same set of objects.\n    \n    Additionally, there are two performance enhancements:\n    \n     * On download, multiple sequential requests for segments from the same\n       underlying object will be coalesced into a single ranged request,\n       provided it still does not meet Swift\'s \"egregious range requests\"\n       critieria.\n    \n     * On upload, multiple sequential segments referencing the same object\n       will be validated against the response from a single HEAD request.\n    \n    Change-Id: Ia21d51c2cef4e2ee5162161dd2c1d3069009b52c\n    DocImpact\n',724,80,'SwiftStack'),(276704,2470,2470,'2015-09-24 21:49:24','2015-09-24 21:42:20','    Only yield the pending segment on error if it\'s a SegmentListingError\n    \n    (This happens, for example, when we can\'t read a submanifest for SLO,\n    or can\'t get the next page of objects for DLO)\n    \n    This should prevent warnings like \"Exception RuntimeError: \'generator\n    ignored GeneratorExit\' in <generator object _coalesce_requests at\n    0x4f9bf50> ignored\" when running .unittests\n    \n    Change-Id: I5000053827369553669b1fb5fc9752b46c2cc782\n',13,1,'SwiftStack'),(276705,229,5599,'2015-09-25 15:23:24','2015-05-22 16:53:12','    Fix missing container update\n    \n    At PUT object request, proxy server makes backend headers (e.g.\n    X-Container-Partition) which help object-servers to determine\n    the container-server they should update. In addition, the backend\n    headers are created as many as the number of container replicas.\n    (i.e. 3 replica in container ring, 3 backend headers will be created)\n    \n    On EC case, Swift fans out fragment archives to backend object-servers.\n    Basically the number of fragment archives will be more than the container\n    replica number and proxy-server assumes a request as success when quorum\n    number of object-server succeeded to store. That would cause to make an\n    orphaned object which is stored but not container updated.\n    \n    For example, assuming k=10, m=4, container replica=3 case:\n    \n    Assuming, proxy-server attempts to make 14 backend streams but\n    unfortunately first 3 nodes returns 507 (disk failure) and then\n    the Swift doesn\'t have any other disks.\n    \n    In the case, proxy keeps 11 backend streams to store and current Swift\n    assumes it as sufficient because it is more than or equals quorum (right\n    now k+1 is sufficient i.e. 11 backend streams are enough to store)\n    However, in the case, the 11 streams doesn\'t have the container update\n    header so that the request will succeed but container will be never updated.\n    \n    This patch allows to extract container updates up to object quorum_size\n    + 1 to more nodes to ensure the updates. This approach sacrifices the\n    container update cost a bit because duplicated updates will be there but\n    quorum sizes + 1 seems reasonable (even if it\'s reaplicated case) to pay\n    to ensure that instead of whole objects incude the update headers.\n    \n    Now Swift will work like as follows:\n    \n    For example:\n    k=10, m=4, qurum_size=11 (k+1), 3 replica for container.\n    CU: container update\n    CA: commit ack\n    \n    That result in like as\n     CU   CU   CU   CU   CU   CU   CU   CU   CU   CU   CU   CU\n    [507, 507, 507, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201]\n                                                  CA   CA   CA   CA   CA\n    \n    In this case, at least 3 container updates are saved.\n    \n    For another example:\n    7 replicated objects, qurum_size=4 (7//2+1), 3 replica for container.\n    CU: container update\n    CA: commit ack (201s for successful PUT on replicated)\n    \n     CU   CU   CU   CU   CU\n    [507, 507, 507, 201, 201, 201, 201]\n                     CA   CA   CA   CA\n    \n    In this replicated case, at least 2 container updates are saved.\n    \n    Cleaned up some unit tests so that modifying policies doesn\'t leak\n    between tests.\n    \n    Co-Authored-By: John Dickinson <me@not.mn>\n    Co-Authored-By: Sam Merritt <sam@swiftstack.com>\n    \n    Closes-Bug: #1460920\n    Change-Id: I04132858f44b42ee7ecf3b7994cb22a19d001d70\n',93,28,'NTT'),(276707,4087,4087,'2015-09-23 14:29:45','2015-08-10 14:37:10','    Better error handling for EC PUT path when client goes away\n    \n    There are a few places in the PUT path where the object server is\n    reading WSGI input and can find that there\'s nothing there.  e.g. in the\n    middle of a 2 phase commit and the proxy goes away for whatever reason,\n    like maybe it timed out because things are really busy.  Anyway, this\n    results in the ugly ValueError coming out of eventlet.wsgi about a\n    zillion levels away from the PUT path.\n    \n    Expanding on the test cases from lp bug #1496205 and lp bug #1469094\n    this change carefully narrows into our read/readline calls to\n    wsgi_input and makes sure to tranlsate the ValueError to a\n    ChunkReadError - which the object.server can handle along with\n    ChunkReadTimeout.  When it made sense, this change attempts to stay\n    consistent throughout the code path in logging/raising client disconnect\n    instead of timeout.\n    \n    It\'s unfortunate the error coming out of eventlet is so generic, but\n    that will be improved in future versions [1].\n    \n    1. https://github.com/eventlet/eventlet/commit/c3ce3eef0b4d0dfdbfb1ec0186d4bb204fb8ecd5\n    \n    Related-Bug: #1469094\n    Related-Bug: #1496205\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Change-Id: I9e4dbf26623c0c6fc5c87afd14349466aa157385\n',176,22,'Intel'),(276709,441,441,'2015-09-28 06:27:21','2015-09-28 06:27:21','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I59e314778d95bce32ab05bfeca2067819180dd30\n',184,168,NULL),(276711,978,5599,'2015-09-28 14:17:36','2015-09-28 04:50:46','    Fix inlines for test/unit/obj/test_server.py\n    \n    This patch fixes small nits for inline comments for\n    \n    https://review.openstack.org/#/c/211338\n    \n    as a follow-up patch, plus some other typos in comments.\n    \n    Change-Id: Ibf7dc5683b39d6662573dbb036da146174a965fd\n',13,13,'NTT'),(276713,5599,5599,'2015-09-29 05:56:12','2015-09-03 00:40:41','    Don\'t send commits for quorum *BAD* requests on EC\n    \n    In EC PUT request case, proxy-server may send commits to object-servers\n    it may make .durable file even though the request failed due to a lack\n    of quorum number.\n    \n    For example:\n    - Considering the case that almost all object-servers fail by 422\n      Unprocessable Entity\n    - Using ec scheme 4 + 2\n    - 5 (quorum size) object-server failed with 422, 1 object-servers\n      succeeded as 201 created\n    \n    How it works:\n    - Client creates a PUT request\n    - Proxy will open connections to backend object-servers\n    - Proxy will send whole encoded chunks to object-servers\n    - Proxy will send content-md5 as footers.\n    - Proxy will get responses [422, 422, 422, 422, 422, 201] (currently\n      this list will be regarded as \"we have quorum response\")\n    - And then proxy will send commits to object-servers (the only\n      object-server with 201 will create .durable file)\n    - Proxy will return 503 because the commits results in no response\n      statuses from object-servers except the 201 node.\n    \n    This patch fixes the quorum handling at ObjectController to check\n    that it has *successful* quorum responses before sending durable commits.\n    \n    Closes-Bug: #1491748\n    Change-Id: Icc099993be76bcc687191f332db56d62856a500f\n',163,12,'NTT'),(276715,229,229,'2015-09-29 15:02:55','2015-09-29 15:00:53','    fix docstring: s/2xx/1xx/\n    \n    Change-Id: If863eb4e66e400081d2402ec8fbf0f9fe8f55b7c\n',1,1,'SwiftStack'),(276717,978,978,'2015-09-30 09:45:57','2015-09-30 09:45:57','    Update EC overview doc for PUT path\n    \n    Update the EC overview docs \'under the hood\' section to reflect the\n    change in durable file parity from 2 to ec_nparity + 1 [1].\n    \n    Also fix some typos and cleanup the text.\n    \n    [1] change id I80d666f61273e589d0990baa78fd657b3470785d\n    \n    Change-Id: I23f6299da59ba8357da2bb5976d879d9a4bb173e\n',31,24,'HP'),(276718,978,1111,'2015-10-01 10:01:03','2015-08-10 08:44:20','    Fix copy requests to service accounts in Keystone\n    \n    In case of a COPY request the swift_owner was already set to True, and the\n    following PUT request was granted access no matter if a service token was used\n    or not.  This allowed to copy data to service accounts without any service\n    token.\n    \n    Service token unit tests have been added to verify that when\n    swift_owner is set to True in a request environ, this setting is\n    ignored when authorizing another request based on the same\n    environ. Applying only this test change on master fails currently, and\n    only passes with the fix in this patch.\n    \n    Tempauth seems to be not affected, however a small doc update has been added to\n    make it more clear that a service token is not needed to access a service account\n    when an ACL is used.\n    \n    Further details with an example are available in the bug report\n    (https://bugs.launchpad.net/swift/+bug/1483007).\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    Co-Authored-By: Hisashi Osanai <osanai.hisashi@jp.fujitsu.com>\n    Co-Authored-By: Donagh McCabe <donagh.mccabe@hp.com>\n    \n    Closes-Bug: 1483007\n    Change-Id: I1207b911f018b855362b1078f68c38615be74bbd\n',77,33,'Red Hat'),(276720,978,978,'2015-10-02 11:24:19','2015-04-22 12:56:50','    Add POST capability to ssync for .meta files\n    \n    ssync currently does the wrong thing when replicating object dirs\n    containing both a .data and a .meta file. The ssync sender uses a\n    single PUT to send both object content and metadata to the receiver,\n    using the metadata (.meta file) timestamp. This results in the object\n    content timestamp being advanced to the metadata timestamp,\n    potentially overwriting newer object data on the receiver and causing\n    an inconsistency with the container server record for the object.\n    \n    For example, replicating an object dir with {t0.data(etag=x), t2.meta}\n    to a receiver with t1.data(etag=y) will result in the creation of\n    t2.data(etag=x) on the receiver. However, the container server will\n    continue to list the object as t1(etag=y).\n    \n    This patch modifies ssync to replicate the content of .data and .meta\n    separately using a PUT request for the data (no change) and a POST\n    request for the metadata. In effect, ssync replication replicates the\n    client operations that generated the .data and .meta files so that\n    the result of replication is the same as if the original client requests\n    had persisted on all object servers.\n    \n    Apart from maintaining correct timestamps across sync\'d nodes, this has\n    the added benefit of not needing to PUT objects when only the metadata\n    has changed and a POST will suffice.\n    \n    Taking the same example, ssync sender will no longer PUT t0.data but will\n    POST t2.meta resulting in the receiver having t1.data and t2.meta.\n    \n    The changes are backwards compatible: an upgraded sender will only sync\n    data files to a legacy receiver and will not sync meta files (fixing the\n    erroneous behavior described above); a legacy sender will operate as\n    before when sync\'ing to an upgraded receiver.\n    \n    Changes:\n    - diskfile API provides methods to get the data file timestamp\n      as distinct from the diskfile timestamp.\n    \n    - diskfile yield_hashes return tuple now passes a dict mapping data and\n      meta (if any) timestamps to their respective values in the timestamp\n      field.\n    \n    - ssync_sender will encode data and meta timestamps in the\n      (hash_path, timestamp) tuple sent to the receiver during\n      missing_checks.\n    \n    - ssync_receiver compares sender\'s data and meta timestamps to any\n      local diskfile and may specify that only data or meta parts are sent\n      during updates phase by appending a qualifier to the hash returned\n      in its \'wanted\' list.\n    \n    - ssync_sender now sends POST subrequests when a meta file\n      exists and its content needs to be replicated.\n    \n    - ssync_sender may send *only* a POST if the receiver indicates that\n      is the only part required to be sync\'d.\n    \n    - object server will allow PUT and DELETE with earlier timestamp than\n      a POST\n    \n    - Fixed TODO related to replicated objects with fast-POST and ssync\n    \n    Related spec change-id: I60688efc3df692d3a39557114dca8c5490f7837e\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Closes-Bug: 1501528\n    Change-Id: I97552d194e5cc342b0a3f4b9800de8aa6b9cb85b\n',1659,284,'HP'),(276722,4075,4075,'2015-10-02 16:42:25','2015-09-11 16:24:52','    Validate against duplicate device part replica assignment\n    \n    We should never assign multiple replicas of the same partition to the\n    same device - our on-disk layout can only support a single replica of a\n    given part on a single device.  We should not do this, so we validate\n    against it and raise a loud warning if this terrible state is ever\n    observed after a rebalance.\n    \n    Unfortunately currently there\'s a couple not necessarily uncommon\n    scenarios which will trigger this observed state today:\n    \n     1. If we have less devices than replicas\n     2. If a server or zones aggregate device weight make it the most\n        appropriate candidate for multiple replicas and you\'re a bit unlucky\n    \n    Fixing #1 would be easy, we should just not allow that state anymore.\n    Really we never did - if you have a 3 replica ring with one device - you\n    have one replica.  Everything that iter_nodes\'d would de-dupe.  We\n    should just be insisting that you explicitly acknowledge your replica\n    count with set_replicas.\n    \n    I have been lost in the abyss for days searching for a general solutions\n    to #2.  I\'m sure it exists, but I will not have wrestled it to\n    submission by RC1.  In the meantime we can eliminate a great deal of the\n    luck required simply by refusing to place more than one replica of a\n    part on a device in assign_parts.\n    \n    The meat of the change is a small update to the .validate method in\n    RingBuilder.  It basically unrolls a pre-existing (part, replica) loop\n    so that all the replicas of the part come out in order so that we can\n    build up the set of dev_id\'s for which all the replicas of a given part\n    are assigned part-by-part.\n    \n    If we observe any duplicates - we raise a warning.\n    \n    To clean the cobwebs out of the rest of the corner cases we\'re going to\n    delay get_required_overload from kicking in until we achive dispersion,\n    and a small check was added when selecting a device subtier to validate\n    if it\'s already being used - picking any other device in the tier works\n    out much better.  If no other devices are available in the tier - we\n    raise a warning.  A more elegant or optimized solution may exist.\n    \n    Many unittests did not meet the criteria #1, but the fix was straight\n    forward after being identified by the pigeonhole check.\n    \n    However, many more tests were affected by #2 - but again the fix came to\n    be simply adding more devices.  The fantasy that all failure domains\n    contain at least replica count devices is prevalent in both our ring\n    placement algorithm and it\'s tests.  These tests were trying to\n    demonstrate some complex characteristics of our ring placement algorithm\n    and I believe we just got a bit too carried away trying to find the\n    simplest possible example to demonstrate the desirable trait.  I think\n    a better example looks more like a real ring - with many devices in each\n    server and many servers in each zone - I think more devices makes the\n    tests better.  As much as possible I\'ve tried to maintain the original\n    intent of the tests - when adding devices I\'ve either spread the weight\n    out amongst them or added proportional weights to the other tiers.\n    \n    I added an example straw man test to validate that three devices with\n    different weights in three different zones won\'t blow up.  Once we can\n    do that without raising warnings and assigning duplicate device part\n    replicas - we can add more.  And more importantly change the warnings to\n    errors - because we would much prefer to not do that #$%^ anymore.\n    \n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    Related-Bug: #1452431\n    Change-Id: I592d5b611188670ae842fe3d030aa3b340ac36f9\n',700,216,'Rackspace'),(276724,4075,4075,'2015-10-02 13:53:27','2015-10-02 13:53:27','    Make sure we have enough .durable\'s for GETs\n    \n    Increase the number of nodes from which we require a final successful\n    HTTP responses before we return success to the client on a write - to\n    the same number of nodes we\'ll require successful responses from to\n    service a client request for a read.\n    \n    Change-Id: Ifd36790faa0a5d00ec79c23d1f96a332a0ca0f0b\n    Related-Bug: #1469094\n',29,7,'Rackspace'),(276726,229,229,'2015-10-02 21:28:15','2015-10-02 17:06:49','    authors and changelog update for 2.5.0\n    \n    Change-Id: Id20b9340a017922b29d8bf9558825697a7f1f6f1\n',33,0,'SwiftStack'),(276727,2470,2470,'2015-10-01 21:22:40','2015-10-01 21:10:43','    Fix slorange on-disk format when including whole object\n    \n    Not that the current implementation is broken, just wasteful.\n    \n    When a client specifies a range for an SLO segment that includes the\n    entire referenced object, we should drop the \'range\' key from the\n    manifest that\'s stored on disk.\n    \n    Previously, we would do this if the uploaded manifest included the\n    object-length for validation, but not if it didn\'t. Now we will\n    always drop the \'range\' key if the entire segment is being used.\n    \n    Change-Id: I69d2fff8c7c59b81e9e4777bdbefcd3c274b59a9\n    Related-Change: Ia21d51c2cef4e2ee5162161dd2c1d3069009b52c\n',2,2,'SwiftStack'),(276729,5599,5599,'2015-08-12 08:26:28','2015-07-01 00:11:41','    Change POST container semantics\n    \n    To achieve last modified header on GETorHEAD container\n    we should allow POST container to overwrite put-timestamp.\n    That is because following patches will change the the put-timestamp\n    value semantics in both container db and account db as \"container\n    last modified\".\n    \n    If we achieved this and followings, we will be able to retrieve the\n    container timestamp which is suggested when the container metadata\n    modified.\n    \n    Example:\n    - Create a container.\n    - Change the ACL with POST container. (e.g. x-container-read)\n    - After that, we can know the container was changed by comparing\n      between the timestamp from container creation and the last modified\n      generated from put-timestamp.\n    \n    Change-Id: I1a545fcd1896798dfa7cb5e5af97c78f5d7d7e4d\n',9,0,'NTT'),(276731,4075,4075,'2015-10-01 11:34:10','2015-09-23 16:58:54','    Add search filter examples to swift-ring-builder dispersion help\n    \n    ... because I always forget how to regex and have to independently\n    discover it everytime I want to use the tool!\n    \n    Change-Id: I00d5ab6f573ef26e7e10502493c0066623583b00\n',9,1,'Rackspace'),(276733,4090,4090,'2015-10-05 12:22:24','2015-09-08 19:21:39','    replace use of deprecated rfc822.Message with a helper utility\n    \n    The rfc822 module has been deprecated since Python 2.3, and in\n    particular is absent from the Python 3 standard library. However, Swift\n    uses instances of rfc822.Message in a number of places, relying on its\n    behavior of immediately parsing the headers of a file-like object\n    without consuming the body, leaving the position of the file at the\n    start of the body. Python 3\'s http.client has an undocumented\n    parse_headers function with the same behavior, which inspired the new\n    parse_mime_headers utility introduced here. (The HeaderKeyDict returned\n    by parse_mime_headers doesn\'t have a `.getheader(key)` method like\n    rfc822.Message did; the dictionary-like `[key]` or `.get(key)` interface\n    should be used exclusively.)\n    \n    The implementation in this commit won\'t actually work with Python 3, the\n    email.parser.Parser().parsestr of which expects a Unicode string, but it\n    is believed that this can be addressed in followup work.\n    \n    Change-Id: Ia5ee2ead67e36e8c6416183667f64ae255887736\n',71,18,'SwiftStack'),(276735,1475,1475,'2015-08-27 01:19:00','2015-08-27 00:56:08','    Input validation must not depend on the locale\n    \n    storage_policy.py: replace string.letters with string.ascii_letters.\n    \n    This change does not change the behaviour on Python 2. It is only needed\n    for Python 3 because string.letters was removed.\n    \n    On Python 2, string.letters is modified when locale.setlocale() is\n    called. Hopefully, Swift doesn\'t call setlocale() and so it\'s safe to\n    replace it.\n    \n    Change-Id: Ifbf9332ae739b1bfc9e6d2831f4e7581e69f233d\n',1,1,'eNovance'),(276737,1475,1475,'2015-10-03 02:13:38','2015-08-27 01:03:27','    py3: Fix Python 3 issues in utils\n    \n    * Replace urllib imports with six.moves.urllib\n    * Don\'t access private logging._levelNames attribute, but use the\n      public function logging.addLevelName() instead.\n    * Replace basestring with six.string_types\n    \n    Change-Id: I4cd5dd71ffb40f84e8844b5808b38630795ad520\n',11,9,'eNovance'),(276739,1111,1111,'2015-10-07 19:59:15','2015-10-07 19:48:17','    Fix ring device checks in probetests\n    \n    If a device has been removed from one of the rings, it actually is set as None\n    within the ring. In that case the length of the devices is not True without\n    filtering the None devices. However, if the length matched the condition but\n    included a removed device the probetests would fail with a TypeError.\n    \n    This fix could be done also in swift/common/ring/ring.py, but it seems it only\n    affects probetests right now, thus fixing it there and not changing the current\n    behavior.\n    \n    Change-Id: I8ccf9b32a51957e040dd370bc9f711d4328d17b1\n',4,2,'Red Hat'),(276741,4075,4088,'2015-10-07 12:18:35','2015-10-06 16:28:34','    Fix replicator intersection exception when sync data to remote regions.\n    \n    This patch fixed the exception (AttributeError: \'list\' object has no\n    attribute \'intersection\') when replicator try to sync data from\n    handoff to primary partition in more than one remote region.\n    \n    Change-Id: I565c45dda8c99d36e24dbf1145f2d2527d593ac0\n    Closes-Bug: 1503152\n',8,6,'SwiftStack'),(276743,1475,1475,'2015-08-27 01:00:26','2015-08-27 01:00:26','    Port swob to Python 3\n    \n    * HeaderEnvironProxy: replace UserDict.DictMixin with\n      collections.MutableMapping, add __iter__ and __len__ methods, and\n      add more unit tests\n    * Replace url* imports with six.moves.urllib\n    \n    Change-Id: I9ed22d0dd52ee7ac8fa16571f82c45975cfdffff\n',40,11,'eNovance'),(276745,179,179,'2015-09-04 23:07:36','2015-07-12 22:18:58','    Python 3 using builtins instead of __builtin__, rename raw_input() to input() from six.moves\n    \n    Using these modules from six\n    \n    Replacements:\n    *input() from six.moves could be used instead of raw_input()\n    *__builtin__ with six.moves.builtins\n    \n    Change-Id: I8749dd33496ed8718bd2c6620c9dc5240c2ce683\n',17,16,NULL),(276747,179,179,'2015-07-24 19:30:04','2015-07-05 11:49:54','    Python3: Fix Remaining issues of python3 compatibility in bin directory\n    \n    Changes Of py3 in bin :\n    \n    * https://review.openstack.org/#/c/196835/\n    * ConfigParser from six.moves\n    \n    Change-Id: Ic0374c8e09dfd595ec12c4d31b17dad30eaa803c\n',12,7,NULL),(276749,1475,1475,'2015-10-08 13:16:43','2015-10-08 13:08:45','    py3: Replace unicode with six.text_type\n    \n    The unicode type was renamed to str in Python 3. Use six.text_type to\n    make the modified code compatible with Python 2 and Python 3.\n    \n    The initial patch was generated by the unicode operation of the sixer\n    tool on: bin/* swift/ test/.\n    \n    Change-Id: I9e13748ccde36ee8110756202d55d3ae945d4860\n',51,32,'eNovance'),(276750,978,978,'2015-10-08 18:55:29','2015-10-08 18:50:20','    Fix EC documentation of .durable quorum\n    \n    Update the doc to reflect the change [1] to ndata + 1\n    .durable files being committed before a success response\n    is returned for a PUT.\n    \n    [1] Ifd36790faa0a5d00ec79c23d1f96a332a0ca0f0b\n    \n    Change-Id: I1744d457bda8a52eb2451029c4031962e92c2bb7\n',5,6,'HP'),(276752,4092,4092,'2015-10-08 15:57:01','2015-10-08 14:39:32','    swift-ring-builder can\'t select id=0\n    \n    Currently, it is not possible to change weight of device with id=0\n    by swift-ring-builder cli. Instead of change the help is shown.\n    Example:\n    $ swift-ring-builder object.builder set_weight --id 0 1.00\n    \n    But id=0 is generated by swift for the first device if not provided.\n    Also --weight, --zone and --region cause the same bug.\n    \n    There is problem to detect new command format in validate_args\n    function if zero is as valid value for some args.\n    \n    Change-Id: I4ee379c242f090d116cd2504e21d0e1904cdc2fc\n',26,6,'Seznam.cz'),(276754,1475,1475,'2015-10-08 15:24:13','2015-10-08 15:03:52','    py3: Replace urllib imports with six.moves.urllib\n    \n    The urllib, urllib2 and urlparse modules of Python 2 were reorganized\n    into a new urllib namespace on Python 3. Replace urllib, urllib2 and\n    urlparse imports with six.moves.urllib to make the modified code\n    compatible with Python 2 and Python 3.\n    \n    The initial patch was generated by the urllib operation of the sixer\n    tool on: bin/* swift/ test/.\n    \n    Change-Id: I61a8c7fb7972eabc7da8dad3b3d34bceee5c5d93\n',96,79,'eNovance'),(276756,4090,4090,'2015-10-08 16:39:35','2015-10-08 16:16:18','    minutæ: port ClientException tweaks from swiftclient; dict .pop\n    \n    openstack/python-swiftclient@5ae4b423 changed python-swiftclient\'s\n    ClientException to have its http_status attribute default to\n    None (rather than 0) and to use super in its __init__ method. For\n    consistency\'s sake, it\'s nice for Swift\'s inlined copy of\n    ClientException to receive the same patch. Also, the retry function in\n    direct_client (a major user of ClientException) was using a somewhat\n    awkward conditional-assignment-and-delete construction where the .pop\n    method of dictionaries would be more idiomatic.\n    \n    Change-Id: I70a12f934f84f57549617af28b86f7f5637bd8fa\n',4,10,'SwiftStack'),(276758,591,179,'2015-10-11 12:57:25','2015-08-05 23:58:14','    pep8 fix: assertEquals -> assertEqual\n    \n    assertEquals is deprecated in py3, replacing it.\n    \n    Change-Id: Ida206abbb13c320095bb9e3b25a2b66cc31bfba8\n    Co-Authored-By: Ondřej Nový <ondrej.novy@firma.seznam.cz>\n',3117,3117,NULL),(276760,1111,179,'2015-10-12 07:40:07','2015-08-31 21:49:49','    pep8 fix: assertNotEquals -> assertNotEqual\n    \n    assertNotEquals is deprecated in py3\n    \n    Change-Id: Ib611351987bed1199fb8f73a750955a61d022d0a\n',21,21,NULL),(276762,1111,1111,'2015-10-12 07:40:17','2015-10-12 07:09:00','    Enable H234 check (assertEquals is deprecated, use assertEqual)\n    \n    All usages of assertEquals and assertNotEquals are fixed now, so let\'s enable\n    the H234 check to avoid regressions in the future.\n    \n    Change-Id: I2c2ccb3b268cf9eb11f2db045378ab125a02bc31\n',1,2,'Red Hat'),(276764,1475,1475,'2015-10-08 15:33:26','2015-10-08 15:32:33','    py3: Use six.reraise() to reraise an exception\n    \n    Replace \"raise exc_type, exc_value, exc_tb\" with\n    \"six.reraise(exc_type, exc_value, exc_tb)\".\n    \n    The patch was generated by the raise operation of the sixer tool on:\n    bin/* swift/ test/.\n    \n    Change-Id: Ic4ca6d7f26d1e0075bd2a8a26d6e408b59b17fbb\n',9,7,'eNovance'),(276766,1475,1475,'2015-10-08 15:40:06','2015-10-08 15:38:36','    py3: Replace gen.next() with next(gen)\n    \n    The next() method of Python 2 generators was renamed to __next__().\n    Call the builtin next() function instead which works on Python 2 and\n    Python 3.\n    \n    The patch was generated by the next operation of the sixer tool.\n    \n    Change-Id: Id12bc16cba7d9b8a283af0d392188a185abe439d\n',61,61,'eNovance'),(276768,179,179,'2015-07-24 19:46:14','2015-07-24 19:46:14','    Add __bool__ for classes that implement __nonzero__\n    \n    __nonzero__ has been renamed to __bool__ in python3.4. So add the\n    __bool__ magic method that will in turn call the existing __nonzero__\n    method.\n    \n    Change-Id: I3479564c57316733a9c30d97504ceac74771bfd4\n',3,0,NULL),(276770,5672,5672,'2015-10-12 08:17:49','2015-10-11 21:24:54','    Fix \'swift-ring-builder write_builder\' after you remove a device\n    \n    clayg already posted the code fix in the bug, but noted it needs a test.\n    \n    Closes-Bug: #1487280\n    Change-Id: I07317754afac7165baac4e696f07daeba2e72adc\n',26,0,'independent'),(276772,591,591,'2015-10-12 22:39:52','2015-10-10 20:57:07','    Autodetect systemctl in SAIO and use it on systemd distros\n    \n    Change-Id: I84a9b27baac89327749d8774032860f8ad5166f2\n',7,8,'Seznam.cz'),(276774,4092,4092,'2015-10-12 14:42:01','2015-10-12 14:42:01','    swift-recon fails with socket.timeout exception\n    \n    If some server is overloaded or timeout set too low, swift-recon fails with\n    raised socket.timeout exception.\n    \n    This error should be processed the same way as HTTPError/URLError.\n    \n    Change-Id: Ide8843977ab224fa866097d0f0b765d6899c66b8\n',22,4,'Seznam.cz'),(276776,1475,1475,'2015-10-09 22:19:42','2015-10-08 15:41:02','    Replace itertools.ifilter with six.moves.filter\n    \n    Replace itertools.ifilter() with six.moves.filter(). The\n    itertools.ifilter was removed in Python 3. This change makes modified\n    code compatible with Python 2 and Python 3.\n    \n    Replace itertools.izip() with six.moves.zip().\n    \n    The patch was generated by the itertools operation of the sixer tool.\n    \n    Change-Id: Ie7f787cc6d66edfceb8fa2c1a906351a8c8c5fed\n',13,8,'eNovance'),(276778,1475,1475,'2015-10-09 22:20:03','2015-10-08 15:42:27','    py3: Replace basestring with six.string_types\n    \n    The builtin basestring type was removed in Python 3. Replace it with\n    six.string_types which works on Python 2 and Python 3.\n    \n    Change-Id: Ib92a729682322cc65b41050ae169167be2899e2c\n',8,4,'eNovance'),(276780,5673,5673,'2015-10-13 01:45:52','2015-07-17 20:20:15','    Python3: do not use im_self/im_func/func_closure\n    \n    Use __self__, __func__ and __closure__ instead, as they work\n    with both Python 2 and 3.\n    \n    Modifying usage of __func__ in codebase.\n    \n    Change-Id: I57e907c28c1d4646605e70194ea3650806730b83\n',2,2,'NEC'),(276782,869,869,'2015-10-12 16:31:26','2015-09-25 17:26:37','    Improve SLO PUT error checking\n    \n    This commit tries to give the user a reason that their SLO manifest\n    was invalid instead of just saying \"Invalid SLO Manifest File\". It\n    doesn\'t get every error condition, but it\'s better than before.\n    \n    Examples of things that now have real error messages include:\n     * bad keys in manifest (e.g. using \"name\" instead of \"path\")\n     * bogus range (e.g. \"bytes=123-taco\")\n     * multiple ranges (e.g. \"bytes=10-20,30-40\")\n     * bad JSON structure (i.e. not a list of objects)\n     * non-integer size_bytes\n    \n    Also fixed an annoyance with unspecified-size segments that are too\n    small. Previously, if you uploaded a segment reference with\n    \'{\"size_bytes\": null, ...}\' in it and the referenced segment was less\n    than 1 MiB, you\'d get a response that looked like this:\n    \n        HTTP/1.1 400 Bad Request\n        Content-Length: 62\n        Content-Type: text/html; charset=UTF-8\n        X-Trans-Id: txd9ee3b25896642098e4d9-0055dd095a\n        Date: Wed, 26 Aug 2015 00:33:30 GMT\n    \n        Each segment, except the last, must be at least 1048576 bytes.\n    \n    This is true, but not particularly helpful, since it doesn\'t tell you\n    which of your segments violated the rule.\n    \n    Now you get something more like this:\n    \n        HTTP/1.1 400 Bad Request\n        Content-Length: 49\n        Content-Type: text/plain\n        X-Trans-Id: tx586e52580bac4956ad8e2-0055dd09c2\n        Date: Wed, 26 Aug 2015 00:35:14 GMT\n    \n        Errors:\n        /segs/small, Too Small; each segment, except the last...\n    \n    It\'s not exactly a tutorial on SLO manifests, but at least it names\n    the problematic segment.\n    \n    This also changes the status code for a self-referential manifest from\n    409 to 400. The rest of the error machinery was using 400, and\n    special-casing self-reference would be really annoying. Besides, now\n    that we\'re showing more than one error message at a time, what would\n    the right status code be for a manifest with a self-referential\n    segment *and* a segment with a bad range? 400? 409? 404.5? It\'s much\n    more consistent to just say invalid manifest --> 400.\n    \n    Change-Id: I2275683230b36bc273319254e37c16b9e9b9d69c\n',318,131,'SwiftStack'),(276784,978,5657,'2015-10-13 10:35:46','2015-09-03 15:11:46','    Moving DLO functionality doc to the middleware code\n    \n    This change moves the RST DLO documentation from\n    statically inside overview_large_objects.rst and moves it\n    to middleware/dlo.py.\n    This is where all middleware RST documentation is defined.\n    \n    The overview_large_objects.rst is still the main page\n    for information on large objects, so now dynamically\n    points to both the DLO and SLO middleware RST\n    documentation and the relevant middleware.rst page\n    simply points to it.\n    \n    Change-Id: I40d918c8b7bc608ab945805d69fe359521df038a\n    Closes-bug: #1276852\n',118,103,'Rackspace'),(276786,591,591,'2015-10-13 09:10:09','2015-10-10 14:56:30','    Script for running unit, func and probe tests at once\n    \n    When developing Swift it\'s often needed to run all tests.\n    This script makes it much simpler.\n    \n    Change-Id: I67e6f7cc05ebd0475001c1b56e8f6fd09c8c644f\n',33,0,'Seznam.cz'),(276788,869,42,'2015-10-15 11:38:53','2015-10-09 16:45:20','    Interpolate the explanation string not whole HTML body\n    \n    The only reason this exists is that I promised to do it.\n    But in our case, there\'s no big advantage, and here\'s why.\n    \n    The general thinking goes that strings must be interpolated\n    first because the body may contain a syntax that confuses the\n    interpolation. So this patch makes the code \"more correct\".\n    However, our HTML template is tightly controlled. It\'s not\n    like it contains additional percents.\n    \n    So I\'ll just leave this here for now while I\'m asking if\n    the content type is set correctly.\n    \n    Change-Id: Ia18aeb0f94ef389f8b95450986a566e5fa06aa10\n',3,3,'Red Hat'),(276790,4086,4086,'2015-10-16 19:34:44','2015-10-16 18:18:33','    Hyperlink fix to first contribution doc\n    \n    Change-Id: I19fc1abc89f888233b80a57c68a152c1c1758640\n',1,1,'Intel'),(276793,5596,5596,'2015-10-17 02:32:05','2015-09-29 20:12:40','    go: CopyN that re-uses buffers\n    \n    Include an implementation of CopyN that reuses buffers, to reduce pressure on\n    the GC.  Also clean up Copy with new libraries from go 1.5.\n    \n    Change-Id: Ie8247aa608b6c472a5e5ffde915637aca10f099f\n',26,25,'Rackspace'),(276794,5596,5596,'2015-10-17 02:31:56','2015-10-16 21:15:34','    go: pass vars to container update\n    \n    Since we kick container updates out to a background goroutine and let the\n    request handler return, the vars context can be cleared before GetVars is\n    called.\n    \n    That means means it doesn\'t know what device the request was for when saving\n    asyncs, and it just dumps it into the device root.\n    \n    Change-Id: I8fff740fa470b9d5012864ed92c8d0767efcb519\n',14,16,'Rackspace'),(276796,5596,5596,'2015-11-17 17:00:53','2015-11-17 17:00:53','    go: fix problem with using single config file\n    \n    This hadn\'t been tested, since we generally use directories with multiple\n    configs in them, like SAIO does.\n    \n    Change-Id: Ie8623bc3de8ca4618a3e29754bb1148429bab994\n',1,1,'Rackspace'),(276797,4075,4075,'2015-10-05 13:31:09','2015-10-02 16:40:28','    Close ECAppIter\'s sub-generators before propagating GeneratorExit\n    \n    ... which ensures no Timeouts remain pending after the parent generator\n    is closed when a client disconnects before being able to read the entire\n    body.\n    \n    Also tighten up a few tests that may have left some open ECAppIter\n    generators lying about after the tests themselves had finished.  This\n    has the side effect of preventing the extraneous printing of the Timeout\n    errors being raised by the eventlet hub in the background while our\n    unittests are running.\n    \n    Change-Id: I156d873c72c19623bcfbf39bf120c98800b3cada\n',9,7,'Rackspace'),(276799,978,832,'2015-10-19 15:26:12','2015-10-09 17:25:08','    Make db_replicator usync smaller containers\n    \n    The current rule inside the db_replicator is to rsync+merge\n    containers during replication if the difference between rowids\n    differ by more than 50%:\n    \n      # if the difference in rowids between the two differs by\n      # more than 50%, rsync then do a remote merge.\n      if rinfo[\'max_row\'] / float(info[\'max_row\']) < 0.5:\n    \n    This mean on smaller containers, that only have few rows, and differ\n    by a small number still rsync+merge rather then copying rows.\n    \n    This change adds a new condition, the difference in the rowids must\n    be greater than the defined per_diff otherwise usync will be used:\n    \n      # if the difference in rowids between the two differs by\n      # more than 50% and the difference is greater than per_diff,\n      # rsync then do a remote merge.\n      # NOTE: difference > per_diff stops us from dropping to rsync\n      # on smaller containers, who have only a few rows to sync.\n      if rinfo[\'max_row\'] / float(info[\'max_row\']) < 0.5 and \\\n              info[\'max_row\'] - rinfo[\'max_row\'] > self.per_diff:\n    \n    Change-Id: I9e779f71bf37714919a525404565dd075762b0d4\n    Closes-bug: #1019712\n',33,9,'Rackspace'),(276801,1475,1475,'2015-10-19 17:57:01','2015-10-19 16:59:14','    Port swift.common.utils.backward() to Python 3\n    \n    backward() is written to handle binary files:\n    \n    * Replace literal native strings to literal byte strings: add b\'...\'\n      prefix\n    * Update unit tests: use byte strings\n    * TemporaryFile(): use the default mode \'w+b\', instead of using \'r+w\'\n      (\'r+w\' mode creates a Unicode file on Python 3).\n    \n    Change-Id: Ic91f7e6c605db0b888763080d49f0f501029837f\n',14,14,'eNovance'),(276803,5657,5657,'2015-10-20 13:56:04','2015-10-07 13:55:45','    Documenting the ability to specify ranges for SLO segments\n    \n    Change-Id: Ied854f6385f3b28975808f4707e531581bf6c18e\n    Closes-bug: 1499152\n',36,0,'Rackspace'),(276805,1111,1111,'2015-10-13 07:16:13','2015-08-29 16:03:07','    Do not use pre-authenticated requests in staticweb\n    \n    staticweb middleware uses make_pre_authed_env, this makes it possible to\n    anonymously list containers without any read acl set if the metadata\n    \"web-listings: true\" is set on a container. Using make_env enforces correct\n    read_acl validation; however it is now also required to add \".rlistings\" to the\n    read acl.\n    \n    Also, if the staticweb middleware is put in the proxy pipeline before an\n    authentication middleware, it broke authenticated GET and HEAD requests. This\n    has some side effects in clients, because a html response is sent that might be\n    parsed wrongly by the client. In case of python-swiftclient this was shown as an\n    empty container without any ACL or web-listings:true meta set. This might lead\n    to information leaks, because a user trusts the output from python-swiftclient\n    and assumes an empty, private container even if the container contains public\n    readable data. staticweb now checks if \"swift.authorize\" is included in the\n    environ and skips itself if not.\n    \n    Closes-Bug: 1489749\n    Change-Id: Icf159d7e567ac5481e710c5910db686bdcba6336\n    Depends-On: Ie24bb995023c377e49796910ad80a256b00daa03\n',33,6,'Red Hat'),(276807,978,5599,'2015-10-15 10:59:42','2015-10-13 00:22:31','    Add backend subrequest tests for staticweb\n    \n    This is an followup for\n    https://review.openstack.org/#/c/227204\n    \n    Above patch changes staticweb to use just make_env instead of\n    pre authed env. The tests included in this patch assert\n    \"backend requests generated by staticweb *NEVER* include pre\n    authed information (i.e. authorize_override=True)\".\n    \n    Change-Id: Ifbbc43d3b5ac114bc3d5e4fcab9cacdf9a3f1a5c\n',27,0,'NTT'),(276809,978,978,'2015-10-14 16:06:26','2015-10-14 15:49:35','    Add test to verify staticweb uses auth\'d subrequests\n    \n    Follow on for change Icf159d7e567ac5481e710c5910db686bdcba6336\n    \n    Related-Bug: 1489749\n    \n    Change-Id: I96920645d50322c5232bbcd6bb38b0f26795b92d\n',46,4,'HP'),(276811,441,441,'2015-10-23 06:34:15','2015-10-23 06:34:15','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Ifebb8f1b50ac4c2c0f43df48c2414ce0f3742e42\n',33,120,NULL),(276812,591,4092,'2015-10-19 21:14:34','2015-10-13 17:00:41','    node_timeout as float in configs\n    \n    It is more convenient to use float node_timeout for fine tunning latency.\n    \n    Change-Id: I7c57bba053711a27d3802efe6f2a0bf53483a54f\n',38,12,'Seznam.cz'),(276814,978,978,'2015-10-23 16:38:24','2015-10-23 16:38:24','    Minor improvement to updater unit tests\n    \n    Follow up for change I7c57bba053711a27d3802efe6f2a0bf53483a54f\n    \n    The current tests won\'t prevent this kind of regression in the\n    updaters\' __init__ methods:\n    \n      self.node_timeout = int(float(conf.get(\'node_timeout\', 10)))\n    \n    so this makes them a little tighter.\n    \n    Change-Id: I60bd79ac392deb1e8a108357d48474dddd9028c1\n',4,4,'HP'),(276816,4090,4090,'2015-10-22 17:00:40','2015-10-22 15:13:09','    SLO docs(tring): manifest params in table, code block; copyedits\n    \n    It\'s æsthetically pleasing to display the segment description parameters\n    in a table (using the reStructuredText \"simple\" table markup) and to use\n    a code block (which receives syntax hightlighting in the rendered\n    document!) for the example JSON fragment. Also, a few very minor copy\n    changes are made (a comma after an introductory phrase clarifies; JSON\n    and ETag receieve their canonical capitalizations; the elements of the\n    manifest JSON aren\'t \"files\" exactly; the inclusive nature of the range\n    is noted for the benefit of harried readers who won\'t read the \"Range\n    Specification\" section later in the document).\n    \n    Change-Id: I5296fc04c6fe5410ad14bba7de0a7f8ab060b126\n',18,13,'SwiftStack'),(276818,5599,5599,'2015-10-21 05:44:46','2015-10-21 05:33:04','    Add verification socket close causes StopIteration\n    \n    This patch add a expositive test that closing connection\n    (fd and socket) causes StopIteration on reader at proxy server\n    on PUT object case.\n    \n    And then, if the connection closed and proxy detects a lack of\n    data length, it will result in HTTPClientDisconnected.\n    \n    The only reason why I leave test_client_disconnect as current\n    is Bill is now working for the change at\n    \n    https://review.openstack.org/#/c/236007/\n    \n    Change-Id: If68f752a2b0dd6cfad4d007ca5d155e6ffb378e5\n',39,0,'NTT'),(276820,5674,5674,'2015-10-23 18:20:25','2015-10-23 18:20:25','    Update admin guide with region.\n    \n    Added region prefix to example commands for adding devices to ring.\n    Also updates description to include region prefix.\n    \n    Change-Id: Ie6d6485b497cea973e37909b5b19b44946c8aa89\n',4,3,'Intel'),(276822,2313,2313,'2015-10-27 09:26:46','2015-10-22 10:14:29','    Add unit tests for swift.proxy.controllers.base\n    \n    This patch adds more unit tests to diminish missing pieces\n    of the coverage in the proxy_controllers_base unit test.\n    \n    Change-Id: I85ba1955c681cc9d5b2a70ac31155678d2e5b6fd\n',46,1,'IBM'),(276824,4092,4092,'2015-10-20 16:13:28','2015-10-09 16:13:55','    swift-ring-builder can\'t remove a device with zero weight\n    \n    If a device with 0 weight is tried to remove, the following rebalance\n    does not write changes into builder file.\n    \n    Scenario:\n    $ swift-ring-builder object.builder set_weight --id 1 0.00\n    $ swift-ring-builder object.builder rebalance\n    Wait for moving files out of the device id=1.\n    $ swift-ring-builder object.builder remove --id 1\n    $ swift-ring-builder object.builder rebalance\n    In fact, the device id=1 is not removed after rebalance (must be --force used).\n    \n    Change-Id: Iad5a444023eae9882a3addd7f119ff4d18559ddd\n',50,15,'Seznam.cz'),(276826,978,978,'2015-10-23 14:58:38','2015-10-19 13:55:02','    Fix missing *-replicator conf sections in deployment guide\n    \n    The doc for these sections was missing because of an rst error - the\n    source is there in rst file but didn\'t make it into the html output.\n    \n    Add doc for per_diff and max_diffs in account and container doc sections.\n    \n    Also, fix a bunch of other sphinx build errors and most of the warnings.\n    \n    Change-Id: If9ed2619b2f92c6c65a94f41d8819db8726d3893\n',203,128,'HP'),(276828,869,869,'2015-10-23 11:44:54','2015-10-21 13:05:37','    Get rid of contextlib.nested() for py3\n    \n    contextlib.nested() is missing completely in Python 3.\n    \n    Since 2.7, we can use multiple context managers in a \'with\' statement,\n    like so:\n    \n        with thing1() as t1, thing2() as t2:\n            do_stuff()\n    \n    Now, if we had some code that needed to nest an arbitrary number of\n    context managers, there\'s stuff we could do with contextlib.ExitStack\n    and such... but we don\'t. We only use contextlib.nested() in tests to\n    set up bunches of mocks without crazy-deep indentation, and all that\n    stuff fits perfectly into multiple-context-manager \'with\' statements.\n    \n    Change-Id: Id472958b007948f05dbd4c7fb8cf3ffab58e2681\n',325,400,'SwiftStack'),(276830,4519,4519,'2015-11-04 06:06:10','2015-11-04 00:53:05','    Optimize the code performance\n    \n    Usually, the number of characters in FORBIDDEN_CHARS are fewer than\n    the number of characters in the req.path - so it\'s better to use\n    smaller count for the outer loop.\n    \n    Change-Id: I78b7e0ff4cae1cc90e8d29d7bddcec7fe0ba4bd4\n',2,10,'independent'),(276832,4093,4093,'2015-10-26 13:26:21','2015-10-23 12:40:15','    Device marked to be removed in info about the ring.\n    \n    Showing devices with \'DEL\' mark if will be removed next rebalance.\n    \n    Change-Id: I171aa8658b1c4ac1689ab9532fe65d114567baa7\n',49,3,'Seznam.cz'),(276834,5599,5599,'2015-10-23 23:00:54','2015-10-07 02:14:49','    Add unit tests for utils.validate_hash_path\n    \n    This patch add some unit tests to prevent regression and to describe\n    validate_hash_path behavior, I found in review with\n    \n    https://review.openstack.org/#/c/231864/\n    \n    *bonus*\n    - Fix test_hash_path to use \"with\" syntax instead of \"try/finally\"\n      for assigning a testing value into a global variable.\n    \n    Change-Id: I948999a8fb8addb9a378dbf8bee853b205aeafad\n',56,5,'NTT'),(276836,5599,583,'2015-11-05 20:07:15','2015-05-17 13:35:58','    Read the response body, if response status is greater than 300.\n    \n    internal_client was not reading response if response status is not 200.\n    So proxy server treats this as client disconnect and logs 499 in log file.\n    This patch fixes that by reading response if response status is greater\n    than or equal to 300 and in acceptable statuses.\n    \n    Closes-Bug: #1364752\n    \n    Change-Id: I0512a25895da583956f76031e3c5de5c970bce01\n',56,1,'NEC'),(276838,1475,1475,'2015-11-05 15:56:24','2015-08-27 00:51:58','    On py3, use dnspython3 dependency, not dnspython\n    \n    Update requirements to install dnspython3 on Python 3 and dnspython on\n    Python 2. dnspython is not compatible with Python 3, and dnspython3\n    is not compatible with Python 2.\n    \n    Add a requirement on pbr to ensure that pbr 1.6 or newer is\n    installed. pbr 1.0 or newer is required to support environment\n    markers in requirements which are now used to select dnspython or\n    dnspython3 depending on the Python major version.\n    \n    Note: pbr 1.0 is enough, but OpenStack global requirements asks to\n    use \"pbr>=1.6\".\n    \n    Change-Id: Ie5d437cd396972d4143ffffb96ec3c289e221b08\n',3,1,'eNovance'),(276840,5663,5663,'2015-10-13 13:42:04','2015-10-08 13:40:20','    bug/1270114. Missing documentation for Bulk Middleware.\n    \n    Closes-Bug: #1270114\n    \n    This patch addresses the missing bulk middleware documentation for\n    the following bug:\n    \n    https://bugs.launchpad.net/swift/+bug/1270114\n    \n    And feature:\n    \n    https://review.openstack.org/#/c/176161/\n    \n    The documentation will show under:\n    \n    http://docs.openstack.org/developer/swift/middleware.html\n    \n    Change-Id: I73c101e09830d7120b5e5c1333ae8d570a9e2303\n',61,0,'IBM'),(276842,978,978,'2015-11-05 14:50:28','2015-09-03 16:13:17','    Re-organise ssync tests\n    \n    We have some tests that exercise both the sender and receiver,\n    but are spread across test_ssync_sender.py and test_ssync_receiver.py.\n    This creates a new module test_ssync.py and moves the end-to-end tests\n    into there.\n    \n    Change-Id: Iea3e9932734924453f7241432afda90abbc75c06\n',1006,1003,'HP'),(276844,5599,5599,'2015-11-05 17:38:08','2015-11-05 17:37:30','    Add missing docs for ring.builder.rebalance\n    \n    commit 71993d84e88cc1d5f7742182905cace21c7e88cb added\n    a new \'remove_dev\' column to the\n    swift.common.ring.builder.rebalance return value.\n    \n    This patch adds the docs for that and clean up a bit to\n    the variable name to be easy to read.\n    \n    Change-Id: Idfd46e47b9f6894cbafc8b7701a4c7414212f79f\n',4,3,'NTT'),(276846,5674,5674,'2015-11-05 20:58:34','2015-10-29 21:09:01','    Add unit tests to cover print_item_locations\n    \n    Add unit tests to cover all code paths in print_item_locations\n    function in cli/info.py.\n    \n    Update comment to match what\'s tested for invalid/missing policy.\n    \n    Update tests to verify output of print_item_locations\n    \n    Corrected PEP8 compliance violations.\n    \n    Change-Id: I84958cb70205ee8d7ea246826dd56201fa642da9\n',167,1,'Intel'),(276848,5675,5675,'2015-10-22 13:55:01','2015-10-20 15:16:39','    DiskFileNoSpace check during object delete\n    \n    On a full disk, a call to delete an object will fail when it tries to\n    write tombstones. Handling DiskFileNoSpace exception raised by\n    swift.common.utils.\n    \n    Change-Id: I8f0cfcc4159ee154fcd3e7ca90c422aa5aadf0b3\n    Signed-off-by: Ganesh Maharaj Mahalingam <ganesh.mahalingam@intel.com>\n    Closes-Bug: 1491675\n',28,2,'Intel'),(276850,443,443,'2015-11-10 19:46:31','2015-11-10 19:46:31','    Change stackforge repo to openstack repo\n    \n    The projects which are moved to openstack\n    are corrected by replacing stackforge with openstack\n    \n    Change-Id: I65b794a7f10df617bc2a4caf2c4010477a82dbc2\n',4,4,'independent'),(276851,591,591,'2015-11-05 21:21:21','2015-11-01 18:10:06','    Compare Swift config checksum in swift-recon --all\n    \n    Change-Id: I796fe0895f4e5ddeb04c0d79a73579ce8bb9aa40\n',10,6,'Seznam.cz'),(276853,229,229,'2015-11-09 22:03:37','2015-11-09 22:03:34','    suppress warning output in a unit test\n    \n    test_write_builder_after_device_removal() wasn\'t setting a\n    default min_part_hours so a warnign was printed. Explicitly\n    adding a min_part_hours suppresses the warning\n    \n    Change-Id: I6f234b72c34e066abb91f28e6eacf50e29be8842\n',1,1,'SwiftStack'),(276855,4075,1141,'2015-11-10 12:18:50','2015-10-23 13:16:33','    EC: Use best available ec_type in unittests\n    \n    To minimize external library dependencies for Swift unit\n    tests and SAIO, PyECLib 1.1.1 introduces a native backend\n    \'liberasurecode_rs_vand.\'  This patch is to migrate over\n    the unit tests to the new ec_type when available.\n    \n    This change will work with current pyeclib requirements\n    (==1.0.7) and also future requirements (>=1.0.7).\n    \n    When we\'re able to raise *our* requirements to >=1.1.1 we\n    should remove jerasure from the list of preferred backends.\n    Related SAIO doc and example config changes should be\n    included with that patch.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Change-Id: Idf657f0acf0479bc8158972e568a29dbc08eaf3b\n',58,36,'Intel'),(276857,2313,2313,'2015-11-10 13:31:39','2015-10-16 11:27:34','    ObjectControllers return application errors as 499 on bad read\n    \n    In the _transfer_data method, we translate all (Exception, Timeout)\n    into a 499 whereas we should consider translating them to 500 on\n    particular returning error scenarios.\n    \n    This affects both ReplicatedObjectController and ECObjectControllear.\n    \n    Change-Id: I571bbc5b1451243907b094a5718c8735fd824268\n    Closes-Bug: 1504299\n',157,7,'IBM'),(276859,5676,5676,'2015-11-10 21:38:47','2015-11-06 01:49:58','    Added unit test cases for server.py\n    \n    Added unit test cases to cover all code paths in REPLICATE and __call__\n    functions in account/server.py and container/server.py\n    \n    Change-Id: Ia335e9a6668821d3e34b12fc3a133a707880e87f\n',188,6,'Intel'),(276861,1103,1103,'2015-11-03 16:36:19','2015-10-22 17:33:09','    monkeypatch thread for keystoneclient\n    \n    keystoneclient uses threading.Lock(), but swift doesn\'t\n    monkeypatch threading, this result in lockup when two\n    greenthreads try to acquire a non green lock.\n    \n    This change fixes that.\n    \n    Change-Id: I9b44284a5eb598a6978364819f253e031f4eaeef\n    Closes-bug: #1508424\n',35,22,'eNovance'),(276863,5674,5674,'2015-11-11 15:09:40','2015-10-28 22:25:24','    Added unit tests for ringbuilder command-line utility\n    \n    Added new unit tests:\n    \n    test_add_device_old_missing_region\n    test_create_ring_number_of_arguments\n    test_add_duplicate_devices\n    test_rebalance_with_seed\n    test_set_overload_number_of_arguments\n    test_main_no_arguments\n    test_main_single_argument\n    test_main_with_safe\n    \n    Modified existing unit tests to create sample ring at start of test.\n    This change was needed to have unit tests run correctly and demonstrate\n    code coverage.\n    \n    test_unknown\n    test_search_device_number_of_arguments\n    test_list_parts_number_of_arguments\n    test_set_weight_number_of_arguments\n    test_set_info_number_of_arguments\n    test_remove_device_number_of_arguments\n    test_set_min_part_hours_number_of_arguments\n    test_set_replicas_number_of_arguments\n    test_set_replicas_invalid_value\n    \n    Updates to handled nested mocks.\n    Updates to handle no exception case when SystemExit is expected.\n    PEP8 corrections.\n    \n    Moved new tests from try blocks to use of assertRaises or call to\n    run_srb using exp_results with specified exit codes.\n    \n    Updated run_srb to accept a dictionary of expected results. Specifically,\n    look for \'valid_exit_codes\' to test, default to (0,1).\n    \n    Change-Id: I4cf3f5f055a9babba140c68a9c7ff90b9c50ea62\n',78,8,'Intel'),(276865,5599,5599,'2015-11-11 09:03:54','2015-11-11 07:55:51','    Small cleanup for unit/proxy/controllers/test_obj\n    \n    Follow up for https://review.openstack.org/#/c/236007\n    \n    This fixes following minor items:\n    \n    - Fix a \'raise Exception class\' syntax to \'raise Exception instance\'\n    - Use original eventlet.Timeout instead of swift.exceptions.Timeout\n      imported from eventlet.Timeout\n    - Change Timeout to initiate w/o args (1st arguments should be timeout\n      second and we don\'t have to set None if we don\'t want to set the sec)\n    - Add a message argument to some Exception instances\n    \n    Change-Id: Iab608cd8a1f4d3f5b4963c26b94ab0501837ffe1\n',8,8,'NTT'),(276867,2470,2470,'2015-11-12 18:23:27','2015-11-04 12:25:19','    Close EC fragment iterators in the GreenThread that\'s consuming them\n    \n    Otherwise, we might try to close them while they\'re already running.\n    This should prevent conditional SLO requests from returning 500 when\n    they should have returned 304 or 412.\n    \n    Change-Id: I075a892f901c18ab5c178c9c4a2f367b76ae78e2\n    Related-Change: I156d873c72c19623bcfbf39bf120c98800b3cada\n',1,5,'SwiftStack'),(276868,591,591,'2015-11-15 11:26:06','2015-11-14 20:14:46','    Missing log_name option added\n    \n    Change-Id: If0224f346aa7372268115284c112e8f3a60a9be4\n',4,0,'Seznam.cz'),(276869,591,591,'2015-11-15 19:25:05','2015-11-15 19:25:05','    New swauth URL\n    \n    Change-Id: I019f921417d2bd5325141e8a6873ee934fdf3f49\n',1,1,'Seznam.cz'),(276871,2470,2470,'2015-11-16 10:49:17','2015-11-13 12:38:56','    Remove references to now-missing havana docs\n    \n    Change-Id: I3c708bacd468e923e574bdd5afc7acc58b072159\n',9,14,'SwiftStack'),(276873,869,869,'2015-11-16 14:28:42','2015-11-16 14:27:51','    Fix 503 on zero-byte replicated PUT with incorrect Etag\n    \n    Closes-Bug: 1516579\n    Change-Id: Iac91ed61254d3ca232521191fec25c19acb66413\n',21,2,'SwiftStack'),(276875,4090,4090,'2015-11-16 12:34:24','2015-10-30 11:02:54','    remove remaining simplejson uses, prefer standard library import\n    \n    a1c32702, 736cf54a, and 38787d0f remove uses of `simplejson` from\n    various parts of Swift in favor of the standard libary `json`\n    module (introduced in Python 2.6). This commit performs the remaining\n    `simplejson` to `json` replacements, removes two comments highlighting\n    quirks of simplejson with respect to Unicode, and removes the references\n    to it in setup documentation and requirements.txt.\n    \n    There were a lot of places where we were importing json from\n    swift.common.utils, which is less intuitive than a direct `import json`,\n    so that replacement is made as well.\n    \n    (And in two more tiny drive-bys, we add some pretty-indenting to an XML\n    fragment and use `super` rather than naming a base class explicitly.)\n    \n    Change-Id: I769e88dda7f76ce15cf7ce930dc1874d24f9498a\n',79,79,'SwiftStack'),(276877,5675,5675,'2015-11-10 16:19:39','2015-11-03 16:43:57','    Add unit tests for direct_client\n    \n    Add tests for direct_delete_account, direct_get_object, retry\n    Tests to validate possible argument calls of direct_put_object\n    Extend FakeConn to support chunks in response\n    \n    Change-Id: I00cbc6c535ed8b3fb29bc07fdc51fdbb1220ff10\n    Signed-off-by: Ganesh Maharaj Mahalingam <ganesh.mahalingam@intel.com>\n',108,2,'Intel'),(276879,1475,1475,'2015-11-20 09:00:59','2015-08-27 01:09:41','    py3: Add py34 test environment to tox\n    \n    Add a py34 test environment to tox.ini using a whitelist\n    of tests which pass on Python 3. Currently, only test_exceptions.py\n    of test/unit/common/ is run on Python 3\n    \n    Change-Id: I5c8a9fe7b9635f1acab8f401908975fc6fc58c7a\n',5,1,'eNovance'),(276880,869,2470,'2015-11-20 11:58:44','2015-11-20 09:04:28','    Ignore Content-Type from client on multipart-manifest=delete\n    \n    Otherwise, if a client includes something like:\n    \n        Content-Type: application/x-www-form-urlencoded\n    \n    ...we won\'t delete anything, and instead send back:\n    \n        Number Deleted: 0\n        Number Not Found: 0\n        Response Body:\n        Response Status: 406 Not Acceptable\n        Errors:\n    \n    ...despite the fact that we\'re managing the iterator, so we know it\'s\n    acceptable.\n    \n    Change-Id: I791c7bda1d9df830d8dacd3783c2393db5a9ac09\n',21,0,'SwiftStack'),(276882,5676,5676,'2015-11-20 16:07:17','2015-10-29 23:04:42','    Added unit test cases for container/auditor.py\n    \n    Added unit test cases to cover all code path in _one_audit_pass\n    function in container/auditor.py\n    \n    Change-Id: I8b89e94f1492e4366af3ac4260587e988ba29408\n',24,0,'Intel'),(276884,4094,4094,'2015-11-23 18:01:52','2015-11-20 17:51:33','    Update .mailmap entry\n    \n    Fix/add entries for authors that are known to now have\n    @hpe.com email addresses.\n    \n    Change-Id: I62c83b64e2378cb3d6ad33ac9e6ab111b8a8c86f\n',7,3,'HPE'),(276886,229,229,'2015-11-13 09:46:02','2015-11-13 09:46:02','    remove pbr from requirements.txt. It\'s not a run-time dependency\n    \n    Change-Id: I46f498122fccb0830304acba7f99fee64badfe12\n',0,1,'SwiftStack'),(276888,5675,5675,'2015-11-23 23:30:08','2015-10-30 21:30:51','    Unit tests for account/backend.py\n    \n    Add test for database create request without account\n    Partial test for migrate call on database with storage_policy_index\n    \n    Change-Id: I7cfbd6bc7e2b341f433d88f600b19e54826a0e22\n    Signed-off-by: Ganesh Maharaj Mahalingam <ganesh.mahalingam@intel.com>\n',20,0,'Intel'),(276890,5155,5155,'2015-10-25 16:30:02','2015-07-21 21:00:01','    Remove _keystone_identity method\n    \n    _keystone_identity method has been maintained for backward\n    compatibility. But there is no place to use it now so this patch\n    replace _keystone_identity method to _integrated_keystone_identity\n    method as _keystone_identity.\n    \n    Change-Id: I9464c047401f92ae31a5d3bb7aacaeb0624150e0\n',14,49,'Fujitsu'),(276892,4090,4090,'2015-11-13 12:08:03','2015-11-13 12:08:03','    remove Python 2.6-specific logging workaround\n    \n    0ff39c14 (December 2013) introduced this LoggingHandlerWeakRef to work\n    around a problem in which file descriptors would be leaked under Python\n    2.6. But we don\'t support 2.6 anymore.\n    \n    Change-Id: I1cd8249dfe17bce9cb301d13b761c11d2efd11d3\n',0,47,'SwiftStack'),(276894,4094,832,'2015-11-24 15:08:45','2014-09-11 16:51:51','    Add container and account reverse listings\n    \n    This change adds the ability to tell the container or account server to\n    reverse their listings. This is done by sending a reverse=TRUE_VALUE,\n    \n    Where TRUE_VALUE is one of the values true can be in common/utils:\n    \n      TRUE_VALUES = set((\'true\', \'1\', \'yes\', \'on\', \'t\', \'y\'))\n    \n    For example:\n    \n      curl -i -X GET -H \"X-Auth-Token: $TOKEN\" $STORAGE_URL/c/?reverse=on\n    \n    I borrowed the swapping of the markers code from Kevin\'s old change,\n    thanks Kevin. And Tim Burke added some real nuggets of awesomeness.\n    \n    DocImpact\n    Co-Authored-By: Kevin McDonald <kmcdonald@softlayer.com>\n    Co-Authored-By: Tim Burke <tim.burke@gmail.com>\n    Implements: blueprint reverse-object-listing\n    \n    Change-Id: I5eb655360ac95042877da26d18707aebc11c02f6\n',620,44,'Rackspace'),(276896,2470,2470,'2015-11-24 08:53:51','2015-11-23 13:53:27','    Reverse-listings follow-up\n    \n     * With the end_prefix changes in the original commit, we no longer need\n       the `or not name.startswith(prefix)` check.\n     * Improve test coverage of reverse path listings.\n    \n    Change-Id: Iaa7d4b83647c3c150be95f88cb3cc9e4f0e33979\n',64,2,'SwiftStack'),(276898,4093,4092,'2015-11-16 07:07:11','2015-10-02 09:20:17','    swift-init return codes\n    \n    Currently, swift-init returns zero if can\'t locate config on start.\n    Because of this problem, it is not possible to distinguish if managed\n    to start server.\n    \n    Due to legacy two new complementary options are added. Default is context\n    dependent.\n    --strict returns non-zero if some config is missing (default mode\n    if explicitly named server)\n    --non-strict returns zero even if some config is missing (default mode\n    if alias is used)\n    \n    As a side effect:\n    If some of demanded servers already running it does not try to start\n    unstarted and also returns non-zero (in strict mode). That is still sufficient\n    for the goal of patch.\n    \n    For future improvements LSB status codes should be considered.\n    \n    DocImpact\n    Change-Id: I7750abd4a94875b46f83f4aeee8509388d543c2b\n',147,11,'Seznam.cz'),(276900,4094,4094,'2015-11-25 18:41:11','2015-11-25 14:10:27','    Improve swift-init usage statement\n    \n    Clarify the behavior of strict and non-strict options.\n    \n    Define what <server> and <config> specify on the command line.\n    \n    Drive-by fix for missing param in search_tree docstring.\n    \n    Change-Id: I89fff88a088bc73001464b1fa8240e14a61a117d\n',22,5,'HPE'),(276902,4094,4094,'2015-11-24 17:13:47','2015-11-24 14:47:30','    Add more functional tests for reverse listings\n    \n    Also fix typo in the api doc.\n    \n    Follow-on to change I5eb655360ac95042877da26d18707aebc11c02f6\n    \n    Change-Id: Ic1ea63c74a0a3b90a505865fba8fcfac584d0825\n',73,8,'HPE'),(276904,4094,4094,'2015-11-25 18:57:48','2015-11-25 18:49:39','    Include params in multipart message part content-type\n    \n    The content-type header inserted into a multipart message part\n    is missing any params such as charset because its value is being\n    fetched via the swob.Response content_type property, which conforms\n    to webob spec and strips off all params.\n    \n    This was noticed in work on feature/crypto branch because the crypto\n    meta param was being stripped off content-type in multipart messages,\n    preventing the content-type being decrypted. But in general there is\n    no suggestion in the multipart message spec [1] that params should\n    not be included. In fact examples in [1] show the charset param\n    included in the content-type value.\n    \n    To ensure that the multipart message part content-type includes the\n    original content-type params, fetch it directly from the response\n    headers.\n    \n    [1] http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html\n    \n    Change-Id: Iff7274aa631a92cd7332212ed8b4378c27da4a1f\n',5,5,'HPE'),(276906,2470,2470,'2015-11-24 12:41:31','2015-10-13 11:45:20','    Have versioned_writes use reverse listings\n    \n    This will reduce the overhead required for versioned containers in terms\n    of memory, back-end requests, and wall time.\n    \n    Change-Id: I156216a14141db547de3cae1dcd5315ae31eaac2\n',56,66,'SwiftStack'),(276908,4093,4093,'2015-11-21 14:04:32','2015-11-06 10:49:09','    Log error if a local device not identified in replicator\n    \n    Example:\n    * Different port in config and in ring file.\n    * Running daemon on server not in ring file.\n    In both cases replication daemon is running but nothing is replicated.\n    Error log helps to distinguish a local device can\'t be identified.\n    \n    Closes-Bug: 1508228\n    Change-Id: I99351b7d9946f250b7750df91c13d09352a145ce\n',68,6,'Seznam.cz'),(276910,4094,869,'2015-11-26 14:47:16','2015-03-25 14:59:43','    Add functional test for multi-range GET requests.\n    \n    Change-Id: I9d417faede707e4f3570074e410344cc8955007b\n',135,1,'SwiftStack'),(276912,2470,2470,'2015-11-30 01:50:54','2015-10-07 16:47:11','    Expose tempurl\'s header restrictions via /info\n    \n    Also, clean up the module documentation a bit.\n    \n    Change-Id: Iaeb5eb264b118b78738187db9242540275e77444\n',154,124,'SwiftStack'),(276913,229,229,'2015-11-30 10:47:19','2015-11-30 10:33:23','    add sample proxy pipeline for keystone integration\n    \n    Change-Id: I4b4fd9179d0234f001940e215c97d40a2a6204cd\n',9,3,'SwiftStack'),(276915,229,229,'2015-11-30 11:58:40','2015-11-30 11:58:40','    Add config sample reference to KeystoneAuth docs\n    \n    Change-Id: I38a7bd7b85de9d674386d75220b31cc467746da8\n',7,7,'SwiftStack'),(276917,1475,1475,'2015-10-22 15:02:52','2015-10-19 17:16:21','    Fix Python 3 issues in utils\n    \n    * LogAdapter.exception(): on Python 3, socket.error is an alias to\n      OSError, so group both exceptions to support Python 3.\n    * ThreadPool: call GreenPipe() with indexed parameter, don\'t pass the\n      third parameter by its name, since the parameter name changed\n      between Python 2 (bufsize) and Python 3 (buffering).\n    * strip_value() in test_utils: StringIO.getvalue() now requires\n      seek(0), otherwise the buffer is filled with null characters.\n    * test_lock_file(): on Python 3, seek(0) is now required to go the\n      beginning of a file opened in append mode. In append mode, Python\n      goes to the end of the file.\n    \n    Change-Id: I4e56a51690f016a0a2e1354380ce11cff1891f64\n',7,6,'eNovance'),(276919,4094,4094,'2015-11-26 14:57:16','2015-11-26 14:46:01','    Test for content-type params in multi-range response\n    \n    Updates the functional test to verify the fix applied by\n    change Iff7274aa631a92cd7332212ed8b4378c27da4a1f\n    \n    Change-Id: Iae63ac027e4f4acfe46a36dc1325888b1f834ea4\n',27,10,'HPE'),(276921,869,869,'2015-11-25 17:17:44','2015-11-25 17:09:34','    Fix crash when a SLO repeats a segment.\n    \n    If a SLO manifest specified the same segment twice with no range on\n    the latter, we would crash while trying to coalesce the segment\n    specifications into a single request (for efficiency). Now we handle\n    that missing range and do the right thing.\n    \n    Change-Id: If13af444ed301ebd8fd34a0d96a330ded648f0c4\n',84,12,'SwiftStack'),(276923,5674,5674,'2015-11-03 15:54:48','2015-10-26 21:17:05','    Added unit tests to recon.py.\n    \n    Added tests for unrecognized recon_types for get_replication_info,\n    get_updater_info, and get_auditor_info.\n    \n    Added tests for get_device_info and get_swift_conf_md5.\n    \n    PEP8 compliance fixes.\n    \n    Updates based on code reviews.\n    \n    Change-Id: I3f636955b253ea7f65d4a1f333a0ad24f1ea6a1f\n',45,0,'Intel'),(276925,1141,1141,'2015-12-03 07:00:14','2015-11-11 12:53:29','    Bump PyECLib requirement to >=1.0.7\n    \n    ... to match global-requirements.  This is an\n    intermediate step in updating requirements to\n    PyECLib>=1.1.1.\n    \n    Change-Id: I79f47fff6ec1adff214ca435f0d95aaf1ffd68f9\n',1,1,'Intel'),(276926,1111,1111,'2015-12-02 07:58:20','2015-12-01 14:59:35','    Add functional test for repeated SLO segments\n    \n    Currently fails on master, passes with change\n    If13af444ed301ebd8fd34a0d96a330ded648f0c4 applied.\n    \n    Change-Id: I05b231cc232d5b4117bccee40eebc7093114c61c\n',20,0,'Red Hat'),(276928,5492,5492,'2015-11-27 14:09:35','2015-10-07 11:10:28','    Replace string slicing with proper string methods\n    \n    Updated string prefix and suffix checker slicing to startswith()\n    and endswith() methods.\n    \n    Using startswith() and endswith() improves readability, error-proneness\n    and enhances maintainability.\n    \n    Change-Id: I1d5fbf116a61763346c6f92fd8023dbbe9bb37cf\n',44,39,'Ericsson'),(276930,229,229,'2015-12-08 16:08:04','2015-12-08 16:08:04','    added a few ruby clients to associated projects\n    \n    Change-Id: I4764ba505646949ff694f8939947f83c6940128a\n',3,0,'SwiftStack'),(276931,4075,4075,'2015-12-07 16:06:42','2015-10-15 16:20:58','    Put part-replicas where they go\n    \n    It\'s harder than it sounds.  There was really three challenges.\n    \n    Challenge #1 Initial Assignment\n    ===============================\n    \n    Before starting to assign parts on this new shiny ring you\'ve\n    constructed, maybe we\'ll pause for a moment up front and consider the\n    lay of the land.  This process is called the replica_plan.\n    \n    The replica_plan approach is separating part assignment failures into\n    two modes:\n    \n     1) we considered the cluster topology and it\'s weights and came up with\n        the wrong plan\n    \n     2) we failed to execute on the plan\n    \n    I failed at both parts plenty of times before I got it this close.  I\'m\n    sure a counter example still exists, but when we find it the new helper\n    methods will let us reason about where things went wrong.\n    \n    Challenge #2 Fixing Placement\n    =============================\n    \n    With a sound plan in hand, it\'s much easier to fail to execute on it the\n    less material you have to execute with - so we gather up as many parts\n    as we can - as long as we think we can find them a better home.\n    \n    Picking the right parts for gather is a black art - when you notice a\n    balance is slow it\'s because it\'s spending so much time iterating over\n    replica2part2dev trying to decide just the right parts to gather.\n    \n    The replica plan can help at least in the gross dispersion collection to\n    gather up the worst offenders first before considering balance.  I think\n    trying to avoid picking up parts that are stuck to the tier before\n    falling into a forced grab on anything over parts_wanted helps with\n    stability generally - but depending on where the parts_wanted are in\n    relation to the full devices it\'s pretty easy pick up something that\'ll\n    end up really close to where it started.\n    \n    I tried to break the gather methods into smaller pieces so it looked\n    like I knew what I was doing.\n    \n    Going with a MAXIMUM gather iteration instead of balance (which doesn\'t\n    reflect the replica_plan) doesn\'t seem to be costing me anything - most\n    of the time the exit condition is either solved or all the parts overly\n    aggressively locked up on min_part_hours.  So far, it mostly seemds if\n    the thing is going to balance this round it\'ll get it in the first\n    couple of shakes.\n    \n    Challenge #3 Crazy replica2part2dev tables\n    ==========================================\n    \n    I think there\'s lots of ways \"scars\" can build up a ring which can\n    result in very particular replica2part2dev tables that are physically\n    difficult to dig out of.  It\'s repairing these scars that will take\n    multiple rebalances to resolve.\n    \n    ... but at this point ...\n    \n    ... lacking a counter example ...\n    \n    I\'ve been able to close up all the edge cases I was able to find.  It\n    may not be quick, but progress will be made.\n    \n    Basically my strategy just required a better understanding of how\n    previous algorithms were able to *mostly* keep things moving by brute\n    forcing the whole mess with a bunch of randomness.  Then when we detect\n    our \"elegant\" careful part selection isn\'t making progress - we can fall\n    back to same old tricks.\n    \n    Validation\n    ==========\n    \n    We validate against duplicate part replica assignment after rebalance\n    and raise an ERROR if we detect more than one replica of a part assigned\n    to the same device.\n    \n    In order to meet that requirement we have to have as many devices as\n    replicas, so attempting to rebalance with too few devices w/o changing\n    your replica_count is also an ERROR not a warning.\n    \n    Random Thoughts\n    ===============\n    \n    As usual with rings, the test diff can be hard to reason about -\n    hopefully I\'ve added enough comments to assure future me that these\n    assertions make sense.\n    \n    Despite being a large rewrite of a lot of important code, the existing\n    code is known to have failed us.  This change fixes a critical bug that\'s\n    trivial to reproduce in a critical component of the system.\n    \n    There\'s probably a bunch of error messages and exit status stuff that\'s\n    not as helpful as it could be considering the new behaviors.\n    \n    Change-Id: I1bbe7be38806fc1c8b9181a722933c18a6c76e05\n    Closes-Bug: #1452431\n',2531,901,'Rackspace'),(276933,229,4093,'2015-11-30 10:08:16','2015-11-24 16:33:35','    Unification of manpages and conf-samples (default values, etc)\n    \n    Change-Id: I47a3127ef698b4bd1537b1562901ee9c2b5924d4\n',1619,417,'Seznam.cz'),(276935,4075,4075,'2015-12-07 10:19:51','2015-12-07 10:19:51','    fix mock and assert in test_direct_client\n    \n    Change-Id: Ia6c14377e5dd768a5306a2448f0bf244ebc3634e\n',4,4,'Rackspace'),(276937,4086,4086,'2015-12-11 12:27:18','2015-12-11 12:27:18','    Update versioned_writes doc\n    \n    Change-Id: Ibe53c79cf49330332112001c02a2a6b078764130\n',3,1,'Intel'),(276939,2563,2563,'2015-12-14 16:50:52','2015-12-11 17:31:36','    Fix some inconsistency in docstrings\n    \n    Added colon after \":returns\" according to:\n    http://docs.openstack.org/developer/hacking\n    \n     blank lines are added before the param lines\n    \n    Change-Id: I008bea270c6a4b7c80d1a84a2cb9fcc9b5a7264a\n',5,3,'IBM'),(276941,2715,2715,'2015-12-11 18:09:31','2015-12-11 18:21:28','    Deprecated tox -downloadcache option removed\n    \n    Caching is enabled by default from pip version 6.0\n    \n    More info:\n    https://testrun.org/tox/latest/config.html#confval-downloadcache=path\n    https://pip.pypa.io/en/stable/reference/pip_install/#caching\n    \n    Change-Id: I9451a0f0dee5c5a3c0ca0a52f58bd353602661a2\n',0,3,'independent'),(276943,5155,5155,'2015-12-15 11:46:01','2015-12-15 11:33:56','    Fix a typo in development_auth.rst\n    \n    This patch uses correct name for \"CORS\".\n    \n    Change-Id: I5fee5c581a2b3adb7596a273baf05708bfa97f79\n',4,3,'Fujitsu'),(276945,5675,5677,'2015-12-15 22:30:44','2015-08-07 18:14:13','    Modify functional tests to use ostestr/testr\n    \n    Defcore uses Tempest, which uses Test Repository.\n    This change makes it easier for Defcore to pull functional\n    tests from Swift and run them.  Additionally, using testr\n    allows tests to be run in parallel.\n    \n    Concurrency set to 1 for now, >1 causes failures for\n    reasons that are still TBD.\n    \n    With switch to ostestr all the server logs are being sent to stdout\n    which makes it completely unreadable. Suppressing the logs by default\n    now with a flag to enable it if desired.\n    \n    Co-Authored-By: John Dickinson <me@not.mn>\n    Co-Authored-By: Robert Collins <rbtcollins@hpe.com>\n    Co-Authored-By: Matthew Oliver <matt@oliver.net.au>\n    Co-Authored-By: Ganesh Maharaj Mahalingam <ganesh.mahalingam@intel.com>\n    \n    Change-Id: I53ef4a116996a772cf1f3abc2eb0ad60047322d5\n    Related-Bug: 1177924\n',91,16,'Rackspace'),(276947,4518,4519,'2015-12-16 05:31:15','2015-11-09 19:22:38','    remove unused parameters in the method\n    \n    make the helper methods as private by using convention\n    \n    Change-Id: I73b9604f8d5a0e85d012aac42b7963b618f5ad97\n',2,3,'independent'),(276949,179,5599,'2015-12-16 17:17:06','2015-12-15 18:55:41','    Fix reconciler test to calc lastmodified as UTC\n    \n    Swift reconciler calculates the last-modified date as UTC but\n    current test calculates it as local time zone. It triggers unit\n    test failure in non-UTC environment.\n    \n    This patch fixes the test to calculate the last-modified as UTC\n    as well.\n    \n    Change-Id: Ia0053f350daf2cb8c61ac01a933924b6e4b0cb37\n    Closes-Bug: #1526588\n',1,1,'NTT'),(276951,229,229,'2015-12-14 10:52:22','2015-12-14 10:52:22','    Document pretend_min_part_hours_passed\n    \n    Added a docstring for the swift-ring-builder CLI command\n    \"pretend_min_part_hours_passed\". This is a dangerous operation, and\n    that\'s why it hasn\'t been documented, but it can be useful at times.\n    It should be made known to those who need it.\n    \n    Change-Id: I45bdbaacbbdda64c7510453e6d93e6d8563e3ecd\n',13,0,'SwiftStack'),(276953,4094,4094,'2015-12-15 15:49:42','2015-12-15 15:49:42','    Minor cleanup of repeated identical test assertions\n    \n    assertDictContainsSubset is being called multiple times with\n    same arguments in a loop. Since assertDictContainsSubset is\n    deprecated form python 3.2, replace it with checks on\n    individual key, value pairs.\n    \n    Change-Id: I7089487710147021f26bd77c36accf5751855d68\n',2,1,'HPE'),(276955,4094,4094,'2015-12-16 15:28:25','2015-12-16 15:28:25','    Fix func test --until-failure and --no-discover options\n    \n    This patch changes functional test classes to subclass\n    unittest2.TestCase rather than unittest.TestCase.\n    This fixes errors when attempting to use\n    \n    tox -e func -- -n <test_path_including_test_method>\n    \n    and\n    \n    tox -e func -- --until-failure\n    \n    Also migrate from using nose.SkipTest to unittest2.SkipTest\n    \n    Change-Id: I903033f5e01833550b2f2b945894edca4233c4a2\n    Closes-Bug: 1526725\n    Co-Authored-By: Ganesh Maharaj Mahalingam <ganesh.mahalingam@intel.com>\n',22,24,'HPE'),(276957,4094,832,'2015-12-17 14:28:40','2015-12-16 17:19:24','    Pass HTTP_REFERER down to subrequests\n    \n    Currently a HTTP_REFERER (Referer) header isn\'t passed down to\n    subrequests. This means *LO subrequests to segment containers\n    return a 403 on a *LO GET when accessed by requests using referer\n    ACLs.\n    Currently the only way around referer access to *LO\'s is to make the\n    segments container world readable.\n    \n    This change makes sure the referer header is passed into subrequests\n    allowing a segments container to only need to be locked down with\n    the same referer as the *LO container.\n    \n    This is a 1 line change to code, but also adds a unit and 2 functional\n    functional tests (one for DLO and one for SLO).\n    \n    Change-Id: I1fa5328979302d9c8133aa739787c8dae6084f54\n    Closes-Bug: #1526575\n',102,7,'Rackspace'),(276959,5205,5205,'2015-12-08 10:21:03','2015-12-08 10:17:08','    Not used parameter\n    \n    The account variable was not used in the method.\n    \n    Change-Id: I8e91d7616529f33b615bc52af76bfda01141d364\n',3,3,'Ericsson'),(276961,4094,4094,'2015-12-18 11:24:34','2015-12-18 11:24:34','    Fix rst errors so that html docs are complete\n    \n    rst table format errors don\'t break the gate job\n    but do cause sections of the documents to go missing\n    from the html output.\n    \n    Change-Id: Ic8c9953c93d03dcdafd8f47b271d276c7b356dc3\n',123,121,'HPE'),(276963,2313,2313,'2015-12-18 11:43:12','2015-11-20 12:09:26','    Update Erasure Coding Overview doc to remove Beta version\n    \n    The major functionality of EC has been released for Liberty and\n    the beta version of the code has been removed since it is now\n    in production.\n    \n    Change-Id: If60712045fb1af803093d6753fcd60434e637772\n',1,18,'IBM'),(276965,591,591,'2015-12-14 18:51:32','2015-12-13 21:13:42','    Deprecated param timeout removed from memcached\n    \n    Change-Id: Idf042a79f0db148bf9f28a9e360cb2a3c18d385a\n',14,53,'Seznam.cz'),(276967,4094,4094,'2015-12-17 12:12:02','2015-12-17 12:08:45','    Fix incorrect kwarg in auth middleware example\n    \n    When calling memcache_client.set(), timeout was deprecated\n    and is now removed as a keyword arg, use time instead.\n    \n    Change-Id: Iedbd5b064853ef2b386963246f639fbcd3931cd3\n',1,1,'HPE'),(276969,4094,4094,'2015-12-15 15:25:11','2015-10-05 16:15:29','    Make ECDiskFile report all fragments found on disk\n    \n    Refactor the disk file get_ondisk_files logic to enable\n    ECDiskfile to gather *all* fragments found on disk (not just those\n    with a matching .durable file) and make the fragments available\n    via the DiskFile interface as a dict mapping:\n    \n        Timestamp --> list of fragment indexes\n    \n    Also, if a durable fragment has been found then the timestamp\n    of the durable file is exposed via the diskfile interface.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Change-Id: I55e20a999685b94023d47b231d51007045ac920e\n',620,343,'HP'),(276971,5155,5155,'2015-12-21 16:16:59','2015-12-16 18:50:37','    Fix duplication for headers in Access-Control-Expose-Headers\n    \n    There are following problems with Access-Control-Expose-Headers.\n    \n    * If headers in X-Container-Meta-Access-Control-Expose-Headers are\n      configured, the headers are kept with case-sensitive string.\n      Then a CORS request comes, the headers are merged into\n      Access-Control-Expose-Headers as case-sensitive string even if\n      there is a same header which is not case-sensitive string.\n    \n    * Access-Control-Expose-Headers is handled by a list.\n      If X-Container/Object-Meta-XXX is configured in container/object\n      and X-Container-Meta-Access-Control-Expose-Headers, same header\n      is listed in Access-Control-Expose-Headers.\n    \n    This patch provides a fix for the problems.\n    \n    Change-Id: Ifc1c14eb3833ec6a851631cfc23008648463bd81\n',54,9,'Fujitsu'),(276973,5678,5678,'2015-12-10 14:47:23','2015-11-05 23:04:14','    Add support for storage policies to have more than one name\n    \n    This patch alters storage_policy.py to allow storage policies\n    to have multiple names. Now users are able to add a number of\n    human-readable aliases for storage policies. Policies now have\n    a .name (the default name), .aliases (a string of comma\n    seperated aliases), and .aliases_list (a list of all human\n    readable names). Policies will always have an .aliases value\n    if no aliases are set it will contain the default name.\n    The policy docs and tests have been updated to reflect changes\n    and policy.get_policy_info has been altered to display the\n    name and aliases\n    \n    Change-Id: I02967ca8d7c790595e5ee551581196aa64552eea\n',435,54,'Christchurch Polytechnic Institute of Technology'),(276975,179,179,'2015-12-22 22:11:29','2015-08-02 22:47:42','    Python 3 deprecated the logger.warn method in favor of warning\n    \n    DeprecationWarning: The \'warn\' method is deprecated, use \'warning\'\n    instead\n    \n    Change-Id: I35df44374c4521b1f06be7a96c0b873e8c3674d8\n',75,61,NULL),(276977,1475,1475,'2015-12-14 08:09:57','2015-10-19 16:19:28','    Port swift.common.utils.StatsdClient to Python 3\n    \n    * StatsdClient._send(): on Python 3, encode parts to UTF-8 and\n      replace \'|\' with b\'|\' to join parts.\n    * timing_stats(): replace func.func_name with func.__name__. The\n      func_name attribute of functions was removed on Python 3, whereas\n      the __name__ attribute is available on Python 2 and Python 3.\n    * Fix unit tests to use bytes\n    \n    Change-Id: Ic279c9b54e91aabcc52587eed7758e268ffb155e\n',20,9,'eNovance'),(276979,1410,1410,'2015-12-26 13:17:00','2015-12-26 13:13:37','    Fix AttributeError for LogAdapter\n    \n    LogAdapter object has no attribute \'warn\' but has attribute\n    \'warning\'.\n    \n    Closes-Bug: #1529321\n    Change-Id: I0e0bd0a3dbc4bb5c1f0b343a8809e53491a1da5f\n',6,5,'IBM'),(276981,591,591,'2016-01-05 20:20:15','2016-01-05 20:20:15','    Fixed few misspellings in comments\n    \n    Change-Id: I8479c85cb8821c48b5da197cac37c80e5c1c7f05\n',7,7,'Seznam.cz'),(276983,978,978,'2015-02-10 00:02:41','2015-02-10 00:02:41','    Setup .gitreview with default branch\n    \n    Change-Id: I2d3a2b292ca6656dd762caae23a8316b64743f49\n',1,0,'HP'),(276988,978,978,'2015-06-25 17:02:04','2015-03-12 13:17:22','    Allow middleware to override metadata header checking\n    \n    Middleware (e.g. an encrypter) may need to modify user\n    metadata header values such that they violate the\n    constraints. This should be ok provided the middleware\n    first applies the checks.\n    \n    This patch modifies check_metadata to store the checked state\n    in a request environ variable \'swift.metadata.checked\'\n    and not repeat the checks if they have already been\n    successful.\n    \n    \'swift.metadata.checked\' is copied to new environs created\n    using wsgi.make_env()\n    \n    Change-Id: Ia3b1ecd2cd2e91849853a100d070edfd23a02912\n',133,3,'HP'),(276991,5650,978,'2015-08-06 15:11:48','2015-03-18 16:27:33','    FakeFooters middleware\n    \n    This middleware is not intended to ever be merged\n    on master branch.\n    \n    This middleware mimics behaviour that we expect to\n    eventually integrate into the proxy app/object controller\n    once feature/ec has merged to master. Specifically, we need\n    to be able to add trailing headers (aka footers) to PUT\n    requests, after the request body has been read by a downstream\n    app, and have these footers sent on to the object server.\n    \n    Change-Id: Ibf2959c4c2715f477e6df94ccf0ab0681702e881\n',183,0,'HP'),(276993,978,5650,'2015-09-10 10:20:15','2015-06-19 17:24:13','    Trivial Key Master for encryption\n    \n    See Encryption spec in_progress/at_rest_encryption.html\n    \n    This new middleware would be used only for testing situations.\n    The keymaster, according to the spec, is to provide keys to\n    encryption middleware through the function\n    “swift.crypto.fetch_crypto_keys” in the WSGI env.  The structure\n    holding the keys is a dict with keys \"container\", and \"object\".\n    \n    Change-Id: I1a190f6c7ad3866248a02e2713e8d57b91a0f19e\n',406,0,'IBM'),(276994,978,5650,'2015-09-11 08:22:54','2015-06-20 13:52:05','    Cryptography module to be used by middleware\n    \n    See encryption spec in_progress/at_rest_encryption.html\n    \n    Includes a new class that handles creating and using a context\n    for encryption and decryption using AES in CTR mode. Using\n    CTR mode supports decrypting the response for ranged GET requests.\n    \n    Co-Authored-By: Christian Cachin <cca@zurich.ibm.com>\n    \n    Change-Id: I2eab1cd5aa46fa28123884cd057ac4c0c022e40b\n',214,0,'IBM'),(276996,5650,5650,'2015-09-22 14:33:24','2015-09-13 21:04:35','    Change fake_footers to replace response headers instead of append\n    \n    This patch changes fake_footers to replace response headers so\n    that there will not be duplicate \'keys\'.  The response headers are\n    a list of tuples, rather than a dict.  So simply appending can\n    result in duplicates.  This case should not occur, but has before.\n    An error log statement has been added if there would have been\n    a duplicate header key added.\n    \n    Change-Id: I4dcd071756bd6298e7ce41642142ebb6a062d906\n',19,3,'IBM'),(276997,5662,5662,'2015-09-22 16:02:44','2015-09-22 16:02:44','    Minor keymaster cleanup\n    \n    Refactor\'d some code.  Also, removed the logging of the \'key ids\' in\n    \'fetch_crypto_keys\' as we no longer maintain the key ids, rather all we have at\n    this point is the real keys themselves, and probably not much point in logging\n    those.\n    \n    Change-Id: I1c722df316ac84f4d9193ab8d34df8b8ea31f15c\n',14,16,'IBM'),(277000,978,5650,'2015-10-15 21:08:30','2015-06-20 15:12:20','    Encrypter and Decrypter middleware - object body only\n    \n    See encryption spec in_progress/at_rest_encryption.html\n    \n    Adds the encrypter and decrypter middleware.  This middleware\n    is only handling the encryption of the object body at this point.\n    There will be another review for metadata.\n    \n    Depends on having keymaster middleware and cryptography module.\n    You can point the following vagrant to this patch:\n    https://github.com/swiftstack/vagrant-swift-all-in-one/tree/crypto\n    Alternatively, please follow the instructions\n    in the proxy-server.conf-sample.  You will also need to add the\n    fake_footers middleware as well to get the correct functionality.\n    \n    Currently, the functests have 4 errors and 17 failures.  These\n    are all due to not having COPY implemented, and not having a good\n    solution for handling conditional GET.\n    \n    Change-Id: If5f83a9e6f5b9166015e6988e43101e4e69a6e65\n',998,18,'IBM'),(277001,978,5650,'2015-11-04 17:16:34','2015-07-17 21:33:34','    Encrypting/Decrypting object metadata\n    \n    See encryption spec in_progress/at_rest_encryption.html\n    \n    Adds the encryption and decryption of object metadata.\n    Specifically the user-metadata, content-type, and the etag.\n    \n    Depends on having keymaster middleware and cryptography module.\n    You can point the following vagrant to this patch:\n    https://github.com/swiftstack/vagrant-swift-all-in-one/tree/crypto\n    Alternatively, please follow the instructions\n    in the proxy-server.conf-sample.  You will also need to add the\n    fake_footers middleware as well to get the correct functionality.\n    \n    After this change, the functests have 6 errors and 17 failures.  These\n    are due to not yet having container listings updated, COPY implemented,\n    and not having a solution for handling conditional GET.\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    \n    Change-Id: I194e2329992232499bcca06f48431e7c09b623ed\n',722,185,'IBM'),(277002,978,4086,'2015-11-06 10:39:48','2015-10-09 19:19:10','    Guess content-type on PUT\n    \n    Content-type guessing, some code refactoring and tests.\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    \n    Change-Id: I47f73e4792185cf69afc0b7f82dca5261ad0d6f8\n',202,53,'Intel'),(277004,5679,5679,'2015-11-20 10:52:28','2015-11-12 16:55:29','    Transition to \'keymaster\'\n    \n    Transitioned from \'trivial_keymaster\' with constant root key to\n    \'keymaster\' with root key set in proxy-server.conf.\n    \n    Change-Id: Ib5051bc402d5758f149c6afbaee7ccf06c44bbca\n',420,392,'IBM'),(277005,4094,5650,'2015-11-25 10:20:12','2015-08-18 22:42:09','    Decrypting Container Listing\n    \n    See encryption spec in_progress/at_rest_encryption.html\n    \n    Decrypts the content-type in the container-listing.\n    The content-length is modified since decoding decreases length.\n    When there is \"footers\" support, the etag will also be decrypted.\n    \n    Depends on having keymaster middleware and cryptography module.\n    You can point the following vagrant to this patch:\n    https://github.com/swiftstack/vagrant-swift-all-in-one/tree/crypto\n    Alternatively, please follow the instructions\n    in the proxy-server.conf-sample.  You will also need to add the\n    fake_footers middleware as well to get the correct functionality.\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    \n    Change-Id: If7830ed0fc17deb3939492a02a3e07a20f1018c7\n',529,113,'IBM'),(277011,5680,5680,'2015-12-08 12:24:41','2015-11-30 09:41:53','    Add round-trip encrypter/decrypter unit tests\n    \n    The current encrypter/decrypter unit tests are separate; thus\n    encryption and decryption are tested in isolation. This is good\n    practice, however it results in the decrypter being tested by\n    fake/generated encrypted data and thus there is a risk that this fake\n    data diverges from the reality of what the encrypter writes.\n    \n    These quasi-unit-tests are intended to test a full round-trip\n    encrypt->decrypt cycle. The real Crypto implementation is used instead\n    of a FakeCrypto mock/stub.\n    \n    The FakeSwift test harness has also been fixed to support these tests.\n    \n    More information can be found here:\n    https://trello.com/c/PzGrFutj/64-back-to-back-unit-tests-for-encrypter-decrypter\n    \n    Change-Id: Id08d92e24c818fcaf20c750b4dd7ca317394a6fb\n',88,4,'IBM'),(277013,4094,4086,'2016-01-07 11:36:51','2016-01-05 23:28:51','    Modify unit tests to include real crypto\n    \n    Earlier the tests were mocking crypto\n    \n    Change-Id: I58352672f375c3bd91a3afd78ca6a4855ec35408\n',227,203,'Intel'),(277015,4086,4086,'2016-01-19 16:36:26','2016-01-06 19:29:48','    Remove content-type encryption/decryption\n    \n    This removes content-type encryption/decryption at object\n    metadata and at container level\n    \n    Change-Id: Id0a962f499074c14ff9cae53c1a45a9ea30abc3c\n',20,408,'Intel'),(277016,5652,5652,'2015-05-11 09:07:37','2015-05-05 12:31:22','    X-Auth-Token should be a bytestring.\n    \n    Change-Id: I2aa941d74883e17e9548b0144a4a2e2db33aba95\n    Closes-Bug: 1451773\n    (cherry picked from commit 1faad248f833735585aa8f6135babceb46fbb6f8)\n',5,1,'independent'),(277017,5652,1111,'2015-06-30 12:45:50','2015-06-26 08:54:22','    Increase httplib._MAXHEADERS\n    \n    Python 2.7.9+ and 3.2.6+ limits the number of maximum headers in httplib to 100\n    [1,2,3]. This setting is too low for Swift.\n    \n    By default the maximum number of allowed headers depends on the number of max\n    allowed metadata settings plus a default value of 32 for regular http headers.\n    If for some reason this is not enough (custom middleware for example) it can be\n    increased with the extra_header_count constraint.\n    \n    [1] https://bugs.python.org/issue16037\n    [2] https://hg.python.org/cpython/raw-file/15c95b7d81dc/Misc/NEWS\n    [3] https://hg.python.org/cpython/raw-file/v3.2.6/Misc/NEWS\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Matthew Oliver <matt@oliver.net.au>\n    Co-Authored-By: Thomas Herve <therve@redhat.com>\n    \n    Change-Id: I388fd697ec88476024b0e9f1ae75ba35ff765282\n    (cherry picked from commit edfca861b6fa39972df276fb1f37aa81583a605d)\n',28,2,'Red Hat'),(277018,229,1475,'2015-07-29 10:00:42','2015-07-10 13:04:44','    Fixes for mock 1.1\n    \n    The new release of mock 1.1 is more strict. It helped to find bugs in\n    tests.\n    \n    Closes-Bug: #1473369\n    Change-Id: Id179513c6010d827cbcbdda7692a920e29213bcb\n',8,8,'eNovance'),(277019,229,4075,'2015-08-26 07:56:10','2015-07-23 22:36:21','    Disallow unsafe tempurl operations to point to unauthorized data\n    \n    Do not allow PUT tempurls to create pointers to other data. Specifically\n    disallow the creation of DLO object manifests by returning an error if a\n    non-safe tempurl request includes an X-Object-Manifest header regardless of\n    the value of the header.\n    \n    This prevents discoverability attacks which can use any PUT tempurl to probe\n    for private data by creating a DLO object manifest and then using the PUT\n    tempurl to head the object which would 404 if the prefix does not match any\n    object data or form a valid DLO HEAD response if it does.\n    \n    This also prevents a tricky and potentially unexpected consequence of PUT\n    tempurls which would make it unsafe to allow a user to download objects\n    created by tempurl (even if they just created them) because the result of\n    reading the object created via tempurl may not be the data which was uploaded.\n    \n    [CVE-2015-5223]\n    \n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    \n    Closes-Bug: 1453948\n    \n    Change-Id: I91161dfb0f089c3990aca1b4255b520299ef73c8\n',85,1,'Rackspace'),(277020,229,869,'2015-08-26 07:56:35','2015-08-11 09:10:13','    Better scoping for tempurls, especially container tempurls\n    \n    It used to be that a GET of a tempurl referencing a large object would\n    let you download that large object regardless of where its segments\n    lived. However, this led to some violated user expectations around\n    container tempurls.\n    \n    (Note on shorthand: all tempurls reference objects. However, \"account\n    tempurl\" and \"container tempurl\" are shorthand meaning tempurls\n    generated using a key on the account or container, respectively.)\n    \n    Let\'s say an application is given tempurl keys to a particular\n    container, and it does all its work therein using those keys. The user\n    expects that, if the application is compromised, then the attacker\n    only gains access to the \"compromised-container\". However, with the old\n    behavior, the attacker could read data from *any* container like so:\n    \n    1) Choose a \"victim-container\" to download\n    \n    2) Create PUT and GET tempurl for any object name within the\n       \"compromised-container\". The object doesn\'t need to exist;\n       we\'ll create it.\n    \n    3) Using the PUT tempurl, upload a DLO manifest with\n       \"X-Object-Manifest: /victim-container/\"\n    \n    4) Using the GET tempurl, download the object created in step 3. The\n       result will be the concatenation of all objects in the\n       \"victim-container\".\n    \n    Step 3 need not be for all objects in the \"victim-container\"; for\n    example, a value \"X-Object-Manifest: /victim-container/abc\" would only\n    be the concatenation of all objects whose names begin with \"abc\". By\n    probing for object names in this way, individual objects may be found\n    and extracted.\n    \n    A similar bug would exist for manifests referencing other accounts\n    except that neither the X-Object-Manifest (DLO) nor the JSON manifest\n    document (SLO) have a way of specifying a different account.\n    \n    This change makes it so that a container tempurl only grants access to\n    objects within its container, *including* large-object segments. This\n    breaks backward compatibility for container tempurls that may have\n    pointed to cross container *LO\'s, but (a) there are security\n    implications, and (b) container tempurls are a relatively new feature.\n    \n    This works by having the tempurl middleware install an authorization\n    callback (\'swift.authorize\' in the WSGI environment) that limits the\n    scope of any requests to the account or container from which the key\n    came.\n    \n    This requires swift.authorize to persist for both the manifest request\n    and all segment requests; this is done by having the proxy server\n    restore it to the WSGI environment prior to returning from __call__.\n    \n    [CVE-2015-5223]\n    \n    Co-Authored-By: Clay Gerrard <clayg@swiftstack.com>\n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    Co-Authored-By: Christian Schwede <cschwede@redhat.com>\n    Co-Authored-By: Matthew Oliver <matt@oliver.net.au>\n    \n    Closes-Bug: 1449212\n    \n    Change-Id: I11078af178cb9acdd9039388282fcd0db165ba7a\n',333,68,'SwiftStack'),(277021,229,229,'2015-09-10 08:10:42','2015-09-10 08:10:42','    Pin PyECLib to 1.0.7\n    \n    Change-Id: Ic09f5245b51e1aba2c4ea549126bdb51886ed36c\n    Depends-On: I4314c31ae80364c3497b6d71f1a180a8cceba9d1\n',1,1,'SwiftStack'),(277022,229,4088,'2015-10-08 13:00:03','2015-10-06 16:28:34','    Fix replicator intersection exception when sync data to remote regions.\n    \n    This patch fixed the exception (AttributeError: \'list\' object has no\n    attribute \'intersection\') when replicator try to sync data from\n    handoff to primary partition in more than one remote region.\n    \n    This patch is slightly different than the original since Kilo doesn\'t\n    use six and still must support py26.\n    \n    Also updated .coveragerc to handle the config option change\n    \n    Change-Id: I565c45dda8c99d36e24dbf1145f2d2527d593ac0\n    Closes-Bug: 1503152\n',6,5,'SwiftStack'),(277023,978,978,'2015-10-22 11:22:24','2015-10-22 11:22:24','    Skip functional tests when test account4 is unauthorized\n    \n    Five functional tests rely on swift test account4 being\n    properly configured in keystone (the tests are already\n    skipped with tempauth). A regression in devstack appears\n    to have caused account4 to not be correctly set up which\n    causes those five tests to fail.\n    \n    This is a tactical change to skip those tests when the auth\n    for account4 fails, pending devstack being fixed. Note:\n    \n    - we do not just skip the tests unconditionally; on a test\n      system with correctly setup keystone accounts the tests\n      are still run.\n    \n    - the tests only skip if the auth fails with keystone for\n      account4.\n    \n    Change-Id: Iffef6d54554d1eb71524589cb58a06f874a6afc6\n    Related-Bug: 1508860\n',22,3,'HP'),(277024,978,1111,'2015-10-22 12:18:35','2015-06-02 19:51:39','    Fix testing issues\n    \n    When functional tests are run in tox and an exception is raised when connecting\n    to Swift (for example: Swift not running, missing python-keystoneclient package\n    used by python-swiftclient) 0 tests are executed, but tox returns a success.\n    \n    An exception is raised during tests, caused by a missing python-keystoneclient\n    in python-swiftclient. Instead of adding python-keystoneclient as a dependency\n    in python-swiftclient the package is added to the test-requirements.txt in Swift\n    itself. Note that adding python-keystoneclient to the test-requirements in\n    python-swiftclient is not sufficient (it\'s already in there).\n    \n    The exception in setup_package() is catched by the openstack.nose_plugin, thus\n    disabling this plugin for now as well.\n    \n    Also fixing two test errors seen on the gate regarding the tempurl middleware.\n    \n    There was also an update to tox, environment variables were no longer passed\n    with versions >= 2.0 (http://tox.readthedocs.org/en/latest/changelog.html).\n    Swift test environment variables have been added to the passenv to re-enable the\n    former behavior, as well as environment variables required to pass proxy\n    settings.\n    \n    This also led to skipped tempauth tests, and together with the missing\n    python-keystoneclient no tests were executed.\n    \n    Related-Bug: 1461440\n    Related-Bug: 1455102\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    \n    Change-Id: Ideea071017d04912c60ed0bc76532adbb446c31d\n    (cherry picked from commit f1f4bb30cd8ad930ddb7a232b2744b48e35a0480\n    with modified python-keystoneclient version specifiers in test-requirements.txt)\n',18,10,'Red Hat'),(277025,3855,869,'2016-01-12 21:42:58','2015-06-18 12:58:03','    Get better at closing WSGI iterables.\n    \n    PEP 333 (WSGI) says: \"If the iterable returned by the application has\n    a close() method, the server or gateway must call that method upon\n    completion of the current request[.]\"\n    \n    There\'s a bunch of places where we weren\'t doing that; some of them\n    matter more than others. Calling .close() can prevent a connection\n    leak in some cases. In others, it just provides a certain pedantic\n    smugness. Either way, we should do what WSGI requires.\n    \n    Noteworthy goofs include:\n    \n      * If a client is downloading a large object and disconnects halfway\n        through, a proxy -> obj connection may be leaked. In this case,\n        the WSGI iterable is a SegmentedIterable, which lacked a close()\n        method. Thus, when the WSGI server noticed the client disconnect,\n        it had no way of telling the SegmentedIterable about it, and so\n        the underlying iterable for the segment\'s data didn\'t get\n        closed.\n    \n        Here, it seems likely (though unproven) that the object server\n        would time out and kill the connection, or that a\n        ChunkWriteTimeout would fire down in the proxy server, so the\n        leaked connection would eventually go away. However, a flurry of\n        client disconnects could leave a big pile of useless connections.\n    \n      * If a conditional request receives a 304 or 412, the underlying\n        app_iter is not closed. This mostly affects conditional requests\n        for large objects.\n    \n    The leaked connections were noticed by this patch\'s co-author, who\n    made the changes to SegmentedIterable. Those changes helped, but did\n    not completely fix, the issue. The rest of the patch is an attempt to\n    plug the rest of the holes.\n    \n    Co-Authored-By: Romain LE DISEZ <romain.ledisez@ovh.net>\n    \n    Closes-Bug: #1466549\n    \n    Change-Id: I168e147aae7c1728e7e3fdabb7fba6f2d747d937\n    (cherry picked from commit 12d8a53fffea6e4bed8ba3d502ce625f5c6710b9\n    with fixed import conflicts)\n',105,38,'SwiftStack'),(277026,229,869,'2016-01-20 06:55:43','2015-12-08 16:36:05','    Fix memory/socket leak in proxy on truncated SLO/DLO GET\n    \n    When a client disconnected while consuming an SLO or DLO GET response,\n    the proxy would leak a socket. This could be observed via strace as a\n    socket that had shutdown() called on it, but was never closed. It\n    could also be observed by counting entries in /proc/<pid>/fd, where\n    <pid> is the pid of a proxy server worker process.\n    \n    This is due to a memory leak in SegmentedIterable. A SegmentedIterable\n    has an \'app_iter\' attribute, which is a generator. That generator\n    references \'self\' (the SegmentedIterable object). This creates a\n    cyclic reference: the generator refers to the SegmentedIterable, and\n    the SegmentedIterable refers to the generator.\n    \n    Python can normally handle cyclic garbage; reference counting won\'t\n    reclaim it, but the garbage collector will. However, objects with\n    finalizers will stop the garbage collector from collecting them* and\n    the cycle of which they are part.\n    \n    For most objects, \"has finalizer\" is synonymous with \"has a __del__\n    method\". However, a generator has a finalizer once it\'s started\n    running and before it finishes: basically, while it has stack frames\n    associated with it**.\n    \n    When a client disconnects mid-stream, we get a memory leak. We have\n    our SegmentedIterable object (call it \"si\"), and its associated\n    generator. si.app_iter is the generator, and the generator closes over\n    si, so we have a cycle; and the generator has started but not yet\n    finished, so the generator needs finalization; hence, the garbage\n    collector won\'t ever clean it up.\n    \n    The socket leak comes in because the generator *also* refers to the\n    request\'s WSGI environment, which contains wsgi.input, which\n    ultimately refers to a _socket object from the standard\n    library. Python\'s _socket objects only close their underlying file\n    descriptor when their reference counts fall to 0***.\n    \n    This commit makes SegmentedIterable.close() call\n    self.app_iter.close(), thereby unwinding its generator\'s stack and\n    making it eligible for garbage collection.\n    \n    * in Python < 3.4, at least. See PEP 442.\n    \n    ** see PyGen_NeedsFinalizing() in Objects/genobject.c and also\n       has_finalizer() in Modules/gcmodule.c in Python.\n    \n    *** see sock_dealloc() in Modules/socketmodule.c in Python. See\n        sock_close() in the same file for the other half of the sad story.\n    \n    This closes CVE-2016-0738.\n    \n    Closes-Bug: 1493303\n    \n    Change-Id: I9b617bfc152dca40d1750131d1d814d85c0a88dd\n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n',66,2,'SwiftStack'),(277027,239,239,'2015-10-05 12:18:07','2015-10-05 12:18:07','    Update .gitreview for stable/liberty\n    \n    Update .gitreview for stable/liberty branch to simplify submitting\n    backports.\n    \n    Change-Id: I394ecd1a98ce286b49bbacb62674a3c80182ec51\n',1,0,'OpenStack Foundation'),(277028,229,869,'2016-01-20 06:56:50','2015-12-08 16:36:05','    Fix memory/socket leak in proxy on truncated SLO/DLO GET\n    \n    When a client disconnected while consuming an SLO or DLO GET response,\n    the proxy would leak a socket. This could be observed via strace as a\n    socket that had shutdown() called on it, but was never closed. It\n    could also be observed by counting entries in /proc/<pid>/fd, where\n    <pid> is the pid of a proxy server worker process.\n    \n    This is due to a memory leak in SegmentedIterable. A SegmentedIterable\n    has an \'app_iter\' attribute, which is a generator. That generator\n    references \'self\' (the SegmentedIterable object). This creates a\n    cyclic reference: the generator refers to the SegmentedIterable, and\n    the SegmentedIterable refers to the generator.\n    \n    Python can normally handle cyclic garbage; reference counting won\'t\n    reclaim it, but the garbage collector will. However, objects with\n    finalizers will stop the garbage collector from collecting them* and\n    the cycle of which they are part.\n    \n    For most objects, \"has finalizer\" is synonymous with \"has a __del__\n    method\". However, a generator has a finalizer once it\'s started\n    running and before it finishes: basically, while it has stack frames\n    associated with it**.\n    \n    When a client disconnects mid-stream, we get a memory leak. We have\n    our SegmentedIterable object (call it \"si\"), and its associated\n    generator. si.app_iter is the generator, and the generator closes over\n    si, so we have a cycle; and the generator has started but not yet\n    finished, so the generator needs finalization; hence, the garbage\n    collector won\'t ever clean it up.\n    \n    The socket leak comes in because the generator *also* refers to the\n    request\'s WSGI environment, which contains wsgi.input, which\n    ultimately refers to a _socket object from the standard\n    library. Python\'s _socket objects only close their underlying file\n    descriptor when their reference counts fall to 0***.\n    \n    This commit makes SegmentedIterable.close() call\n    self.app_iter.close(), thereby unwinding its generator\'s stack and\n    making it eligible for garbage collection.\n    \n    * in Python < 3.4, at least. See PEP 442.\n    \n    ** see PyGen_NeedsFinalizing() in Objects/genobject.c and also\n       has_finalizer() in Modules/gcmodule.c in Python.\n    \n    *** see sock_dealloc() in Modules/socketmodule.c in Python. See\n        sock_close() in the same file for the other half of the sad story.\n    \n    This closes CVE-2016-0738.\n    \n    Closes-Bug: 1493303\n    \n    Change-Id: I74ea49eaa7d5c372cdc2399148d5495d3007dbd0\n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n',68,3,'SwiftStack'),(277029,2423,2423,'2016-01-06 09:26:38','2015-12-31 01:44:00','    Fixing the deprecated library function.\n    \n    os.popen() is deprecated since version 2.6. Resolved with use of\n    subprocess module.\n    \n    Change-Id: I4409cdd9edbc1a26d6f99c125c9100fadda5d758\n    Partial-Bug: #1529836\n',7,4,'Izel Technologies'),(277030,5681,5681,'2016-01-08 17:15:05','2015-12-16 12:07:27','    Fix IPv6 handling in MemcacheConnPool.\n    \n    The patch removes the assumption of IPv4-only addresses in the\n    MemcacheConnPool. The changes are around address handling.\n    Namely, if a server is specified with an address\n    [<address>]:port (port is optional), it is assumed to be an IPv6\n    address [1]. If an IPv6 address is specified without \"[]\", an exception\n    is raised as it is impossible to parse such addresses correctly.\n    \n    For testing, memcache can be configured to listen on the link-local,\n    unique-local, or ::1 (equivalent to 127.0.0.1) addresses. Link-local\n    addresses are assigned by default to each interface and are of the form\n    \"fe80::dead:beef\". These addresses require a scope ID, which would look\n    like \"fe80::dead:beef%eth0\" (replacing eth0 with the correct interface).\n    \n    Unique-local addresses are any addresses in the fc00::/7 subnet. To add\n    a ULA to an interface use the \"ip\" utility. For example:\n    \"ip -6 address add fc01::dead:beef dev eth0\". Lastly, and probably\n    simplest, memcache can be configured to listen on \"::1\". The same\n    address would be used in the swift configuration, e.g. \"[::1]:11211\".\n    \n    Note: only memcached version 1.4.25 or greater supports binding to an\n    IPv6 address.\n    \n    Fixes #1526570\n    \n    [1] IPv6 host literals:\n    https://tools.ietf.org/html/rfc3986#section-3.2.2\n    \n    Change-Id: I8408143c1d47d24e70df56a08167c529825276a2\n',184,8,'SwiftStack'),(277031,5599,5599,'2016-01-08 01:29:11','2016-01-08 01:29:11','    Add note COPY with conditional headers\n    \n    Swift now supports Range header for COPY (or PUT with X-Copy-From)\n    to make a partial copied object. This patch adds the note to show\n    it obviously supported in Swift community.\n    \n    Change-Id: I6bf28f0932c90e7b305cd61aabce4ed028ae691e\n    Partial-Bug: #1532126\n',5,0,'NTT'),(277033,591,591,'2016-01-05 11:34:03','2015-09-30 19:08:09','    swift-init: New option kill-after-timeout\n    \n    This option send SIGKILL to daemon after kill_wait period.\n    When daemon hangs and doesn\'t respond to SIGTERM/SIGHUP\n    there is no way to stop it using swift-init now. Classic\n    init scripts in Linux kills hanged process after grace\n    period and this patch add same behaviour. This is most\n    usefull when using \"restart\" on hanged daemon.\n    \n    Change-Id: I8c932b673a0f51e52132df87ea2f4396f4bba9d8\n',120,6,'Seznam.cz'),(277035,2316,2316,'2016-01-11 10:58:38','2015-12-14 15:28:17','    Print min_part_hours lockout time remaining\n    \n    swift-ring-builder currently only displays min_part_hours and\n    not the amount of time remaining before a rebalance can occur.\n    This information is readily available and has been displayed\n    as a quality of life improvement.\n    \n    Additionally, a bug where the time since the last rebalance\n    was always updated when rebalance was called regardless of\n    if any partitions were reassigned. This can lead to partitions\n    being unable to be reassigned as they never age according to\n    the time since last rebalance.\n    \n    Change-Id: Ie0e2b5e25140cbac7465f31a26a4998beb3892e9\n    Closes-Bug: #1526017\n',84,6,'TBM'),(277037,869,869,'2016-01-12 16:42:06','2016-01-12 16:42:06','    Install liberasurecode packages in SAIO.\n    \n    Change-Id: If673afa2b61a3e388612debf4860d561960963a3\n',4,2,'SwiftStack'),(277039,5681,4075,'2016-01-12 21:08:58','2016-01-08 16:15:54','    fixups for ipv6 memcache_servers docs\n    \n    Change-Id: I20d91c1e276014eaf210fa9eb43788bc17f4e8df\n',15,10,'Rackspace'),(277041,5155,5155,'2016-01-07 10:17:20','2015-12-11 18:26:34','    Fix ClientException handling in Container Sync\n    \n    swift/container/sync.py uses swift.common.internal_client.delete_object\n    and put_object and expected these methods raise ClientException.\n    But delete_object and put_object never raise the exception so this patch\n    raises ClientException when urllib2 library raises HTTPError.\n    \n    Co-Authored-By: Eran Rom <eranr@il.ibm.com>\n    Closes-Bug: #1419901\n    Change-Id: I58cbf77988979a07998a46d9d81be84d29b0d9bf\n',15,11,'Fujitsu'),(277043,5679,5679,'2016-01-12 14:26:38','2016-01-12 11:46:21','    Functional tests for if-match with multiple etags\n    \n    Multiple etags can be provided on an if-match or if-none-match\n    request. This is currently being tested in the unit tests, but not\n    in the functional tests. Since these etags can be modified by\n    middleware, we need functional tests to assert multiple-etag\n    requests are handled correctly.\n    \n    Change-Id: Idc409c85e8aa82b59dc2bc28af6ca2617de82699\n',19,0,'IBM'),(277045,2470,2470,'2016-01-13 12:48:59','2016-01-12 14:18:30','    Make object-auditor storage-policy-aware\n    \n    Previously, the object-auditor would always use a (replication)\n    DiskFileManager when walking through AuditLocations, which would cause\n    it to skip EC fragment archives with a warning like:\n    \n        Unexpected file <hash_path>/1452557187.03610#3.data:\n        Invalid Timestamp value in filename \'1452557187.03610#3.data\'\n    \n    Now, the AuditLocation\'s policy will be used to find an appropriate\n    manager to get the diskfile. Additionally, several .commit()s were added\n    to the auditor tests so the .durable will be written, which is required\n    when auditing EC fragment archives.\n    \n    Change-Id: I960e7d696fd9ad704ca1872b4ac821f9078838c7\n    Closes-Bug: 1533002\n',83,39,'SwiftStack'),(277047,591,591,'2016-01-14 12:49:09','2015-11-29 18:46:47','    Show UTC time in swift-recon.\n    \n    It\'s not consistent now for example local time in replication part and\n    UTC time at begging of line. Use _ptime in swift-recon for all time\n    printing and this function returns UTC now.\n    Change-Id: I732d9851db157130a08e825e8093b7e244b63e9c\n',12,22,'Seznam.cz'),(277049,869,869,'2016-01-14 17:26:01','2016-01-14 17:26:01','    Remove some Python 2.6 leftovers\n    \n    Change-Id: I798d08722c90327c66759aa0bb4526851ba38d41\n',1,18,'SwiftStack'),(277051,458,458,'2016-01-15 00:31:51','2016-01-15 00:31:51','    Drop python 2.6 support\n    \n    Change-Id: Id6329c863dacb189fccfc304453ed7b6f9607c14\n',2,6,'EasyStack'),(277053,869,869,'2016-01-14 13:50:19','2016-01-13 18:08:45','    Speed up get_more_nodes() when there is an empty zone\n    \n    The ring has some optimizations in get_more_nodes() so that it can\n    find handoffs that span all the regions/zones/et cetera and then stop\n    looking. The stopping is the important part.\n    \n    Previously, it would quickly find a handoff in each unused region,\n    then spend way too long looking for more unused regions; the same was\n    true for zones, IPs, and so on. Thus, in commit 9cd7c6c, we started\n    counting regions and zones, then stopping when we found them all.\n    \n    This count included all regions and zones in the ring, regardless of\n    whether or not there were actually any parts assigned or not. In rings\n    with an empty region, i.e. a region for which there are only\n    zero-weight devices, get_more_nodes() would be very slow.\n    \n    This commit ignores devices with no assigned partitions when counting\n    regions, zones, and so forth, thus greatly speeding things up.\n    \n    The output of get_more_nodes() is unchanged. This is purely an\n    optimization.\n    \n    Closes-Bug: 1534303\n    \n    Change-Id: I4a5c57205e87e1205d40fd5d9458d4114e524332\n',12,1,'SwiftStack'),(277055,591,591,'2016-01-14 12:52:52','2016-01-12 21:26:33','    Allow to change auditor sleep interval in config\n    \n    Change-Id: Ic451c5e0b686509f8982ed1bf65a223a2d77b9a0\n',19,5,'Seznam.cz'),(277057,441,441,'2016-01-18 06:20:14','2016-01-18 06:20:14','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Ic416c9afc8a1c76f552803a7c70fc905eda7b3cb\n',436,309,NULL),(277059,4094,5599,'2015-12-18 09:56:03','2015-12-08 22:27:44','    Sleep enough for trampoline\n    \n    When running unite test suite in local poor resource environment,\n    sometimes test/unit/proxy/test_server.py fails due to a lack of\n    waiting time to trampoline of eventlet thread.\n    \n    This patch enables to sleep 1 more second when it doesn\'t seem\n    to have enough time to tranpoline.\n    \n    Change-Id: I0bbc8fc245919d3c0a071ff87ff6e20b8d58f9b8\n',12,2,'NTT'),(277061,5682,5682,'2016-01-19 10:01:51','2015-12-21 14:17:00','    Use the correct split_path in handle_request\n    \n    Change-Id: I86d423309f0b2091ee2e82b2245caf925b6a75ef\n    Closes-Bug: #1528189\n',14,1,'Deutsches Klimarechenzentrum GmbH'),(277063,5683,5683,'2016-01-06 14:33:23','2016-01-06 14:33:23','    Add more description for write_affinity_node_count parameter in the doc.\n    \n    Change-Id: Iad410a2be4f9a2cd5c53e860b9f91993aa7f2369\n    Closes-Bug: #1531173\n',6,1,'independent'),(277065,5674,5674,'2016-01-09 00:13:06','2016-01-08 22:49:05','    Look for device holes that can be reused when adding new device.\n    \n    Change-Id: I1980ebdd9dc89848173d8ca2fe2afb74029dcfa2\n    Closes-Bug: 1532276\n',70,1,'Intel'),(277067,5676,5676,'2016-01-19 20:01:08','2015-12-04 17:43:00','    Deleted comment about part power in FakeRing\n    \n    Deleted comment about parameter part power in Class FakeRing as its\n    behavior got dropped in I8bfc388a04eff6491038991cdfd7686c9d961545.\n    \n    Change-Id: Iec7d2565a77e48493b0056021066d8d8eab65d0b\n    Closes-Bug:  #1488704\n',0,7,'Intel'),(277069,869,869,'2016-01-19 15:33:13','2016-01-19 15:33:13','    Fix a comment\'s indentation\n    \n    Change-Id: I34514525b606cf82767ddce7769bc42fa5457717\n',1,1,'SwiftStack'),(277071,229,869,'2016-01-20 06:54:14','2015-12-08 16:36:05','    Fix memory/socket leak in proxy on truncated SLO/DLO GET\n    \n    When a client disconnected while consuming an SLO or DLO GET response,\n    the proxy would leak a socket. This could be observed via strace as a\n    socket that had shutdown() called on it, but was never closed. It\n    could also be observed by counting entries in /proc/<pid>/fd, where\n    <pid> is the pid of a proxy server worker process.\n    \n    This is due to a memory leak in SegmentedIterable. A SegmentedIterable\n    has an \'app_iter\' attribute, which is a generator. That generator\n    references \'self\' (the SegmentedIterable object). This creates a\n    cyclic reference: the generator refers to the SegmentedIterable, and\n    the SegmentedIterable refers to the generator.\n    \n    Python can normally handle cyclic garbage; reference counting won\'t\n    reclaim it, but the garbage collector will. However, objects with\n    finalizers will stop the garbage collector from collecting them* and\n    the cycle of which they are part.\n    \n    For most objects, \"has finalizer\" is synonymous with \"has a __del__\n    method\". However, a generator has a finalizer once it\'s started\n    running and before it finishes: basically, while it has stack frames\n    associated with it**.\n    \n    When a client disconnects mid-stream, we get a memory leak. We have\n    our SegmentedIterable object (call it \"si\"), and its associated\n    generator. si.app_iter is the generator, and the generator closes over\n    si, so we have a cycle; and the generator has started but not yet\n    finished, so the generator needs finalization; hence, the garbage\n    collector won\'t ever clean it up.\n    \n    The socket leak comes in because the generator *also* refers to the\n    request\'s WSGI environment, which contains wsgi.input, which\n    ultimately refers to a _socket object from the standard\n    library. Python\'s _socket objects only close their underlying file\n    descriptor when their reference counts fall to 0***.\n    \n    This commit makes SegmentedIterable.close() call\n    self.app_iter.close(), thereby unwinding its generator\'s stack and\n    making it eligible for garbage collection.\n    \n    * in Python < 3.4, at least. See PEP 442.\n    \n    ** see PyGen_NeedsFinalizing() in Objects/genobject.c and also\n       has_finalizer() in Modules/gcmodule.c in Python.\n    \n    *** see sock_dealloc() in Modules/socketmodule.c in Python. See\n        sock_close() in the same file for the other half of the sad story.\n    \n    This closes CVE-2016-0738.\n    \n    Closes-Bug: 1493303\n    \n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    \n    Change-Id: Ib86c4c45641485ce1034212bf6f53bb84f02f612\n',67,3,'SwiftStack'),(277073,229,229,'2016-01-19 10:30:30','2016-01-19 10:30:30','    Bump eventlet min version to 0.17.4\n    \n    IPv6 support in Swift is dependent on IPv6 support in eventlet.\n    eventlet itself only claims support for IPv6 post v0.17\n    (https://github.com/eventlet/eventlet/issues/8). This update matches\n    the OpenStack global requirements version.\n    \n    Change-Id: I9d8433cdd3bf7d7a93b8f50b991cc21721a80d22\n',1,1,'SwiftStack'),(277075,229,229,'2016-01-20 09:35:14','2016-01-19 14:50:24','    authors and changelog updates for 2.6.0\n    \n    Change-Id: Idd0ff9e70abc0773be183c37cd6125fe852da7c0\n',119,8,'SwiftStack'),(277077,2470,2470,'2016-01-11 15:44:30','2016-01-08 16:38:31','    Validate X-Timestamps\n    \n    Previously, attempting to PUT a new object with an X-Timestamp header\n    less than or equal to zero (ie, for a timestamp on or before 1970-01-01\n    00:00:00) would cause the object-server to 500.\n    \n    While we\'re at it, cap X-Timestamp at 9999999999 (2286-11-20 17:46:40)\n    so we don\'t get an eleventh digit before the decimal point.\n    \n    Closes-Bug: 1532471\n    Change-Id: I23666ec8a067d829eaf9bfe54bd086c320b3429e\n',44,1,'SwiftStack'),(277079,2470,2470,'2016-01-20 16:06:26','2016-01-20 16:06:26','    Stop overriding builtin range\n    \n    Change-Id: I315f8b554bb9e96659b455f4158f074961bd6498\n',61,59,'SwiftStack'),(465520,229,229,'2016-01-20 15:19:35','2016-01-20 15:19:35','    remove unneeded duplicate dict keys\n    \n    Change-Id: I926d7aaa9df093418aaae54fe26e8f7bc8210645\n',81,81,'SwiftStack'),(465522,5667,5667,'2016-01-06 16:46:31','2015-07-26 13:31:17','    Container-Sync to iterate only over synced containers\n    \n    This change introduces a sync_store which holds only containers that\n    are enabled for sync. The store is implemented using a directory\n    structure that resembles that of the containers directory, but has\n    entries only for containers enabled for sync.\n    The store is maintained in two ways:\n    1. Preemptively by the container server when processing\n    PUT/POST/DELETE operations targeted at containers with\n    x-container-sync-key / x-container-sync-to\n    2. In the background using the containers replicator\n    whenever it processes a container set up for sync\n    \n    The change updates [1]\n    [1] http://docs.openstack.org/developer/swift/overview_container_sync.html\n    \n    Change-Id: I9ae4d4c7ff6336611df4122b7c753cc4fa46c0ff\n    Closes-Bug: #1476623\n',1037,119,'independent'),(465524,869,869,'2015-12-09 10:09:13','2015-11-30 18:06:09','    Allow smaller segments in static large objects\n    \n    The addition of range support for SLO segments (commit 25d5e68)\n    required the range size to be at least the SLO minimum segment size\n    (default 1 MiB). However, if you\'re doing something like assembling a\n    video of short clips out of a larger one, then you might not need a\n    full 1 MiB.\n    \n    The reason for the 1 MiB restriction was to protect Swift from\n    resource overconsumption. It takes CPU, RAM, and internal bandwidth to\n    connect to an object server, so it\'s much cheaper to serve a 10 GiB\n    SLO if it has 10 MiB segments than if it has 10 B segments.\n    \n    Instead of a strict limit, now we apply ratelimiting to small\n    segments. The threshold for \"small\" is configurable and defaults to 1\n    MiB. SLO segments may now be as small as 1 byte.\n    \n    If a client makes SLOs as before, it\'ll still be able to download the\n    objects as fast as Swift can serve them. However, a SLO with a lot of\n    small ranges or segments will be slowed down to avoid resource\n    overconsumption. This is similar to how DLOs work, except that DLOs\n    ratelimit *every* segment, not just small ones.\n    \n    UpgradeImpact\n    \n    For operators: if your cluster has enabled ratelimiting for SLO, you\n    will want to set rate_limit_under_size to a large number prior to\n    upgrade. This will preserve your existing behavior of ratelimiting all\n    SLO segments. 5368709123 is a good value, as that\'s 1 greater than the\n    default max object size. Alternately, hold down the 9 key until you\n    get bored.\n    \n    If your cluster has not enabled ratelimiting for SLO (the default), no\n    action is needed.\n    \n    Change-Id: Id1ff7742308ed816038a5c44ec548afa26612b95\n',288,153,'SwiftStack'),(465526,2470,2470,'2016-01-18 10:23:48','2015-12-16 15:46:13','    Expose token expiration time in tempauth auth response\n    \n    Previously, we gave no indication of when a token would expire. Users\n    would have to just use it until it stopped working, then re-auth.\n    Now, a successful auth response will include a new header,\n    X-Auth-Token-Expires, with the number of seconds remaining until the\n    token is invalid. This allows the client to attempt to re-auth before\n    sending a request that will definitely fail.\n    \n    For comparison, swauth already uses the X-Auth-Token-Expires header with\n    identical semantics. Additionally, Keystone (v2 and v3) already exposes\n    expiration times in its JSON responses. The security impact should be\n    minimal.\n    \n    Change-Id: I5a4a74276bc0df6dda94e4bc150065c0d77de0eb\n',21,4,'SwiftStack'),(466629,1475,1475,'2016-01-20 15:23:22','2015-10-09 17:56:39','    py3: Use the six module in the xprofile middleware\n    \n    * Replace bytes_() with a isinstance(content, six.text_type)\n      and content.encode(\'utf-8\')\n    * Get parse_qs() from six.moves.urllib.parse\n    \n    Change-Id: I4a506975814bff098ade25c950c154e50dc9626e\n',8,25,'eNovance'),(466631,2470,2470,'2016-01-25 09:28:19','2016-01-25 09:25:20','    Don\'t .lower() a literal\n    \n    It feels silly, and we don\'t do it for any of the other headers in\n    headers_to_container_info.\n    \n    While we\'re at it, clean up a stray \'\n    \n    Change-Id: I0745038cc3832a77d064e515c37cacbdcb97c4d9\n    Related-Change: Iea3d06de80210e9e504e296d4572583d7ffabeac\n',2,3,'SwiftStack'),(466633,7361,7361,'2016-01-25 10:09:08','2016-01-25 10:03:18','    Additional step for Debugging Issues in SAIO\n    \n    Adding an additional debugging step for the SAIO \"Debugging Issues\"\n    section. Adding step to check if memcache is running and to start\n    it if its not.\n    \n    Change-Id: I0bfa563f595dbefcf907494451fad45e6310db88\n',4,0,'IBM'),(466635,2470,2470,'2016-01-22 14:06:40','2016-01-22 13:31:34','    Use calendar.timegm not time.mktime\n    \n    time.mktime produces a POSIX timestamp that takes into account the local\n    timezone, but we\'re parsing a Last-Modified header with a known (GMT)\n    timezone. As a result, if one proxy-server is configured with a timezone\n    other than GMT/UTC, we may have previous versions in the wrong order.\n    \n    Change-Id: I320e2368b243f4245725e73bfabc7ad19bc5bacb\n',31,5,'SwiftStack'),(466637,591,591,'2016-01-25 18:20:45','2016-01-25 18:20:45','    Fixed docs: Title underline too short\n    \n    Change-Id: If96b0e799a4671e7b7f3f5bea2628db75afa9578\n',1,1,'Seznam.cz'),(466639,4075,4075,'2016-01-25 12:43:14','2015-11-11 19:05:09','    Ring Overview updates\n    \n    Change-Id: Ic5a8ec5be9fec7fa812fdb7b91890d5fc2fbf967\n',176,95,'Rackspace'),(466641,4094,5654,'2016-01-26 11:27:34','2016-01-21 14:18:31','    Fix handling of \"Permission Denied\" error from NamedTemporaryFile function\n    \n    If \"Permission Denied\" has happen in NamedTemporaryFile function in\n    dump_recon_cache method, swift will log a message of reference to a variable\n    without assignment and not log a message of \"Permission Denied\".\n    This patch fixes the handling and add an unit test.\n    \n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    Change-Id: Iafdd94905e9e9c81f5966a923324b50c18fcf592\n',30,5,'Nippon Telegraph and Telephone Corporation'),(467164,1475,1475,'2016-01-25 18:05:13','2015-10-19 16:31:12','    Port swift.common.utils.Timestamp to Python 3\n    \n    * Fix Timestamp.isoformat(): on Python 3, round manually to use the\n      same rounding method than Python 2.\n    * Use @functoos.total_ordering on Timestamp instead of the __cmp__()\n      special method. On Python 3, the __cmp__() method is no more used,\n      and other special methods must be defined (__eq__, __lt__, etc.).\n      Only define __eq__() and __lt__() methods but use\n      @functools.total_ordering to generate other methods.\n    * Fix also a Python 3 issues in swift.common.swob._datetime_property:\n      replace (float, int, long) with (float,) + six.integer_types. The\n      long type was renamed to int in Python 3.\n    \n    Change-Id: Id26777ac2c780316ff10ef7d954c48cc1fd480b5\n',26,10,'eNovance'),(467166,4087,4087,'2016-01-21 13:30:15','2016-01-21 13:30:15','    Update AUTHORS\n    \n    +Luse core emeritus\n    \n    Change-Id: Ie175f410ddc24a2d5e64bc191364418a3c450f3f\n',1,0,'Intel'),(467168,1475,1475,'2016-01-25 14:05:59','2015-10-19 17:22:24','    Add __next__() methods to utils iterators for py3\n    \n    On Python 3, next(obj) calls obj.__next__(), not obj.next(). Add an\n    alias from __next__() to next() to be compatible with Python 2 and\n    Python 3.\n    \n    Change-Id: Ida104d3bd7cdba557e523f18df43d56847060054\n',5,0,'eNovance'),(467711,5645,5645,'2016-01-25 13:37:10','2016-01-13 10:16:29','    _get_info_cache should encode unicode metadata\n    \n    Closes-Bug: 1533768\n    Change-Id: I67bbd0e8802d2a34cb3a0b0fafe26bbc62221032\n',38,3,'Rackspace'),(467713,4094,4094,'2016-01-27 10:18:37','2016-01-27 10:18:37','    Remove unnecessary code from test_account.py\n    \n    Change-Id: Ia197ba08a606421244d5b94a900bdc39bc5da647\n',0,1,'HPE'),(467715,4094,4094,'2016-01-27 15:35:40','2016-01-27 15:35:40','    Remove a print statement from tests\n    \n    Change-Id: I213b7e4bc4f9e6de76ebab572c377af61072d9c5\n',0,2,'HPE'),(467717,4075,4075,'2016-01-15 11:44:21','2016-01-15 11:44:21','    add test for zero weight region get_more_nodes\n    \n    Change-Id: If537981e8deadd9c3528dcb30a15011c7781e334\n',65,0,'Rackspace'),(468256,5248,7385,'2016-01-16 00:22:53','2015-12-09 15:25:03','    go: fix requests with X-If-Delete-At for objects without X-Delete-At header\n    \n    Change-Id: I0d4da3ba8b387a2d41f74c45d2678e4cef520667\n',62,0,'independent'),(468257,4075,4094,'2016-01-28 10:08:02','2016-01-28 16:47:37','    Let equal Timestamps not be unequal\n    \n    Make the result of Timestamp(x) != Timestamp(x) be False.\n    \n    In python 2.7 this requires the __ne__ method to be defined [1].\n    \"The truth of x==y does not imply that x!=y is false.\" The\n    functools.total_ordering decorator does not autocreate a __ne__\n    method.\n    \n    In python 3 the __ne__ method is not required [2]. \"By default,\n    __ne__() delegates to __eq__() and inverts the result\".\n    \n    This patch puts back the __ne__ method removed in [3]. Whilst no tests\n    fail on master with python2.7, they do on this patch [4] and it seems\n    dangerous to have this absurd behaviour lurking.\n    \n    [1] https://docs.python.org/2/reference/datamodel.html#object.__ne__\n    [2] https://docs.python.org/3.4/reference/datamodel.html#object.__ne__\n    [3] Change-Id: Id26777ac2c780316ff10ef7d954c48cc1fd480b5\n    [4] Change-Id: Ia597cd460bb5fd40aa92e886e3e18a7542603d01\n    \n    Change-Id: I01fbfa310df3c74390f8e8c2e9ffff81bbf05e47\n',9,0,'HPE'),(468560,56,56,'2016-01-28 09:16:59','2016-01-28 09:15:28','    Fix a few English mistakes in man\n    \n    These errors are producing lintian warnings, so fixing them\n    helps having less errors when checking for Debian packages.\n    \n    Change-Id: Iff99a8d5f2276515f42d758d110a43cae757db28\n',4,4,'Mirantis'),(468562,2715,4093,'2016-01-18 16:54:14','2015-12-03 16:48:18','    Add info about state of ring file to default command.\n    \n    Try to find ring file, load and compare it with builder file, then show result state.\n    Examples:\n    Ring file object.ring.gz not found, probably it hasn\'t been written yet\n    Ring file object.ring.gz is up-to-date\n    Ring file object.ring.gz is obsolete\n    Ring file object.ring.gz is invalid: ValueError(\'string length not a multiple of item size\',)\n    \n    Change-Id: I4d769aa5fe1c2b1167ec088aa372874f7d13ae48\n',81,2,'Seznam.cz'),(468564,591,591,'2016-01-29 22:49:16','2016-01-29 22:46:50','    Renamed variable for better code readability\n    \n    Change-Id: I22d8db0dd9edc39672fc9997895a24f669975e15\n',9,9,'Seznam.cz'),(469393,3270,3270,'2016-02-01 17:15:32','2016-02-01 17:15:32','    fix typo\n    \n    informations -> information\n    \n    Change-Id: I6bcb9bb9fd24b873b49de4a686b223550dd703ac\n',1,1,'Intel'),(469394,441,441,'2016-01-31 06:15:17','2016-01-31 06:15:17','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: If1cd20e187720f5ee02c6a1574f612c8a8e26e30\n',6,5,NULL),(469396,4094,1460,'2016-02-01 15:52:04','2016-02-01 16:13:54','    Fix spelling error\n    \n    Change-Id: I4a1400c4d383acd59727ada3661a8dffc67825fb\n',1,1,'UnitedStack'),(469398,4075,4075,'2016-02-01 16:19:08','2016-02-01 15:30:59','    Always fix devices with multiple part-replica assignments\n    \n    I\'ve found that given a sufficiently bad replica2part2dev table we can\n    accidently not entirely fix palcement when more than two replicas of a\n    part are assigned to the duplicate devices.\n    \n    It shows up most on > 3 replica rings when you have two *different*\n    devices both holding two replicas.  But you can see it on a three\n    replica ring when all three replicas are assigned to the same device.\n    \n    Change-Id: Ieb213c1a259815a2ed657291242919cda568c7b5\n',46,8,'Rackspace'),(469399,7409,7409,'2016-01-29 04:06:54','2016-01-29 03:48:47','    A minor modification of the Deployment Guide\n    \n    In the section of General Service Tuning, there is a sentence\n    \"Our Storage servers all run together on the same servers\".\n    The word \"servers\" is used twice with different meanings, which\n    would be a little confusing. This patch makes it more understandable.\n    \n    Change-Id: I6d806456aeb7d0ecf297c04dacbd271b94a0425c\n    Closes-Bug: #1526697\n',1,1,'OStorage'),(469401,4094,4094,'2016-01-29 15:28:56','2016-01-29 15:28:56','    Trivial fix for sphinx warnings\n    \n    Including a * in the param name causes a sphinx warning,\n    messes up the html formatting, and strictly the * isn\'t part of\n    the param name.\n    \n    Change-Id: I6be6a7aa2a371eaae9f8e501435838c1e15f4a1c\n',2,2,'HPE'),(469403,1111,1111,'2016-02-02 09:39:32','2016-02-02 09:38:55','    Document slow option in etc/object-server.conf\n    \n    Change-Id: Ic9940b0b830a468887878f7b0d7ca42c2cbbebd5\n',4,0,'Red Hat'),(469405,3270,3270,'2016-02-01 19:21:26','2016-02-01 16:44:52','    Replace exit() by sys.exit()\n    \n    sys.exit() is considered good to use here.\n    \n    Change-Id: I365b0dbb50c8f1953b41665ba49145ac6db1b24f\n',1,1,'Intel'),(469902,4075,4075,'2016-02-02 16:10:47','2016-02-02 11:44:39','    Document use-case for slow option\n    \n    Change-Id: Iec4087a896a2277179e3720d802cca101fa7ad54\n',6,4,'Rackspace'),(470396,4056,4056,'2016-02-03 00:26:31','2016-01-21 11:18:18','    Allow IPv6 addresses/hostnames in StatsD target\n    \n    The log_statsd_host value can now be an IPv6 address or a hostname\n    which only resolves to an IPv6 address.  In both cases, the new\n    behavior is to use an AF_INET6 socket on which .sendto() is called\n    with the originally-configured hostname (or IP).  This means the\n    Swift process is not caching a DNS resolution for the lifetime of\n    the process (a good thing).\n    \n    If a hostname resolves to both an IPv6 or IPv4 address, an AF_INET\n    socket is used (i.e. only the IPv4 address will receive the UDP\n    packet).\n    \n    The old behavior is preserved: any invalid IP address literals and\n    failures in DNS resolution or actual StatsD packet sending do not\n    halt the process or bubble up; they are caught, logged, and\n    otherwise ignored.\n    \n    Change-Id: Ibddddcf140e2e69b08edf3feed3e9a5fa17307cf\n',138,5,'SwiftStack'),(470398,5667,5667,'2016-02-03 08:59:53','2016-02-03 08:59:53','    Fixing typo in unit test\n    \n    The typo does not influence the correctness of the test\n    yet its ugly. bhhha.\n    \n    Change-Id: I62e511bae23523892b87309dd3c50aea61742f2d\n',1,1,'independent'),(470400,2470,2470,'2016-02-03 12:52:29','2016-02-03 12:52:29','    Stop nesting functions unnecessarily\n    \n    Change-Id: Iff120d0bac8a075c37bbddcd2bb0fe85145f1749\n',2,10,'SwiftStack'),(472747,4067,4067,'2016-01-25 19:36:49','2016-01-25 19:33:30','    Make replicator check for lock_device\n    \n    Change-Id: Ia000324331b0d46a4b19a88e28dd7902d667d9d5\n',4,0,'Rackspace'),(472749,5248,5248,'2016-01-16 16:16:34','2015-12-23 09:38:22','    allow bench to have insecure auth cert\n    \n    Change-Id: I153dd37a7ea42545855bd4af9700ec5e3c77400a\n',17,5,'Rackspace'),(472751,5248,5248,'2016-01-16 00:52:30','2015-11-19 16:10:31','    de able to specify drives in direct bench\n    \n    Change-Id: Ica8b2922be42f891883b9e2d215d22792538cb1f\n',6,1,'Rackspace'),(472753,5596,5596,'2016-02-02 21:37:53','2016-01-22 03:37:11','    go: multipart writer that matches swift\n    \n    The proxy server expects a fairly specific format for multipart mime responses\n    when parsing them.  This contains a modified multipart.Writer that matches the\n    Swift object server behavior.\n    \n    Change-Id: I570b2546b07af43737f3d27e624a45332e89b60a\n',195,4,'Rackspace'),(472755,5596,5596,'2016-02-04 00:38:52','2016-02-04 00:38:52','    go: fix some range parsing problems\n    \n    Update ParseRange to pass some new swift functional tests.\n    \n    Change-Id: I74bd0b32968cf359b724b4ec95b81f853d8024f7\n',29,23,'Rackspace'),(472757,5596,5596,'2016-02-09 21:03:27','2015-08-26 19:42:34','    go: GREP middleware\n    \n    This middleware adds support for grepping objects in-place using the GREP\n    method and the \"e\" query parameter.  \"e\" was chosen go match grep(1).  Other\n    grep parameters may be implemented later if needed.\n    It detects gzip and bzip2 files and decompresses them inline.\n    This is intended to allow backend tools to search log files.\n    \n    Example:\n    \n        GREP /sda/123/account/container/object?e=SEARCH HTTP/1.1\n    \n    Change-Id: I569a72f4fc0f8ab85b90e8677f6daff0e28e8a79\n',294,1,'Rackspace'),(472758,591,591,'2016-02-04 16:20:14','2016-02-02 21:58:52','    Fixed manpages errors.\n    \n    account-server.conf.5\n    105: warning: numeric expression expected (got `)\')\n    \n    container-server.conf.5\n    111: warning: numeric expression expected (got `)\')\n    \n    object-expirer.conf.5\n    79: warning: numeric expression expected (got `)\')\n    \n    object-server.conf.5\n    114: warning: numeric expression expected (got `)\')\n    \n    proxy-server.conf.5\n    121: warning: numeric expression expected (got `)\')\n    331: warning: numeric expression expected (got `[\')\n    1005: warning: macro `*\' not defined\n    \n    Change-Id: I203dcfde83035e3b1dcb91109b72b5d08bb7840e\n',26,16,'Seznam.cz'),(472760,869,869,'2016-01-19 14:42:32','2015-11-12 11:34:44','    Monkeypatch everything the same\n    \n    There\'s three spots in the code where eventlet monkeypatches\n    things. In one place, it was monkeypatching socket and thread; in the\n    other two, only socket. This commit monkeypatches socket and thread\n    everywhere.\n    \n    Hopefully, this lets us avoid code that, for example, works in the\n    object server but fails in the object updater.\n    \n    Change-Id: Ia30d069c5ac89f4bfbe52233d03d96738144b614\n',3,3,'SwiftStack'),(472762,5599,5599,'2016-02-04 21:53:58','2016-02-04 05:18:42','    Fix missing Accept-Ranges\n    \n    Since commit 4f2ed8bcd0468f3b69d5fded274d8d6b02ac3d10, the response\n    header for GET EC object doesn\'t include the Accept-Ranges header.\n    \n    This patch fixes it and also adds a few unittests to prevent regression.\n    \n    Closes-Bug: #1542168\n    \n    Change-Id: Ibafe56ac87b14bc0028953e620a653cd68dd3f84\n',4,0,'NTT'),(472764,4094,4094,'2016-02-08 15:56:20','2016-02-08 15:31:42','    Speed up functional testing\n    \n    test/functional/tests.py:TestObjectVersioningUTF8 does not clean\n    up the versions files it creates because the class\'s multiple\n    inheritance is such that it does not call the tearDown method in\n    TestObjectVersioning.\n    \n    As a result, any attempt to clean up account containers wastes\n    time retrying container delete requests. This occurs either in\n    the setUp for TestSloEnv, if the TestSlo class is included in a\n    test run, or in the tests.py package tearDown method.\n    \n    On the author\'s dev machine this patch reduces the execution\n    time of functional tests in tests.py by approx 30% or 1 minute.\n    \n    Change-Id: I8194672bf2ca82435df5868720b6a55a79b94413\n',10,3,'HPE'),(472765,591,591,'2016-02-02 23:08:11','2016-01-31 10:30:06','    Changed EC backend from jerasure to liberasurecode in examples and docs\n    \n    liberasurecode_rs_vand is build-in liberasurecode, so you don\'t need\n    another depedency libjerasure2.\n    \n    liberasurecode_rs_vand is supported by pyeclib from 1.0.8\n    version, so bumping version up.\n    \n    Closes-Bug: #1534325\n    Change-Id: If2d96875694df8fd48c5278395859aaa165cb566\n',6,5,'Seznam.cz'),(472767,4094,4094,'2016-02-02 18:30:06','2016-01-27 13:50:57','    Insert versioned_writes in correct pipeline position\n    \n    If not explicitly configured the versioned_writes middleware\n    should be auto-inserted in the pipeline after slo and dlo, which\n    is where the versioned_writes filter section\'s comments say it\n    should be in proxy-server.conf-sample. At the moment it can end up\n    being placed ahead of slo and dlo if they have been explicitly\n    configured, which results in the linked bug manifesting.\n    \n    Closes-Bug: #1537042\n    Change-Id: I6ac95a331f4ef0d4887311940acc6f8bc00fb4eb\n',40,1,'HPE'),(472769,869,1475,'2016-01-19 15:15:18','2015-10-19 16:38:24','    Port FileLikeIter to Python 3\n    \n    Port FileLikeIter and _MultipartMimeFileLikeObject and\n    swift.common.utils to Python 3:\n    \n    * Add a __next__() alias to the next() method. On Python 3, the\n      next() method is no more used, __next__() is required.\n    * Use literal byte strings: FileLikeIter _MultipartMimeFileLikeObject\n      are written to handle binary files.\n    * test_close(): replace .FileLikeIter(\'abcdef\') with\n      FileLikeIter([b\'a\', b\'b\', b\'c\']). On Python 3, list(b\'abc\') returns\n      [97, 98, 99], whereas [\'a\', \'b\', \'c\'] is returned on Python 2.\n    * Update unit FileLikeIter tests to use byte strings.\n    \n    Change-Id: Ibacddb70b22f624ecd83e374749578feddf8bca8\n',48,40,'eNovance'),(472772,7459,7459,'2016-02-10 10:36:59','2016-02-10 10:36:59','    Removed default value for log_statsd_host\n    \n    Multiple files and documents showed that log_statsd_host had\n    a default value, usually localhost.  This was incorrect, instead\n    setting a value for log_statsd_host enables statsd logging.\n    \n    Removed any reference of log_statsd_host having a default value.\n    \n    Also changed descriptions to show setting a value enables logging.\n    \n    Change-Id: I3ca5c0e8b8e4981de3aa6db0c476072b5a59723d\n    Closes-Bug: #1542227\n',28,16,'AT&T'),(472776,229,591,'2016-02-10 14:16:56','2016-02-04 16:02:42','    Script for checking sanity of manpages\n    \n    Change-Id: Ia27b0ecf6a3267eb51f8a6562721dca72f128915\n',26,0,'Seznam.cz'),(472778,4094,4094,'2016-02-01 12:39:39','2016-01-29 14:22:19','    Enable in-process func tests to optionally use fast-post\n    \n    Running functional tests in the in-process mode uses\n    the default value for proxy-server object_post_as_copy,\n    which is True. This patch adds support for an environment\n    variable to change this value to False so that the fast-post\n    mode is tested when running in-process functional tests.\n    \n    The patch also adds a new tox environment func-in-process-fast-post\n    which forces in-process functional testing with\n    object_post_as_copy=False.\n    \n    The motivation for this change, apart from enabling configurable\n    local testing, is to put support in place for an upstream CI job\n    that will actually functionally test the fast-post mode, which is\n    otherwise only covered by unit tests.\n    \n    There are currently two gate jobs that run the functional tests:\n    \n    - gate-swift-dsvm-functional runs the tests *twice* against a\n      devstack swift service, once using tempauth and once using\n      keystoneauth. The devstack swift service uses the default\n      object_post_as_copy=True.\n    \n    - gate-swift-tox-func runs the func tests in in-process mode\n      which also uses tempauth and object_post_as_copy=True. This\n      duplicates one of the config scenarios above.\n    \n    With this change either the gate-swift-tox-func job or a new job\n    could run the functional tests using object_post_as_copy=False.\n    \n    Change-Id: Ia37f6df1dc38e44ef7404fbf0a52f6fc22fae0c2\n',38,4,'HPE'),(472780,5155,5155,'2016-01-19 01:08:36','2015-07-16 09:35:37','    Add functional test for access control (RBAC) with Keystone\n    \n    This patch adds test cases for PUT, DELETE, GET, HEAD, POST and OPTIONS\n    requests to accounts, containers and objects using various combinations\n    of users/projects, roles and/or service tokens.\n    \n    Change-Id: Iea8141ac74ad949a3ae7fa47fda3135d0f2612f6\n',1149,9,'Fujitsu'),(472782,4075,7460,'2016-02-11 20:59:54','2016-02-11 20:52:47','    Fixed params on autocreate_account docstring\n    \n    ... in proxy.controllers.base\n    \n    Change-Id: Ic5c27cbf0f19b65fcaa3e6587583f03e56d646a0\n',1,1,'Intel'),(472783,7461,7461,'2016-02-10 14:26:10','2016-02-10 09:21:53','    Removed unused parameter in server.py\n    \n    The variable max_large_object_get_time is no longer used and was\n    removed to reflect the change.\n    \n    Change-Id: I43051181dcb38245de6d13fab63876e83f46fc39\n    Closes-Bug: #1538834\n',0,7,'AT&T'),(472785,4075,4075,'2016-01-25 15:29:25','2015-08-21 18:15:25','    Make handoffs_first a more useful \"mode\"\n    \n    Based on experience using handoffs_first and feedback from other\n    operators it has become clear that handoffs_first is only used during\n    periods of problematic cluster behavior (e.g. full disks) when\n    replication attempts are failing to quickly drain off the partitions\n    from the nodes which they have been rebalanced from.\n    \n    In order to focus on the most important work (getting handoff partitions\n    off the node) handoffs_first mode will abort the current replication\n    sweep before attempting any primary suffix syncing if any of the handoff\n    partitions were not removed for any reason - and start over with\n    replication of handoffs jobs as the highest priority.\n    \n    Note that handoffs_first being enabled will emit a warning on start up,\n    even if no handoff jobs fail, because of the negative impact it can have\n    during normal operations by dog piling on a node that was temporarily\n    unavailable.\n    \n    Change-Id: Ia324728d42c606e2f9e7d29b4ab5fcbff6e47aea\n',119,0,'Rackspace'),(472787,869,869,'2016-02-11 10:59:43','2016-02-11 10:59:43','    Fix typos in comments\n    \n    Change-Id: I4f98d447bd2ddd8eeb2f4da66d069bd7d6f00dc6\n',2,2,'SwiftStack'),(472789,1475,1475,'2016-01-20 15:53:07','2015-10-19 16:45:33','    Port parse_mime_headers() to Python 3\n    \n    Port swift.common.utils.parse_mime_headers() to Python 3:\n    \n    * On Python 3, tries to decode headers from UTF-8. If an header was\n      was not encoded to UTF-8, decode the header from Latin1.\n    * Update the parse_mime_headers() tests: on Python 3, HTTP header\n      values are Unicode strings.\n    \n    This change is a follow-up of the change\n    Ia5ee2ead67e36e8c6416183667f64ae255887736.\n    \n    Change-Id: I042dd13e9eb0e9844ccd832d538cdac84359ed42\n',18,5,'eNovance'),(474571,4075,5654,'2016-02-12 19:47:45','2016-02-12 19:01:59','    Remove execute permission from swift/cli/ringbuilder.py\n    \n    In Change-Id: Ia63f59a8faca1fad990784f27532ca07a2125454,\n    \'bin/swift-ring-builder\' is renamed to \'swift/cli/ringbuilder.py\'.\n    However, execute permission and \'#! /usr/bin/env python\' are left on\n    the file.\n    \n    This patch removes execute permission and \'#! /usr/bin/env python\'\n    from the file.\n    \n    Change-Id: I66370f825ce9ed9a40ec21f2745aa6aff22c8709\n',0,5,'Nippon Telegraph and Telephone Corporation'),(475352,5596,7385,'2016-02-12 22:49:03','2016-01-30 10:39:33','    go: fix requests with Range header for 0-bytes files\n    \n    (DLO or special objects like links for example)\n    \n    This time I really ported over the range logic from swift instead of\n    implementing the RFC and then trying to special-case in everywhere swift is\n    wrong.\n    \n    Change-Id: I4fdc252b18ccfdb0f061088db017239cd1a239b1\n',68,49,'independent'),(475935,7385,7385,'2016-02-16 16:56:21','2016-02-16 16:56:21','    go: proxyserver small fixes\n    \n    change GetPartition for get same values as in swift-get-node\n    containers listing\n    fix container PUT/POST and object DELETE requests\n    \n    Change-Id: Ie0581661401b6a2ffeaf19ba50b06c5849129f7a\n',67,8,'independent'),(475936,4094,7512,'2016-02-16 11:30:42','2016-02-10 14:36:16','    Docstring omission in class BaseDiskFileManager.\n    \n    Added documentation for missing Docstring variables.\n    \n    Change-Id: I29a53b8141c5607815f234a6123e2289200bca34\n',103,5,'Intel'),(475938,1111,1111,'2016-02-16 13:53:52','2016-02-16 10:08:55','    Add SwiftHLM to associated projects\n    \n    Change-Id: I5ea3de34e61f22abec803b35fec8adde18a793e9\n',1,0,'Red Hat'),(475940,179,179,'2016-02-15 08:49:48','2016-01-12 12:50:43','    Fix missing txn_id logs in GreenAsyncPile\'s spawned functions\n    \n    This commit ensures that the logger thread_locals\n    value is passed to and set in _get_conn_response methods\n    executed in a green thread.\n    \n    Added partial bug tag because in bug description a more\n    relevant fix is suggested which would fix the bug completely\n    but for now this makes sense to add this commit for logging.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Change-Id: I13bbf174fdca89318d69bb0674ed23dc9ec25b9a\n    Partial-Bug: #1409302\n',51,5,NULL),(475942,2470,2470,'2016-02-16 10:45:44','2016-02-16 10:25:39','    Static methods should be @staticmethods\n    \n    Change-Id: Ifee5d68e00bbb3571aaac885cdd7490c79732985\n',24,6,'SwiftStack'),(475944,4075,5654,'2016-02-16 21:27:35','2016-02-12 20:48:34','    Remove \'#! /usr/bin/env python\' from unexecutable files\n    \n    \'cli/recon.py\' and \'cli/ring_builder_analyzer.py\' have \'#! /usr/bin/env\n    python\' in spite of they don\'t have execute permissions.  This patch\n    removes \'#! /usr/bin/env python\' from them.\n    \n    Change-Id: I1917ccc84b1673af3d862be1796f54595f94c5ca\n',0,6,'Nippon Telegraph and Telephone Corporation'),(475946,7460,7460,'2016-02-05 19:17:30','2016-02-05 17:28:26','    Improved test coverage of form_signature\n    \n    Added four new test cases to execute path of invalid arguments. This\n    improved test coverage of file specified from 80% to 91%.\n    \n    Change-Id: I63c2e7bab3f01121301d78b687687208a58401c0\n',36,0,'Intel'),(475948,591,7513,'2016-02-12 11:26:16','2016-01-05 12:32:50','    Additional info log message for drive-audit\n    \n    An additional info log message was added for case of\n    running drive-audit without failed device unmounting.\n    \n    Change-Id: I11abee40a712b6c6de65e63626b6f7f0a9c9f4c7\n',4,0,'Seznam.cz'),(476476,5254,1020,'2016-02-17 18:39:22','2016-02-04 16:19:13','    Added links to API reference and usage guides\n    \n    Added a link to the API reference (where headers and query\n    strings are documented; click the \"detail\" button to see).\n    Also added a reference to Swift section of the OpenStack end\n    user guide. This contains some additional details about the API.\n    \n    No attempt was made to reconcile duplicate information. Instead\n    this patch links documents that might otherwise be overlooked.\n    However, I fixed text, originally in a table, that had become\n    garbled in a prior patch.\n    \n    Change-Id: I0910cbeb0c8bffc00e510f35585603e7b7a67790\n',80,47,'HP'),(476478,1111,1111,'2016-02-17 20:47:53','2016-02-17 20:47:26','    Add note on using printable chars for swift_hash_path_suffix/prefix\n    \n    Using unprintable characters for swift_hash_path_prefix/suffix might lead to\n    hard problems when parsing of these values changes, for example due to newer\n    Python versions or changes in the parsers itself. Let\'s avoid this and add a\n    note that deployers should use printable strings for these values.\n    \n    Change-Id: I976982b753b6af831ab91d7190f50f8f15bf73bf\n',3,0,'Red Hat'),(476480,4094,591,'2016-02-12 15:00:46','2016-02-11 10:20:10','    Bump PyECLib requirement to >= 1.2.0\n    \n    This was discussed at last Swift meeting [1] and conclusion was\n    to require newest PyECLib version.\n    \n    [1] http://eavesdrop.openstack.org/meetings/swift/2016/swift.2016-02-10-21.00.log.html#l-268\n    \n    Depends-On: I0fd58f26bc0a3e7715356ff74344981f22786152\n    Change-Id: I54e89d99b48e00e614d2d457814c00354763c83b\n',1,1,'Seznam.cz'),(476484,7409,7409,'2016-02-07 21:41:08','2016-02-07 21:41:08','    Keep the Usage of exit()/sys.exit() Consistent\n    \n    It\'s better to keep the usage of exit()/sys.exit() consistent\n    in one file. Furthermore, sys.exit() is considered good to be\n    used in production code, while exit is for interactive shell.\n    \n    Change-Id: Ia3092853a648922588e2bc11db37d6decdec1b48\n',2,2,'OStorage'),(477011,5155,5155,'2016-01-27 13:31:49','2016-01-22 05:19:06','    Add unit tests for checking responses in AccountController\n    \n    This patch provides unit tests to check responses for various situation\n    in three/four replicas env.\n    \n    Change-Id: I1af48728b28da9780a2a78f3110e1c7487047ff8\n',141,8,'Fujitsu'),(477013,4075,2470,'2016-02-18 15:45:15','2016-01-07 11:56:33','    Make write-only container access consistent\n    \n    Previously, if a user could write to (but not read from) a container,\n    the behavior for object POST would vary depending on whether\n    object_post_as_copy was enabled (403 response) or disabled (202\n    response).\n    \n    Now, POSTs will consistently be allowed, regardless of whether fast-POST\n    is enabled.\n    \n    Change-Id: I1d6dcbc4f5034a322a1073850fc3b059ebb1c0fa\n',84,0,'SwiftStack'),(477394,591,591,'2016-02-18 17:38:42','2016-02-18 17:38:42','    Fixed log format in object auditor\n    \n    Change-Id: I218e08446c5ffda2db7c774ec8bb9d28ce9f63e7\n',2,2,'Seznam.cz'),(477757,4075,4075,'2016-01-11 16:25:50','2016-01-11 16:25:50','    functest for x-timestamp validation\n    \n    Change-Id: I05af7d837af00cd1059a8912df05c131a52ffb90\n',28,0,'Rackspace'),(477759,5637,5155,'2016-02-22 16:08:23','2016-01-22 07:06:45','    Add unit tests for checking responses in ContainerController\n    \n    This patch provides unit tests to check responses for various situation\n    in three/four replicas env.\n    \n    Change-Id: Ifcc4392ffa4df485ce3c62a35d0fcc8c93de74aa\n',168,8,'Fujitsu'),(478207,179,179,'2016-02-06 16:59:57','2016-02-06 16:59:57','    Changing the base version to python2.7 for pep8 checks\n    \n    tox was taking python3 as it\'s base version which lead to\n    tox pep8 check failing on local env:\n    http://paste.openstack.org/show/486183/\n    \n    Change-Id: Ia822ec5b5e12a1fc30b676f1e6d95e287b9b3368\n',1,0,NULL),(478209,5637,5637,'2016-02-22 16:10:09','2016-02-22 16:10:09','    Use 201 insted of 200 in PUT test case\n    \n    There are some unit test cases which assumes 200 as the response\n    of PUT request, but 200 is never returned in PUT.\n    This patch replaces 200 in PUT by 201, and adapt unit test cases\n    to real case.\n    \n    Change-Id: I35fc7a4fe7fcc5558a9e6c6371105793c2710f3e\n',32,32,'NTT'),(478211,5681,5681,'2016-01-12 21:09:27','2016-01-08 14:54:56','    Fail early if the memcache address is invalid.\n    \n    In cases when the memcache address is invalid, we should fail early.\n    This patch addresses the cases when the IPv6 addresses are not\n    enclosed in \"[]\". It does not, however, fix the case of an invalid\n    hostname. These improvements could also be added to the _get_addr()\n    method.\n    \n    Change-Id: I4743dcda45a1fc1640989325c4a2e1fea591fc69\n',31,48,'SwiftStack'),(478213,5681,5681,'2016-01-12 21:09:48','2016-01-08 18:42:33','    Make _get_addr() method a function in utils.\n    \n    The patch moves the MemcacheConnPool._get_addr() method a function in\n    swift.common.utils. The function is renamed to parse_socket_string()\n    and the documentation is updated accordingly. The test for it has also\n    been moved.\n    \n    Change-Id: Ida65b2fded28d0a059e668646f5b89714298f348\n',68,56,'SwiftStack'),(478215,4094,4075,'2016-02-23 09:17:56','2016-02-18 21:06:40','    dry out container unittests\n    \n    Change Ifcc4392ffa4df485ce3c62a35d0fcc8c93de74aa introduced\n    TestContainerController4Replicas as a subclass of\n    TestContainerController. And there is duplicated code\n    block to override setUp method.\n    \n    This patch removed the duplicated code block.\n    \n    Change-Id: Iad0b64cba52554b89dbd959475a2ce7c0d9a20eb\n',6,35,'Rackspace'),(478827,5599,5599,'2016-02-18 02:13:01','2016-02-17 21:17:34','    Fix object-server to handle newer ts file\n    \n    Swift object-server will return 409 Conflict when the incomming\n    request X-Timestamp is older than the local disk file to prevent\n    wasted data transfer and disk space consumption. However, IFF,\n    the local disk file is a tombstone, current object-server will\n    write the data in the device and cleanup it according to timestamp\n    comparison result in hash_cleanup_list_dir, and then return 201\n    Created. That\'s wasted and far from the semantics in the normal case.\n    \n    This patch fixes object-server to catch the DiskFileDeleted exception\n    at PUT request, and then, set the timestamp from tombstone as\n    original_timestamp to be able to compare with request timestamp.\n    \n    Co-Authored-By: Kazuhiro Miyahara <miyahara.kazuhiro@lab.ntt.co.jp>\n    Change-Id: I078c9cb90707a3c320708e76ea42cbfa73e1ea4b\n    Closes-Bug: #1546865\n',85,0,'NTT'),(478829,457,457,'2016-02-16 23:49:06','2016-02-16 23:44:27','    Replace assertEqual(None, *) with assertIsNone in tests\n    \n    As swift no longer supports Python 2.6, replace assertEqual(None, *)\n    with assertIsNone in tests to have more clear messages in case of\n    failure.\n    \n    Change-Id: I94af3e8156ef40465d4f7a2cb79fb99fc7bbda56\n    Closes-Bug: #1280522\n',50,51,'EasyStack'),(478831,5645,5645,'2016-02-04 18:14:51','2016-01-13 13:15:07','    Add option for label to static web listings\n    \n    By default listings are rendered with a label of:\n    \"Listing of /v1/account/container/path\"\n    \n    This change adds a new custom metadata key/value pair\n    \"X-Container-Meta-Web-Listings-Label: <label>\" that\n    when set, will cause the following:\n    \"Listing of <label>/path\" to be rendered instead.\n    \n    Change-Id: I47c5d21834f47e566b380920196926882ff83abf\n',29,7,'Rackspace'),(478833,4075,4075,'2016-02-16 10:52:01','2016-02-16 10:52:01','    Mock sleep in direct_client retry tests\n    \n    ... and fixup some assertions, and other mocks\n    \n    Change-Id: Iadf839d1d3d735109fed24049fc3d829776b7b65\n',37,43,'Rackspace'),(478835,5205,5205,'2016-02-18 09:59:56','2015-12-07 17:02:40','    Reduce code duplication\n    \n    Reduced source code by extracting duplicated code\n    (swift/common/direct_client.py)\n    http://openqa.sed.hu/dashboard/index/5?did=1\n    \n    Change-Id: I47fa6ae12c646e8e42fb0a46a017971f05d883fc\n    Closes-Bug: 1536067\n',46,79,'Ericsson'),(478837,5254,5254,'2016-02-23 16:24:21','2016-02-23 16:23:51','    fix formatting of bulk operations doc\n    \n    Change-Id: I247d2867c55d6bbf2288dfb74271f57c6f88b243\n',177,164,'Red Hat'),(478839,4075,4075,'2016-02-23 17:45:13','2016-02-23 17:28:08','    Add warn method back to LogAdapter\n    \n    The change in 684c4c04 to improve py3 support breaks older middleware\n    that consumes the SwiftLogger.\n    \n    Good for Swift code to not to use warn because it\'s deprecated.\n    \n    Bad for LogAdapter to not faithfully provide the current python logging\n    module API (deprecated or otherwise).\n    \n    Change-Id: Ib0baf66b7f33f91562867076ff0526a287d8e5a6\n',1,0,'Rackspace'),(479484,229,229,'2016-02-24 09:48:57','2016-02-24 09:36:40','    updated some weird whitespace character to a normal one\n    \n    Change-Id: I187fb8fc8d10f950bbebc586999eced0bc117432\n',23,23,'SwiftStack'),(480083,7588,7588,'2016-02-25 18:57:53','2016-02-25 18:54:00','    Rename test_object_delete_at_aysnc\n    \n    This renames test_object_delete_at_aysnc to\n    test_object_delete_at_async to match with the function\n    async_update which it tests.\n    \n    Change-Id: I726afcbf08a3449c7af2834e573b97be378a86cd\n    Closes-Bug: 1550067\n',1,1,'IBM'),(480615,869,869,'2016-02-23 14:00:34','2016-02-23 14:00:34','    Fix StatsD tests to not use real DNS\n    \n    In common/test_utils.py, TestStatsdLogging had the majority of its\n    test cases calling the real socket.getaddrinfo(), which uses real\n    DNS. This is very slightly slower than using a mock getaddrinfo() when\n    the machine running the tests has functioning DNS, but on a machine\n    with no network connection at all, the tests are excruciatingly slow\n    due to timeouts.\n    \n    This commit mocks things out as appropriate. There\'s still one user of\n    the real getaddrinfo(), but it\'s for ::1, so that\'s just local\n    resolution based on /etc/hosts.\n    \n    Timing numbers for \"./.unittests test.unit.common.test_utils:TestStatsdLogging\":\n    \n     * network, without this patch: 1.8s\n     * no network, without this patch: 221.2s (ouch)\n     * network, with this patch: 1.1s\n     * no network, with this patch: 1.1s\n    \n    Change-Id: I1a2d6f24fc9bb928894fb1fd8383516250e29e0c\n',56,12,'SwiftStack'),(480617,4094,4094,'2016-02-18 15:45:10','2016-01-14 18:31:21','    Fix inconsistent suffix hashes after ssync of tombstone\n    \n    Consider two replicas of the same object whose ondisk files\n    have diverged due to failures:\n    \n      A has t2.ts\n      B has t1.data, t4.meta\n    \n    (The DELETE at t2 did not make it to B. The POST at t4 was\n    rejected by A.)\n    \n    After ssync replication the two ondisk file sets will not be\n    consistent:\n    \n      A has t2.ts  (ssync cannot POST t4.meta to this node)\n      B has t2.ts, t4.meta (ssync should not delete t4.meta,\n                            there may be a t3.data somewhere)\n    \n    Consequenty the two nodes will report different hashes for the\n    object\'s suffix, and replication will repeat, always with the\n    inconsistent outcome. This scenario is reproduced by the probe\n    test added in this patch.\n    \n    (Note that rsync replication does result in (t2.ts, t4.meta)\n    on both nodes.)\n    \n    The solution is to change the way that suffix hashes are\n    calculated. Currently the names of *all* files found in each\n    object dir are added to the hash.  With this patch the\n    timestamps of only those files that could be used to\n    construct a valid diskfile are added to the hash. File\n    extensions are appended to the timestamp so that in most\n    \'normal\' situations the result of the hashing is the same\n    as before this patch. That avoids a storm of hash mismatches\n    when this patch is deployed in an existing cluster.\n    \n    In the problem case described above, t4.meta is no longer\n    added to the hash, since it is not useful for constructing\n    a diskfile. (Note that t4.meta is not deleted because it\n    may become useful should a t3.data be replicated in future).\n    \n    Closes-Bug: 1534276\n    Change-Id: I99e88b8d5f5d9bc22b42112a99634ba942415e05\n',199,23,'HPE'),(481725,5637,5637,'2016-02-29 18:21:46','2016-02-28 13:41:19','    Make sure all temp files get deleted in test_ringbuilder\n    \n    This patch makes test_ringbuilder create a temporal directory,\n    run ring builder commands under it, and delete it after testing\n    for each test cases, to fix temp file leaking.\n    \n    Change-Id: I6f59fe095ea6485af0e60b5a8e8fc3892e0a0f90\n',11,4,'NTT'),(482432,5248,5248,'2016-02-19 00:13:58','2016-02-18 16:35:59','    go: make error log when creating asyncs\n    \n    Change-Id: I7be98fd49142be6ddacdeac3669143bfa0930e70\n',2,0,'Rackspace'),(482433,443,443,'2016-02-04 16:48:13','2016-02-04 16:47:15','    Use uppercase \'S\' in word \"OpenStack\"\n    \n    Change-Id: I4692aa58b5173b1b662d5eee19fac770ae5aaed0\n',19,19,'independent'),(482435,5155,5155,'2015-12-25 14:00:16','2015-12-25 14:00:16','    Add object replicator\'s succeeded and failed counts in log\n    \n    account-replicator and container-replicator outputted the\n    following info in log.\n    info account-replicator: 17 successes, 4 failures\n    info container-replicator: 178 successes, 29 failures\n    \n    But there is no output info for object-replicator. This info\n    is important to check replicator\'s status from log.\n    \n    So this patch adds object-replicator\'s succeeded and failed\n    counts in log like account-replicator and container-replicator.\n    \n    Change-Id: I7fbaf161540bdb06c0a65a1032aae83764bd970c\n',3,0,'Fujitsu'),(483235,5596,5596,'2016-03-02 20:21:03','2016-03-02 20:21:03','    go: increase default ms_per_part\n    \n    25 was apparently too aggressive.\n    \n    Change-Id: Ic6c061e0b8834d70f7b485e399c1777e60bc5574\n',1,1,'Rackspace'),(483236,5155,5155,'2016-02-29 11:51:07','2015-12-10 01:15:30','    Add X-Delete-After and X-Delete-At functional test\n    \n    This patch provides functional tests for X-Delete-After and X-Delete-At.\n    \n    Change-Id: I55b0d0584428413aa7a31f66defec55f9b1bbcd9\n',81,0,'Fujitsu'),(483238,4094,4094,'2016-01-21 10:55:36','2016-01-20 18:14:16','    Fix bug in mem_diskfile write_metadata method\n    \n    The mem_diskfile DiskFile.write_metadata method was\n    apparently never called in any existing test, as if it\n    were it would blow up as reported in the bug.\n    \n    This patch fixes the method and adds a test that\n    exercises it. The test addition itself should be useful\n    since it verifies the behaviour of Last-Modified after\n    POSTs to an object.\n    \n    Drive-by fixes for bad docstring and undefined references\n    in the _quarantine method.\n    \n    Change-Id: I17fd62e5f02be5b48bfd9ba7fa25315e30a0a4bf\n    Closes-Bug: #1536037\n',107,36,'HPE'),(483240,4094,4094,'2016-02-04 13:28:06','2016-02-02 11:43:44','    Fix time-shifting of objects PUT with container-sync\n    \n    When container-sync PUTs an object to a destination container\n    it uses the timestamp from the container row rather than the\n    actual timestamp of the object being copied. The actual timestamp\n    of the object can be newer, so the sync\'d object may end up with\n    the right content but at the wrong, older, timestamp.\n    \n    This patch changes the timestamp sent with the sync\'d object\n    to be that of the actual source object being sent.\n    \n    Drive-by fix to make code more readable by removing a variable\n    rename mid-function, fix a typo and remove a redundant function\n    call.\n    \n    Change-Id: I800e6de4cdeea289864414980a96f5929281da04\n    Closes-Bug: #1540884\n',94,18,'HPE'),(483242,5155,5155,'2016-02-29 16:41:45','2015-12-09 08:08:22','    Add container quota functional test\n    \n    This patch provides one container quota functional test.\n    \n    Change-Id: I16354c15fc434d70f9bb6b9b1e18b09357195c83\n',52,2,'Fujitsu'),(483244,5637,5637,'2016-03-02 22:56:13','2015-11-17 16:15:59','    Fix proxy-server\'s support for chunked transferring in GET object\n    \n    Proxy-server now requires Content-Length in the response header\n    when getting object and does not support chunked transferring with\n    \"Transfer-Encoding: chunked\"\n    \n    This doesn\'t matter in normal swift, but prohibits us from putting\n    any middelwares to execute something like streaming processing of\n    objects, which can\'t calculate the length of their response body\n    before they start to send their response.\n    \n    Change-Id: I60fc6c86338d734e39b7e5f1e48a2647995045ef\n',290,146,'NTT'),(483246,4094,4086,'2016-02-11 16:06:37','2016-01-11 19:13:05','    Decrypt multipart mime doc\n    \n    Decrypts and puts back together the mime doc for a\n    multi-range GET\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    \n    Change-Id: Idc9325bf6494e8b00d35aa544584fe7cf04bc24e\n',111,5,'Intel'),(483248,4086,4086,'2016-02-10 14:01:31','2016-02-05 18:02:51','    Correct order of args passed to assertEqual\n    \n    Change-Id: Ice135b9be64fe524c2de7fd53c385cc6ca902956\n',80,82,'Intel'),(484130,2470,2470,'2016-03-03 15:07:08','2016-03-03 15:07:08','    During functional tests, 404 response to a DELETE is successful\n    \n    Previously, we would only consider 204 responses successful, which would\n    cause some spurious gate failures, such as\n    \n    http://logs.openstack.org/66/287666/3/check/gate-swift-dsvm-functional/c6d2673/console.html#_2016-03-03_13_41_07_846\n    \n    Change-Id: Ic8c300647924352a297a2781b50064f7657038b4\n',17,17,'SwiftStack'),(484131,4094,4094,'2016-03-03 14:25:10','2015-08-10 10:30:10','    Update container on fast-POST\n    \n    This patch makes a number of changes to enable content-type\n    metadata to be updated when using the fast-POST mode of\n    operation, as proposed in the associated spec [1].\n    \n    * the object server and diskfile are modified to allow\n      content-type to be updated by a POST and the updated value\n      to be stored in .meta files.\n    \n    * the object server accepts PUTs and DELETEs with older\n      timestamps than existing .meta files. This is to be\n      consistent with replication that will leave a later .meta\n      file in place when replicating a .data file.\n    \n    * the diskfile interface is modified to provide accessor\n      methods for the content-type and its timestamp.\n    \n    * the naming of .meta files is modified to encode two\n      timestamps when the .meta file contains a content-type value\n      that was set prior to the latest metadata update; this\n      enables consistency to be achieved when rsync is used for\n      replication.\n    \n    * ssync is modified to sync meta files when content-type\n      differs between local and remote copies of objects.\n    \n    * the object server issues container updates when handling\n      POST requests, notifying the container server of the current\n      immutable metadata (etag, size, hash, swift_bytes),\n      content-type with their respective timestamps, and the\n      mutable metadata timestamp.\n    \n    * the container server maintains the most recently reported\n      values for immutable metadata, content-type and mutable\n      metadata, each with their respective timestamps, in a single\n      db row.\n    \n    * new probe tests verify that replication achieves eventual\n      consistency of containers and objects after discrete updates\n      to content-type and mutable metadata, and that container-sync\n      sync\'s objects after fast-post updates.\n    \n    [1] spec change-id: I60688efc3df692d3a39557114dca8c5490f7837e\n    \n    Change-Id: Ia597cd460bb5fd40aa92e886e3e18a7542603d01\n',3143,253,'HP'),(484133,229,5657,'2016-03-03 11:49:26','2016-02-10 17:58:05','    Operational procedures guide\n    \n    This is the operational procedures guide that HPE used\n    to operate and monitor their public Swift systems.\n    It has been made publicly available.\n    \n    Change-Id: Iefb484893056d28beb69265d99ba30c3c84add2b\n',2277,0,'Rackspace'),(484135,5637,5637,'2016-03-01 08:03:43','2015-12-25 10:30:01','    Update parameters about authtoken middleware in proxy-server.conf.sample\n    \n    This patch replaces some configration parameters about authtoken\n    middleware in proxy-server.conf, which will be deprecated.\n    \n    The following parameters are to be deprecated.\n     auth_admin_prefix, auth_host, auth_port, auth_protocol,\n     identity_uri, admin_token, admin_user, admin_password,\n     admin_tenant_name\n    \n    Change-Id: I373734933189c87c4094203b0752dd3762689034\n',13,5,'NTT'),(484137,161,161,'2016-02-29 20:00:38','2016-02-29 20:00:38','    Remove unused pngmath Sphinx extension\n    \n    There\'s no RST file that uses \".. math\" and thus\n    the pngmath Sphinx extension is not used and can\n    get removed.\n    \n    Change-Id: I3ea4b529025c8ac3c4092f3720124647861e6668\n',1,1,'SUSE'),(484139,1111,1111,'2016-03-04 14:27:23','2016-03-04 09:33:17','    Remove Erasure Coding beta status from docs\n    \n    This removes notes stating support for Erasure coding as beta. Questions\n    regarding the stability of EC are coming up regularly, and are often referring\n    to the docs that state EC as still in beta.\n    \n    Besides this, a note marking statsd support as beta has been removed as well.\n    \n    Change-Id: If4fb6a5c4cb741d42953db3cee8cb17a1d774e15\n',6,13,'Red Hat'),(484885,5599,5599,'2016-01-26 20:51:39','2016-01-26 20:16:08','    Follow up mem_server diskfile fixes\n    \n    This is a follow-up patch for change\n    https://review.openstack.org/#/c/270422\n    \n    That patch fixes POST behavior on object mem server and adds\n    some tests for last-modified. However, that one doesn\'t check\n    the POST updates the last-modified on object server.\n    \n    This patch adds assertions to make sure the actual POST semantics.\n    \n    *bonus* Add docs and cleanup variable name to fit actual instance\n    at mem diskfile.\n    \n    Change-Id: I78185cdfb0ea604b2122821870ec34322236f48d\n',34,5,'NTT'),(485394,42,42,'2016-03-03 10:25:11','2016-03-03 10:24:28','    Fix a crash in exception printout\n    \n    Says the number of arguments does not match the number of \'%\'.\n    \n    Change-Id: I8b5e395a07328fb9d4ac7a19f8ed2ae1637bee3b\n',1,1,'Red Hat'),(485396,4094,4094,'2016-02-24 14:41:28','2016-02-19 09:30:10','    Silence SkipTest noise in in-process test teardown\n    \n    setup_package and teardown_package get called twice when\n    running functional tests using nose. With in-process mode\n    the first call to teardown_package clears global config\n    which causes the test swiftclient to raise a SkipTest error\n    during the second call to teardown_package.\n    \n    To reproduce:\n    SWIFT_TEST_IN_PROCESS=1 nosetests ./test/functional/test_account.py\n    \n    This patch simply tests for config existence before attempting\n    to create a test swiftclient in the teardown_package function.\n    \n    Also fix a related issue whereby in_process flag would be reset to\n    False during second call to setup_package, thus causing some of the\n    in process cleanup in teardown_package to never be executed.\n    \n    Change-Id: I074dcd3d39aa46b262632024b047556ca471e8b8\n',12,7,'HPE'),(485398,5682,5682,'2016-02-09 13:39:52','2016-02-05 09:51:11','    Adds storage policy option to recon\n    \n    With this patch, recon gets policy-aware in regard to the hosts to retrieve.\n    If no policy is passed and the server_type is object,\n    all hosts of all policies are retrieved.\n    Previously, recon did only retrieve the hosts of the storage-policy 0.\n    \n    Change-Id: If5735cd6721eac504aed8aaf3884cb91b6a0fcac\n    Closes-Bug: 1541491\n',197,43,'Deutsches Klimarechenzentrum GmbH'),(485400,7683,7683,'2016-03-07 18:30:47','2016-03-07 18:30:47','    Missing comments for storage policy parameter\n    \n    There are missing comments about storege_policy_index so appropriate\n    comments are added.\n    \n    Change-Id: I3de3f0e6864e65918ca1a13cce70f19c23d295f5\n',2,0,'NTT'),(485401,441,441,'2016-03-08 06:35:49','2016-03-08 06:35:49','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I96b8ff1287bf219c5f8d56a3a4868c1063a953f9\n',175,270,NULL),(486032,5596,5596,'2016-03-07 18:00:55','2015-06-24 19:41:38','    go: O_TMPFILE\n    \n    Abstract temporary file creation in the object server.\n    Support for O_TMPFILE on newer linux kernels.\n    \n    Also replace all AtomicWriteFile calls with the new abstraction,\n    so we don\'t have .tmp-o-file problems anymore.\n    \n    Change-Id: I5ef42896984032b095d574fac21533f9839152a3\n',366,66,'Rackspace'),(486033,5596,5596,'2016-03-01 21:38:18','2016-02-26 00:15:45','    go: replication prioritizer\n    \n    This adds two new commands:\n    \n      hummingbird moveparts [old ring.gz] [new ring.gz]\n    \n    After a rebalance, moveparts will diff the two rings and instruct the\n    object replicators (via HTTP call) to execute jobs that bulk move\n    any re-assigned partitions.\n    \n      hummingbird restoredevice [ip] [device-name]\n    \n    restoredevice will instruct peers of the selected device to sync over\n    their copies of any partitions that should be on that drive.  It can\n    be used to speed up restoring a drive after it\'s been swapped.\n    \n    They should both run until all of the jobs have been taken up by the\n    replicator, so a large job might take a while.\n    \n    This means the replicator has a semi-real HTTP server now, and not\n    just a debug port.  It binds to the replication object server\'s port\n    + 500, which is totally arbitrary and open to bikeshedding.\n    \n    Change-Id: I4bbb2719657eb84c5191e053a1654e986511bb95\n',577,32,'Rackspace'),(486035,7701,7701,'2016-03-07 10:39:37','2016-03-04 15:19:39','    Fixed pep8 and flake8 errors in doc/source/conf.py and updated flake8 commands in tox.ini to test it.\n    \n    Change-Id: I2add370e4cfb55d1388e3a8b41f688a7f3f2c621\n',57,44,'IBM'),(486037,7701,7701,'2016-03-08 10:57:56','2016-03-08 10:57:56','    Removed redundant file for flake8 check\n    \n    Change-Id: I4322978aa20ee731391f7709bbd79dee140fc703\n',2,2,'IBM'),(486040,5614,5614,'2016-03-04 08:01:47','2016-02-15 19:16:08','    Add internal method to increase ring partition power\n    \n    This method increases the partition power of an existing ring by one. It does\n    not move any data nor does it exposes a CLI command yet; it is only intended to\n    be used in a future version to do the actual ring modification itself.\n    \n    An existing object that is currently located on partition X will be placed\n    either on partition 2*X or 2*X+1 after the partition power got increased. The\n    reason for this is the Ring.get_part() method, that does a bitwise shift to the\n    right.\n    \n    To avoid actual data movement to different disks or even nodes, the allocation\n    of partitions to nodes needs to be changed. The allocation is pairwise due to\n    the above mentioned new partition scheme. Therefore devices are allocated like\n    this, with the partition being the index and the value being the device id:\n    \n    OLD: 0,    3,    7,    5,    2,    1,    ...\n    NEW: 0, 0, 3, 3, 7, 7, 5, 5, 2, 2, 1, 1, ...\n    \n    If an operator stops the cluster, increases the partition power and renames &\n    hardlinks the existing data it is possible to do a power shift without actually\n    moving data. Please see the partition power spec for further details on this.\n    \n    Change-Id: I063fd8077497ee8c14d9065f07b4ec0fb5cbe180\n    Partially-Implements: spec increasing_partition_power\n',93,0,'Red Hat'),(486042,4094,4094,'2016-03-08 17:40:49','2016-03-07 18:42:01','    Object POST update gets distinct async pending file\n    \n    Each object update to a container server is saved in a\n    pending file if the initial update attempt fails. Pending\n    file names were derived from the update request\'s x-timestamp,\n    which is equal to the object\'s data file timestamp. This meant\n    that updates due to an object POST used the same async pending\n    file as updates due to the object\'s PUT.\n    \n    This is not so bad because the object POST update has a superset\n    of the metadata included in the PUT update. But there is a risk\n    of a race condition causing an update to be lost: the updater may\n    open an update file due to a PUT whuile the object server is\n    writing an update due to a POST to the same file name. The\n    updater could then unlink the file before the more recent update\n    for the POST is sent.\n    \n    This patch changes the POST update pending file name to be derived\n    from the object\'s metadata timestamp, thus making it distinct from\n    the PUT update pending file name. There is no upgrade impact since\n    existing pending files will continue to be processed.\n    \n    Change-Id: I1b093c837efe8c2a64e92075ebd5e1b93e30efb9\n',148,1,'HPE'),(486044,869,869,'2016-03-08 15:23:40','2016-03-08 15:23:40','    Fix misleading comment\n    \n    Change-Id: I2e0e671a08fb855bf53c57987c08a7eefca7078a\n',2,1,'SwiftStack'),(486046,4075,4075,'2016-03-08 12:34:17','2016-03-08 12:32:39','    Spot check more hashes for increase_part_power\n    \n    Just a touch of cleanup to the unittest to demonstrate the stability of the\n    guarantee that objects will hash to the same nodes but have different parts.\n    \n    Change-Id: I4a24187755455366a6435816a138f6175ae713a4\n',18,9,'Rackspace'),(486048,441,441,'2016-03-09 06:35:57','2016-03-09 06:35:57','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I9196deac606a3d073fb1c400cbee778cbbbd1c1e\n',74,4,NULL),(486050,4086,4086,'2016-03-08 19:01:53','2016-03-08 19:01:53','    remove hash_cleanup_listdir legacy translation method\n    \n    Change-Id: I0b96dfde32b4c666eebda6e88228516dd693ef92\n    closes-bug:#1550569\n',33,47,'Intel'),(486755,4094,2470,'2016-03-09 09:14:46','2016-02-09 15:59:52','    By default, disallow inbound X-Timestamp headers\n    \n    With the X-Timestamp validation added in commit e619411, end users\n    could upload objects with\n    \n        X-Timestamp: 9999999999.99999_ffffffffffffffff\n    \n    (the maximum value) and Swift would be unable to delete them.\n    \n    Now, inbound X-Timestamp headers will be moved to\n    X-Backend-Inbound-X-Timestamp, effectively rendering them harmless.\n    \n    The primary reason to allow X-Timestamp before was to prevent\n    Last-Modified changes for objects coming from either:\n    \n      * container_sync or\n      * a migration from another storage system.\n    \n    To enable the former use-case, the container_sync middleware will now\n    translate X-Backend-Inbound-X-Timestamp headers back to X-Timestamp\n    after verifying the request.\n    \n    Additionally, a new option is added to the gatekeeper filter config:\n    \n        # shunt_inbound_x_timestamp = true\n    \n    To enable the latter use-case (or any other use-case not mentioned), set\n    this to false.\n    \n    Upgrade Consideration\n    =====================\n    \n    If your cluster workload requires that clients be allowed to specify\n    objects\' X-Timestamp values, disable the shunt_inbound_x_timestamp\n    option before upgrading.\n    \n    UpgradeImpact\n    Change-Id: I8799d5eb2ae9d795ba358bb422f69c70ee8ebd2c\n',122,17,'SwiftStack'),(486757,869,869,'2016-03-07 12:26:48','2016-03-02 10:28:51','    Move HeaderKeyDict to avoid an inline import\n    \n    There was a function in swift.common.utils that was importing\n    swob.HeaderKeyDict at call time. It couldn\'t import it at compilation\n    time since utils can\'t import from swob or else it blows up with a\n    circular import error.\n    \n    This commit just moves HeaderKeyDict into swift.common.header_key_dict\n    so that we can remove the inline import.\n    \n    Change-Id: I656fde8cc2e125327c26c589cf1045cb81ffc7e5\n',246,194,'SwiftStack'),(486759,7710,7710,'2016-02-27 23:26:47','2016-02-27 23:26:47','    keep etag of target source instead of possible_source\n    \n    In proxy/controllers/base.py : ResumingGetter._get_source_and_node\n    self.used_source_etag should be etag of target source\n    instead of possible_source.\n    \n    Change-Id: Id6c33e79f65cb4ad9e3249957dd57dc2da8cad98\n    Closes-bug: #1550734\n',1,1,'independent'),(487870,5248,5248,'2016-02-21 15:10:20','2016-02-21 13:30:51','    go: add quorum delete to replicator\n    \n    Similar to handoff_delete setting in swift. Allows you to run replicator\n    with a \"-q\" flag which will remove out of place paritions if they are\n    successfully replicated on len(primary_nodes)/2 + 1 primary nodes.\n    \n    you can also set `quorum_delete=true` in the [object-replicator]\n    section of the config\n    \n    Change-Id: I76d6ad5dd1d1e6ecaec5e754f30120d92889078b\n',66,11,'Rackspace'),(487871,5596,5596,'2016-03-09 17:12:29','2016-03-09 16:45:57','    go: fix tmp dir locations\n    \n    I made mistakes calculating the tmp dir in a few places.  Make that\n    a function so I can\'t keep messing it up.\n    \n    Change-Id: I53eb1cb1cd13a45e2cf5f7a7dfadf880b16d5970\n',20,12,'Rackspace'),(487873,4094,4094,'2016-03-11 12:35:08','2015-02-23 16:14:43','    Enable middleware to set metadata on object POST\n    \n    Sysmeta cannot be updated by an object POST because\n    that would cause all existing sysmeta to be deleted.\n    Crypto middleware will want to add \'system\' metadata\n    to object metadata on PUTs and POSTs, but it is ok\n    for this metadata to be replaced en-masse on every\n    POST.\n    \n    This patch introduces x-object-transient-sysmeta-*\n    that is persisted by object servers and returned\n    in GET and HEAD responses, just like user metadata,\n    without polluting the x-object-meta-* namespace.\n    All headers in this namespace will be filtered\n    inbound and outbound by the gatekeeper, so cannot\n    be set or read by clients.\n    \n    Change-Id: I498928c2e38ea379b0bc80f82ddf5ca0fcb8b90f\n',337,34,'HP'),(487874,1020,1020,'2016-03-10 17:39:54','2016-03-09 14:28:17','    Cleanup of Swift Ops Runbook\n    \n    This patch cleans up some rough edges that were left (due to\n    time constraints) in the original commit.\n    \n    Change-Id: Id4480be8dc1b5c920c19988cb89ca8b60ace91b4\n    Co-Authored-By: Gerry Drudy gerry.drudy@hpe.com\n',518,563,'HP'),(487876,4094,4094,'2016-03-09 16:49:20','2016-03-09 16:49:20','    Fix object server test not using correct policy\n    \n    Without the correct request header, the test that should be\n    using an EC policy was in fact using a replication policy.\n    \n    Change-Id: Id44d0d615a4fd09aadfb286425939aea6abdf7b0\n',30,24,'HPE'),(487878,441,441,'2016-03-11 06:22:54','2016-03-11 06:22:54','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Ic39cc9ffb582909da3a827243b628206de5301a0\n',60,6,NULL),(487879,441,441,'2016-03-12 06:12:49','2016-03-12 06:12:49','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Iee254bef3513111d339cafb4cb752eb4ad4c3b03\n',7,3,NULL),(488762,5659,5659,'2016-03-14 01:49:24','2016-03-14 01:34:24','    go: add ability to dump goroutines stacktrace with SIGABRT\n    \n    this will allow hummingbird server to dump goroutine stacktraces\n    to \"/tmp/<pid>.dump\" when it receives SIGABRT before exiting.\n    \n    Change-Id: I80d421dae10db8bcc9f380d76efc348555274acb\n',19,2,'Rackspace'),(488763,441,441,'2016-03-14 06:13:37','2016-03-14 06:13:37','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I30d06a1d96d4bd0e2e4972cb8ede7ebc08beae2d\n',150,4,NULL),(488764,4094,4094,'2016-03-11 11:50:49','2016-03-09 10:17:12','    Remove reference to py26 in tox testing instructions\n    \n    Also change some rst formatting and clarify that tox\n    is used to run more than just *unit* tests.\n    \n    Change-Id: I263af7b4f7a554da3a391cf5104af573c89e3825\n',31,30,'HPE'),(488766,4094,4094,'2016-03-10 18:48:57','2016-03-10 18:02:44','    Wait on greenthreads before unmocking http_connect\n    \n    The fake_spawn() context manager wraps spawn and waits\n    for greenthreads to complete (such as the async_update threads).\n    The wait needs to be done before http_connect is un-mocked, so\n    the fake_spawn context manager should exit *before* any context\n    manager that mocks the http_connect method.\n    \n    Also add fake_spawn to _test_PUT_then_POST_async_pendings()\n    \n    Related-Bug: #1536376\n    Related-Bug: #1514111\n    Closes-Bug: #1555739\n    \n    Change-Id: I15f36e191cfe3ee6c82b4be56e8618ec0230e328\n',60,54,'HPE'),(488768,1111,1111,'2016-02-15 20:08:43','2016-02-11 13:18:07','    Add comments to role-based access control functional tests\n    \n    Change-Id: Ic18c8a2abc33e2f175f948991af0189935b8702f\n',219,0,'Red Hat'),(489403,4094,4094,'2016-01-19 13:12:49','2015-03-11 11:22:53','    Make functional tests tolerate pre-existing versioned container\n    \n    test/functional/tests.py:TestAccount.testAccountHead relies\n    on the account having a known number of containers. The test\n    setup attempts to delete all existing containers but this fails\n    a container has versions (and so is not emptied, and cannot be\n    deleted). The tests then fails because the expected number of\n    containers does not match the actual.\n    \n    \'bin/resetswift\' before running tests will obviously clear all\n    state but is not always convenient.\n    \n    This change removes any x-versions-location header before deleting\n    containers during test setUp.\n    \n    Steps to recreate the pre-condition for failure on master:\n    (based on original work by clayg)\n    \n    swift post target -r \'.r:*, .rlistings\'\n    swift post source -H \'x-versions-location: target\'\n    for i in {1..4}; do\n      echo \"junk${i}\" > junk\n      swift upload source junk\n    done\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Change-Id: I3efb6c20dc1fb3e979087e8a93d04ba7e346b5b6\n',1,0,'HP'),(489405,869,869,'2016-03-01 13:54:09','2016-03-01 13:54:09','    Faster suffix invalidations on object PUT/DELETE\n    \n    Before this commit, we performed a full read-modify-write cycle on a\n    partition\'s hashes.pkl to invalidate the relevant suffix whenever an\n    object PUT or DELETE completes.\n    \n    Now we append invalid suffixes to a new file, \"hashes.invalid\",\n    alongside hashes.pkl. When we actually get a REPLICATE request and\n    need to compute the hashes, *then* we perform a full read-modify-write\n    on hashes.pkl and clear out hashes.invalid.\n    \n    Change-Id: Ia7add438e25688b4b286f0110a4e43490e11ad75\n',141,52,'SwiftStack'),(489407,5599,5599,'2016-03-16 08:58:31','2016-03-10 06:42:57','    Fix ssync related object-server docs\n    \n    Swift now uses SSYNC verb instead of old REPLICATION verb for ssync\n    protocol. This patch replaces all docs written as REPLICATION into\n    SSYNC and fix a few words for explanation.\n    \n    Change-Id: I1253210d4f49749e7d425d6252dd262b650d9548\n',21,19,'NTT'),(489408,4094,179,'2016-03-04 17:32:12','2015-12-07 21:45:43','    clear pycache and remove all pyc/pyo before starting unit test\n    \n    Delete python bytecode before every test run.\n    Because python creates pyc files during tox runs, certain\n    changes in the tree, like deletes of files, or switching\n    branches, can create spurious errors.\n    \n    Closes-Bug: #1368661\n    Change-Id: Iedcb400fa3b0417f5bb8e943b17758fcfb4070c6\n',15,12,NULL),(490609,441,441,'2016-03-17 14:45:42','2016-03-17 14:45:42','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I95466266e314cf4a564c7f93cfae7df9df21b60c\n',78,7,NULL),(490610,4094,4094,'2016-03-17 11:47:33','2016-03-16 17:41:30','    Put correct Etag and Accept-Ranges in EC 304 and 416 responses\n    \n    When using an EC policy, 304 responses to conditional GETs\n    are missing the Accept-Ranges header and have the wrong ETag\n    value. 412 responses also have the wrong etag.\n    \n    416 responses to ranged GETs also have the wrong ETag.\n    \n    This patch ensures behaviour with EC policy is consistent\n    with replication policy:\n    \n      - 304 and 416 responses have correct etag and Accept-Ranges\n      - 412 responses have correct Etag but no Accept-Ranges\n    \n    Co-Authored-By: Mahati Chamarthy <mahati.chamarthy@gmail.com>\n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    \n    Closes-Bug: #1496234\n    Closes-Bug: #1558197\n    Closes-Bug: #1558193\n    Change-Id: Ic21317b9e4f632f0751133a3383eb5487379e11f\n',103,37,'HPE'),(490612,869,4075,'2016-03-17 19:27:24','2016-03-17 11:55:14','    Adjust replica count before pulling parts from failed devices\n    \n    When your device count falls below your replica count you can either add\n    devices or reduce the replica count.\n    \n    Trying to reduce your replica count fails about half the time because\n    removing parts from from failed devices temporarily invalidates your\n    _replica2part2dev table with NONE_DEV which can result in an IndexError\n    in _adjust_replica2part2dev_size.\n    \n    If you adjust the replica count first you won\'t have to worry about\n    tracking unassigned parts from failed devices.\n    \n    Closes-Bug: #1558751\n    \n    Change-Id: I99dc776fd260a2ba68ca77d7b5ed5120d10b06de\n',17,2,'Rackspace'),(490613,5674,5674,'2016-03-17 22:24:12','2016-03-17 22:12:42','    Update ring overview for reuse of device ids\n    \n    Change-Id: Ied15706d4cc931b5314001a02457f83e175c5d24\n',8,4,'Intel'),(490615,4088,4088,'2016-03-17 06:52:40','2015-12-31 12:17:21','    Add a note for functional tests with Keystone.\n    \n    Change-Id: I9da8f6a56ffb06e89b8da8c06b26ebc8452b652d\n    Closes-Bug: #1530254\n',1,0,'SwiftStack'),(490617,4094,4094,'2016-03-16 11:43:20','2016-03-16 11:38:33','    Make keystone middleware options consistent in docs\n    \n    Bring overview_auth.rst and proxy server man page\n    up to date with changes made in [1]\n    \n    [1] Change-Id: I373734933189c87c4094203b0752dd3762689034\n    \n    Change-Id: Ia16f0c391e7c357ccb9c13945839dc5647e49a13\n',23,16,'HPE'),(490619,4094,591,'2016-02-11 10:52:47','2015-12-15 22:42:18','    Keystone middleware deprecated option is_admin removed\n    \n    It has been deprecated from Swift 1.8.0 (Grizzly)\n    \n    Change-Id: Id6bc10c3e84262c0a9e6160a76af03c0ad363e9c\n',13,39,'Seznam.cz'),(490998,5596,5596,'2016-03-11 22:17:17','2016-03-11 22:06:00','    go: fix O_TMPFILE for existing files\n    \n    linkat can\'t over-write existing files.  So if it fails, try linking\n    it into the tmp directory and then renaming it into place.\n    \n    Change-Id: I263c359b244626d12488e8ce2113ddab599f853f\n',29,5,'Rackspace'),(491000,5596,5596,'2016-03-11 17:32:06','2016-03-11 17:29:34','    go: fix O_TMPFILE compilation on older OS\n    \n    cgo was having trouble determining the type of O_TMPFILE on older\n    operating systems where it\'s not defined.\n    \n    Change-Id: I73bcbaf09ffc854443e3247dc51188e3447593ec\n',1,5,'Rackspace'),(491002,4094,2313,'2016-03-18 18:45:31','2016-01-05 14:40:50','    Re-format the SLO manifest file on new multipart-manifest GET call\n    \n    Currently, the multipart-manifest=get call returns output in json\n    format that is inconsistent with the format that is used for the\n    multipart-manifest=put.\n    \n    This in turn introduces a new call: ?multipart-manifest=get&format=raw\n    \n    Change-Id: I2242943a738f667cbda6363bcb6a017f341e834f\n    Closes-Bug: 1252482\n',182,5,'IBM'),(491003,161,161,'2016-03-18 21:30:58','2016-03-18 21:30:58','    Avoid translation problem\n    \n    Today\'s import failed again for zh-TW since the translator of a string\n    changed the order of the entries and then msgfmt complained with\n    \"format specifications in \'msgid\' and \'msgstr\' for argument 1 are not\n    the same\"\n    \n    Use named arguments to allow translators to switch the order of the\n    entries.\n    \n    Logfile:\n    https://jenkins.openstack.org/job/swift-propose-translation-update/179/console\n    \n    Change-Id: Ide7480a8293a8439ce89d0ad22be74f1f0ad930c\n',2,2,'SUSE'),(491005,832,832,'2016-03-16 06:00:34','2014-08-29 17:14:46','    Add concurrent reads option to proxy\n    \n    This change adds 2 new parameters to enable and control concurrent GETs\n    in swift, these are \'concurrent_gets\' and \'concurrency_timeout\'.\n    \n    \'concurrent_gets\' allows you to turn on or off concurrent GETs, when\n    on it will set the GET/HEAD concurrency to replica count. And in the\n    case of EC HEADs it will set it to ndata.\n    The proxy will then serve only the first valid source to respond.\n    This applies to all account, container and object GETs except\n    for EC. For EC only HEAD requests are effected.\n    \n    It achieves this by changing the request sending mechanism to using\n    GreenAsyncPile and green threads with a time out between each\n    request.\n    \n    \'concurrency_timeout\' is related to concurrent_gets. And is the\n    amount of time to wait before firing the next thread. A value of 0\n    will fire at the same time (fully concurrent), setting another value\n    will stagger the firing allowing you the ability to give a node a\n    shorter chance to respond before firing the next. This value is a float\n    and should be somewhere between 0 and node_timeout. The default is\n    conn_timeout. Meaning by default it will stagger the firing.\n    \n    DocImpact\n    Implements: blueprint concurrent-reads\n    Change-Id: I789d39472ec48b22415ff9d9821b1eefab7da867\n',350,81,'Rackspace'),(491289,441,441,'2016-03-21 06:16:52','2016-03-21 06:16:52','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I3cae432fdcf311bc3654956a1f61ce22ecae0933\n',548,131,NULL),(491290,5599,5599,'2016-02-29 08:03:45','2016-02-22 22:41:51','    Fix ringbuilder tests\n    \n    Some of tests in test/unit/cli/test_ringbuilder doesn\'t assert\n    the exit code and unfortunately some of these passed even if the\n    statement fails for the assertion actually.\n    \n    This patch enables to assert the exit code from ringbuider and\n    fixes some code/test bugs I noticed.\n    \n    Change-Id: I18fa675ba8a90678e2b5ccb5f90eafab01d22787\n',191,331,'NTT'),(491292,5146,5146,'2016-03-14 00:17:47','2016-03-14 00:17:47','    Don\'t report recon mount/usage status on files\n    \n    Today recon will include normal files in the payload it returns for\n    /recon/unmounted and /recon/diskusage. As a result it can trigger\n    bogus alarms on any operations-side monitoring checking for unmounted\n    disks or disks that show up in diskusage with weird looking stats.\n    \n    This change adds an isdir check for the entries it finds in /srv/node.\n    \n    Change-Id: Iad72e03fdda11ff600b81b4c5d58020cc4b9048e\n    Closes-bug: #1556747\n',66,8,'IBM'),(491294,4094,4094,'2016-03-04 15:39:52','2015-10-07 10:17:39','    Don\'t ssync data when only a durable is missing\n    \n    If an EC diskfile is missing its .durable file (for example\n    due to a partial PUT failure) then the ssync missing check\n    will fail to open the file and will consider it\n    missing. This can result in possible reconstruction of the\n    fragment archive (for a sync job) and definite transmission\n    of the fragment archive (for sync and revert jobs), which is\n    wasteful.\n    \n    This patch makes the ssync receiver inspect the diskfile\n    state after attempting to open it, and if fragments exist at\n    the timestamp of the sender\'s diskfile, but a .durable file\n    is missing, then the receiver will commit the diskfile at\n    the sender\'s timestamp. As a result, there is no longer any\n    need to send a fragment archive.\n    \n    Change-Id: I4766864fcc0a3553976e8fd85bbb2fc782f04abd\n',277,26,'HP'),(491720,5254,1111,'2016-03-21 15:39:01','2016-02-15 19:17:01','    Skip already checked partitions when auditing objects after a restart\n    \n    The object auditor will save a short status file on each device, containing a\n    list of remaining partitions for auditing. If the auditor is restarted, it will\n    only audit partitions not yet checked. If all partitions on the current device\n    have been checked, it will simply skip this device. Once all partitions on all\n    disks are successfully audited, all status files are removed.\n    \n    Closes-Bug: #1183656\n    \n    Change-Id: Icf1d920d0942ce48f1d3d374ea4d63dbc29ea464\n',117,9,'Red Hat'),(491722,441,441,'2016-03-22 06:16:34','2016-03-22 06:16:34','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I70db7d29a9859cb47144ac49df8c289d1c2ec3e6\n',51,31,NULL),(491723,5650,5650,'2016-02-22 15:27:53','2016-02-19 18:07:18','    Set backend content length for fallocate - EC Policy\n    \n    Currently, the ECObjectController removes the \'content-length\' header.\n    This part is ok, except that value is being used to set\n    \'X-Backend-Obj-Content-Length\', so it is always 0.  This leads to not\n    calling fallocate (details on bug) on a PUT since the size is 0.\n    \n    This change makes use of some numbers returned from the EC Driver\n    get_segment_info method in order to calculate the expected on-disk\n    size that should be allocated.  The EC controller will now set the\n    \'X-Backend-Obj-Content-Length\' value appropriately.\n    \n    Co-Authored-By: Kota Tsuyuzaki\n    Co-Authored-By: John Dickinson\n    Co-Authored-By: Tim Burke\n    Change-Id: Ifd16c1438539e6fd9bb2dbcd053d11bea2e09fee\n    Fixes: bug 1532008\n',44,6,'IBM'),(491725,7774,7774,'2016-03-20 13:15:44','2016-03-17 16:53:04','    Container sync nodes shuffle cleanup\n    \n    Since commit \"Update container sync to use internal client\" get_object is\n    done using internal_client and not directly on nodes which makes the block\n    of code to shuffle the nodes redundant.\n    \n    Change-Id: I45a6dab05f6f87510cf73102b1ed191238209efe\n',1,9,'IBM'),(491727,4094,4094,'2016-03-22 11:10:41','2016-03-22 11:10:41','    Remove unused code from container sync\n    \n    Change-Id: Ia44138aadcd30c474f744a9c552220e18302ecc6\n',0,12,'HPE'),(492211,4094,4094,'2016-03-22 11:53:49','2016-03-22 11:51:11','    Add .eggs/* to .gitignore\n    \n    After running:\n    \n      python setup.py build_sphinx\n    \n    there is a .eggs directory left in the repo root directory\n    which is not currently ignored by git.\n    \n    Change-Id: Id15811f94046fd8bb22153425bf5cafe6c045453\n',1,0,'HPE'),(492213,869,869,'2015-08-25 14:26:45','2015-08-24 15:41:23','    Make the object auditor\'s run-once mode run once.\n    \n    If you invoked the object auditor with --once, it would run the\n    full-audit checker(s) once, but it would run the ZBF checker over and\n    over until the full-audit checkers were done. Now it runs the ZBF and\n    full-audit checkers once each.\n    \n    Change-Id: Ieeaa6fba4184a069756ee150727f24df7833697a\n',128,6,'SwiftStack'),(492215,441,441,'2016-03-23 06:16:13','2016-03-23 06:16:13','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Ia2c2819db372da46538d71a80888a4e27538bdcd\n',210,20,NULL),(492805,4094,4094,'2016-03-22 11:36:32','2016-03-22 11:36:32','    Docs: Container sync does not require POST-as-COPY\n    \n    Updates docs to remove warnings that container sync only\n    works with object_post_as_copy=True. Since commit e91de49\n    container sync will also sync POST updates when using\n    object_post_as_copy=False.\n    \n    Change-Id: I5cc3cc6e8f9ba2fef6f896f2b11d2a4e06825f7f\n',3,30,'HPE'),(492807,4094,7774,'2016-03-23 17:42:48','2016-01-20 15:55:30','    Container-Sync to perform HEAD before PUT object on remote\n    \n    This change adds a remote HEAD object request before each call to\n    sync_row.\n    Currently, container-sync-row attempts to replicate the object\n    (using PUT) regardless of the existance of the object on the remote side,\n    thus causing each object to be transferred on the wire several times\n    (depending on the replication factor)\n    \n    An alternative to HEAD is to do a conditional PUT (using, 100-continue).\n    However, this change is more involved and requires upgrade of both the\n    client and server side clusters to work.\n    In the Tokyo design summit it was decided to start with the HEAD approach.\n    \n    Change-Id: I60d982dd2cc79a0f13b0924507cd03d7f9c9d70b\n    Closes-Bug: #1277223\n',327,91,'IBM'),(492809,4094,4075,'2016-03-23 19:34:34','2016-03-15 17:09:21','    Auditor will clean up stale rsync tempfiles\n    \n    DiskFile already fills in the _ondisk_info attribute when it tries to open\n    a diskfile - even if the DiskFile\'s fileset is not valid or deleted.\n    During this process the rsync tempfiles would be discovered and logged,\n    but no-one would attempt to clean them up - even if they were really old.\n    \n    Instead of logging and ignoring unexpected files when validate a DiskFile\n    fileset we\'ll add unexpected files to the unexpected key in the\n    _ondisk_info attribute.\n    \n    With a little bit of re-organization in the auditor\'s object_audit method\n    to get things into a single return path we can add an unconditional check\n    for unexpected files and remove those that are \"old enough\".\n    \n    Since the replicator will kill any rsync processes that are running longer\n    than the configured rsync_timeout we know that any rsync tempfiles older\n    than this can be deleted.\n    \n    Split unlink_older_than in common.utils into two functions to allow an\n    explicit list of previously discovered paths to be passed in to avoid an\n    extra listdir.  Since the getmtime handling already ignores OSError\n    there\'s less concern of race condition where a previous discovered\n    unexpected file is reaped by rsync while we\'re attempting to clean it up.\n    \n    Update some doc on the new config option.\n    \n    Closes-Bug: #1554005\n    \n    Change-Id: Id67681cb77f605e3491b8afcb9c69d769e154283\n',344,37,'Rackspace'),(492811,229,229,'2016-03-23 15:26:41','2016-03-21 22:03:34','    2.7.0 authors and changelog updates\n    \n    Change-Id: I16ad0c61b048921ca01fa96862ae7eea0eec6017\n',174,2,'SwiftStack'),(493299,4094,1111,'2016-03-23 23:03:42','2015-12-14 16:03:43','    Fix full_listing in internal_client\n    \n    The internal_client is used in swift-dispersion-report, and in case one has more\n    than 10000 containers or objects these are not queried.\n    \n    This patch adds support to the internal_client to iterate over all\n    containers/objects if the listing exceeds the default of 10000 entries and the\n    argument full_listing=True is used.\n    \n    Closes-Bug: 1314817\n    Closes-Bug: 1525995\n    Change-Id: I6892390d72f70f1bc519b482d4f72603e1570163\n',41,1,'Red Hat'),(493301,4094,4094,'2016-03-23 23:14:06','2016-03-23 20:49:50','    Check marker params in SimpleClient full listing requests\n    \n    Follow up for change [1] to add some assertions to check that\n    marker param is included in sequential GET requests sent during\n    a full listing.\n    \n    Extract multiple FakeConn class definitions to single class at\n    module level and share between all classes.\n    \n    Also, explicitly unpack the return values from base request calls\n    made in the full listing section of base_request, and explicitly\n    return a list to make more consistent with rest of the method.\n    \n    [1] Change-Id: I6892390d72f70f1bc519b482d4f72603e1570163\n    \n    Change-Id: Iad038709f46364b8324d25ac79be4317add79df5\n',32,36,'HPE'),(493303,2393,2393,'2016-03-24 16:12:46','2016-03-24 16:08:19','    Handle tempurl Content-Disposition header missing from HEAD\n    \n    Content-Disposition headers should make no difference between\n    GET and HEAD according to HTTP rfc.\n    \n    Closes-Bug: #1539805\n    \n    Change-Id: Ifa41a7cda2f321eb8e36420ede7912ed0a549712\n',26,1,'IBM'),(493305,441,441,'2016-03-25 06:36:40','2016-03-25 06:36:40','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I6ba2f35913e6ae83607b5e268645432d455d587c\n',143,9,NULL),(493306,7470,7470,'2016-03-25 17:20:24','2016-03-25 11:44:26','    Removing some redundant words\n    \n    This patch removes some redundant words.\n    \n    Change-Id: Ia79717664b06ed9a41c3c5dcf1a25e9e49e21cf2\n',5,5,'Fujitsu'),(493603,239,239,'2016-03-25 10:48:26','2016-03-25 10:48:26','    Update .gitreview for stable/mitaka\n    \n    Change-Id: If8945bca78f90e95f6d05baefc078b8905f6bdb2\n',1,0,'OpenStack Foundation'),(493709,441,441,'2016-03-26 06:35:18','2016-03-26 06:35:18','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I3b5d401649fa3dea6dc43654516f7075bb06ee0d\n',77,7,NULL),(494289,441,441,'2016-03-28 06:38:03','2016-03-28 06:38:03','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I68439736f0d0cfc981d4eacbdd1908f57e82b4c9\n',234,17,NULL),(494290,461,461,'2016-03-13 10:51:18','2016-03-13 10:51:18','    Fix py34 error of indexing \'dict_keys\' object\n    \n    In python3, keys() of a dict isn\'t a list and cannot be indexed.\n    \n    Change-Id: I8a5b8e66a69f7096b2e5388bdeb12bb800879158\n    Closes-Bug: #1550184\n',1,1,'99cloud'),(494892,441,441,'2016-03-29 06:41:06','2016-03-29 06:41:06','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Ia78689c73464b565fc6a09a633a1e9a84d92a97d\n',179,13,NULL),(494893,1111,1111,'2016-03-23 21:58:13','2016-03-21 09:52:23','    Ignore files in the devices directory when auditing objects\n    \n    The object auditor raises an exception if there are some files in\n    /srv/node (or any other defined \"devices\" directory). This change\n    simply skips any file in the devices directory when generating\n    locations for the object auditor.\n    \n    Change-Id: I934594994adc577799723edb6c5648685682a9e7\n',39,1,'Red Hat'),(494895,4088,4088,'2016-03-02 11:41:21','2016-02-25 13:31:51','    Fix account-reaper unable to delete all containers.\n    \n    When reaper try to find the correct container_shard number,\n    but it doesn\'t compare local device\'s name, so it always\n    return first entry\'s index of local devices from the ring\n    to container_shard.\n    That causes some containers will be skip and objects under\n    these containers won\'t be delete.\n    \n    Change-Id: I0e2bbdd99add86ee46e856920c0740c4aa13c77d\n    Closes-Bug: #1549615\n',84,15,'SwiftStack'),(494897,7420,7420,'2016-03-30 04:15:23','2016-03-30 11:07:46','    Fix typos in Swift files\n    \n    Change-Id: I34e0c9a888127704ac1910e73ddd14e27ebade13\n',19,19,'Fujitsu'),(503477,4094,5650,'2016-03-30 16:31:43','2016-03-10 14:26:14','    Changes crypto to use transient-sysmeta for crypto-meta\n    \n    This patch changes crypto middleware to use\n    x-object-transient-sysmeta-*\n    to store the crypto-meta that is paired with\n    user metadata.\n    \n    error_if_need_keys was removed for now, but\n    is added back in another patch when it\'s used.\n    \n    Change-Id: I90cd6ca8b7a78faa14262bc2c8190b4875d06ece\n',50,56,'IBM'),(503478,2470,2470,'2016-03-29 19:41:23','2016-02-11 16:00:38','    Simplify policy-name validation slightly\n    \n    _validate_policy_name always either returns True or raises an exception.\n    Simplify it to just being a callable that may raise an exception.\n    \n    Also, move the check for blank/None names into _validate_policy_name, so\n    it will be applied in more cases.\n    \n    Change-Id: I7832a0c9c895cd75ba4c6d0e8b5568a3c8a0ea25\n',22,13,'SwiftStack'),(503480,4067,4067,'2016-03-30 19:55:13','2016-03-09 21:33:25','    go: make object reclaim age configurable\n    \n    Change-Id: I960756762e8e46a613f14a2b01189748e65841f0\n',23,17,'Rackspace'),(503481,5248,5248,'2016-03-28 22:21:04','2016-03-28 22:21:04','    go: fix the async logger\n    \n    Change-Id: I0e762e4590d8474ada265cd7c65811aba26cde16\n',30,30,'Rackspace'),(509696,5681,5681,'2016-01-06 12:29:20','2015-07-15 14:22:45','    Correctly handle keys starting with the delimiter.\n    \n    When processing keys where the names start with the delimiter\n    character, swift should list only the delimiter character. To get the\n    list of nested keys, the caller should also supply the prefix which is\n    equal to the delimiter.\n    \n    Added a functional test and unit tests to verify this behavior.\n    \n    Fixes Bug: 1475018\n    \n    Change-Id: I27701a31bfa22842c272b7781738e8c546b82cbc\n',42,1,'Bounce Storage'),(509698,5596,5596,'2016-03-17 03:18:08','2016-03-16 06:40:04','    go: proxy rewrite\n    \n    I know this is a huge change.  The proxy still isn\'t very advanced,\n    this just cleans it up and lays some framework down.\n    \n    Most functionality was moved out to a direct client.\n    There\'s a proxy context to hold auth info and per-request caches.\n    Better tempauth.  I mean it\'s still not great, but it\'s better.\n    Inklings of callback-based authentication.\n    Account and container info fetching and caching.\n    \n    Change-Id: I2543040a5f9faed20e713eb24e2189801232b76e\n',1444,481,'Rackspace'),(509700,5596,5596,'2016-03-31 22:39:44','2016-03-31 22:39:44','    go: fix not returning after 507\n    \n    This causes it to still send container updates and also log a 201\n    when there isn\'t space available.\n    \n    Change-Id: I898f361047e2da9413c7c156672cc2f7e7abd8ca\n',2,0,'Rackspace'),(510025,592,592,'2016-04-01 23:38:49','2016-04-01 23:37:25','    [docs] Update Administrator Guide URL\n    \n    Change-Id: I7f6f4ffb7033d2a321362c91e05f1576847939b0\n',2,2,'Fujitsu'),(510884,2470,2470,'2016-03-31 15:43:02','2016-03-30 14:19:00','    Fix upgrade bug in versioned_writes\n    \n    Previously, versioned_writes assumed that all container servers would\n    always have the latest Swift code, allowing them to return reversed\n    listings. This could cause the wrong version of a file to be restored\n    during rolling upgrades.\n    \n    Now, versioned_writes will check that the listing returned is actually\n    reversed. If it isn\'t, we will revert to getting the full (in-order)\n    listing of versions and reversing it on the proxy.\n    \n    Change-Id: Ib53574ff71961592426cb386ef00a75eb5824def\n    Closes-Bug: 1562083\n',439,15,'SwiftStack'),(511420,7710,7710,'2016-04-03 21:24:33','2016-04-03 21:07:00','    Fix strings with positional arguments\n    \n    As descriped in develop guideline,\n    Any message with more than one variable should use\n    named interpolation instead of positional\n    http://docs.openstack.org/developer/oslo.i18n/guidelines.html#adding-variables-to-translated-messages\n    \n    Change-Id: Ia25517cfb52037cf49d0a6ebf528344267fb22cd\n    Closes-bug:#1559431\n',74,47,'independent'),(511972,441,441,'2016-03-30 06:46:56','2016-03-30 06:46:56','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Ib7e30b55fd1795bf63cb0c22a97580be5e6f9f23\n',174,4,NULL),(511973,5254,5254,'2016-04-04 16:27:14','2016-04-04 16:27:14','    added javaswift to associated projects\n    \n    Change-Id: I139ac3acb1c7d2498e87df554b81824ada2dbd00\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',1,0,'Red Hat'),(511975,4075,4075,'2016-03-25 12:12:14','2016-03-24 16:42:21','    Shutdown backend EC connection contexts on disconnect\n    \n    When eventlet.wsgi closes an ECAppIter on client disconnect we need to\n    make sure our sub-iterators are also closed.  We already kill the\n    backend sockets, but the executing contexts are left running until\n    they timeout.  A slow client can result in needlessly holding queued\n    backend fragments until the client_timeout (default 60s).\n    \n    Update associated test that exposed the problem to demonstrate the\n    issue more quickly.\n    \n    Change-Id: Ibbc89449e7878fc4215e47e3f7dfe4ae58a2d638\n',26,16,'Rackspace'),(511977,7420,7420,'2016-04-07 13:33:20','2016-04-07 13:31:26','    Fix typos in Swift files\n    \n    Change-Id: I39dbf55c094c42347b57ef67520abff9e6fc24bc\n',2,2,'Fujitsu'),(511978,441,441,'2016-04-07 07:00:08','2016-04-07 07:00:08','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Ib80e3a759fa1e4a99576710607ad07fc5f259527\n',549,191,NULL),(511980,5254,5254,'2016-04-06 16:58:36','2016-04-06 16:58:36','    remove unused current_status method\n    \n    Change-Id: I574919eaa14cadc800f3a1f6014221ee382ee7e0\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',0,10,'Red Hat'),(512688,4094,5650,'2016-04-07 13:42:12','2015-10-19 23:36:00','    Support for http footers - Replication and EC\n    \n    Before this patch, only the ECObjectController supported sending\n    metadata in http footers.  The encryption feature requires that\n    footers are processed, even when using the replication storage\n    policy.\n    \n    This patch:\n    \n    - Moves most of the functionality of ECPutter into a generic Putter\n      class that is used for replicated object PUTs without footers.\n    \n    - Creates a MIMEPutter subclass to support  multipart and multiphase\n      behaviour required for any replicated object PUT with footers and\n      all EC PUTs.\n    \n    - modifies ReplicatedObjectController to use Putter objects in place\n      of raw connection objects.\n    \n    - refactors the _get_put_reponses method and called methods so that\n      more code is in the BaseObjectController class and therefore shared\n      by [EC|Replicated]ObjectController classes.\n    \n    - adds support to call a callback that middleware may have placed\n      in the environ, so the callback can set footers.\n    \n    In order to test this with encryption, use this vagrant:\n    https://github.com/swiftstack/vagrant-swift-all-in-one/tree/crypto\n    Alternatively, please follow the instructions\n    in the proxy-server.conf-sample.\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    Change-Id: I3e9e92a5da9d31d9551a7c08e0b2f0bfb217794c\n',597,606,'IBM'),(512689,869,869,'2016-04-06 15:45:20','2016-03-23 13:51:47','    Fix infinite recursion during logging when syslog is down\n    \n    Change-Id: Ia9ecffc88ce43616977e141498e5ee404f2c29c4\n',88,11,'SwiftStack'),(512691,441,441,'2016-04-08 07:02:33','2016-04-08 07:02:33','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I9f4330ec20463e4d303e8ba3b67f86813a914ac5\n',27,1026,NULL),(512980,4094,4094,'2016-04-07 12:54:56','2016-04-06 15:40:42','    Assert that ChunkWriteTimouts are not raised\n    \n    Follow up for change Ibbc89449e7878fc4215e47e3f7dfe4ae58a2d638\n    to add a test assertion that the ChunkWriteTimeout contexts are\n    exited without raising the timeout exception in\n    iter_bytes_from_response_part().\n    \n    Change-Id: I6d323cb26779e457fb5940093a81b349b333a0af\n',42,19,'HPE'),(512982,5155,5599,'2016-04-06 06:30:02','2015-12-21 03:13:50','    Refactor CORS unit tests\n    \n    This is a follow-up patch for https://review.openstack.org/#/c/258392/\n    That one added good unit test cases for various kinds of\n    allowe_origin like \'*\' or \'\'(empty). However, the result of handling\n    in Swift proxy will depend on strict_cors_mode option configuration.\n    \n    This patch refactors the unit tests to split out for\n    strict_cors_mode = on/off and add some missing unit tests for\n    each case.\n    \n    Change-Id: I55f7cd279436b5c9f71d81fecf06021380e35579\n',109,109,'NTT'),(512984,591,591,'2016-04-09 18:47:58','2016-04-09 18:47:58','    Fixed Sphinx errors\n    \n    doc/source/deployment_guide.rst:1372: ERROR: Malformed table.\n    swift/obj/diskfile.py:docstring of swift.obj.diskfile.BaseDiskFileManager.yield_hashes:13: ERROR: Unexpected indentation.\n    doc/source/ops_runbook/diagnose.rst:188: WARNING: Inline emphasis start-string without end-string.\n    \n    Change-Id: Id20eb62eb5baebb3814e7af5676badb94f17dee5\n',8,8,'Seznam.cz'),(513552,4094,4075,'2016-03-07 13:29:10','2016-02-29 13:14:59','    Additionally break container servers during fast-post probes\n    \n    The existing probetests were already doing brainsplitting on the object\n    servers in order to introduce composite metdata timestamp reconciliation.\n    \n    But they were not introducing failures at the container server level, and\n    therefore not covering functional testing of those servers replication\n    consistency repair.\n    \n    This change adds a brain splitter for the container servers to additionally\n    exercise the consistency engine at that layer under the existing probetest so\n    that you can observe their correct behavior while exercising the probetests\n    [1].\n    \n    1. I used a script like this to watch the object servers and container db\'s\n    repair themselves -> https://gist.github.com/clayg/a8077d9d29ff68bb0edd\n    \n    Change-Id: Ic5bb03dffef7e30c58338cef969a105577b84620\n',83,0,'Rackspace'),(514034,832,4092,'2016-03-10 03:54:46','2015-10-09 16:13:55','    swift-ring-builder can\'t remove a device with zero weight\n    \n    If a device with 0 weight is tried to remove, the following rebalance\n    does not write changes into builder file.\n    \n    Scenario:\n    $ swift-ring-builder object.builder set_weight --id 1 0.00\n    $ swift-ring-builder object.builder rebalance\n    Wait for moving files out of the device id=1.\n    $ swift-ring-builder object.builder remove --id 1\n    $ swift-ring-builder object.builder rebalance\n    In fact, the device id=1 is not removed after rebalance (must be --force used).\n    \n    Change-Id: Iad5a444023eae9882a3addd7f119ff4d18559ddd\n    (cherry picked from commit 71993d84e88cc1d5f7742182905cace21c7e88cb)\n',45,11,'Seznam.cz'),(514035,832,4092,'2016-03-10 03:55:30','2015-10-09 16:13:55','    swift-ring-builder can\'t remove a device with zero weight\n    \n    If a device with 0 weight is tried to remove, the following rebalance\n    does not write changes into builder file.\n    \n    Scenario:\n    $ swift-ring-builder object.builder set_weight --id 1 0.00\n    $ swift-ring-builder object.builder rebalance\n    Wait for moving files out of the device id=1.\n    $ swift-ring-builder object.builder remove --id 1\n    $ swift-ring-builder object.builder rebalance\n    In fact, the device id=1 is not removed after rebalance (must be --force used).\n    \n    Change-Id: Iad5a444023eae9882a3addd7f119ff4d18559ddd\n    (cherry picked from commit 71993d84e88cc1d5f7742182905cace21c7e88cb)\n',50,15,'Seznam.cz'),(514036,2470,2470,'2016-04-06 15:46:29','2016-03-30 14:19:00','    Fix upgrade bug in versioned_writes\n    \n    Previously, versioned_writes assumed that all container servers would\n    always have the latest Swift code, allowing them to return reversed\n    listings. This could cause the wrong version of a file to be restored\n    during rolling upgrades.\n    \n    Now, versioned_writes will check that the listing returned is actually\n    reversed. If it isn\'t, we will revert to getting the full (in-order)\n    listing of versions and reversing it on the proxy.\n    \n    Change-Id: Ib53574ff71961592426cb386ef00a75eb5824def\n    Closes-Bug: 1562083\n    (cherry picked from commit ebf0b220127b14bec7c05f1bc0286728f27f39d1)\n',439,15,'SwiftStack'),(514037,4094,4094,'2016-04-07 16:18:53','2016-04-07 16:12:47','    Wrap and call existing update_footers callbacks\n    \n    Be nice to other middlewares that might want to set\n    footers too by calling their callbacks from the encrypter.\n    \n    Moves the footer metadata construction to the footers callback\n    so that Etag can be added to the footers after the inner callback\n    has returned.\n    \n    Add tests to verify the callback is propagated with and without\n    the encrypter installing its own callback.\n    \n    Change-Id: I1b64cfd67a07010c7ba21f31916b73ab567be5a5\n',120,57,'HPE'),(514039,5676,5676,'2016-04-05 22:45:17','2016-04-05 22:45:17','    Modified REPLICATE request to use replication_ip\n    \n    direct_client.direct_get_suffix_hashes doesn\'t use replication ip and\n    port for REPLICATE request. Since we have an option of doing\n    replication in separate network, we can add replication_ip and port\n    while creating rings if not it will get filled in with the regular\n    node\'s ip.\n    \n    Change-Id: I34067df27042fc3146b795191ab8043ee1aed3ce\n    Closes-Bug:1566395\n',18,3,'Intel'),(514041,4094,4094,'2016-04-06 11:57:41','2016-04-06 11:48:48','    Make DirectClientException report correct ip and port\n    \n    When direct_client.direct_get_suffix_hashes raises a\n    DirectClientException the exception message and variables\n    should report the replication_ip and replication_port, as\n    opposed to the ip and port values reported for all other\n    case when the exception is raised.\n    \n    Add option to override ip and port reported in\n    DirectClientException.\n    \n    Also adds unit tests to verify both cases.\n    \n    Related-Bug: 1566395\n    Change-Id: If3d952847c7199f4e9f6164858085367266386d2\n',45,5,'HPE'),(514043,4075,2313,'2016-02-29 09:54:44','2015-10-23 15:50:21','    Add unit tests for swift.account.reaper\n    \n    This patch adds more unit tests to diminish missing pieces\n    of the coverage in the account_reaper unit test.\n    \n    Change-Id: Ib9e875ddd1334a4a67037dcfbd42d3b008ccd4e7\n',58,0,'IBM'),(514045,7519,7519,'2016-04-08 19:18:16','2016-04-08 18:40:30','    Convert CONTRIBUTING.md to CONTRIBUTING.rst\n    \n    Change-Id: I64c42c42db35a9f55a1df9d4ab6e97a2506b8c45\n    Closes-Bug: #1567027\n',114,99,'AT&T'),(514553,5248,5248,'2016-04-12 13:34:10','2016-04-06 03:38:06','    go: hummingbird rescueparts\n    \n    If there are some partitions in your cluster that need to be\n    replicated you can feed them to this command and it will send\n    priority replication calls out to all nodes in the ring to\n    fully replicate the partition if they have a copy of it.\n    \n    Change-Id: Ic08366602107ccdcd8d615a5daacc2cd48a487e7\n',130,18,'Rackspace'),(514555,4094,4086,'2016-04-12 10:07:36','2016-02-01 13:04:38','    POST update to round-trip unit tests\n    \n    Adds a POST update\n    \n    Change-Id: Ib8ec8b83e6844113acace8e7e48a0a4c3ca5b968\n',55,11,'Intel'),(514557,4094,5679,'2016-04-13 08:28:50','2015-12-07 20:08:26','    Conditional GETs Fix\n    \n    This patch enables the conditional GETs feature (if_match,\n    if_none_match) to be used with encryption.\n    \n    Also changes decrypter to attempt to decrypt response headers\n    for all response status codes, not just 2xx, so that we get\n    decrypted etags in 412 responses etc.\n    \n    Change-Id: I01564734a915bb4334cfc3eb8ad363aabbbcdd93\n',406,44,'IBM'),(514558,4094,4094,'2016-04-13 08:28:53','2016-04-11 12:38:48','    crypto: use cipher required iv length for random iv\n    \n    This is simply replacing the value 8 with the required\n    iv length derived from the AES cipher class so the\n    random iv length should remain correct if the cipher\n    were ever to change, and to make code consistent with\n    the derived iv case.\n    \n    Unit tests already cover this.\n    \n    Change-Id: I402f4d97bc9d8e5c42f516084725749bed263d09\n',1,1,'HPE'),(514559,4094,5650,'2016-04-13 10:55:52','2016-03-27 16:41:52','    Resolve todos relying on real footers and transient-sysmeta cleanup\n    \n    Resolved the todos that were to be done after support for real\n    footers was in place.  Also applied review feedback from the\n    transient-sysmeta patch (from clayg).\n    \n    In order to test this with encryption, use this vagrant:\n    https://github.com/swiftstack/vagrant-swift-all-in-one/tree/crypto\n    Alternatively, follow the instructions in proxy-server.conf-sample.\n    \n    Change-Id: I4bfa10272357c3fda92b207ae8720ec4a9f36c27\n',63,41,'IBM'),(515186,4094,5650,'2016-04-13 12:04:47','2016-04-07 13:20:20','    Change fetch keys to use callback namespace.\n    \n    Changes from using swift.crypto.fetch_crypto_keys\n    to using swift.callback.fetch_crypto_keys\n    \n    Adds a constant to use for this value.\n    \n    Change-Id: I5eb4912d3576e67bb2cf4bb04b321a9724189c83\n',77,63,'IBM'),(515187,4094,4094,'2016-04-14 09:02:33','2016-04-11 15:26:26','    crypto - cleanup unit tests\n    \n    There has been enough cut and paste of tests\n    now to make it worth pulling out some common\n    stuff into setUp methods.\n    \n    Also rename test methods to clearly and consistently\n    reflect the request method; replace methods that only\n    return a string with string constants.\n    \n    Change-Id: I54baf18bbfa33b263e5b533169cbb55cadeacf54\n',201,224,'HPE'),(515787,4086,4086,'2016-04-14 13:57:27','2016-04-14 17:01:30','    206 status check for multipart mime doc\n    \n    Add a 206 status check along with content-type check to ensure we are\n    decrypting multipart mime doc- avoids situation when user may want to\n    store multipart mime doc\n    \n    Change-Id: Ic1ef6b362b8a3821af92bb6e66f111d438ebc10d\n',7,4,'Intel'),(515788,2470,2470,'2016-04-14 10:01:06','2016-04-14 09:36:00','    Add multipart content-type test\n    \n    Previously, we only looked at content-type to determine whether to treat\n    a response as a multipart document. With the parent commit, we also\n    require a 206 response code.\n    \n    This adds a test that would fail with the old code.\n    \n    Change-Id: I24d9e5974bf74cb45b1dc66a5f4716c85ef10b10\n',36,3,'SwiftStack'),(515789,4075,4075,'2016-03-14 17:30:10','2016-03-14 16:52:50','    Make rsync ignore it\'s own temporary files\n    \n    In situations where rsync may inadvertently be unable to cleanup it\'s\n    temporary files we shouldn\'t spread them around the cluster.\n    \n    By asking our rsync subexec to --exclude patterns that match it\'s own\n    convention for temporary naming we\'ll only ever transfer real replicated\n    artifacts and never temporary artifacts which should always be ignored\n    until they are fully transfered.\n    \n    Cleanup of stale rsync droppings should be performed by the auditor and\n    will be addressed in a separate change related to lp bug #1554005.\n    \n    Closes-Bug: #1553995\n    \n    Change-Id: Ibe598b339af024d05e4d89c34d696e972d8189ff\n',75,0,'Rackspace'),(516217,7519,7519,'2016-04-12 17:46:56','2016-04-08 18:17:44','    Convert README.md to README.rst\n    \n    Change-Id: I223890bd4ffe469becc2127f9362243cdb52bc08\n    Closes-Bug: #1567026\n',102,88,'AT&T'),(516219,2470,2470,'2016-04-13 21:56:10','2016-04-13 11:07:44','    Don\'t include conditional headers in SLO HEAD requests\n    \n    Previously, attempting to PUT a SLO manifest with `If-None-Match: *`\n    would include the header when validating the segments, causing the\n    upload to fail.\n    \n    Now when SLO validates segments, no conditional headers will be\n    included in the HEAD request.\n    \n    Change-Id: I03ad454092d3caa73d29e6d30d8033b45bc96136\n    Closes-Bug: #1569253\n',51,16,'SwiftStack'),(516221,1396,1396,'2016-04-15 14:04:12','2016-04-08 16:00:16','    Adds eventlet monkey patching of select module if thread is pathed\n    \n    Oslo.messaging pika driver requires patching of select module if thread\n    is patched.\n    Pika driver uses select call and if it is not patched onsuming messages\n    blocks whole eventlet loop\n    \n    Closes-Bug: #1570242\n    Change-Id: I9756737309f401ebddb7475eb84725f65bca01bf\n',14,5,'Mirantis'),(516697,869,869,'2016-04-15 17:22:44','2016-04-15 17:22:44','    Ignore negative suffix-byte-range requests.\n    \n    If the client asked for \"Range: bytes=--123\", Swift would respond with\n    a 206 and a Content-Length of -123. Now that Range header is ignored\n    just like all kinds of other invalid Range headers.\n    \n    Change-Id: I30d4522d223076ce342d20c52f57ff0eb2aea1f4\n    Closes-Bug: 1571106\n',17,13,'SwiftStack'),(516698,7774,7774,'2016-04-14 21:37:59','2016-02-18 14:50:08','    Per container stat. report\n    \n    In addition to the container sync stat. report, keeping per container\n    statistics allows administrator with more control over bytes\n    transfered over a specific time per user account: The per container stats\n    are crucial for billing purposes and provides the operator a \'progress\n    bar\' equivalent on the container\'s replication status.\n    \n    Change-Id: Ia8abcdaf53e466e8d60a957c76e32c2b2c5dc3fa\n',226,54,'IBM'),(516700,441,441,'2016-04-18 06:31:34','2016-04-18 06:31:34','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I88be5c9dbb1fcc3a15592d42af7160478308b1f4\n',119,143,NULL),(517169,441,441,'2016-04-18 06:32:04','2016-04-18 06:32:04','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I995ccd6d0494dd3535c6b93565c5ad9860d6f79e\n',147,146,NULL),(517170,4094,5650,'2016-04-18 15:33:44','2016-02-02 21:14:47','    Encrypt/decrypt etag in container listing\n    \n    Encrypts/decrypts the etag in the container listing.\n    \n    In order to test this with encryption, use this vagrant:\n    https://github.com/swiftstack/vagrant-swift-all-in-one/tree/crypto\n    Alternatively, please follow the instructions\n    in the proxy-server.conf-sample.\n    \n    Change-Id: I3ef0c949bab3f6b3a06d8d812ebaf7d4b9b4b70c\n',171,26,'IBM'),(517171,4094,4094,'2016-04-18 15:33:44','2016-04-11 17:18:04','    crypto - verify that x-object-meta-etag does not confuse\n    \n    The TODO being removed was valid when we were using\n    x-object-sysmeta-crypto namespace to store user\n    metadata crypto-meta. But now we have x-object-transient-sysmeta-\n    the concern is gone. Adds a test to verify that x-object-meta-etag\n    sent by the client does not result in confused crypto meta headers.\n    \n    Change-Id: I531e048645f6e01bc172fa8c44f11ec0354bf7f3\n',13,6,'HPE'),(517172,5255,5255,'2016-04-14 16:42:38','2016-04-14 16:41:09','    Removing unused clause\n    \n    Removing unused clause from common/middleware/dlo.py\n    \n    Change-Id: I7de9aaefd203c4f1be00ee74b89b5184fd419469\n',5,6,'NEC'),(517174,4094,4094,'2016-02-25 08:52:05','2015-10-14 15:49:35','    Stop staticweb revealing container existence to unauth\'d requests\n    \n    When a container has `X-Container-Meta-Web-Listings: false` then\n    staticweb will return a 404 in response to a GET or HEAD on the\n    container, regardless of whether the request is auth\'d. That provides\n    a way to probe for container existence. It should return a 401 if the\n    request is not auth\'d.\n    \n    This patch adds a call to swift.authorize before returning the 404.\n    \n    Closes-Bug: 1506116\n    Change-Id: I382323b49dc8f6d67bf4494db7084a860a10db59\n',56,5,'HP'),(518473,4094,4094,'2016-04-19 09:40:28','2016-04-14 08:47:45','    crypto - Update container with correct etag on POST\n    \n    Whatever container update override etag is sent to the\n    object server with a PUT must be used in container updates\n    for subsequent POSTs. Unfortunately the update override\n    headers (x-backend-container-update-override-*) are not\n    persisted with the object metadata so are not available\n    when handling a POST.\n    \n    For EC there is an ugly hack in the object server to\n    use the x-object-sysmeta-ec-etag when doing a container\n    update for a POST.\n    \n    With crypto, the encryption middleware needs to override\n    the etag (possibly overriding the already overriding EC\n    etag value) with an encrypted etag value. We therefore\n    have a similar problem that this override value is not\n    persisted at the object server.\n    \n    This patch changes container override headers to use the\n    x-object-sysmeta-container-update-override- namespace\n    so that override values are persisted. That then allows\n    a general mechanism to apply the override values (if any)\n    from object metadata when constructing a container update\n    for a POST.\n    \n    For backwards compatibility the old x-backend-.. style\n    headers are still supported and the ugly hack for EC etag\n    override remains in the object server.\n    \n    Change-Id: Ie258b63a012f0a0cdf9f759e99bbbac1bb6826af\n',230,54,'HPE'),(518474,2470,2470,'2016-02-29 10:27:29','2016-02-28 01:18:07','    Require account/container metadata be UTF-8\n    \n    Otherwise, we get a UnicodeDecodeError when we call json.dumps()\n    \n    Change-Id: Ie200d029e1fd7f0ff0956c8ced98207e11ef9080\n',95,7,'SwiftStack'),(518476,5254,5254,'2016-04-11 13:45:36','2015-12-21 16:25:45','    decouple versioned writes from COPY\n    \n    This change removes the use of the COPY request in the versioned\n    writes middleware. It changes the COPY verb for GETs and PUTs\n    requests. The main reasoning for this change is to remove any\n    dependency that versioning had on copy, which will allow for the COPY\n    functionality to be moved to middleware and to be to the left of the\n    versioned writes middleware in the proxy pipeline. In this way,\n    no COPY request will ever arrive at the versioned writes middleware.\n    \n    A side benefit of this change is that it removes a HEAD request from\n    the PUT path. Instead of checking if a current version exists, a\n    GET request is sent, in case of success, a PUT is sent to the\n    versions container.\n    \n    A unit test was removed that tested non-default storage policies.\n    This test is no longer necessary, since it was used to test\n    specific policy handling code in the COPY method in the proxy\n    object controller.\n    \n    Closes-Bug: #1365862\n    \n    Change-Id: Idf34fa8d04ff292df7134b6d4aa94ff40887b3a4\n    Co-Authored-By: Alistair Coles <alistair.coles@hp.com>\n    Co-Authored-By: Janie Richling <jrichli@us.ibm.com>\n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',481,199,'Red Hat'),(519067,4094,4094,'2016-04-21 21:14:57','2016-04-21 11:54:57','    crypto - revert to using distinct keys per resource\n    \n    Removes TODO and forced single key. Adds test for key uniqueness.\n    \n    Change-Id: Ice8ee48e64bca6de9f114dac39c2cc9e8d5a1814\n',30,4,'HPE'),(519068,4094,4086,'2016-04-21 20:57:40','2016-04-19 18:44:18','    crypto - byok support in keymaster\n    \n    this adds a client key support for keymaster\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    \n    Change-Id: Ie13a7ff2cd4e03ff02d024ed3e8ddd0937702429\n',171,11,'Intel'),(519458,5650,5650,'2016-03-24 20:11:24','2016-01-16 21:59:20','    swift-[account|container]-info when disk is full\n    \n    Extended the use of the DatabaseBroker \"stale_reads_ok\" flag to the\n    AccountBroker and ContainerBroker.  Now checks for an sqlite3 error\n    from the _commit_puts call that processes the pending files.\n    \n    If this error is raised, then the stale_reads_ok flag will be checked\n    to determine how to proceed as opposed to simply raising.\n    \n    The first time that print_info is attempted, the flag will be\n    false, but swift-[account|container]-info will check for the\n    raised exception.  If it was raised, then a warning is reported\n    that the data may be stale, and another attempt will be\n    made using the stale_reads_ok=True flag.\n    \n    Change-Id: I761526eef62327888c865d87a9caafa3e7eabab6\n    Closes-Bug: 1531302\n',164,35,'IBM'),(519460,229,229,'2016-04-13 11:57:45','2016-04-13 11:57:45','    fix fallocate_reserve traceback\n    \n    Previously, fallocate_reserve could result in a traceback. The\n    OSError being raised didn\'t have the proper errno set. This patch\n    sets the errno to ENOSPC.\n    \n    Change-Id: I017b0584972ca8832f3b160bbcdff335ae9a1aa6\n',22,8,'SwiftStack'),(520130,1970,1970,'2016-04-23 18:14:02','2016-04-07 23:07:13','    Change pids\' type to set\n    \n    Previously, the pids type was list(), which raised a ValueError in case if\n    pid was not in pids during the pids.remove(pid) call. The fix changes\n    the type of pids to set() and substitutes remove() with discard(), which\n    doesn\'t raise an Exception if a value is not in the set.\n    \n    Change-Id: I8d41cb2a8ec14d29e5c7411ddfe48ae7a41deb45\n    Closes-Bug: #1567638\n',41,8,'Mirantis'),(520131,4094,2470,'2016-04-26 21:37:09','2016-01-07 15:46:17','    Fix versioned_writes functional test skipping\n    \n    Previously, if object versioning was enabled via the old-style\n    allow_versions container-server setting rather than the new-style\n    allow_versioned_writes proxy-server setting,\n    TestCrossPolicyObjectVersioning would skip tests while\n    TestObjectVersioning and TestObjectVersioningUTF8 would run them.\n    \n    Additionally, if versioned_writes was explicitly included in the\n    proxy-server\'s pipeline and allow_versioned_writes was disabled,\n    the functional tests would fail with a 412.\n    \n    Now, all three will use the same logic to check whether versioning is\n    enabled. Specifically, they will all try to set an X-Versions-Location\n    header and skip if it doesn\'t stick.\n    \n    Additionally, the TestCrossPolicyObjectVersioningEnv will now properly\n    clean up after itself.\n    \n    Change-Id: I4c788a0e18587ff17d3c6e346fd22b881495f06d\n',15,6,'SwiftStack'),(520432,441,441,'2016-04-27 06:36:05','2016-04-27 06:36:05','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Idffa1f644ef1363a043a0f7dd9f10e801b0dc374\n',168,174,NULL),(520433,229,4075,'2016-04-28 09:36:30','2016-03-03 06:08:12','    adding review guidelines\n    \n    Change-Id: I61304856a4ecccbbf3aa06c30822494592a3b3d5\n',387,0,'Rackspace'),(520435,229,453,'2016-04-28 10:12:25','2016-04-28 06:29:41','    Fix doc build if git is absent\n    \n    When building packages if git is absent, then we should not set\n    html_last_updated_fmt. It can still be set via the -D switch\n    when building with sphinx-build.\n    \n    Change-Id: I5d0b6cc87f27a052d6d0265546c0d347f00c4bb8\n    Closes-Bug: #1552251\n',7,2,'Huawei'),(520817,8059,8059,'2016-04-29 05:00:36','2016-04-29 05:00:36','    Update mailmap, resolve identity crisis\n    \n    Change-Id: Ia8e30a8c0f81068c259d5d08adad4f1a98460561\n',2,0,'IBM'),(520820,8059,8059,'2016-04-29 04:01:39','2016-04-29 04:01:39','    Fix minor typos in review guidelines\n    \n    Change-Id: I3acb3daeacb784c4038bf54d4103fab66c52f41a\n',16,16,'IBM'),(520822,6634,6634,'2016-04-29 14:47:38','2016-02-01 18:06:54','    change default ports for servers\n    \n    Changing the recommended ports for Swift services\n    from ports 6000-6002 to unused ports 6200-6202;\n    so they do not conflict with X-Windows or other services.\n    \n    Updated SAIO docs.\n    \n    DocImpact\n    Closes-Bug: #1521339\n    Change-Id: Ie1c778b159792c8e259e2a54cb86051686ac9d18\n',625,623,'Intel'),(521506,5596,5596,'2016-04-19 19:44:54','2016-04-06 23:16:10','    go: ObjectEngine abstraction layer\n    \n    This is a first pass at something analogous to swift\'s diskfile. The API is\n    probably not finalized.\n    \n    There are a few interfaces you have to implement for a new ObjectEngine.\n    There\'s also a RegisterObjectEngine function to register a new object engine.\n    See go/objectserver/objengine.go for information.\n    \n    I had to rejigger the AtomicFileWriter interface to make them friends, but this\n    way is fine too.\n    \n    Change-Id: I032038b5e8a068aecdf8b29631f60ebf00cfb2ee\n',816,367,'Rackspace'),(521508,5596,5596,'2016-04-07 02:03:35','2016-04-01 02:30:52','    go: end-user client\n    \n    Add an end-user client.  It maps very closely to swift functionality.\n    Also, rewrite \"hummingbird bench\" to use said aforementioned client.\n    \n    Change-Id: I48b69254bae375defa16ec46c3c451f52f386bf9\n',505,119,'Rackspace'),(521510,5248,7385,'2016-04-28 15:25:35','2016-04-11 10:17:34','    go: shuffle GetNodes\n    \n    for more random requests distribution\n    I know this is a huge change.\n    \n    Change-Id: I08e80facd4841b2940b3526a31b743236f8d1a0f\n',32,3,'independent'),(522143,5682,5682,'2016-05-04 09:14:12','2016-05-03 14:33:05','    Improves log message in swift.obj.replicator\n    \n    Before this commit, when a local device has not found been found\n    in a object-replication run, the policy was not mentioned in the\n    error log. But it is of interest to know the policy, for example for\n    error searching, when no local device has been found.\n    \n    Change-Id: Icb9f9f1d4aec5c4a70dd8abdf5483d4816720418\n',8,7,'Deutsches Klimarechenzentrum GmbH'),(522144,5248,5248,'2016-04-29 08:12:02','2016-04-28 23:37:34','    go: extra detail in replication error log\n    \n    Change-Id: I775f64836b7a3d3d6c827de55d41bd50c62b830f\n',39,18,'Rackspace'),(522678,229,229,'2016-05-05 22:02:47','2016-04-05 11:35:22','    Rework the contributor docs\n    \n    This started as a new \"new_contributor\" doc. But we\'ve already got\n    at least 3 different docs like that.\n    \n    Change-Id: Ia2303ab55eeea01cc71acbccaeab55dad0ef5ff9\n',149,35,'SwiftStack'),(522679,869,869,'2016-04-27 16:59:00','2016-04-27 16:59:00','    Use smaller quorum size in proxy for even numbers of replicas\n    \n    Requiring 2/2 backends for PUT requests means that the cluster can\'t\n    tolerate a single failure. Likewise, if you have 4 replicas in 2\n    regions, requiring 3/4 on a POST request means you cannot POST with\n    your inter-region link down or congested.\n    \n    This changes the (replication) quorum size in the proxy to be at least\n    half the nodes instead of a majority of the nodes.\n    \n    Daemons that were looking for a majority remain unchanged. The\n    container reconciler, replicator, and updater still require majorities\n    so their functioning is unchanged.\n    \n    Odd numbers of replicas are unaffected by this commit.\n    \n    Change-Id: I3b07ff0222aba6293ad7d60afe1747acafbe6ce4\n',65,48,'SwiftStack'),(522681,4094,4094,'2016-05-05 11:16:11','2016-04-14 11:10:04','    crypto - only set body crypto meta if body is read and encrypted\n    \n    Currently if the object body has not been read then the\n    encrypter footers callback will still set crypto_meta\n    in sysmeta footers. That causes some of the copy-related\n    functional test failures.\n    \n    e.g. a PUT with x-copy-from will read its input data\n    from the source object (in proxy object controller)\n    and read no data from the PUT request body. That copy\n    actually works for an encrypted object while we have\n    a single key - the encrypted object and all its sysmeta\n    is correctly copied. But the encrypter footers callback\n    is then called and sets an etag for the empty string\n    and also sets crypto meta that overwrites the correct\n    sysmeta crypto_meta that was just copied.\n    \n    This patch changes the footers callback to only set\n    crypto related footers if the object body actually\n    got read and encrypted. Similarly only replace any\n    Etag in a PUT response if the body was encrypted.\n    \n    This is not intended to solve the copy issues, it\n    is simply defensive coding against unknown downstream\n    behaviour. The Put with x-copy-from example merely\n    illustrates why it makes sense to not assume the body\n    is always read.\n    \n    Change-Id: I0c09cedfabe5093fea367e93652ee89cc44d7d2f\n',158,40,'HPE'),(523023,4094,4094,'2016-03-04 16:10:48','2016-01-14 18:31:21','    Reclaim isolated .meta files\n    \n    It is possible for an object dir to contain only\n    a .meta file*, and currently this file will never\n    be deleted. This patch changes the diskfile on disk\n    file processing to identify any isolated meta files\n    and mark them as ready to be reclaimed, so that the\n    cleanup will reclaim them if they are older than\n    reclaim age.\n    \n    *An isolated .meta can occur as follows:\n    \n    Consider two replicas of the same object whose ondisk files\n    have diverged due to failures:\n    \n      A has t2.ts\n      B has t1.data, t4.meta\n    \n    (The DELETE at t2 did not make it to B. The POST at t4 was\n    rejected by A.)\n    \n    After ssync replication the two ondisk file sets will be:\n    \n      A has t2.ts\n      B has t2.ts, t4.meta\n    \n    Once t2 becomes older than (current time - reclaim age) we are\n    left with:\n    \n      B has t4.meta\n    \n    Closes-Bug: #1534685\n    Change-Id: I3a175fd948a331d08df1b28f9831d7529216c6f1\n',165,73,'HPE'),(523025,5248,5596,'2016-04-29 23:51:16','2016-05-03 19:50:59','    go: hashes.invalid\n    \n    Avoid rewriting hashes.pkl by appending invalidated suffixes to hashes.invalid.\n    This matches swift\'s current behavior.\n    \n    Change-Id: I407e1a2824d4f778019b7a8954c9479e6eceef64\n',70,46,'Rackspace'),(523027,4094,4094,'2016-05-06 09:50:05','2016-05-06 09:50:05','    crypto - align cryptography version requirement with global\n    \n    The global requirements for cryptography lib was changed [1]\n    so bring our requirements in line with that.\n    \n    [1] https://review.openstack.org/#/c/295344\n    \n    Change-Id: I8760515bce818481e8b8429abae08ea1572e1780\n',1,1,'HPE'),(523029,441,441,'2016-05-07 06:35:37','2016-05-07 06:35:37','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I6dc5872fe3005df1d98a7d914f4488a9d3b2f39f\n',289,1655,NULL),(523730,5248,5248,'2016-04-29 17:36:51','2016-04-29 17:36:51','    go: adding a x-trans-id to repconn along with the sender device id\n    \n    Change-Id: If2ab4fc5a26e32e8dd67674b47e9ec35ffacf2f6\n',6,3,'Rackspace'),(523732,8101,8101,'2016-04-29 10:33:16','2016-04-22 10:03:23','    SwiftLogFormatter will log transaction IDs on INFO level\n    \n    Previously SwiftLogFormatter would make two checks. One to see if the\n    transaction id was already in the message field and another check to\n    make sure the log level wasn\'t set to info. If either of these was\n    true, then it would not log the transaction ID in the transaction ID\n    field.\n    \n    This commit removes the check for the info log. Now transaction IDs\n    will be recorded in all cases that have them.\n    \n    Change-Id: Ic06538ab55a75d298169ae1745671573ee9c09e8\n    Closes-Bug: #1504344\n',3,4,'IBM'),(524462,4094,4094,'2016-05-06 09:05:01','2016-04-18 12:39:27','    crypto - add functional test to verify container listing detail\n    \n    Change-Id: I2b573c32d10b4ab0b59aee8d36ad858e48a7e26b\n',24,0,'HPE'),(524464,4094,4094,'2016-05-11 19:39:28','2016-04-12 12:22:26','    crypto - cleanup decrypter exception handling\n    \n    Addresses TODO\'s in decrypter. Rearrange exception\n    handling in attempt to have single point of validating\n    decryption and single point of validating keys, which\n    resulted in some refactoring.\n    \n    - rename decrypter.get_sysmeta_crypto_meta to get_crypto_meta\n      because it used with both sysmeta and transient-sysmeta\n    - rename crypto_utils.get_crypto_meta to create_crypto_meta\n      since that is what it does\n    - move load_crypto_meta and dump_crypto_meta to crypto_utils\n    - remove a try/except pass because load_crypto_meta does not\n      raise valueError or TypeError\n    - only make a decryption context when it will be used - before we\n      made one that would not be used if we then went on to use a\n      multipart response iter, which makes its own decrypt contexts.\n    - move as much checking out of iters because they do not execute\n      until the first call to their next - in particular check\n      crypto_meta before instantiating the multipart response body.\n    - consolidate all decryption checking and exception raising into\n      _load_crypto_meta\n    - check keys are valid when they are first read from keymaster\n    - add unit tests for get_keys()\n    - raise 500 error if x-object-sysmeta-crypto-etag is present but\n      not x-object-sysmeta-crypto-etag-meta\n    - change some 500 response bodies to have general message that\n      do not expose internal implementaiton details to clients.\n    \n    Change-Id: Ie1334158de6bc3bda40e831a4124887148f1fc9f\n',810,329,'HPE'),(524466,4094,4094,'2016-05-11 19:40:14','2016-05-04 18:32:05','    crypto - cleanup encrypter error handling\n    \n    - only instantiate Crypto object once per middleware filter\n    - check for metadata constraint violations before fetching keys\n      (don\'t waste effort)\n    - if check_metadata fails then raise its error rather\n      than passing back through code path as a return value\n    - add test that check_metadata is called\n    - get rid of redundant check for container key in keys\n      by passing required keys to get_keys method.\n    \n    Change-Id: Ic36738a93068e35a1e5fb639a0b38ace2efee4b2\n',45,40,'HPE'),(524468,1111,1111,'2016-04-28 12:06:24','2016-04-28 12:06:24','    Remove threads_per_disk setting\n    \n    This patch removes the threads_per_disk setting. It was already a deprecated\n    setting and by default set to 0, which effectively meant to not use a per-disk\n    thread pool at all. Users are encouraged to use servers_per_port instead.\n    \n    DocImpact\n    \n    Change-Id: Ie76be5c8a74d60a1330627caace19e06d1b9383c\n',8,30,'Red Hat'),(524470,1111,1111,'2016-04-29 13:27:56','2016-04-28 11:53:51','    Remove ThreadPool class\n    \n    With the removement of threads_per_disk there is no longer a need to use\n    run_in_thread() at all; it was just calling the function itself when\n    running with 0 threads.\n    Similar to force_run_in_thread() - with 0 threads it was basically doing\n    the same like in tpool_reraise(), therefore replacing the call and\n    finally removing the complete ThreadPool class.\n    \n    Note that this might break external consumers that are inheriting\n    BaseDiskFileManager; in this case you need to adopt this change in your\n    codebase then.\n    \n    Change-Id: I39489dd660935bdbfbc26b92af86814369369fb5\n',28,409,'Red Hat'),(524472,229,5674,'2016-05-10 15:41:27','2016-05-09 20:28:42','    resurrect gholt blog posts on building consistent hashing ring\n    \n    These are blog posts authored by Greg Holt (gholt) and used with\n    permission to add here. Content was only reformatted as rst and\n    wrap prose lines at 70 characters.\n    \n    Change-Id: I7aa47c24b5019aa598ee005e01612a49514da25f\n',960,0,'Intel'),(524474,869,869,'2016-05-02 17:29:32','2016-05-02 17:29:32','    Fix probe tests from commit cf48e75\n    \n    Commit cf48e75 changed the default account/container/object ports in a\n    lot of places, including the probetests. However, it didn\'t change\n    them in doc/saio/bin/remakerings, and since the probe tests must match\n    the rings, they started failing.\n    \n    This commit just backs out the changes to the test/probe directory so\n    that remakerings and the probe tests match again.\n    \n    Change-Id: I316a09e6ee1a911f37ce9df3d641644739f88eeb\n',7,7,'SwiftStack'),(524476,4094,4094,'2016-05-09 11:10:21','2016-03-09 10:48:54','    Rename hash_cleanup_listdir tests\n    \n    hash_cleanup_listdir was removed in [1], this patch\n    renames all references to it in test_diskfile to refer to\n    the cleanup_ondisk_files method that is now tested directly.\n    \n    Also remove the final references to the now non-existent\n    function in a few comments.\n    \n    [1] I0b96dfde32b4c666eebda6e88228516dd693ef92\n    \n    Change-Id: I1e151799fc2774de9a1af092afff875af24a630c\n    Related-Bug: #1550569\n',112,111,'HPE'),(524478,5254,5623,'2016-05-11 14:55:51','2015-02-18 11:59:31','    Refactor server side copy as middleware\n    \n    Rewrite server side copy and \'object post as copy\' feature as middleware to\n    simplify the PUT method in the object controller code. COPY is no longer\n    a verb implemented as public method in Proxy application.\n    \n    The server side copy middleware is inserted to the left of dlo, slo and\n    versioned_writes middlewares in the proxy server pipeline. As a result,\n    dlo and slo copy_hooks are no longer required. SLO manifests are now\n    validated when copied so when copying a manifest to another account the\n    referenced segments must be readable in that account for the manifest\n    copy to succeed (previously this validation was not made, meaning the\n    manifest was copied but could be unusable if the segments were not\n    readable).\n    \n    With this change, there should be no change in functionality or existing\n    behavior. This is asserted with (almost) no changes required to existing\n    functional tests.\n    \n    Some notes (for operators):\n    * Middleware required to be auto-inserted before slo and dlo and\n      versioned_writes\n    * Turning off server side copy is not configurable.\n    * object_post_as_copy is no longer a configurable option of proxy server\n      but of this middleware. However, for smooth upgrade, config option set\n      in proxy server app is also read.\n    \n    DocImpact: Introducing server side copy as middleware\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    \n    Change-Id: Ic96a92e938589a2f6add35a40741fd062f1c29eb\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',2303,2316,'Red Hat'),(524480,1548,1548,'2016-04-23 08:02:00','2016-03-03 11:14:39','    Allow fallocate_reserve to be a percentage\n    \n    Add the ability to set the fallocate_reserve value as a percentage.\n    This happens automatically when adding the \'%\' at the end of the value.\n    Having the ability to set a % of free space rather than a byte value is\n    useful especially when drive sizes are heterogenous.\n    \n    The default for fallocate_reserve has been adjusted to 1%, having the\n    fallocate_reserve set seems sensible for all deploys and percentages are\n    far safer to default than byte values (across drives of any size).\n    \n    Tests added for using fallocate_reserve as a percentage.\n    \n    Duplicate tests for fallocate_reserve have been removed.\n    \n    Docs updated to reflect the fallocate_reserve change.\n    \n    Change-Id: I4aea613a708205c917e81d6b2861396655e73238\n',215,62,'Rackspace'),(524482,869,869,'2016-05-05 15:40:40','2016-05-04 16:48:28','    Remove unneeded setting of SO_REUSEADDR.\n    \n    This has been in eventlet.listen() since version 0.15.\n    \n    Change-Id: Ib77b28231a2180f1ea082f356c4687c39681a6f7\n',0,2,'SwiftStack'),(525554,5248,5248,'2016-05-10 17:57:53','2016-05-10 17:57:53','    go: shuffle suffix dirs when replicating a partition\n    \n    Change-Id: Iebc287c1034acd7cb10c26095eb51442edad411b\n',4,0,'Rackspace'),(525556,1111,1111,'2016-05-12 07:28:40','2016-04-11 11:56:07','    Don\'t delete misplaced dbs if not replicated\n    \n    If one uses only a single replica and a database file is placed on a\n    wrong partition, it will be removed instead of replicated to the correct\n    partition.\n    \n    There are two reasons for this:\n    1. The list of nodes is empty when there is only a single replica\n    2. all(responses) is True even if there is no response at all, and the\n    latter is always True if there is no node to replicate to.\n    \n    This patch fixes this by adding a special case if used with only one\n    replica to the node selection loop and ensures that the list of\n    responses is not empty.  Also adds a test that fails on current master\n    and passes with this change.\n    \n    Closes-Bug: 1568591\n    \n    Change-Id: I028ea8c1928e8c9a401db31fb266ff82606f8371\n',36,6,'Red Hat'),(525558,2365,2365,'2016-05-12 15:31:51','2016-05-12 15:30:17','    README: fix broken link\n    \n    There is a broken link to CONTRIBUTING.rst\n    introduced in commit a829bd59770681f9d6c1ef02a6e1d5e441587a23\n    \n    Change-Id: Iaedf5ff3995229cf292202793809080f9f2c7fed\n',1,1,'SWITCH'),(525560,2470,2470,'2016-05-11 20:13:46','2016-05-11 19:54:47','    Stop complaining about auditor_status files\n    \n    Following fd86d5a, the object-auditor would leave status files so it\n    could resume where it left off if restarted. However, this would also\n    cause the object-reconstructor to print warnings like:\n    \n      Unexpected entity in data dir: u\'/srv/node4/sdb8/objects/auditor_status_ZBF.json\'\n    \n    ...which isn\'t actually terribly useful or actionable. The auditor will\n    clean it up (eventually); the operator doesn\'t have to do anything.\n    \n    Now, the reconstructor will specifically ignore those status files.\n    \n    Change-Id: I2f3d0bd2f1e242db6eb263c7755f1363d1430048\n',40,2,'SwiftStack'),(525562,5674,5674,'2016-05-12 18:58:15','2016-05-12 18:58:15','    fix docs word usage for large obj copy\n    \n    Change-Id: I2b6ca3f9277b344ff5b05a85304084a7edcbcb66\n',1,1,'Intel'),(525564,869,869,'2016-04-15 16:18:08','2016-04-14 20:01:38','    Fix download resumption after getting no data.\n    \n    When the proxy is handling an object GET response and an object server\n    fails to send data in a timely fashion, the proxy can pick up where it\n    left off with another object server; other than a pause in the\n    download, the client doesn\'t even know anything happened.\n    \n    However, if the proxy received the GET response headers but no data,\n    it would resume at the wrong spot. In particular, for an N-byte\n    object, it would ask the second object server for the last N-1 bytes\n    (or equivalently, all but the first byte). For a replicated storage\n    policy, this would result in the client getting an abbreviated\n    download, while for an EC storage policy, the proxy would 500 after\n    trying to decode a fragment set with a bogus fragment in it.\n    \n    This commit fixes the resumption logic to ask for all N bytes of the\n    object from the second object server.\n    \n    Change-Id: Ib9e28c3dceaded1708e7a30844b534566c7a320c\n',29,6,'SwiftStack'),(525566,2470,2470,'2016-04-15 16:40:29','2016-04-15 16:08:26','    Tighten up ResumingGetter.fast_forward\n    \n    When the current range is a \"last N bytes\" request, properly raise\n    HTTPRequestedRangeNotSatisfiable/RangeAlreadyComplete errors.\n    \n    Also, add a couple tests for RangeAlreadyComplete with \"normal\" range\n    requests.\n    \n    Change-Id: Icbfd621e7160747c5dfaf9f189da7d74e45a5347\n',21,7,'SwiftStack'),(525568,161,161,'2016-05-12 08:51:31','2016-03-28 18:21:22','    List system dependencies for running common tests\n    \n    Add an other-requirements.txt file containing a cross-platform list of\n    dependencies needed for running included tox-based tests. Also include a\n    tox environment for convenience calling the bindep[*] utility to list\n    any missing system requirements.\n    \n    Document bindep and other-requirements usage.\n    \n    This change is self-testing.\n    \n    For other-requirements.txt see also\n    http://docs.openstack.org/infra/manual/drivers.html#package-requirements\n    \n    [*] http://docs.openstack.org/infra/bindep/\n    \n    Change-Id: Iea6f5fecba3b7cb9f6dac7029c0f17fc31fc0e3c\n',30,0,'SUSE'),(525570,7683,7683,'2016-04-11 21:54:32','2016-02-22 18:03:48','    Fix bug expirer unexpectedly deletes object created after x-delete-at\n    \n    As reported at bug/1546067, expirer might accidentally deletes an object\n    which is created after x-delete-at timestamp. This is because expirer\n    sends a request with \"X-Timestamp: <current_timestamp>\" and tombstone\n    is named as <requested_x_timestamp>.ts so if object creation time is\n    between x-delete-at and expirer\'s DELETE request x-timestamp, the object\n    might be hidden by tombstone.\n    \n    This possibility can be simply removed if the value of x-timestamp which\n    an expirer sends is the same timestamp as x-delete-at of an actual object.\n    Namely, expirer pretends to delete an object at the time an user really\n    wants to delete it.\n    \n    Change-Id: I53e343f4e73b0b1c4ced9a3bc054541473d26cf8\n    Closes-Bug: #1546067\n',52,1,'NTT'),(525572,4094,4094,'2016-05-12 15:36:17','2016-05-12 14:57:56','    Put back missing sysmeta unit tests\n    \n    We lost some unit tests from test_sysmeta.py in [1].\n    This patch restores them. Since the proxy no longer\n    implements post-as-copy or COPY then we need to plumb\n    in a copy middleware to the test app in test_sysmeta.\n    \n    It is a little odd perhaps to have these tests under\n    test/unit/proxy but the alternative is to duplicate\n    the test setup and base test code that already exists\n    in test_sysmeta.py into test_copy.py.\n    \n    [1] commit 46d61a4dcd9a5d9157625c06d6fe7d916e80c3d2\n        (server side copy middleware)\n    \n    Change-Id: Iec02387ccbddbe3841a417880389c707cd5c0346\n',103,6,'HPE'),(525574,5599,869,'2016-05-13 04:13:58','2016-05-04 12:02:07','    Skip SLO-reconciling probe test when SLO is off\n    \n    The probe test in question tries to make a manifest referencing\n    unavailable objects and expects that to fail with a 400. If the SLO\n    middleware is enabled, then it checks the segments, can\'t find some,\n    and returns the 400. If it\'s disabled, the PUT succeeds and makes an\n    object whose contents are some JSON blob. In the latter case, the\n    probe test would fail because it expected a real SLO manifest but\n    didn\'t find one.\n    \n    Now we skip the remainder of the test when we detect that SLO is not\n    enabled.\n    \n    Change-Id: I3e7e8e98107608e675efc24156e703bc167458bb\n',17,8,'SwiftStack'),(526226,5599,5599,'2016-05-12 18:57:31','2016-05-12 18:57:31','    Import BrainSpliter directly in expirer probe\n    \n    Change-Id: Ib3cfe38d1b17c09c7248b5cbcfe4e2eadff7acd9\n',1,1,'NTT'),(526228,869,869,'2016-05-12 08:46:48','2016-04-22 14:55:35','    Clean up fallocate tests a little\n    \n    Change-Id: I01f1ad8ef0f8910718fd2fb30c9e8285358baf84\n',68,65,'SwiftStack'),(527095,869,869,'2016-05-13 10:36:49','2016-01-21 13:19:30','    Make info caching work across subrequests\n    \n    Previously, if you called get_account_info, get_container_info, or\n    get_object_info, then the results of that call would be cached in the\n    WSGI environment as top-level keys. This is okay, except that if you,\n    in middleware, copy the WSGI environment and then make a subrequest\n    using the copy, information retrieved in the subrequest is cached\n    only in the copy and not in the original. This can mean lots of extra\n    trips to memcache for, say, SLO validation where the segments are in\n    another container; the object HEAD ends up getting container info for\n    the segment container, but then the next object HEAD gets it again.\n    \n    This commit moves the cache for get_*_info into a dictionary at\n    environ[\'swift.infocache\']; this way, you can shallow-copy the request\n    environment and still get the benefits from the cache.\n    \n    Change-Id: I3481b38b41c33cd1e39e19baab56193c5f9bf6ac\n',284,193,'SwiftStack'),(527097,869,869,'2016-05-13 10:40:56','2016-02-11 15:51:45','    Fix up get_account_info and get_container_info\n    \n    get_account_info used to work like this:\n    \n      * make an account HEAD request\n    \n      * ignore the response\n    \n      * get the account info by digging around in the request environment,\n        where it had been deposited by elves or something\n    \n    Not actually elves, but the proxy\'s GETorHEAD_base method would take\n    the HEAD response and cache it in the response environment, which was\n    the same object as the request environment, thus enabling\n    get_account_info to find it.\n    \n    This was extraordinarily brittle. If a WSGI middleware were to\n    shallow-copy the request environment, then any middlewares to its left\n    could not use get_account_info, as the left middleware\'s request\n    environment would no longer be identical to the response environment\n    down in GETorHEAD_base.\n    \n    Now, get_account_info works like this:\n    \n      * make an account HEAD request.\n    \n      * if the account info is in the request environment, return it. This\n        is an optimization to avoid a double-set in memcached.\n    \n      * else, compute the account info from the response headers, store it\n        in caches, and return it.\n    \n    This is much easier to think about; get_account_info can get and cache\n    account info all on its own; the cache check and cache set are right\n    next to each other.\n    \n    All the above is true for get_container_info as well.\n    \n    get_info() is still around, but it\'s just a shim. It was trying to\n    unify get_account_info and get_container_info to exploit the\n    commonalities, but the number of times that \"if container:\" showed up\n    in get_info and its helpers really indicated that something was\n    wrong. I\'d rather have two functions with some duplication than one\n    function with no duplication but a bunch of \"if container:\" branches.\n    \n    Other things of note:\n    \n      * a HEAD request to a deleted account returns 410, but\n        get_account_info would return 404 since the 410 came from the\n        account controller *after* GETorHEAD_base ran. Now\n        get_account_info returns 410 as well.\n    \n      * cache validity period (recheck_account_existence and\n        recheck_container_existence) is now communicated to\n        get_account_info via an X-Backend header. This way,\n        get_account_info doesn\'t need a reference to the\n        swift.proxy.server.Application object.\n    \n      * both logged swift_source values are now correct for\n        get_container_info calls; before, on a cold cache,\n        get_container_info would call get_account_info but not pass along\n        swift_source, resulting in get_account_info logging \"GET_INFO\" as\n        the source. Amusingly, there was a unit test asserting this bogus\n        behavior.\n    \n      * callers that modify the return value of get_account_info or of\n        get_container_info don\'t modify what\'s stored in swift.infocache.\n    \n      * get_account_info on an account that *can* be autocreated but has\n        not been will return a 200, same as a HEAD request. The old\n        behavior was a 404 from get_account_info but a 200 from\n        HEAD. Callers can tell the difference by looking at\n        info[\'account_really_exists\'] if they need to know the difference\n        (there is one call site that needs to know, in container\n        PUT). Note: this is for all accounts when the proxy\'s\n        \"account_autocreate\" setting is on.\n    \n    Change-Id: I5167714025ec7237f7e6dd4759c2c6eb959b3fca\n',429,364,'SwiftStack'),(527099,8023,8023,'2016-05-14 14:31:32','2016-05-13 16:43:50','    Bypass Account Mgmt Functional Cases When Disabled\n    \n    The testPUT case is failing when keystone was enabled and\n    allow_account_management is set to True.   There were a few issues\n    needing addressed.\n    \n    First the case was renamed to call out what it was actually doing which\n    is verifying an error scenario for which a PUT on a storage account was\n    not allowed.\n    \n    Second the case was running even when allow_account_management is\n    enabled, which is incorrect.   It \"accidently\" works with TempAuth\n    because it requires a reseller permission, so the Keystone failure here\n    has more to do with not requiring a reseller permission to do a PUT on a\n    storage account for which a user has an operator role on.\n    \n    The common sense fix here is to not execute this test case when\n    allow_account_management is enabled.\n    \n    Change-Id: Id29f5ca48f92cd139535be7064107b8a61b02856\n',3,1,'IBM'),(527101,4094,4094,'2016-05-13 10:14:44','2016-05-12 13:59:13','    crypto - put update_content_type back into obj.py\n    \n    In [1] we pulled update_content_type out of obj.py into\n    request_helpers.py so that we could use it in the encrypter\n    to set a content_type before encrypting it.\n    \n    In [2] we removed content_type encryption, so no longer use\n    update_content_type in the encrypter, but we did not put the\n    function back into obj.py.\n    \n    We should move update_content_type back to obj.py to remove\n    the unnecessary change to master.\n    \n    [1] Change-Id: I47f73e4792185cf69afc0b7f82dca5261ad0d6f8\n    [2] Change-Id: Id0a962f499074c14ff9cae53c1a45a9ea30abc3c\n    \n    Change-Id: Iaa62b0e189eddf108812ff7b3b7ececdceb7ba82\n',15,27,'HPE'),(527102,4094,5650,'2016-05-17 09:22:57','2016-05-14 23:19:42','    Add Encryption to the default pipeline\n    \n    This will cause encryption to be \"on\" by default,\n    and thus will be exercised in the gate tests.\n    It is only intended to be included by default while\n    there is active development on the feature/crypto branch.\n    \n    Also increases the MAX_HEADER_COUNT in constraints.py\n    to allow for crypto adding extra headers.\n    \n    Do not merge this change to the master branch.\n    \n    Change-Id: I82f874c4d8c2a724c219c804cf456ccc112df3ba\n',11,9,'IBM'),(527104,4094,4086,'2016-05-17 17:21:00','2016-05-11 09:33:29','    crypto: Remove BYOK support\n    \n    BYOK support has been deferred to next phase\n    \n    Change-Id: I43d1c040e9f03df4c60f118287f5b3374983e7bd\n',11,164,'Intel'),(527981,443,443,'2016-05-15 21:27:46','2016-05-15 21:27:46','    Remove the invalid project link\n    \n    swiftsync project is no longer maintained and so\n    is removed from the list\n    \n    Change-Id: Ieae67c728da16e5516babd33d2e5937b14738d6a\n    Closes-Bug: #1581975\n',0,1,'independent'),(528569,4094,4094,'2016-05-13 18:06:41','2016-05-06 17:29:42','    crypto - wrap random body key\n    \n    use a random key to encrypt the object body, wrap that body key\n    with keymaster provided object key and persist wrapped key in\n    object sysmeta header for crypto meta.\n    \n    Wrap using AES CTR mode with IV, not aes_wrap_key algorithm,\n    for performance.\n    \n    Change-Id: I4c2ba12dd35bb3f4951dce65bc7f488a332e0c18\n',368,143,'HPE'),(528571,2470,2470,'2016-05-16 18:43:32','2016-04-27 13:31:11','    Use the same key for memcache and env[\'swift.infocache\']\n    \n    When we were caching directly to the WSGI environment, it made sense to\n    have different keys for the different caches. Now that we have a\n    separate data structure for the per-request cache, however, we ought to\n    be consistent.\n    \n    Change-Id: I199cba6e5fc9ab4205bba369e6a2f34fc5ce22d4\n',182,201,'SwiftStack'),(528573,4339,4339,'2016-05-19 15:56:15','2016-05-19 15:56:15','    Fix locale directory in MANIFEST.in\n    \n    Actual location is swift/locale, not locale.\n    \n    This makes build to not include .mo files if they have been created\n    previously with compile_catalog.\n    \n    Change-Id: I907e9bd6dde57cb9ed718656e56a313e82bad128\n    Closes-Bug: 1583618\n',1,1,'Red Hat'),(528575,4094,5599,'2016-05-19 17:35:21','2016-05-12 23:57:49','    Fix probe failure and small things\n    \n    This is follow up for https://review.openstack.org/#/c/283351/.\n    \n    Probe fix:\n    - The probe in the patch now fails (sometimes success luckily)\n      because inbound X-Timestamp is deprecated at the change,\n      f581fccf71034818d19062593eeb52a4347bb174, so we can not use\n      X-Timestamp to make an object with arbitrary timestamp anymore\n      from outside of Swift. This patch makes the probe to use internal\n      client to put the objects to make the inconsistent situation.\n    \n    Small things:\n    \n    - Enable expirer split brain test even if we have just one policy.\n    - FAIL rather than ERROR if the object was expired incorrectly\n    - ObjectBrainSplitter now uses the policy set at instance variable in\n      default instead of random choice of ENABLED_POLICIES.\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    \n    Change-Id: I757dbb0f1906932ef5d508b48b4120f2794b3d07\n',87,27,'NTT'),(528577,832,832,'2016-05-19 11:56:29','2016-05-17 10:48:25','    disable_fallocate also disables fallocate_reserve\n    \n    Currently when disable_fallocate is true it disables calling the\n    fallocate syscall, but it doesn\'t disable fallocate_reserve. This\n    patch fixes this.\n    \n    This problem has caused functional tests to fail in our SAIOs, since\n    SAIOs have disable_fallocate set but the fallocate_reserve space free\n    checking was still being run creating 507 responses. This is thanks\n    to the change in fallocate_reserve default changing from 0 to 1%.\n    \n    Because fallocate_reserve and disable_fallocate causes SAIO functional\n    tests to fail a section called \'Known Issues\' has been added to the\n    SAIO developer documentation which includes a warning about\n    using fallocate_reserve on SAIOs.\n    \n    Change-Id: I727bfb0861ea26fe2f16ad55f4d36ae088864d8f\n',41,11,'Rackspace'),(529731,6350,4094,'2016-05-20 18:32:32','2016-05-16 10:41:21','    crypto - Don\'t encrypt zero size object etags\n    \n    There is no point encrypting the etag of a zero sized object since\n    the size metadata and the on disk file size reveal the content.\n    Not doing so avoids the overhead of wrapping a body key, and also\n    avoids having ciphertext (the encrypted etag) on disk for a known\n    plaintext (the etag of an empty string).\n    \n    Change-Id: Idfd0a9a2a7e4a17f8b070f4a1e209c36b503494c\n',63,2,'HPE'),(529733,2470,2470,'2016-05-23 18:46:29','2016-05-19 18:55:40','    Turn on H703, so our translators don\'t punch us\n    \n    Change-Id: I4ce3068f79563e4d4296c6e1078bc12f0cf84c96\n    Related-Bug: 1559431\n',45,33,'SwiftStack'),(529734,8059,8059,'2016-05-21 03:54:33','2016-05-21 03:54:33','    Improve linting for third-party middleware\n    \n    Currently any third-party CI doing linting of their own middlewares\n    against the Swift codebase don\'t do so hot -- if they use swob\'s\n    Response.status_int in any way, the linter will fail because it only\n    gets set when status does.\n    \n    This patch defaults it to None in the class definition, seeing as\n    a linter can\'t truly know that status_int will only be created lazily\n    at runtime, and further, that its existence is tied to setting\n    Response.status (via __init__ or setting the property directly).\n    \n    I couldn\'t actually find a code path within Swift where we could end\n    up with a None when we access it; at init time, we default the status\n    code to 200, and there don\'t seem to be any code paths that init with\n    a None status code. (You might try, but you can\'t do that even today.)\n    As a result, this seems to have no ill effect on anything, but is a\n    huge help for linters.\n    \n    This doesn\'t seem to break any unit tests, func tests via v1, v2, and\n    v3 auth, nor tempest tests via v2 or v3.\n    \n    Change-Id: Id28fb56bc7133b9eb59df7989a71b892fd919643\n',1,0,'IBM'),(530691,2470,2470,'2016-05-23 21:38:45','2016-04-29 12:12:00','    Allow concurrent bulk deletes\n    \n    Before, server-side deletes of static large objects could take a long\n    time to complete since the proxy would wait for a response to each\n    segment DELETE before starting the next DELETE request.\n    \n    Now, operators can configure a concurrency factor for the slo and bulk\n    middlewares to allow up to N concurrent DELETE requests. By default, two\n    DELETE requests will be allowed at a time.\n    \n    Note that objects and containers are now deleted in separate passes, to\n    reduce the likelihood of 409 Conflict responses when deleting\n    containers.\n    \n    Upgrade Consideration\n    =====================\n    If operators have enabled the bulk or slo middlewares and would like to\n    preserve the prior (single-threaded) DELETE behavior, they must add the\n    following line to their [filter:slo] and [filter:bulk] proxy config\n    sections:\n    \n       delete_concurrency = 1\n    \n    This may be done prior to upgrading Swift.\n    \n    UpgradeImpact\n    Closes-Bug: 1524454\n    Change-Id: I128374d74a4cef7a479b221fd15eec785cc4694a\n',247,69,'SwiftStack'),(530693,2470,2470,'2016-05-24 13:38:43','2016-05-24 13:37:58','    Add links to mitaka install guides\n    \n    Change-Id: I62331923751c521daded4468b5cc5f03655226bc\n',7,0,'SwiftStack'),(530695,832,832,'2016-05-25 14:35:54','2016-05-25 14:35:54','    Add ring-builder dispersion command to admin guide\n    \n    This change updates the admin guide to point out the dispersion command\n    in swift-ring-builder and mentions the dispersion verbose table to make\n    it more obvious to operators.\n    \n    Change-Id: I72b4c8b2d718e6063de0fdabbaf4f2b73694e0a4\n',21,0,'Rackspace'),(530697,4094,4094,'2016-05-23 17:25:05','2016-05-19 19:58:56','    Make SLO manifest copies retain correct content-type\n    \n    When copying an SLO manifest with multipart-manifest=get the actual\n    manifest content-type should get copied to the destination, rather\n    than the application/json value that is synthesised by SLO in a GET\n    response. That way the result of a HEAD on the copied manifest is the\n    same as a HEAD to the source, and the container listings for the two\n    are consistent.\n    \n    This patch also un-skips a functional test and adds functional tests\n    that verify this patch and also verify that etags and size also get\n    correctly copied and updated in destination container (bug #1260446).\n    \n    Closes-Bug: #1260446\n    Closes-Bug: #1583756\n    \n    Change-Id: Ie7fa82f70b3ec3ef568f5355c69f6bce460ba25d\n',148,28,'HPE'),(530699,4094,4094,'2016-05-23 17:26:28','2016-05-23 15:20:06','    Fix setup of manifest responses in SLO tests\n    \n    The swift_bytes param is removed from the content-type\n    in the proxy object controller, so the SLO unit tests should\n    not be registering GET responses with FakeSwift that have\n    swift_bytes appended to the content-type.\n    \n    Nor should submanifest segment dicts have swift_bytes appended to\n    their content-type values.\n    \n    Also adds a test for the object controller and container server\n    handling of SLO swift_bytes.\n    \n    Change-Id: Icf9bd87eee25002c8d9728b16e60c8347060f320\n',116,19,'HPE'),(530701,1111,1111,'2016-05-25 09:53:33','2016-05-25 09:53:31','    Add dispersion --verbose example to admin guide\n    \n    Change-Id: I5f9cacedde2a329332ccf744800b6f2453e8b28e\n',34,0,'Red Hat'),(530703,4075,4075,'2016-05-25 11:21:25','2016-05-25 11:21:25','    Clarify overload best practices in admin guide\n    \n    Change-Id: Ib7c08bdeab6374771bb8e2b05053e7e16973524d\n',2,1,'Rackspace'),(530705,4094,4094,'2016-05-25 10:15:51','2016-05-18 15:58:25','    crypto - test varying proxy pipeline configs\n    \n    Adds unit tests to verify behaviour when crypto\n    middleware is added/removed from proxy server pipeline.\n    \n    Re-uses test infrastructure from unit/proxy/test_server.py\n    by moving it to unit/helpers.py\n    \n    Change-Id: I8c83ffad57f813274431b5234e37e5ee825f621d\n',492,220,'HPE'),(530707,4094,4086,'2016-05-25 09:29:23','2016-05-16 15:17:13','    crypto - Add \"disable_encryption\" config option\n    \n    On PUT and POST do not perform encryption when \"disable_encryption=true\"\n    config value is set to True or the equivalent.\n    \n    Change-Id: Iac2232003249b8d8d8ce331be9210f1923f0fe1c\n',46,0,'Intel'),(530709,4094,4094,'2016-05-25 10:31:13','2016-05-10 20:17:06','    crypto - don\'t break conditional GETs on unencrypted objects\n    \n    We handle conditional GETs in the encrypter by (a) encrypting the\n    If-(None-)Match etag values and adding them to the list of etags\n    to match and (b) setting X-Backend-Etag-Is-At to point to the\n    X-Object-Sysmeta-Crypto-Etag value.\n    \n    Unfortunately if the target object pre-existed encryption being\n    enabled, or was PUT while crypto was temporarily not in a proxy\n    pipeline, then there will be no X-Object-Sysmeta-Crypto-Etag in\n    the object sysmeta.\n    \n    That\'s ok for a replication policy since the object server logic\n    falls back to use the Etag metadata which is the correct value to\n    match against. But for an EC policy the correct value to match\n    against in this situation is X-Object-Sysmeta-EC-Etag, which is\n    not found because the encrypter set X-Backend-Etag-Is-At to point\n    to X-Object-Sysmeta-Crypto-Etag.\n    \n    This patch fixes that by making X-Backend-Etag-Is-At be a list of\n    possible alternate etag locations, to which the encrypter and then\n    the proxy EC PUT path can append there respective alternate locations.\n    Then the object server inspects each in turn until a value is found\n    to match against.\n    \n    So in this case we would have X-Backend-Etag-Is-At equal to\n    \"X-Object-Sysmeta-Crypto-Etag,X-Object-Sysmeta-Ec-Etag\" and for\n    the unencrypted EC object the object server would find the alternate\n    etag value at X-Object-Sysmeta-Ec-Etag.\n    \n    Change-Id: I46ba5b1074a62e57d261e010e1c9df0393ee9609\n',135,20,'HPE'),(530711,4094,4086,'2016-05-25 16:16:44','2016-05-12 12:05:59','    change etag (currently encypted with object key) to use container key\n    \n    We still have different iv values for container listing etag and\n    Object Sysmeta etag\n    \n    Change-Id: I24486c583ca6994bdee5667eb1275b1db650e7d2\n',26,15,'Intel'),(531660,2470,2470,'2016-05-25 15:04:26','2016-05-20 22:03:58','    Always encrypt etags for container listings\n    \n    ...even if the etag was supplied by some middleware to the left of us.\n    \n    As a side effect, stop passing req_headers directly to the footers\n    callback in FakeSwift; that isn\'t representative of how it works in the\n    object controller.\n    \n    Change-Id: I9b1ab3d51882d22a12089cb550af6f7108eddf62\n',117,25,'SwiftStack'),(531662,4094,5650,'2016-05-27 12:38:29','2016-05-26 22:32:54','    crypto - Don\'t use \'meta\' for crypto-meta dict\n    \n    Change from using \'meta\' for the crypto-meta dict\n    to swift_meta.\n    \n    Change-Id: Ib0613825d9a19873da3b316b9297838b57094ba1\n',19,15,'IBM'),(531663,5596,5596,'2016-05-03 15:58:47','2016-05-03 15:58:10','    go: conf.d support + some refactoring\n    \n    Refactor how configs are loaded and passed to daemons.\n    \n    Add conf.d support. So you can have an /etc/swift/object-server.conf.d\n    or /etc/swift/object-server/1.conf.d, and any .conf files under it\n    will be loaded as one config.\n    \n    conf.d files are combined in filename lexigraphical order, with any\n    sections in later files replace existing section entries.\n    \n    Change-Id: I78d7e5449cd0b62df9dfdb25616a2d4c91159f8c\n',380,241,'Rackspace'),(531665,5248,5248,'2016-05-13 20:40:30','2016-04-12 13:33:33','    go: have replicateDevice go routine loop per device\n    \n    This will prevent a slow disk from slowing down replication\n    on all the rest of the server.\n    \n    This also changes the meaning of the replicator recon report. Since\n    we won\'t be waiting for the replicator to complete the whole\n    server the object_replication_time will be the average of\n    the replication time of all the devices. It won\'t be set until\n    there has been a complete pass on all the devices. This is a\n    little strange but I\'m leaving it there for some backwards\n    compatibility.\n    \n    The previous whole device replication times were a little misleading if\n    most the drives are done and it is still running on a few slow drives.\n    The new model makes the replication stats per drive and instead of\n    reporting them in recon it has a new API call to the replicator\'s\n    http server at /progress .  I could also add these per-drive stats\n    into recon but i will leave that as a further patch if somebody\n    wants it. I\'m going to try to use the /progress call to get what I need.\n    \n    The object replicator itself will monitor the progress of the\n    replicators and restart the go routines if one of them has not\n    reported for 4 hours.\n    \n    Change-Id: Ifa5defbe684329979a533b558a57c38ac029ada1\n',397,160,'Rackspace'),(531667,5248,5248,'2016-05-14 01:23:36','2016-05-14 01:23:36','    go: make listObjFiles return files as it finds them\n    \n    Change-Id: Ie24f13b25429560a36e821864e34fa110494b72a\n',41,23,'Rackspace'),(532372,4086,4086,'2016-05-30 19:50:08','2016-05-27 14:11:30','    crypto: use derived iv for container listing etag\n    \n    Change-Id: Ia9f7d1655ef1190cf176e714445e83ef2ebc9426\n',8,7,'Intel'),(532374,4094,4086,'2016-05-31 11:36:28','2016-05-25 21:44:27','    crypto: Verify on-disk data\n    \n    Tests that on-disk data, metadata and etag values are encrypted\n    \n    Change-Id: I66ed5522f38f4219671be42f0607fda5cec0b8fd\n',71,104,'Intel'),(533485,8059,8059,'2016-05-28 02:23:38','2016-05-28 02:23:10','    go: Add tons of SAIO+Hummingbird details to readme\n    \n    I updated this with the results of my own experiences this evening.\n    Would be great if someone could follow this and help keep me honest\n    to make sure I\'ve not missed something.\n    \n    Change-Id: Id70759f7c41471fa67c8834ed47749216845efae\n',147,27,'IBM'),(533486,229,229,'2016-05-31 14:37:31','2016-05-31 14:26:33','    small tweaks to the golang readme\n    \n    Change-Id: Ib0d55f00133de753c5ca4d549fd6b8b763a4e8b3\n',4,4,'SwiftStack'),(533487,591,591,'2016-05-31 16:25:50','2016-05-31 16:25:50','    Fixed typo\n    \n    Change-Id: I7a35c0076360c7a23cf405189828d3c252ec6708\n',1,1,'Seznam.cz'),(533490,229,229,'2016-05-31 11:27:43','2016-05-31 11:27:43','    add explicit HA info to the deployment guide\n    \n    Change-Id: I7614952c523080fe50eaf839b54a8064439817ce\n',5,0,'SwiftStack'),(533492,2470,2470,'2016-05-26 13:42:12','2016-05-26 13:42:12','    Don\'t include holes when reporting how many devices a ring has\n    \n    Change-Id: I9b933051aec009c6108ee9d2dd5c0978772bf699\n',1,1,'SwiftStack'),(533494,4094,4094,'2016-05-17 15:00:21','2016-05-17 14:22:05','    Send correct size in POST async update for EC object\n    \n    When a PUT request is made to an EC object the resulting container\n    update must include the override values for the actual object\n    etag and size, as opposed to the fragment etag and size. When a POST\n    request is made the same override values should be included in the\n    container update, but currently the update includes the incorrect EC\n    fragment size (but the correct body etag).\n    \n    This is ok so long as the update for the object PUT request arrives at\n    the container server first (whether by direct update or replication)\n    because the etag and size values in an update due to an object POST\n    will not have a newer timestamp that the PUT and will therefore be\n    ignored at the container server.\n    \n    However, if the update due to the object PUT request has not arrived\n    at the container server when the update due to the object POST\n    arrives, then the etag and incorrect size sent with the POST update\n    will be recorded in the container server. If the update due to the PUT\n    subsequently arrives it will not fix this error because the timestamp\n    of its etag and size values is not greater than that of the already\n    recorded values.\n    \n    Fortunately the correct object body size is persisted with the object\n    as X-Backend-Container-Update-Override-Size sysmeta so this patch\n    fixes the container update due to a POST to use that value instead of\n    the Content-Length metadata.\n    \n    Closes-Bug: #1582723\n    Change-Id: Ide7c9c59eb41aa09eaced2acfd0700f882c6eab1\n',176,67,'HPE'),(533496,8240,8240,'2016-06-01 17:29:10','2016-06-01 17:29:10','    Adding sorting_method to admin_guide\n    \n    Change-Id: I1162f154e3a577a95f9f5ea0e0f723b7df5a4baf\n',3,1,'independent'),(533498,8241,8241,'2016-06-01 15:35:47','2016-04-27 22:17:01','    Fix swift-dispersion in multi-region setups\n    \n    If you have 2 swift regions served by the same keystone,\n    then the client cannot get the correct URL for the swift endpoint\n    without specifying a region_name.\n    \n    Closes-Bug: 1587088\n    Change-Id: Iaab883386e125c3ca6b9554389e63df17267a135\n',10,0,'Cloudwatt'),(533500,441,441,'2016-06-02 06:41:44','2016-06-02 06:41:44','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Iaf727e51ab444e8cb6199fda45595fc69497ea2d\n',57,1961,NULL),(533501,4094,4094,'2016-06-01 11:45:40','2016-05-25 21:21:33','    crypto - use random iv when wrapping body key\n    \n    Change-Id: Ia32a7b1cbafd5f593d0609310e4a38de6c52f220\n',90,62,'HPE'),(533502,4094,4094,'2016-06-01 12:37:03','2016-05-31 13:59:57','    crypto - add test to verify ondisk container listing\n    \n    ...also make versions of the test for replication and EC policies.\n    \n    Change-Id: Icb7c52b68001aec088609c4be49c3c28b0ecc4a0\n',57,7,'HPE'),(533504,5650,5650,'2016-06-01 11:10:42','2016-05-31 21:57:24','    crypto - remove version from derived iv_base\n    \n    The version part is NOT included in the hash path for an object,\n    and should similarly not be included in the path used for a\n    derived IV, so that if/when the API version changes,\n    the derived IV would not change.\n    \n    Change-Id: Idc527f9f056adb5b3c8c01135bb993b05b2c242b\n',17,9,'IBM'),(533508,4094,4094,'2016-06-02 08:55:57','2016-06-01 16:12:44','    crypto combine crypto.py with crypto_utils.py\n    \n    ...and move crypto_utils.py to swift/common/middleware\n    \n    Also delete unused method and remove some unnecessary\n    mocking from test_decrypter.py\n    \n    Change-Id: Ia4a2699db53eb4753c7f73db18fc86c84535b344\n',561,602,'HPE'),(533509,4094,4094,'2016-06-02 09:51:09','2016-06-02 09:25:59','    crypto - add tests for override headers\n    \n    adds a test for other middlewares setting override headers,\n    verifying that container listing is correctly updated.\n    \n    Drive-by fix to a doc string, and adding etag to test PUT requests.\n    \n    Change-Id: Id096bd5bece339e2bcd32f4c545fb3aa7aa2b659\n',61,4,'HPE'),(534550,229,229,'2016-06-02 08:23:53','2016-06-02 08:22:24','    added func-in-process-fast-post to mirror func\n    \n    This is needed to define the env for the newer-than-liberty\n    gate job to pass for backports.\n    \n    Change-Id: I7fd28af35757359ed4d79dc562bd3cc725f03360\n',4,0,'SwiftStack'),(534551,4094,4094,'2016-06-02 13:10:48','2016-05-18 17:30:06','    crypto - remove default root secret\n    \n    Make it a requirement that root_encryption_secret is\n    a minimum of 44 base64 encoded characters i.e. a minimum\n    of 32 bytes encoded to base 64.\n    \n    This patch still has a default root_secret in the proxy\n    config.  This is just as temporary as the proxy config\n    having encryption middleware in the pipeline.  Without this,\n    functests would fail since devstack has no root secret defined.\n    \n    Change-Id: I82d183f0b89bfd730578bb64623928bcbfaf657c\n',83,40,'HPE'),(534552,4094,4094,'2016-05-19 15:00:02','2016-05-16 16:41:01','    crypto - make some probe tests compatible with crypto\n    \n    Tests in these modules:\n    \n      test_empty_device_handoff.py\n      test_object_failures.py\n      test_object_handoff.py\n    \n    previously failed when the crypto middlewares were enabled in the\n    proxy pipeline. This was because they make assertions about the state\n    of the on disk object data and etag value based on making direct GETs\n    to the object servers using direct_client. When crypto is enabled the\n    on disk content is unknown and not equal to the PUT object plaintext,\n    so these assertions fail.\n    \n    We can avoid the failures without needing to require encryption\n    to be disabled by comparing values of the on disk data \"before\"\n    and \"after\" the test operations rather than comparing \"after\"\n    values to an absolute value.\n    \n    Tests in test_container_merge_policy_index.py passed with crypto\n    middleware but were using an internal client to put and get objects.\n    This patch changes those tests to use an external client to put/get\n    objects so that encryption is used (if installed) and also adds\n    assertions to check that objects moved by the container reconciler\n    are not corrupted.\n    \n    Probe tests in test_container_sync.py may still fail due to the\n    container sync not having the crypto middlewares configured in\n    its internal client.\n    \n    Change-Id: I640c7e738c8a553030d9ed58a953dd3eead0aa07\n',98,56,'HPE'),(534554,4094,4094,'2016-06-03 17:40:17','2016-05-01 10:31:38','    crypto - add overview doc\n    \n    Change-Id: Ia249583f545d7c47eb1c7236817c673e94b092ed\n',374,2,'HPE'),(534556,5599,5599,'2016-06-01 23:53:35','2016-06-01 23:53:35','    pids in probe is no longer used\n    \n    Change-Id: I1fd76004257a8c05ce8bb1f3ca0e45000509f833\n',39,63,'NTT'),(534558,6634,5676,'2016-06-02 18:03:51','2016-03-17 09:40:23','    Add content-disposition header to tempurl request\n    \n    Added content-disposition header to HEAD tempurl request.\n    As per HTTP docs[1] HEAD response must be identical to GET\n    except return message-body response.\n    \n    [1]https://tools.ietf.org/html/rfc2616#section-9.4\n    \n    Change-Id: Ie60a6fb632613055da5279db5b128ce5ee5172ae\n    Closes-Bug:#1539805\n',6,3,'Intel'),(534560,5254,5254,'2016-06-02 23:03:26','2016-06-02 23:02:55','    update pyeclib and liberasurecode links\n    \n    Change-Id: Ic6d04083618362778363fea1570caaa865e44557\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',6,6,'Red Hat'),(534561,2470,2470,'2016-06-02 16:49:32','2016-06-02 16:49:32','    Remove unused (but defaulted) args\n    \n    Every time we call start_server, check is True.\n    Every time we call check_server, we use the default timeout.\n    \n    Change-Id: Id38182f15bcbfbb145b57cee179a8fd47ec8e2b7\n',6,8,'SwiftStack'),(534563,441,441,'2016-06-03 06:49:09','2016-06-03 06:49:09','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I0e061ecba6dc215d0d3b12aac14b8d4b08fbc682\n',68,3,NULL),(534565,2470,2470,'2016-03-24 15:35:25','2016-02-12 10:15:31','    Add Expires header for successful GETs using tempurls\n    \n    This allows caches to actually use the expiration time that\'s already\n    embedded in the URL.\n    \n    From RFC 2616 [1]:\n    \n    > [S]ince some applications have traditionally used GETs and HEADs with\n    > query URLs (those containing a \"?\" in the rel_path part) to perform\n    > operations with significant side effects, caches MUST NOT treat\n    > responses to such URIs as fresh unless the server provides an explicit\n    > expiration time.\n    \n    However, RFC 7234 notes that this hasn\'t played out in practice [2]:\n    \n    > Note: Section 13.9 of [RFC2616] prohibited caches from calculating\n    > heuristic freshness for URIs with query components (i.e., those\n    > containing \'?\').  In practice, this has not been widely implemented.\n    > Therefore, origin servers are encouraged to send explicit directives\n    > (e.g., Cache-Control: no-cache) if they wish to preclude caching.\n    \n    [1] http://tools.ietf.org/html/rfc2616#section-13.9\n    [2] http://tools.ietf.org/html/rfc7234#section-4.2.2\n    \n    Change-Id: Ie8f26b97a124ea220a20800e35e040e4463d82bc\n    Closes-Bug: 1502159\n',30,7,'SwiftStack'),(535321,4094,4094,'2016-06-03 11:20:23','2016-05-18 15:35:57','    crypto - stop using key id to derive GET path keys\n    \n    Currently the key id saved in X-Object-Sysmeta-Crypto-Id is only set\n    during a PUT request. The sysmeta cannot be set by a POST request. The\n    key id value is the path used to derive keys and is currently used by\n    the keymaster to determine what keys should be for decrypter to use in\n    the GET path. So if we have an object that was PUT without crypto and\n    then POSTed to with crypto, we have no X-Object-Sysmeta-Crypto-Id\n    value to derive keys from and cannot therefore decrypt the POSTed\n    metadata.\n    \n    We do not actually need to use X-Object-Sysmeta-Crypto-Id to derive\n    keys - objects do not change location. So in this patch we stop using\n    it for key derivation in the GET and HEAD paths and instead just use\n    the path of the GET/HEAD request.\n    \n    The key id may prove useful in the future if for example an object\n    were ever relocated, or a keymaster chose a different key with\n    different id for a POST vs the original PUT. If that were to happen\n    then we could use the persisted key id to inform the keymaster as to\n    which key is required for decryption.\n    \n    For such future-proofing this patch changes the location for\n    persisting the key id to the crypto_meta dicts for each encrypted\n    item, and no longer uses the X-Object-Sysmeta-Crypto-Id header. That\n    way, if ever a different key id were used by a keymaster for a POST vs a\n    PUT then we\'d have the right value stored with the metadata\n    crypto-meta vs the data crypto-meta.\n    \n    To enable that, the keymaster now includes the key id in the dict of\n    results returned from fetch_crypto_keys, so that the encrypter can\n    embed the key id in crypto meta. The key id is also changed to be a\n    dict that contains the key derivation path and also a version number\n    for the keymaster. This is purely for future-proofing - we now persist\n    sufficient information in crypto-meta to determine which keymaster\n    version was used and how it derived the keys.\n    \n    This changes also allows some simplification of the keymaster, and now\n    the keymaster only calculates keys when they are asked for by a call\n    to fetch_keys.\n    \n    In addition, the keymaster will never set the \'swift.crypto.override\'\n    flag anymore. There are still encrypter and decrypter unit tests to\n    handle the case where somebody uses such a keymaster, but this one\n    will not make use of that flag.\n    \n    Change-Id: Icb368305a15e1bbe32483f2e2bbb98a1441a4dad\n',81,214,'HPE'),(535902,5596,5596,'2016-04-13 01:43:48','2016-04-13 00:59:00','    go: proxy object PUT work\n    \n    Auto detect content-type.\n    Enforce constraints.\n    \n    Change-Id: I572900d3e9d08bb563fe0a7837d1b3c8dd3bf053\n',282,0,'Rackspace'),(535904,591,591,'2016-05-31 17:11:13','2016-05-31 17:00:30','    swift-ring-builder --yes option\n    \n    This option assume a yes response to all questions. It is usefull for\n    scripts.\n    \n    Change-Id: I28ca1a44507e0f1265afd36e6ac1e7c6c176428f\n',38,16,'Seznam.cz'),(536975,4094,4094,'2016-06-07 15:11:22','2016-06-07 15:11:22','    crypto - remove unnecessary changes\n    \n    Removes some changes that are no longer needed but\n    were left over when other code got removed.\n    \n    Change-Id: I17bd5e84b750ef2a7318a3fae098a2fabe585329\n',2,5,'HPE'),(536976,4094,4094,'2016-06-07 18:00:21','2016-06-07 18:00:21','    crypto - remove stale TODOs\n    \n    We do not need to test the contaiher listing etag length before\n    decrypting - if it has crypto-meta it will be decrypted.  The Etag\n    value in a response to a ranged GET should be the Etag of the whole\n    object.\n    \n    Change-Id: Ib713a899b5d65d979d51db36cbca809998e87847\n',0,5,'HPE'),(536978,4094,4094,'2016-06-03 17:15:01','2016-05-24 15:46:18','    crypto - purge crypto sysmeta from responses\n    \n    Remove all crypto related (transient-) sysmeta from responses so that\n    they are not inadvertantly copied to another object. If a COPY is to\n    an unencrypted destination then the source crypto meta would not apply\n    and could result in corrupted data when reading the destination.\n    \n    Also remove container update override headers when copying an object\n    and the source etag is not trusted (e.g. Range copy or large object\n    copy).\n    \n    Drive-by change to stop FakeSwift updating request headers with etag\n    and content-length that were not in the actual PUT request. That\n    change was made earlier on this branch to support tests that have now\n    been deleted.\n    \n    Change-Id: Ib7cf7676a2f62f79b067f93aa1d2cae64c393fe9\n',246,25,'HPE'),(536980,4094,4094,'2016-06-03 11:34:03','2016-06-02 10:03:31','    crypto - refactor footers callback\n    \n    Move some lines in footers_callback. Re-use the\n    already calculated encrypted-plaintext-etag for container\n    update override for efficiency rather than re-calculating,\n    since this is probably the common case.\n    \n    Drive-by fix for some formatting in test_encrypter.\n    \n    Change-Id: I2c881e98577a9f2c826b977f766398c29f63e565\n',39,42,'HPE'),(536982,2470,2470,'2016-06-08 10:55:45','2016-06-08 09:20:08','    Tighten up some sysmeta purging\n    \n    Drop all container-update overrides on COPY, as that seems more\n    consistent than selecting just a couple overrides to drop.\n    \n    Check that all `actual` headers are also `retained_headers` in\n    test_purge_crypto_sysmeta_headers.\n    \n    Check that we really did purge the crypto meta in test_GET_success and\n    test_HEAD_success. GETs were already getting verified over in\n    test_encrypter_decrypter.py, but they would fail in a less-obvious way.\n    \n    Change-Id: I7c17fdc02a9895495a1737d4040e868482bb9e98\n',14,9,'SwiftStack'),(536983,229,229,'2016-06-07 15:11:27','2016-06-01 15:46:32','    AUTHORS/CHANGELOG updates for 2.8.0 release\n    \n    Change-Id: I0dba970b2970139bd9847d1abf74eed1a8a4996c\n',113,1,'SwiftStack'),(536984,7680,7680,'2016-06-07 19:13:34','2016-06-07 19:08:50','    Removed whitespaces from swift-ring-builder manpage\n    \n    Change-Id: I25cf69f8d963ba84df4c59129d72ee39ec341bd3\n',24,24,'Intel'),(536986,2456,2456,'2016-05-16 10:09:33','2016-05-12 15:46:24','    [Docs] Document prevention of disk full scenarios\n    \n    Adds section to detail how to prevent disk full scenarios from\n    occurring.\n    \n    Change-Id: Iafb4a47fa4892f6067252f3a80de87cd76506a40\n',94,4,'Rackspace'),(536988,5596,5596,'2016-06-06 22:13:42','2016-06-06 22:12:09','    go: make sure replicator picks up ring changes\n    \n    Have the replicator check the ring periodically.\n    Start replication for devices that have been added.\n    Cancel replication for devices that have been removed.\n    \n    Change-Id: I3cde45d8f0cb05637ea9c1adc66aff31ed1ddba5\n',57,5,'Rackspace'),(536991,5248,5248,'2016-06-05 08:17:03','2016-06-05 03:41:40','    go: have replicateDevice sleep a little between loops\n    \n    Change-Id: Iabd5583a6d154bbe114ef1d5ed9429a22611f5e3\n',8,2,'Rackspace'),(538084,1111,4088,'2016-06-02 18:10:26','2015-10-06 16:28:34','    Fix replicator intersection exception when sync data to remote regions.\n    \n    This patch fixed the exception (AttributeError: \'list\' object has no\n    attribute \'intersection\') when replicator try to sync data from\n    handoff to primary partition in more than one remote region.\n    \n    Change-Id: I565c45dda8c99d36e24dbf1145f2d2527d593ac0\n    Closes-Bug: 1503152\n',8,6,'SwiftStack'),(538085,229,229,'2016-06-09 11:22:37','2016-06-09 11:22:37','    update .gitreview\n    \n    Change-Id: I9593e453891c137fd430a44306e17268ba45fd12\n',1,0,'SwiftStack'),(538086,1111,1111,'2016-06-08 10:07:44','2016-06-08 10:01:39','    Make test_ringbuilder less brittle\n    \n    If one has an object.builder file in the current directory and runs\n    test_ringbuilder, it will fail with an irritating error. That\'s because\n    test_use_ringfile_as_builderfile doesn\'t use self.tmpfile, but\n    object.builder - and that one might exist in the local directory.\n    \n    This patch changes this, using self.tmpfile as argument name.\n    \n    Closes-Bug: 1590356\n    Change-Id: I4b3287a36e8a5e469eb037128427dc7867910e53\n',7,3,'Red Hat'),(538088,2470,7680,'2016-06-10 11:56:07','2016-05-31 20:53:03','    Adds region as a search-value in manpage\n    \n    This patch adds region and example related to it in the man page\n    of swift-ring-builder.\n    \n    Change-Id: I12ceab4e41240240cf2daa77dad94729dd1fd76d\n',2,1,'Intel'),(539999,5248,42,'2016-06-06 06:59:04','2016-06-13 18:28:24','    Use pre-defined inputs in TestGetHashPrefixAndSuffix\n    \n    Running tests currently requires a read access on swift.conf,\n    which is often not available to unprivileged users. In fact,\n    the file may not even be present on the development system.\n    \n    This is the first step to get tests to use only the data\n    supplied with the tree.\n    \n    Change-Id: Ia63904b6c32293ca6fb38641cea514533259d909\n',10,3,'Red Hat'),(540000,869,869,'2016-06-14 16:10:16','2016-06-14 16:10:16','    Catch AttributeError less often\n    \n    I always get tripped up when I\'m editing code that catches\n    AttributeError and does something with it. I\'ll type \"req.emthod\" or\n    something, and next thing I know I\'m getting 405s in all my unit\n    tests. This diff removes some places where we catch AttributeError\n    (sometimes, having deliberately thrown it only one line before) so\n    that typos can crash the way Guido intended.\n    \n    Change-Id: I2f7586f96b41a97e6ae254efc83218b3b5c6cc9e\n',10,23,'SwiftStack'),(540831,4094,4086,'2016-06-16 17:18:21','2016-06-08 17:01:29','    crypto - Test with non-zero offset\n    \n    Change-Id: Iab8545db0ba09de6d9d5e9d28b4cb999da5f4c94\n',22,9,'Intel'),(542294,161,161,'2016-06-21 08:15:56','2016-06-21 07:56:35','    Update Sphinx version\n    \n    The api-ref document needs a newer sphinx version, allow a 1.2 Sphinx\n    version to be used - like it\'s used in global-requirements.txt.\n    \n    Change-Id: I9183cc56753fbe7e41206c6a9081899df5c3919a\n    Needed-By: Ifebc65b188c4f2ba35b61c0deae5ec24401df7f9\n',1,1,'SUSE'),(542295,5596,5596,'2016-06-02 20:17:10','2016-05-27 15:39:46','    go: portability work\n    \n    Compiles and mostly works on osx and freebsd.\n    \n    Pull in gopsutil to fill in recon info.\n    \n    Change-Id: I13c77f77cf99abbc275496edb254915ad9012181\n',381,143,'Rackspace'),(542297,5596,5596,'2016-06-16 16:29:29','2016-06-16 16:26:01','    go: quarantine invalid files when replicating\n    \n    The replicator parses object metadata and performs a metadata-only audit\n    before it replicates files.  This change makes it so that the replicator\n    will quarantine objects that fail validation.\n    \n    Change-Id: I16d46c463482872af850cfe3b75053dd6db04d7b\n',80,12,'Rackspace'),(543452,42,42,'2016-06-22 22:43:24','2016-06-22 22:43:24','    Patch through the error from NewReplicator\n    \n    Normally this is pointless, because we test NewReplicator by\n    itself and we know that it works. However, if anything goes\n    pear shaped in the environment, like swift.conf is missing,\n    we want to know what it is, rather than guess.\n    \n    Change-Id: I9488bd16dafc1b16d034bea963e4502c06988452\n',38,22,'Red Hat'),(544094,8397,8186,'2016-06-24 08:11:50','2016-06-24 11:50:20','    Make string.letters PY3 compatible\n    \n    String.letters are removed in py3,use string.ascii_letters instead.\n    \n    Change-Id: I3c71b65b09b42dc954a3eb9e02894e5d3b12a3f4\n    Closes-Bug: #1595786\n',4,3,'ZTE Corporation'),(544706,1111,1111,'2016-06-27 14:38:04','2016-06-27 14:18:43','    Add swiftbackmeup to associated projects\n    \n    Change-Id: I99f7a38d9b26605324408f1d200bf08da1e2772f\n',1,0,'Red Hat'),(545607,42,42,'2016-06-27 21:15:31','2016-06-27 21:15:31','    Add a global fix for anything that involves GetHashPrefixAndSuffix\n    \n    We tackled this previously with commit\n    6f78542637b80671cf3153dad8e15ce54dedbb39, but that fix did not\n    go far enough. Other modules invoke ./hummingbird, so their tests\n    need the same faking that makeReplicator() needs.\n    \n    Note that we have 2 kinds of tests: the one that tests the\n    GetHashPrefixAndSuffix itself and the rest, which uses the\n    GetHashPrefixAndSuffix in the process of testing something else.\n    We create a test file for the former and fake everything without\n    any files for the latter.\n    \n    Change-Id: Id87cfa6f5271111ae194316de170c6707ba6f23c\n',36,4,'Red Hat'),(546397,4094,4094,'2016-06-15 16:36:25','2016-06-07 13:41:55','    Refactor tests and add tests\n    \n    Relocates some test infrastructure in preparation for\n    use with encryption tests, in particular moves the test\n    server setup code from test/unit/proxy/test_server.py\n    to a new helpers.py so that it can be re-used, and adds\n    ability to specify additional config options for the\n    test servers (used in encryption tests).\n    \n    Adds unit test coverage for extract_swift_bytes and functional\n    test coverage for container listings. Adds a check on the content\n    and metadata of reconciled objects in probe tests.\n    \n    Change-Id: I9bfbf4e47cb0eb370e7a74d18c78d67b6b9d6645\n',395,256,'HPE'),(546398,4094,5650,'2016-06-22 11:55:49','2016-06-06 17:19:48','    Support for http footers - Replication and EC\n    \n    Before this patch, the proxy ObjectController supported sending\n    metadata from the proxy server to object servers in \"footers\" that\n    trail the body of HTTP PUT requests, but this support was for EC\n    policies only.  The encryption feature requires that footers are sent\n    with both EC and replicated policy requests in order to persist\n    encryption specific sysmeta, and to override container update headers\n    with an encrypted Etag value.\n    \n    This patch:\n    \n    - Moves most of the functionality of ECPutter into a generic Putter\n      class that is used for replicated object PUTs without footers.\n    \n    - Creates a MIMEPutter subclass to support multipart and multiphase\n      behaviour required for any replicated object PUT with footers and\n      all EC PUTs.\n    \n    - Modifies ReplicatedObjectController to use Putter objects in place\n      of raw connection objects.\n    \n    - Refactors the _get_put_connections method and _put_connect_node methods\n      so that more code is in the BaseObjectController class and therefore\n      shared by [EC|Replicated]ObjectController classes.\n    \n    - Adds support to call a callback that middleware may have placed\n      in the environ, so the callback can set footers. The\n      x-object-sysmeta-ec- namespace is reserved and any footer values\n      set by middleware in that namespace will not be forwarded to\n      object servers.\n    \n    In addition this patch enables more than one value to be added to the\n    X-Backend-Etag-Is-At header. This header is used to point to an\n    (optional) alternative sysmeta header whose value should be used when\n    evaluating conditional requests with If-[None-]Match headers.  This is\n    already used with EC policies when the ECObjectController has\n    calculated the actual body Etag and sent it using a footer\n    (X-Object-Sysmeta-EC-Etag). X-Backend-Etag-Is-At is in that case set\n    to X-Object-Sysmeta-Ec-Etag so as to point to the actual body Etag\n    value rather than the EC fragment Etag.\n    \n    Encryption will also need to add a pointer to an encrypted Etag value.\n    However, the referenced sysmeta may not exist, for example if the\n    object was created before encryption was enabled. The\n    X-Backend-Etag-Is-At value is therefore changed to support a list of\n    possible locations for alternate Etag values. Encryption will place\n    its expected alternative Etag location on this list, as will the\n    ECObjectController, and the object server will look for the first\n    object metadata to match an entry on the list when matching\n    conditional requests. That way, if the object was not encrypted then\n    the object server will fall through to using the EC Etag value, or in\n    the case of a replicated policy will fall through to using the normal\n    Etag metadata.\n    \n    If your proxy has a third-party middleware that uses X-Backend-Etag-Is-At\n    and it upgrades before an object server it\'s talking to then conditional\n    requests may be broken.\n    \n    UpgradeImpact\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    Co-Authored-By: Samuel Merritt <sam@swiftstack.com>\n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    \n    Closes-Bug: #1594739\n    Change-Id: I12a6e41150f90de746ce03623032b83ed1987ee1\n',1168,497,'IBM'),(546399,4094,4094,'2016-06-22 14:48:39','2016-06-06 18:16:11','    Make container update override headers persistent\n    \n    Whatever container update override etag is sent to the object server\n    with a PUT must be used in container updates for subsequent\n    POSTs. Unfortunately the current container update override headers\n    (x-backend-container-update-override-*) are not persisted with the\n    object metadata so are not available when handling a POST.\n    \n    For EC there is an ugly hack in the object server to use the\n    x-object-sysmeta-ec-[etag,size] values when doing a container update\n    for a POST.\n    \n    With crypto, the encryption middleware needs to override the etag\n    (possibly overriding the already overridden EC etag value) with an\n    encrypted etag value. We therefore have a similar problem that this\n    override value is not persisted at the object server.\n    \n    This patch introduces a new namespace for container override headers,\n    x-object-sysmeta-container-update-override-*, which uses object\n    sysmeta so that override values are persisted. This allows a general\n    mechanism in the object server to apply the override values (if any\n    have been set) from object sysmeta when constructing a container\n    update for a PUT or a POST. Middleware should use the\n    x-object-sysmeta-container-update-override-* namespace when setting\n    container update overrides. Middleware should be aware that other\n    middleware may have already set container override headers, in which\n    case consideration should be given to whether any existing value should\n    take precedence.\n    \n    For backwards compatibility the existing\n    x-backend-container-update-override-* style headers are still\n    supported in the object server for EC override values, and the ugly\n    hack for EC etag/size override in POST updates remains in the object\n    server. That allows an older proxy server to be used with an upgraded\n    object server. The proxy server continues to use the\n    x-backend-container-update-override-* style headers for EC values so\n    that an older object server will continue to work with an upgraded\n    proxy server.\n    \n    x-object-sysmeta-container-update-override-* headers take precedence\n    over x-backend-container-update-override-* headers and the use of\n    x-backend-container-update-override-* headers by middleware is\n    deprecated.  Existing third party middleware that is using\n    x-backend-container-update-override-* headers should be modified to\n    use x-object-sysmeta-container-update-override-* headers in order to\n    be compatible with other middleware such as encryption and to ensure\n    that container updates during POST requests carry correct values. If\n    targeting multiple versions of Swift object servers it may be\n    necessary to send headers from both namespaces. However, in general it\n    is recommended to upgrade all backend servers, then upgrade proxy\n    servers before finally upgrading third party middleware.\n    \n    Co-Authored-By: Tim Burke <tim.burke@gmail.com>\n    \n    UpgradeImpact\n    \n    Change-Id: Ib80b4db57dfc2d37ea8ed3745084a3981d082784\n',471,76,'HPE'),(546400,4094,4094,'2016-06-28 11:00:33','2016-06-06 18:38:50','    Enable middleware to set metadata on object POST\n    \n    Adds a new form of system metadata for objects.\n    \n    Sysmeta cannot be updated by an object POST because\n    that would cause all existing sysmeta to be deleted.\n    Crypto middleware will want to add \'system\' metadata\n    to object metadata on PUTs and POSTs, but it is ok\n    for this metadata to be replaced en-masse on every\n    POST.\n    \n    This patch introduces x-object-transient-sysmeta-*\n    that is persisted by object servers and returned\n    in GET and HEAD responses, just like user metadata,\n    without polluting the x-object-meta-* namespace.\n    All headers in this namespace will be filtered\n    inbound and outbound by the gatekeeper, so cannot\n    be set or read by clients.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Janie Richling <jrichli@us.ibm.com>\n    \n    Change-Id: I5075493329935ba6790543fc82ea6e039704811d\n',450,80,'HPE'),(546401,4075,5650,'2016-06-30 23:31:15','2016-06-07 15:01:32','    Enable object body and metadata encryption\n    \n    Adds encryption middlewares.\n    \n    All object servers and proxy servers should be upgraded before\n    introducing encryption middleware.\n    \n    Encryption middleware should be first introduced with the\n    encryption middleware disable_encryption option set to True.\n    Once all proxies have encryption middleware installed this\n    option may be set to False (the default).\n    \n    Increases constraints.py:MAX_HEADER_COUNT by 4 to allow for\n    headers generated by encryption-related middleware.\n    \n    Co-Authored-By: Tim Burke <tim.burke@gmail.com>\n    Co-Authored-By: Christian Cachin <cca@zurich.ibm.com>\n    Co-Authored-By: Mahati Chamarthy <mahati.chamarthy@gmail.com>\n    Co-Authored-By: Peter Chng <pchng@ca.ibm.com>\n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    Co-Authored-By: Jonathan Hinson <jlhinson@us.ibm.com>\n    Co-Authored-By: Hamdi Roumani <roumani@ca.ibm.com>\n    \n    UpgradeImpact\n    \n    Change-Id: Ie6db22697ceb1021baaa6bddcf8e41ae3acb5376\n',4731,28,'IBM'),(546402,4075,4094,'2016-06-30 23:31:20','2016-06-07 15:08:54','    Add encryption overview doc\n    \n    Include a note in container-sync docs pointing to specific\n    configuration needed to be compatible with encryption.\n    \n    Also remove the sample encryption root secret from\n    proxy-server.conf-sample and in-process test setup. Remove encryption\n    middleware from the default proxy pipeline.\n    \n    Change-Id: Ibceac485813f3ac819a53e644995749735592a55\n',483,12,'HPE'),(547567,161,8473,'2016-06-21 19:14:22','2016-05-04 02:00:53','    Adds migrated API reference files\n    \n    This brings in RST plus YAML files, migrated from the source for [0].\n    \n    The migration explanation is found on the openstack-dev mailing list [1].\n    \n    Project instruction is in the OpenStack Documentation Contributor Guide [2].\n    \n    A patch for publishing this source is in [3].\n    \n    The conf.py and the tox environment are standard across other projects.\n    \n    [0]http://developer.openstack.org/api-ref-objectstorage-v1.html\n    [1]http://lists.openstack.org/pipermail/openstack-dev/2016-May/093765.html\n    [2]http://docs.openstack.org/contributor-guide/api-guides.html\n    [3]https://review.openstack.org/#/c/313015/\n    \n    Change-Id: Ifebc65b188c4f2ba35b61c0deae5ec24401df7f9\n',3006,0,'independent'),(547569,8224,8224,'2016-07-05 16:42:00','2016-07-05 16:42:00','    Remove white space between print and ()\n    \n    TrivialFix\n    \n    Change-Id: I0dca3493d43ee8642ae6d2f55597013eef261026\n',1,1,'ZTE Corporation'),(547571,4094,2470,'2016-07-05 10:04:29','2016-06-30 14:32:35','    Only use Timeout if we don\'t have a final_resp\n    \n    I\'m sure the Timeout context manager is relatively cheap, but it can\'t\n    be free.\n    \n    Change-Id: I71c0c5944ec372e9b983021dd024de0c5aa1ded2\n',5,5,'SwiftStack'),(547573,4075,2470,'2016-07-01 07:11:09','2016-06-30 15:28:24','    Stop digging for publicly_accessible ourselves\n    \n    Also, make request method calling in obj.server consistent with change\n    3944d8 to account & container\n    \n    Change-Id: I893d77a06793a5eeafac203a45971e96425afb96\n    Related-Change: I2f7586f96b41a97e6ae254efc83218b3b5c6cc9e\n',6,7,'SwiftStack'),(547575,8474,8474,'2016-06-16 11:14:14','2016-06-16 11:14:14','    pickle_async_update should create tmp_dir\n    \n    While creating a probe test for the expirer daemon, I found\n    the following error scenario:\n    \n    1. Introduce a new object server. Initially it doesn\'t have a tmp_dir.\n    2. Have the object-replicator replicate some objects, one of them\n        with an expiration (X-Delete-At).\n    3. Send a DELETE request for the expired object.\n    \n    While beginning to process the DELETE request, the fresh\n    object server still doesn\'t have a tmp_dir created.\n    Since the object has an old expiration value, the object server\n    will first call \"delete_at_update\", before creating a tombstone.\n    delete_at_update then must create an async_pending,\n    which will lead to an IO error, since tmp_dir doesn\'t exist.\n    \n    As said, I have witnessed this in practice in the probe test I wrote\n    at https://review.openstack.org/#/c/326903/.\n    \n    This patch changes pickle_async_update behavior to create\n    tmp_dir, in case it doesn\'t exist.\n    \n    Change-Id: I88b0e5f75a2a28d6880694ff327ac2763c816d24\n',3,5,'IBM'),(548635,8467,8467,'2016-07-06 10:47:41','2016-07-05 17:14:45','    Added missing parenthesis in print calls\n    \n    Upd. Import print_function from __future__\n    TrivialFix\n    \n    Change-Id: Ibcda2c7e4ddbdff2420502dfd7d17db01f3c8056\n',17,17,'independent'),(548637,2470,2470,'2016-06-30 15:20:00','2016-06-30 14:36:39','    Change elifs to ifs\n    \n    John seemed to have some misgivings about using elif.\n    \n    Change-Id: I39962607cf2a8f90353020f67979e92b48959dd6\n    Related-Change: I7732f13b06c8826537b8f8230a2785607790b8e1\n',3,3,'SwiftStack'),(548639,4075,8059,'2016-07-05 16:33:15','2016-06-29 03:32:09','    Prevent down nodes failing PUTs with non-ascii obj names\n    \n    On an object PUT with a non-ascii name, if we hit some kind of\n    exception speaking to only one object-server of the N we try to\n    connect to, we try to log it -- but this causes an exception when\n    interpolating the UTF-8 encoded path iff the message template is\n    unicode.\n    \n    Since this is essentially an exception within an exception handler,\n    this fails the entire request with a 500 error -- even though the\n    other nodes may have been just fine. This occurs before it attempts\n    a handoff node.\n    \n    The simplest way to reproduce this is by running func tests against\n    a small cluster where one of the object nodes is not running\n    \n    N.B. The locale of the node does not matter because the message\n    template is interpolated with node/device data from the Ring which is\n    always unicode because of json.\n    \n    This includes an update to the FakeRing used by unittest\n    infrastructure to ensure that the FakeRing devices make a round-trip\n    through json to ensure consistent typing with real Rings.\n    \n    Change-Id: Icb7284eb5abc9869c1620ee6366817112d8e5587\n    Closes-bug: #1597210\n',19,3,'IBM'),(548641,591,4093,'2016-05-31 17:35:29','2015-11-13 13:56:13','    Call swift-recon with more than one server type\n    \n    Examples:\n    * get auditor stats from account and container server\n    swift-recon account container --auditor\n    * perform all checks on all servers\n    swift-recon account container object --all\n    \n    Change-Id: I05bb7c785e6a4d80969d90448f1b9e0fd08dae86\n    Co-Authored-By: Ondřej Nový <ondrej.novy@firma.seznam.cz>\n',78,70,'Seznam.cz'),(548643,1111,1111,'2016-06-12 21:17:15','2016-06-07 11:27:56','    Add simple multiple server type test\n    \n    Ensures that swift-recon actually gathers data from multiple\n    server types if more than one is given on the command line.\n    \n    Change-Id: I4017b82fb044265ec117df01e14968752df02201\n',24,0,'Red Hat'),(548645,2470,2470,'2016-06-29 14:30:39','2016-06-29 14:30:39','    Fix intermittent bulk delete unit test failures\n    \n    Change-Id: I0822b14d7b1ddae5fe0cc567c7cbaf544cb081ee\n    Closes-Bug: 1588414\n',9,9,'SwiftStack'),(548647,7680,7680,'2016-07-07 14:56:10','2016-07-07 14:56:10','    Fix typo in the account-server.conf manpage\n    \n    Change-Id: I4e7bb85ce746fcb1ec3a4cbf534761e4e47634c9\n    Closes-Bug: #1599888\n',1,1,'Intel'),(548649,7680,7680,'2016-07-07 15:21:01','2016-07-07 15:21:01','    Fix typo in object-server.conf and container-server.conf manpage\n    \n    Change-Id: Iffad70b2fd901b305dc66d363039b7df44d619da\n',2,2,'Intel'),(548651,8434,7896,'2016-06-29 07:44:01','2016-06-24 17:34:26','    make print python3 compatible\n    \n    The print \'\' in python2 was supported. But in python3,\n    print \'\' was error. In python3, recommend using print()\n    instead. This patch will fix it.\n    \n    Change-Id: I226461b0400023dc44238d9e5ee1ae2f2430de9e\n    Closes-Bug: #1595773\n',6,7,'ZTE Corporation'),(548653,5654,5654,'2016-07-07 21:28:07','2016-07-07 21:28:07','    Remove an unused variable from tests.py\n    \n    The varialbe \'size\' in TestFile.testMetadataNumberLimit is not used.\n    This patch remove the variable from the test.\n    \n    Change-Id: I255a1dcee12bb6b8dec6ff26ed7edf93ab2acf64\n',0,2,'Nippon Telegraph and Telephone Corporation'),(548655,8467,8467,'2016-07-07 20:15:14','2016-07-07 20:13:03','    Another amendment with missing parenthesis\n    \n    TrivialFix\n    \n    Change-Id: Id44ae27bc39ea97be9eb092f8a99a06056b86392\n',2,1,'independent'),(548657,229,229,'2016-06-17 12:25:26','2016-06-17 12:24:57','    added note to testFileSizeLimit functional test\n    \n    Change-Id: I0323ff2511506c354db3416f1b37ede772acaedb\n',10,0,'SwiftStack'),(548659,4094,4094,'2016-07-07 18:40:10','2016-07-07 18:35:48','    Add encryption package requirements to SAIO instructions\n    \n    libssl-dev/openssl-devel are already listed in other-requirements.txt;\n    add them to installation instructions in the SAIO docs.\n    \n    Change-Id: I3dc07213ff8dac1299d3eb68d3448a77e15c79af\n',2,2,'HPE'),(548661,161,7807,'2016-07-07 08:00:21','2016-06-15 18:35:05','    Add install-guide for swift\n    \n    This adds swift-specific contents from the OpenStack Installation Guide\n    in the swift repo per [1]. A separate change will remove the swift contents\n    from the OpenStack Installation Guide for Newton per [2].\n    \n    The swift install-guide structure is based on the Install Guide\n    Cookiecutter [3].\n    \n    Also adds tox.ini environment for install-guide and adds\n    openstackdocs-theme to test-requirements.txt.\n    \n    [1] http://specs.openstack.org/openstack/docs-specs/specs/newton/project-specific-installguides.html\n    [2] http://specs.openstack.org/openstack/docs-specs/specs/newton/installguide.html\n    [3] http://git.openstack.org/cgit/openstack/installguide-cookiecutter/\n    \n    Change-Id: I59b92eebaf5acc657b97bcf10d9ff2cf2db05885\n    Partially-Implements: blueprint projectspecificinstallguides\n    Depends-On: Ifebc65b188c4f2ba35b61c0deae5ec24401df7f9\n',2010,0,'Red Hat'),(548663,8224,8224,'2016-07-07 11:28:23','2016-07-05 15:04:24','    Add __ne__ built-in function\n    \n    In Python 3 __ne__ by default delegates to __eq__ and inverts the\n    result, but in Python 2 they urge you to define __ne__ when you\n    define __eq__ for it to work properly [1].There are no implied\n    relationships among the comparison operators. The truth of x==y\n    does not imply that x!=y is false. Accordingly, when defining\n    __eq__(), one should also define __ne__() so that the operators\n    will behave as expected.\n    [1]https://docs.python.org/2/reference/datamodel.html#object.__ne__\n    \n    Also remove class SubStringMatcher becasue this class isn\'t used\n    following commit 7035639dfd239b52d4ed46aae50f78d16ec8cbfe.\n    \n    Change-Id: Ia2131f72a79226b0c2f3662b84661eb870d1d692\n',3,7,'ZTE Corporation'),(548665,2470,2470,'2016-06-23 12:52:23','2016-06-23 10:46:27','    MockMemcached cleanup\n    \n    * Break sendall\'s switch into different functions\n    * Actually name some parameters\n    * Raise errors on unexpected input\n    * Consistently use tuples in self.cache\n    \n    Change-Id: I93aa33f83cdf6943a43f14a1868b1497bc7f4478\n',63,52,'SwiftStack'),(548667,1475,1475,'2016-06-23 14:01:41','2016-06-23 13:29:51','    Python 3: Fix basestring, long and StringIO\n    \n    * The basestring type was removed in Python 3: replace it with\n      six.string_types.\n    * Replace StringIO.StringIO with six.StringIO\n    * Replace (int, long) with six.integer_types\n    \n    Change-Id: Ic0d443b0bdd00fb18452e79ffae07b9be0fa8116\n',5,5,'eNovance'),(548669,1475,1475,'2016-06-23 17:31:25','2016-06-23 13:34:51','    Python 3: dict.iteritems() and dict.itervalues()\n    \n    * Replace dict.itervalues() with dict.values(). The Python 3 dict\n      type has no itervalues() method, the old itervalues() method was\n      renamed to values().\n    * Same change for dict.iteritems(), replaced with dict.items()\n    * Exception: use six.itervalues() to yield on sock_data_by_port\n    \n    Using six.itervalues() and six.iteritems() would make the code less\n    readable. The overhead of creating a temporary list is considered as\n    negligible:\n    http://lists.openstack.org/pipermail/openstack-dev/2015-June/066391.html\n    \n    Change-Id: Ifbe7faa16d419e7fe26f1fb464019b83c9171c45\n',10,6,'eNovance'),(548671,8224,8224,'2016-07-07 18:27:21','2016-07-07 18:27:21','    Correct reraising of exception\n    \n    When an exception was caught and rethrown, it should call \'raise\'\n    without any arguments because it shows the place where an exception\n    occured initially instead of place where the exception re-raised.\n    \n    Change-Id: I326dd8eaf221cbf3729beedaff81b416c59ae2e6\n',2,2,'ZTE Corporation'),(548673,5254,2470,'2016-07-07 15:34:44','2016-06-23 12:22:02','    Tighten memcached tests\n    \n    Check flags set and key used; stop relying on dict.values()\n    \n    Change-Id: Ibf9228dabd66ae98fb3b64050ccd46f5032d0df9\n',43,20,'SwiftStack'),(548675,8232,8232,'2016-07-07 21:40:21','2016-07-07 21:24:52','    Fixed inconsistent naming conventions\n    \n    Fixed naming conventions of Keystone, Swift and proxy servers in\n    the docs.\n    \n    Change-Id: I294afd8d7bffa8c1fc299f5812effacb9ad08910\n',17,17,'Intel'),(548677,4094,4075,'2016-07-06 14:48:29','2016-07-01 09:54:32','    Add basic functests for user object metadata\n    \n    Change-Id: I3c3b7d051a48449400e47e366461674bed9318c5\n',139,0,'Rackspace'),(548679,4094,4094,'2016-07-07 13:50:17','2016-07-07 11:31:31','    Fix unicode errors in object controller logging\n    \n    Change swift.proxy.server.Application.error_occurred()\n    to decode message as utf-8 in same way that the\n    exception_occurred() method was changed in [1].\n    \n    This prevents a unicode error when logging error responses\n    in swift.proxy.controllers.base.Controller._make_request()\n    for paths that have non-ascii characters. Although the unicode\n    error is currently caught by a surrounding except clause, the\n    logging and error limiting treatment is different for ascii\n    vs non-ascii paths. This patch makes them consistent.\n    \n    Fix the server type reported in _make_request() to be\n    the correct server type, not always \'Container Server\'.\n    \n    Fix path arg passed to _get_conn_response in\n    swift.proxy.controllers.obj.BaseObjectController to be req.path\n    rather than req.\n    \n    Add unit tests for error_occurred() being called with non-ascii\n    paths and extend tests for exception_occurred() (see Related-Bug).\n    \n    [1] Change-Id: Icb7284eb5abc9869c1620ee6366817112d8e5587\n    \n    Related-Bug: #1597210\n    Change-Id: I285499d164bff94835bdddb25d2af6d73114c281\n',196,8,'HPE'),(548681,1111,2470,'2016-07-08 06:42:48','2016-07-07 17:58:58','    Run flake8 against scripts in bin\n    \n    Just having a `flake8 --filename=swift* bin` command is insufficient.\n    \n    Change-Id: Ia2a5c364e52d9972d31e6b5e22366503894b720d\n',1,0,'SwiftStack'),(548683,1111,1475,'2016-07-08 07:01:04','2016-06-23 13:40:42','    Python 3: fix urllib import\n    \n    Replace urllib.quote import with six.moves.urllib.parse.quote, so the\n    code works on Python 2 and Python 3.\n    \n    Change-Id: I17e9cd9668661b6a67f33db83e0cbfc8ea6e3ca6\n',1,2,'eNovance'),(549366,7680,7680,'2016-07-08 15:55:49','2016-05-20 16:26:15','    Add region in swift-ring-builder add\n    \n    In the swift deployment guide, region is missing from the syntax of\n    adding a new device to the swift-ring-builder.\n    \n    This patch adds region in the syntax.\n    \n    Change-Id: I43e247c92d461efd530c0f82ca3daddcb9e2ba5b\n    Closes-Bug: #1584127\n',10,9,'Intel'),(549368,2470,2470,'2016-07-08 16:19:52','2016-07-07 18:00:05','    Turn on H233 and start using print function\n    \n    As much as anything, I\'m just tired of seeing a bunch or piecemeal\n    fixes.\n    \n    Note that we *need* to include\n    \n       from __future__ import print_function\n    \n    in order to support things like\n    \n       print()  # Would print \"()\" (the repr of an empty tuple) otherwise\n       print(foo, end=\'\')  # Would SyntaxError\n       print(bar, file=sys.stderr)  # Would SyntaxError\n    \n    Change-Id: I8fdf0740e292eb1ee785512d02e8c552781dcae1\n',135,122,'SwiftStack'),(549370,591,1111,'2016-07-07 14:49:43','2016-06-07 10:35:18','    Add ringbuilder tests for --yes option\n    \n    Also added a Timeout class to test.unit to wrap possible long-running\n    functions. For example, if there is some regression and the \"--yes\"\n    argument is no longer evaluated correctly and the test excepts some\n    keyboard input, it will be terminated after a few seconds to ensure\n    there is no long-running blocker on the gate.\n    \n    Change-Id: I07b17d21d5af7fcc594ce5319ae2b6f7f58df4bb\n',43,0,'Red Hat'),(549372,6634,5676,'2016-06-03 17:02:36','2016-02-19 21:54:12','    Added unit test cases for cli/recon.py\n    \n    Added unit test cases to cover code paths of umount_check\n    and async_check function.\n    \n    Change-Id: I236d24b1b22ce244b3fb9546ff31223426edb8ed\n',75,0,'Intel'),(549374,5254,7680,'2016-07-08 13:53:46','2016-05-15 14:36:57','    Add description of server options (all, main, rest) for swift-init help\n    \n    Running swift-init with -h, --help, or no arguments\n    displays help for the command. The help does not\n    document the \'main\', \'all\', and \'rest\' options.\n    These are documented in the man page.\n    \n    This patch adds all these server options in the\n    help of swift-init.\n    \n    Change-Id: I8e27589912ae72ace14c955e66b86942bc23d9f7\n    Closes-Bug: #1580722\n',8,0,'Intel'),(550122,4094,4094,'2016-07-07 16:27:06','2016-06-08 15:33:22','    Don\'t encrypt update override etags for empty object\n    \n    Fix an anomaly where object metadata for an empty object has no\n    encrypted etag, but if the encrypter received a container update\n    override etag in footers or headers then it would encrypt that,\n    so we\'d have encrypted metadata in the container listing but not\n    in the object metadata. (Empty object etags are not encrypted\n    because the object content is revealed by its size anyway).\n    \n    This patch changes the override handling to not encrypt override\n    etags that correspond to an empty object, with one exception: if\n    for some reason the received override etag value is that of an empty\n    string but there *was* an object body, then we\'ll encrypt the\n    override etag, because it\'s value is not obvious from the object\n    size.\n    \n    Change-Id: I8d7da34d6d98f351f59174883bc4d5ed0416c101\n',83,13,'HPE'),(550124,7710,7710,'2016-07-10 20:33:05','2016-07-10 20:33:05','    make 0 be avaiable value of options\n    \n    value 0 is regard as not available by swift-ring-builder\n    $ swift-ring-builder testring add --region 0 --zone 1\n    --ip 127.0.0.2 --port 6000 --device sdb --weight 100\n    \n    Required argument -r/--region not specified.\n    The on-disk ring builder is unchanged.\n    \n    this patch is to make value 0 available.\n    \n    Change-Id: Id941d44d8dbfe438bf921ed905908b838c88a644\n    Closes-bug: #1547137\n',3,3,'independent'),(550126,3022,3022,'2015-12-14 17:20:46','2015-12-14 17:04:34','    Fixed inconsistencies in docstrings\n    \n    Fixed :returns:, and few one-line comments as per\n    the docstring guide lines.\n    http://docs.openstack.org/developer/hacking/#docstrings\n    \n    Change-Id: I36ecf4faf5b49e070c13eb6324841ebcf442524f\n',24,30,'independent'),(551179,4094,4094,'2016-06-03 09:07:33','2016-03-16 17:41:30','    Put correct Etag and Accept-Ranges in EC 304 and 416 responses\n    \n    When using an EC policy, 304 responses to conditional GETs\n    are missing the Accept-Ranges header and have the wrong ETag\n    value. 412 responses also have the wrong etag.\n    \n    416 responses to ranged GETs also have the wrong ETag.\n    \n    This patch ensures behaviour with EC policy is consistent\n    with replication policy:\n    \n      - 304 and 416 responses have correct etag and Accept-Ranges\n      - 412 responses have correct Etag but no Accept-Ranges\n    \n    Co-Authored-By: Mahati Chamarthy <mahati.chamarthy@gmail.com>\n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    \n    Cherry-picked from commit 12dd408823df158359e99fb01716f2059140c5c9\n    \n    Closes-Bug: #1496234\n    Closes-Bug: #1558197\n    Closes-Bug: #1558193\n    Change-Id: Ic21317b9e4f632f0751133a3383eb5487379e11f\n',126,39,'HPE'),(551181,2470,2470,'2016-07-11 19:42:35','2016-07-01 14:42:43','    Add keymaster_config_path option to keymaster\n    \n    Also, tighten up the format checks on root secrets.\n    \n    Change-Id: I1cd9a97c4e8d87d7c065866e7ad3a9e748ff19ab\n',95,17,'SwiftStack'),(551183,229,229,'2016-07-13 15:42:16','2016-07-10 10:00:09','    authors and changelog updates for 2.9.0 release\n    \n    Change-Id: I3c3e779227aad1df6abb517817355c6732e4a2af\n',45,2,'SwiftStack'),(552233,229,229,'2016-07-14 14:25:56','2016-07-14 14:25:56','    set default review branch\n    \n    Change-Id: I6da6af40232dcfb4fbf55c048e39f4787daa29b4\n',1,0,'SwiftStack'),(552234,5596,5596,'2016-07-13 18:22:27','2016-06-28 18:15:41','    go: move hummingbird.go\n    \n    Use a more conventional code layout so go tools work as intended.\n    \n    Change-Id: I7832843bb5bf25c75b79e83140c280eafb629f8c\n',357,359,'Rackspace'),(552236,5596,5596,'2016-07-06 19:20:06','2016-07-02 04:57:15','    go: storage policies\n    \n    This implements storage policies (as best I understand them).\n    It turned into a pretty big patch and changes a bunch of stuff.\n    \n    There\'s a lot of plumbing of policies into functions that choose an\n    \"objects\" directory.\n    \n    The replicator and auditor also handle any \"replication\" policies.\n    Those may get abstracted later on so you can register auditor and\n    replicator equivalents for non-replication object engines.\n    \n    Request routing can take policies into account.  This is so that\n    something like \"REPLICATE\" calls can be routed to the correct object\n    engine, since they\'re instantiated per-policy.\n    \n    They\'re instantiated per-policy so they can get the configs for their\n    policy, which swift doesn\'t really do, but I think could be useful.\n    \n    Change-Id: Ia90664f9b178a29e1061bb03d0dd442ba6636c73\n',657,221,'Rackspace'),(552238,2470,2470,'2016-06-29 12:23:02','2016-06-29 12:22:22','    Remove some unnecessary error handling in healthcheck\n    \n    ...as well as an unused class variable.\n    \n    Change-Id: If1091f420b0bcf34c37e49b13f59b229e8deecc6\n',5,10,'SwiftStack'),(552240,5205,5205,'2016-07-15 12:40:53','2016-07-15 12:40:29','    Reduce code duplication\n    \n    Reduced source code by extracting duplicated code\n    (swift/cli/ringbuilder.py)\n    \n    Change-Id: Ibd000df1dc9042e31b65b000199dff4a645e63b4\n',34,48,'Ericsson'),(552241,5155,5155,'2016-07-11 14:05:50','2015-07-14 15:13:06','    Improve Keystone v3 token support\n    \n    Now keystoneauth uses HTTP_X_TENANT_NAME/ID only even if v3 token uses for\n    backward compatibility. There is no problem with current behavior because\n    keystonemiddleware set same value on the headers but the headers are\n    specified as deprecated so this patch allows to support HTTP_X_PROJECT_NAME/ID\n    in addition to HTTP_X_TENANT_NAME/ID.\n    \n    Change-Id: Ie5e02067a59e18f1ac215f51429863bdd42f729f\n',95,16,'Fujitsu'),(553710,5596,5596,'2016-07-08 18:18:21','2016-07-08 18:16:50','    go: fix listObjFiles goroutine leak\n    \n    Send a cancel channel to listObjFiles, to prevent the possibility of\n    a leaking goroutines if its consumer doesn\'t complete.\n    \n    Change-Id: I94595f1212442e351535ce2dceea4f642f4c871b\n',37,8,'Rackspace'),(553712,7680,7680,'2016-07-18 19:49:44','2016-07-18 19:49:44','    Fixed typo in reaper.py\n    \n    Change-Id: I9b98da30e5f934164e490beb4d6cde840f08832a\n',1,1,'Intel'),(553713,8467,8467,'2016-07-15 19:11:47','2016-07-15 21:38:14','    Simplify chained comparison\n    \n    For example: a < b and b <= c is equal to a < b <= c\n    \n    Change-Id: I91ceb194bce60f6160ebdf0aadf0e8f0d7a35975\n',4,6,'independent'),(553715,4075,4075,'2016-07-18 14:01:57','2016-07-18 14:01:57','    Remove red herring from logs\n    \n    The object replicator can log some junk about the cluster ip instead\n    of the replication ip in some specific error log lines that can make\n    you think either you\'re crazy or your rings are crazy.\n    \n    ... in this case it was just the logging was crazy - so fix that.\n    \n    Change-Id: Ie5cbb2d1b30feb2529c17fc3d72af7df1aa3ffdd\n',62,46,'Rackspace'),(553717,441,441,'2016-07-19 08:27:04','2016-07-19 08:27:04','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: Ica92e45dbc3f83ec806e092fd3ea5ada636ab7e9\n',259,118,NULL),(553719,7710,7710,'2016-07-19 17:29:28','2016-07-19 17:25:22','    Change assertTrue to assertEqual\n    \n    In test_ringbuilder.py, there is one assertTrue should be\n    replaced with assertEqual.\n    \n    Change-Id: I9a0e4a7363a5e16cc9b6df045953dfbb4f9dbd07\n    Closes-bug: #1604320\n',1,1,'independent'),(553721,7680,7680,'2016-07-19 21:37:54','2016-07-19 21:37:54','    Fixed Typo in updater.py\n    \n    Change-Id: Ic0b5445e313924c683e9889d94569c2554fd0b8b\n',1,1,'Intel'),(554842,8263,8263,'2016-07-18 15:01:21','2016-07-18 15:01:21','    Make comparision simplely\n    \n    For example: a>b and a<=c is equal to b<a<=c\n    \n    Change-Id: Iae1532f0946c6d4aa7321f3957820b486869c59f\n',1,2,'EasyStack'),(554844,3302,3302,'2016-07-15 13:28:31','2016-07-15 14:46:41','    Use more specific asserts in test/unit/common/ring\n    \n    I changed asserts with more specific assert methods.\n    e.g.: from assertTrue(sth == None) to assertIsNone(*) or\n    assertTrue(isinstance(inst, type)) to assertIsInstace(inst, type)\n    or assertTrue(not sth) to assertFalse(sth).\n    \n    The code gets more readable, and a better description will be shown on fail.\n    \n    Change-Id: I9531c9939aa7c2dac127b5dc865b8d396dab318f\n',19,19,'Ericsson'),(554846,229,229,'2016-07-20 13:04:07','2016-07-20 11:09:35','    Prevent CPU spinning when there are no children\n    \n    If you deploy an object server but have no rings at all (and are using\n    servers-per-port), then the CPU will spin as it checks for child\n    processes since there are actually no child processes to check.\n    \n    This patch adds a sleep so that the CPU doesn\'t spin.\n    \n    Change-Id: Iece62367aa2481a21752144b1f4477a3713282fe\n',15,6,'SwiftStack'),(554848,5599,5599,'2016-06-14 19:20:07','2016-06-14 00:52:24','    Avoid docs warning: Duplicate explicit target name\n    \n    When we add two (or more than) different links as same target name,\n    we need to set two underscore[1] instead of one. This avoids \"Duplicate\n    explicit target name\" warnings.\n    \n    1:\n    http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#hyperlink-references\n    \n    Change-Id: I8a493e7a1deeece33ee1b3fb3f5c848f3cc31d06\n',8,8,'NTT'),(554850,8263,8263,'2016-07-18 14:01:33','2016-07-17 18:02:05','    Add log format to i18n\n    \n    Change-Id: I3aff0de418b52b1f16f5863c95ad2700678143ae\n',8,7,'EasyStack'),(554852,3302,3302,'2016-07-15 13:33:56','2016-07-15 14:02:38','    Use more specific asserts in functional tests\n    \n    I changed asserts with more specific assert methods.\n    e.g.: from assertTrue(sth == None) to assertIsNone(*) or\n    assertTrue(isinstance(inst, type)) to assertIsInstace(inst, type) or\n    assertTrue(not sth) to assertFalse(sth).\n    \n    The code gets more readable, and a better description will be shown on fail.\n    \n    Change-Id: I80ec96e0b729bef38213a6be4ff4b6eb65c7612d\n',84,87,'Ericsson'),(555663,1475,1475,'2016-07-08 07:56:16','2016-06-29 09:30:34','    Update dnspython to 1.14\n    \n    dnspython 1.14 adds Python 3 support and so can now be used on Python\n    2 and Python 3. Drop dnspython3 dependency.\n    \n    Change-Id: I0a860b03800aeeed4375f528e6bf9cca57129db7\n',1,2,'eNovance'),(555665,4094,5599,'2016-07-22 17:45:00','2016-07-20 18:16:27','    Cache fragment size for EC policy\n    \n    ECStoragePolicy.fragment_size is never changed on running Swift because\n    it is from ec_segment_size and ec_type defined in swift.conf statically\n    so let\'s cache the value after retrieving the value from the pyeclib driver.\n    \n    And more, pyeclib <= 1.2.1 (current newest) has a bug [1] to leak the reference\n    count of the items in the returned dict (i.e. causes memory leak) so that\n    this caching will be mitigation of the memory leak because this saves the call\n    count fewer than current as possible.\n    \n    Note that the complete fix for the memory leak for pyeclib is proposed at\n    https://review.openstack.org/#/c/344066/\n    \n    1: https://bugs.launchpad.net/pyeclib/+bug/1604335\n    \n    Related-Bug: #1604335\n    Change-Id: I6bbaa4063dc462383c949764b6567b2bee233689\n',30,2,'NTT'),(556221,832,5941,'2016-07-21 04:21:36','2016-07-20 13:49:29','    Python3 eventlet patched httplib _MAXHEADERS\n    \n    This change patches the correct eventlet monkey patched httplib\'s\n    _MAXHEADERS as required by Swift.\n    \n    It also makes the configparser inside the copy middleware py3\n    compatable.\n    \n    Change-Id: I2f7dbcecbbecd7cb69b7031faa39f35bcfadcfc8\n',8,3,'HP'),(556223,5941,5941,'2016-07-20 19:06:45','2016-07-20 19:00:00','    Python3 fixes generator object issue\n    \n    Fixes generator\' object has no attribute\n    \'next\' issues\n    \n    Change-Id: I1f21eaed0ae7062073438503d3f6860d8b4f36c8\n',10,10,'HP'),(556225,1475,1475,'2016-07-25 14:56:21','2016-06-23 13:42:01','    Python 3: fix usage of reload()\n    \n    Replace reload() builtin function with six.moves.reload_module() to\n    make the code compatible with Python 2 and Python 3.\n    \n    Change-Id: I7572d613fef700b392d412501facc3bd5ee72a66\n',10,5,'eNovance'),(556227,1475,1475,'2016-07-25 15:14:06','2016-06-23 13:53:49','    Python 3: Fix usage of dict methods\n    \n    * Replace \"c = dict(a.items() + b.items())\" with\n      \"c = dict(a); c.update(b)\". It works on Python 2 and Python 3, and\n      it may be a little bit more efficient on Python 2 (no need to\n      create a temporary list of items).\n    * Replace \"dict.values() + dict.values()\" with\n      \"list(dict.values()) + list(dict.values())\": on Python 3,\n      dict.values() is a view which doesn\'t support a+b operator.\n    \n    Change-Id: Id5a65628fe2fb7a02c713b758fcaa81154db28a0\n',13,15,'eNovance'),(556229,2470,2470,'2016-07-06 17:22:02','2016-07-06 14:50:56','    Fix X-*-Container-Update-Override-* header/footer precedence\n    \n    Previously, all footer overrides (whether from the X-Backend-* or\n    X-Object-Sysmeta-* namespace) would take priority over any header\n    override.\n    \n    However, middleware should be able to set a Sysmeta override without\n    needing to worry about whether it\'s working with a replicated policy\n    (where setting it in headers will suffice) or an EC policy (where it\n    would need to install a footers callback). This could be mitigated by\n    *always* installing a footer callback, but doing so would incur\n    additional overhead that would otherwise be unnecessary.\n    \n    Change-Id: Idb40361ac72da51e1390dff690723dbc2c653a13\n',93,3,'SwiftStack'),(557183,5248,5248,'2016-07-17 01:32:33','2016-07-17 01:32:33','    go: fix tests with old swift.conf\n    \n    load policies when creating the auditor daemon\n    \n    Change-Id: I4a0ad5bcc2d3dee158ac76d12716fdc3a4a8f424\n',3,1,'Rackspace'),(557184,5248,5248,'2016-07-16 15:52:17','2016-07-16 06:38:57','    go: make a rate limiter for account per disk/server\n    \n    this will prevent a single account from taking up all\n    resources to a disk/server. will return a 498 response\n    to indicate rate limiting.\n    \n    this also changes the acceptable config values for the limiter.\n    0 means unlimited. so instead of doing\n    disk_limit = 20/10000\n    to not limit by server you can do\n    disk_limit = 20/0\n    \n    ps: yes- i have to slow down everything :p\n    \n    Change-Id: I1fa5037ed548b05fa5668ce188c9b0c8dc63a745\n',155,14,'Rackspace'),(557186,5596,5596,'2016-07-26 20:13:19','2016-07-26 20:01:17','    go: get rid of BackendError\n    \n    It was a bad notion from the beginning.\n    We can just use and identify standard go errors.\n    \n    Change-Id: I21d454ac98c9325c3517b1e16dd952ef6cb54858\n',32,47,'Rackspace'),(557188,2470,2470,'2016-07-25 15:02:08','2016-07-25 15:02:03','    Use extract_swift_bytes in override_bytes_from_content_type\n    \n    About half the logic was the same, and it seems better to just implement\n    that once.\n    \n    Change-Id: I350da34ef7a3cd0cb74f585f4691992ae64c7eab\n',8,11,'SwiftStack'),(557190,4094,8652,'2016-07-26 13:47:24','2016-07-21 11:27:59','    Added quotes to example echo in swift-temp-url\n    \n    If the curl command is used exactly as in the help, the ampersand\n    in the signature is interpreted as an operator and the curl\n    command breaks. I am aware of developers who have wasted a lot of\n    time because of this.\n    \n    Change-Id: I6468c9a098b56db8242a2cf2c23b7a4857bd8574\n',9,4,'HPE'),(557192,4094,4094,'2016-07-26 17:48:48','2016-07-26 17:44:56','    Mention SWIFT_TEST_DEBUG_LOGS in development guide\n    \n    Change-Id: If764de0a28f5afb858b3e892b35fe5fa147a0650\n',2,0,'HPE'),(557194,4094,4094,'2016-07-26 18:14:06','2016-07-26 18:12:26','    Document how to run a single functional test\n    \n    Change-Id: Icabc5a8316f5e8fd887bb42358ad03e9c43d0765\n',5,0,'HPE'),(557196,7680,7680,'2016-07-12 15:18:56','2016-05-23 21:10:08','    Add region in ring structure & deployment guide\n    \n    Deployment guide does not talk about the region. Also, it does not\n    specify that regions and zones need to be ints.\n    \n    This patch adds brief description about region and changes numbers\n    to int. Also, adds region in the document that talks about ring data\n    struture.\n    \n    Change-Id: I04ce42fb3e5c1f08e7f7ff6be23482cee8bdeb71\n    Partial-Bug: #1583551\n',8,3,'Intel'),(557198,4094,4094,'2016-07-28 11:09:48','2016-07-28 11:09:48','    Fix broken link in associated projects doc\n    \n    Change-Id: I6f0cc1004a40e77345c641c0e5076f2f5dadb891\n',1,1,'HPE'),(558076,4094,4094,'2016-07-22 17:18:20','2016-07-06 11:27:58','    Copy headers correctly when copying object\n    \n    Fix copy middleware so that all client-defined object\n    headers that object servers allow to be persisted are copied.\n    For example, content-encoding and content-disposition will\n    now be copied.\n    \n    Fix treatment of x-fresh-metadata header so that, when it is\n    used, new object sysmeta is applied to the object copy in the\n    same way as a copy without x-fresh-metadata.\n    \n    Remove unnecessary passing of original request headers to\n    sink PUT request constructor: passing the environ is sufficient\n    to have the new request inherit the original\'s headers.\n    \n    Add tests for this change and to verify that content-type\n    gets either copied or updated if supplied with the copy\n    request.\n    \n    Add tests for x-fresh-metadata treatment.\n    \n    Closes-Bug: #1391826\n    Closes-Bug: #1600247\n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    Change-Id: I917fb0b4e831c13e04ade1c5e0b9821802dec967\n',319,29,'HPE'),(558078,8263,8263,'2016-07-28 15:01:47','2016-07-28 14:44:56','    Simple code and improve the readability of the code\n    \n    In a function,when a variable is defined at the front,it is unnecessary\n    to define the variable again.\n    \n    Modify the variable name to improve the readability of the code.\n    For example: container_nodes=container_info[\"nodes\"] instead of\n    containers=container_info[\"nodes\"]\n    \n    Change-Id: I30b887fed08ff650076ce8ce33b1502bc1795b3f\n',7,7,'EasyStack'),(558080,1111,1111,'2016-07-26 12:23:54','2016-06-09 06:17:22','    Add doc entry to check partition count\n    \n    An high or increasing partition count due to storing handoffs can have\n    some severe side-effects, and replication might never be able to catch\n    up. This patch adds a note to the admin_guide how to check this.\n    \n    Change-Id: Ib4e161d68f1a82236dbf5fac13ef9a13ac4bbf18\n',80,1,'Red Hat'),(558082,4075,4075,'2016-07-26 16:55:01','2016-07-25 12:22:20','    Split up backend/sysmeta header/footer preference tests\n    \n    The change in preference to the Related-Change is simply to prefer\n    sysmeta overrides in the headers to backend overrides in the footers:\n    \n    Before:\n    sysmeta footers > backend footers > sysmeta headers > backend headers\n    \n    After:\n    sysmeta footers > sysmeta headers > backend footers > backend headers\n    \n    This change just breaks up the tests to try to make it more obvious\n    what already worked and what has changed.  The justification seems to\n    be that overrides in sysmeta headers only work on policies that don\'t\n    send backend footers, but sysmeta overrides should always have a\n    higher preference than backend overrides.\n    \n    Related-Change: Idb40361ac72da51e1390dff690723dbc2c653a13\n    Change-Id: I074fbecb6440fb1d04279cd892d38d2acc44b47d\n',86,73,'Rackspace'),(558084,4094,4094,'2016-07-27 09:08:11','2016-07-27 09:08:11','    Additional test for container override etag preferences\n    \n    Adds one more scenario to the tests for preference of\n    container etag override values in sysmeta or backend\n    headers and footers.\n    \n    Change-Id: Iacdaec8c98c7001029163a9d50321a13dc8d5a19\n    Related-Change: I074fbecb6440fb1d04279cd892d38d2acc44b47d\n',11,4,'HPE'),(558086,4075,4075,'2016-07-26 17:02:54','2016-07-25 12:30:34','    Use self.ts more consistently in obj.test_server\n    \n    A make_timestamp_iter was added into setUp in the Related-Change.\n    \n    There was a couple of different tests that were using timestamp iters\n    in different ways, consistently we apply the use of next(self.ts)\n    which I believe is becoming more common/standardized in unitests.\n    \n    Related-Change: I074fbecb6440fb1d04279cd892d38d2acc44b47d\n    Change-Id: Ib6b883afec242355ae08c50c1e685a20e5efadc7\n',26,42,'Rackspace'),(558088,4075,869,'2016-07-28 11:59:51','2016-03-11 16:15:17','    Handle IPv6 addresses in swift-get-nodes.\n    \n    The curl commands needed a little tweaking.\n    \n    Change-Id: I6551d65241950c65e7160587cc414deb4a2122f5\n    Closes-Bug: 1555860\n',122,14,'SwiftStack'),(558090,4075,8232,'2016-07-28 12:08:06','2016-07-26 20:20:38','    Moved ipv4 & ipv6 validations to the common utils\n    \n    Validating ip addresses for ipv4 and ipv6 formats have more generic\n    use cases outside of rings. swift-get-nodes and other utilities that\n    need to handle ipv6 adrresses often require importing ip validation\n    methods from swift/common/rings/utils (see Related-Change). Also,\n    expand_ipv6 method already exists in swift/common/utils. Hence moving\n    validation of ips also into swift/common/utils from\n    swift/common/ring/utils.\n    \n    Related-Change: I6551d65241950c65e7160587cc414deb4a2122f5\n    Change-Id: I720a9586469cf55acab74b4b005907ce106b3da4\n',109,113,'Intel'),(558590,8510,8510,'2016-07-28 19:05:08','2016-07-13 19:09:39','    Check object metadata constraints after authorizing\n    \n    In the object proxy controller, the POST method checked the metadata of an\n    object before calling swift.authorize. This could allow an auth middleware to\n    set metadata that violates constraints. Instead, checking the metadata should\n    take place after authorization.\n    \n    Change-Id: I5f05039498c406473952e78c6a40ec11e8b53f8e\n    Closes-Bug: #1596944\n',22,3,'Intel'),(558592,2470,2470,'2016-06-29 13:21:31','2016-06-29 13:21:31','    Fix intermittent SLO unit test failures\n    \n    Now that we have concurrent deletes, the order is not guaranteed.\n    \n    Change-Id: Ib833306a07ee0755a80501d5294eaa87b2347dc0\n',32,33,'SwiftStack'),(559419,5596,5596,'2016-07-19 22:59:24','2016-06-27 17:58:49','    go: time out flock differently\n    \n    Use channels and timers to time out a blocking flock, rather than\n    non-blocking + polling.\n    \n    Change-Id: Idd7d5d035a5ccf1c609bbd79575ded1e896a3f07\n',48,16,'Rackspace'),(559421,5596,5596,'2016-07-12 23:02:07','2016-07-12 22:55:00','    go: set nodelay on repconn\n    \n    Make sure repconn messages don\'t suffer nagle delays.\n    Use bigger buffers to make sure we make efficient use of packets.\n    \n    I\'d like to just use tcp_cork, but it\'s not exposed very well in go.\n    \n    Change-Id: Id66c37eb877801706992ccc69d3801e0f7efd716\n',15,7,'Rackspace'),(559423,5596,5596,'2016-07-26 19:47:38','2016-07-08 19:10:09','    go: direct client concurrency\n    \n    Fix up the concurrency in firstResponse/quorumResponse, because\n    there\'s a bug in it and also I\'m better at it now.\n    \n    Change-Id: Ib438d747e6f0a0783e2748a0681ab7c3d56bf52f\n',37,51,'Rackspace'),(559425,5596,5596,'2016-07-27 20:44:21','2016-07-27 20:43:31','    go: make container timeout configurable\n    \n    Add 3 config options from the swift object server around timing out\n    container updates.\n    \n    container_update_timeout sets how long it waits for a container\n    update before returning to the user and continuing the update\n    asynchronously.  This should just be set high enough that users\n    generally get a consistent view of containers.\n    \n    conn_timeout sets how long it should wait for the TCP connect to\n    happen.\n    \n    node_timeout sets how long it should give the request to succeed.\n    \n    conn_timeout and node_timeout are defaulted to higher than swift\'s,\n    since container_update_timeout obviates the need for them to be\n    super aggressive.\n    \n    Change-Id: I7220a909c1b92411e499fd00fcffd68be6733866\n',26,8,'Rackspace'),(559427,229,8519,'2016-08-01 15:43:25','2016-08-01 21:39:50','    made link in README.rst more clear\n    \n    Escaping the underscore is not necessary in this case. See\n    http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#inline-markup-recognition-rules\n    \n    Change-Id: I21d95d6baaf471246eb8a931c7df366634529512\n',1,1,'independent'),(559429,5650,5650,'2016-07-28 14:19:48','2016-07-25 22:07:15','    Enable in-process func tests to optionally use encryption\n    \n    Running functional tests in the in-process mode uses\n    the default value for the pipeline.  This patch adds support\n    to specify the SWIFT_TEST_IN_PROCESS_CONF_LOADER variable\n    to point to a labeled function that changes the proxy\n    configuration for the functional test.\n    \n    The patch also adds a new tox environment\n    func-in-process-encryption\n    which runs with the environment variable\n    SWIFT_TEST_IN_PROCESS_CONF_LOADER=encryption\n    \n    The motivation for this change is to put support in place for an\n    upstream CI job that will functionally test using encryption\n    middleware in the pipeline.  The gate job is proposed at:\n    https://review.openstack.org/#/c/348292/\n    \n    Change-Id: I15c4b20f1d2be57ae21c69c614f6a9579145bee9\n',80,0,'IBM'),(559431,832,6634,'2016-08-02 07:30:56','2016-08-01 22:13:58','    update swift-dispersion manpages to add policy-name\n    \n    This change adds -P / --policy-name option to the swift-dispersion\n    manpages. Also tidied up a little removing some extra whitespace at the\n    end of lines.\n    \n    Change-Id: Ic3372379994964e96258939580452f94fb575a06\n    Closes-Bug: #1605686\n',47,41,'Intel'),(560580,869,869,'2016-08-03 16:46:48','2016-08-03 16:46:48','    Fix stale docstring in SegmentedIterable.\n    \n    At some point, we added stuff to listing_iter, but didn\'t update the\n    docstring. I noticed this while trying to write code using a\n    SegmentedIterable when it wouldn\'t take my 3-tuples like the docstring\n    claimed it would.\n    \n    Change-Id: I8f6667e97b1277f5b403a5f6fa7f9d708bb19249\n',11,3,'SwiftStack'),(560581,4094,4094,'2016-08-02 10:57:59','2016-08-02 10:57:59','    Fix link to docs from swift-dispersion manpages\n    \n    Change the link to the admin docs to point to #dispersion-report\n    rather than non-existent #cluster-health.\n    \n    Change-Id: Ia2f4262c266201d4d555e7bedb8c5c2eb9fb1264\n',6,6,'HPE'),(560583,5596,5596,'2016-08-04 03:45:14','2016-08-04 03:05:40','    missing parens in functional test\n    \n    I was watching the logs and noticed it creates an object named:\n    \"<bound method type.create_ascii_name of <class \'test.functional.tests.Utils\'>>\"\n    \n    Change-Id: I8dcbb40125b84a914e3c01566ae9c3f08dc9ea0f\n',1,1,'Rackspace'),(560585,832,832,'2016-07-29 09:24:05','2016-06-07 14:52:28','    Add end_marker and reverse options to direct_client\n    \n    Currently the direct_get_container and direct_get_account methods\n    of the direct client don\'t support passing in the \'end_marker\' and\n    \'reverse\' params.\n    \n    This change adds support for these params in direct client.\n    \n    Change-Id: I846fc70ff3abdb1674152a8d9e0521c709f254c4\n',25,6,'Rackspace'),(560587,8715,8715,'2016-07-26 00:58:06','2016-07-25 13:23:04','    check _last_part_moves when pretend_min_part_hours_passed\n    \n    pretend_min_part_hours_passed do things like this:\n    self._last_part_moves[part] = 0xff\n    \n    this will throw exception if self._last_part_moves is None.\n    \n    this patch is to check self._last_part_moves to prevent exception.\n    Closes-bug: #1578835\n    \n    Change-Id: Ic83c7a338b45bfcf61f5ab6100e6db335c3fa81a\n',20,1,'IBM'),(561953,8474,8474,'2016-08-07 10:44:59','2016-06-15 19:56:03','    Raise 412 response on expirer\n    \n    Currently, the expirer daemon treats 412 (precondition failed)\n    as successful DELETEs.\n    \n    On the other hand, it treats 404 as failed while reclaim_age\n    (usually a week) has not passed.\n    This patch unifies both cases to the same handling: waiting for\n    reclaim_age to pass, then deleting the entry.\n    \n    The reason the expirer should not delete a 412 entry right away,\n    is that it might be the case that 412 is returned because of\n    a split brain, where the updated object servers are currently down.\n    Same reason holds for a 404 response.\n    \n    Change-Id: Icabbdd72746a211b68f266a49231881f0f4ace94\n',134,59,'IBM'),(561954,592,592,'2016-08-09 13:18:10','2016-08-09 13:17:38','    Remove the duplicated word \'be\'\n    \n    Change-Id: I3ff4e7135d8d10c62dfcde90f34befe328ac39b2\n',1,1,'Fujitsu'),(561956,8705,8741,'2016-08-05 10:15:24','2016-08-04 19:31:18','    Make the logger information format\n    \n    The logger usually use the _() func to ensure\n    the international message. This commit modify the\n    logger format in proxy pkg.\n    \n    Change-Id: I9a8e118dc6ba55e462f326aebff280289e8ab4fe\n',8,7,'GohighSec'),(561958,7807,7807,'2016-08-08 18:59:34','2016-07-25 18:34:21','    [install-guide] Include environment-networking\n    \n    environment-networking.rst and edit_hosts_file.txt were left out\n    when swift-specific content was moved from OpenStack Installation\n    Guide to swift install-guide.\n    \n    Change-Id: I334cca0634e3071a7ea285e6ad49ed9baaf7dca8\n    Partially-Implements: blueprint projectspecificinstallguides\n    Closes-Bug: 1605021\n',86,0,'Red Hat'),(563234,1475,1475,'2016-07-26 15:36:22','2016-07-26 12:36:50','    Fix Python 3 issues in diskfile\n    \n    * Fix bytes vs Unicode issues\n    * On Python 3, encode JSON to UTF-8 and decode it from UTF-8\n    * Open files in binary mode to avoid Unicode issues\n    * test_auditor: use bytes for content, open files in binary mode\n    \n    Change-Id: Ifa84001493cfb57975d3b140b0d7e09020504bca\n',28,23,'eNovance'),(563236,4094,4094,'2016-08-02 10:41:26','2016-08-02 10:38:45','    Fix repeated OPTIONS in swift-dispersion-report manpage\n    \n    Remove the repeated OPTIONS section headers, which looks odd\n    and is inconsistent with swift-dispersion-populate.\n    \n    Change-Id: I6d894e3b61002ddf7c0ea8a78cde226617eb11a6\n',0,18,'HPE'),(563238,2470,2470,'2016-07-05 17:39:40','2016-07-01 16:13:05','    Fix gettext_ calls\n    \n    Change-Id: I80e7d204f78620c6eaf63bfad18588c4096529b8\n',22,18,'SwiftStack'),(563240,6634,6634,'2016-08-05 13:58:25','2016-08-04 20:35:19','    NIT: fixing inconsistent naming of OpenStack Swift\n    \n    Throughout the manpages maintaining references to OpenStack Swift.\n    \n    Change-Id: I2a0c2658e10a92671bfc092c0a3abaddfd8cd7d9\n    Closes-Bug: #1609687\n',346,346,'Intel'),(563242,2470,2470,'2016-07-05 10:24:02','2016-07-05 10:24:02','    Have py35 tox env match py34\n    \n    Very few of our tests can actually be run under py3. The ones that can\n    should still pass on py35, though.\n    \n    Change-Id: Iaf9aaa296e3b21aa0ee513c479a50f3796787f32\n',4,0,'SwiftStack'),(563244,5599,5599,'2016-07-24 19:06:58','2016-07-03 22:03:20','    Raise ValueError if empty value coming into encrypt_header_val\n    \n    encrypt_header_val is used to translate a raw header value into an\n    encrypted value. Semantically, a header with an empty value won\'t be stored\n    and all callers seem to remove such a header before calling\n    encrypted_header_val.\n    \n    So if no reason for returning (\'\', None), I think it\'s better to change it to\n    raise ValueError not to cause another error for users of the return value.\n    (e.g. dump_crypto_meta)\n    \n    Plus this patch addes a few unit tests for those cases above.\n    \n    Change-Id: Ic1237f4afb8c0e466be5ce59fe31b667c39242b0\n',35,1,'NTT'),(563246,2470,2470,'2016-07-20 17:59:25','2016-07-20 17:59:25','    Make swift-oldies py3-compatible\n    \n    Change-Id: I0388f4738966bc453e922e9598ff9df60ecda4eb\n',11,8,'SwiftStack'),(563248,2470,2470,'2016-08-04 17:55:26','2016-08-02 21:50:45','    Fix encryption-delimiter interaction\n    \n    Previously, if a container listing produced `subdir` elements\n    the decrypter would raise a KeyError.\n    \n    Additionally, update the functests so this sort of thing would\n    have been caught at the gate.\n    \n    Closes-Bug: 1609904\n    Change-Id: Idc1907d19f90af7a086f45f8faecee9fbc3c69c2\n',71,31,'SwiftStack'),(563250,4094,8748,'2016-08-11 08:30:39','2016-08-11 05:21:54','    Corrects spelling error in swift/common/middleware/slo.py\n    \n    Fixes \'perfomed\' to \'performed\'\n    \n    Change-Id: I54adf45494cd4c6edae7bb5b404d377527c6c5a0\n    Closes-Bug: 1612051\n',1,1,'Intel'),(563251,4094,5599,'2016-06-07 12:02:03','2015-07-02 00:35:02','    Last-Modified header support on HEAD/GET container\n    \n    This patch enables to show a x-put-timestamp as\n    a last-modified header in container-server.\n    \n    Note that the last-modified header will be changed only when a\n    request for container (PUT container or POST container) comes into\n    Swift. i.e. some requests for objects (e.g. PUT object, POST object)\n    will never affect the last-modified value but only when using\n    python-swiftclient like as \"swift upload\", the last-modified will\n    be close to the upload time because python-swiftclient will make\n    a PUT container request for \"swift upload\" each time.\n    \n    Change-Id: I9971bf90d24eee8921f67c02b7e2c80fd8995623\n',84,8,'NTT'),(570601,42,42,'2016-08-26 13:05:08','2016-08-26 13:05:08','    Fix the removal of temporary files of tests\n    \n    I noticed that /tmp had a number of leftover temporary files\n    after a run of  go test ./... . They resulted from 3 root causes\n    with separate fixes:\n    \n    - Add a few defer before ts.Close() after makeObjectServer()\n    - Remove correct files in TestGetFileBadMetadata(), was copypasta\n    - Wait for goroutine in SwiftObject.Commit() to finish\n    \n    The last one is not easy to fix, because it requires waiting for\n    Commit() in Close(), and that has performance implications for\n    real work. But we can fix the first two at least and possibly\n    revisit the wild goroutine problem later.\n    \n    Change-Id: I30eea7fc9b8ff1e2857d201b07007e941626c546\n',10,10,'Red Hat'),(570602,8232,8232,'2016-07-30 15:28:11','2016-05-20 17:41:29','    swift-ring-builder output corrected for ipv6\n    \n    Adjusted width of ip and port columns in swift-ring-builder command\n    output to dynamically span to the longest ip or the longest port in\n    the devices list. Also combined the port and ip address columns for\n    better visual clarity. Took care of ipv6 format [ipv6]:port\n    \n    Modified the corresponding test case with expected output.\n    \n    Change-Id: I65837f8fed70be60b53d5a817a4ce529ad0f070e\n    Closes-Bug: #1567105\n',171,22,'Intel'),(570604,8263,8263,'2016-08-11 09:56:15','2016-08-10 16:48:45','    Fix assertEqual error\n    \n    I think assertEqual(a,a) is error that caused by carelessness\n    in test case, so I modify it.\n    \n    Change-Id: I8767c35e8a1a47f1b64241f67959277074a37b21\n',2,2,'EasyStack'),(570606,8884,8884,'2016-08-04 10:43:48','2016-07-31 18:31:37','    add swift-oldies man page\n    \n    Closes-bug: #1607017\n    Change-Id: I365edf77c5bf34e2e51d7f10c9ea1012c1bda8ed\n',69,0,'Intel'),(570608,8885,8885,'2016-08-11 16:10:35','2016-08-11 16:10:35','    Grammer error : swift/doc/source/overview_ring.rst\n    \n    Changed sentence: \"Regions can be used to describe geo-graphically\n    systems characterized by lower-bandwidth\"\n    To: \"Regions can be used to describe geographical\n    systems characterized by lower-bandwidth\"\n    \n    Change-Id: I0f614a4c53dd31459f1b6297dd32a8c0f609d9ce\n    Closes-Bug: 1612302\n',1,1,'Intel'),(570610,4094,4094,'2016-07-08 11:50:55','2016-07-01 14:39:35','    Add encrypter and decrypter links to middleware.rst\n    \n    Drive-by fix for crypto filter_factory test.\n    \n    Add note to encryption doc to highlight that root secret\n    should not be changed (follow up on earlier review comment).\n    \n    Co-Authored-By: Tim Burke <tim.burke@gmail.com>\n    \n    Change-Id: I9776cddd4d045408325342983e285a00c992bfae\n',71,18,'HPE'),(570612,5254,5254,'2016-08-11 16:24:57','2016-08-11 16:24:57','    fix swift_oldies on RH based systems\n    \n    Change-Id: Icbb4c6d461ded4fab2afade09e718b3a74917717\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',3,1,'Red Hat'),(570614,5205,5205,'2016-07-29 12:56:42','2016-07-15 12:22:30','    Reduce code duplication\n    \n    Reduced source code by extracting duplicated code\n    (swift/cli/ringbuilder.py)\n    http://openqa.sed.hu/dashboard/index?did=1&id=OpenStack%3Aswift,\n    in 127~CloneClass\n    \n    Change-Id: Id1081363610075f306eff7cf003c3355f283f1d1\n    Closes-Bug: 1536127\n',20,33,'Ericsson'),(570616,8463,8463,'2016-07-29 11:43:32','2016-07-29 11:43:32','    modify the home-page info with the developer documentation\n    \n    update home-page info\n    \n    Change-Id: I625c25a8a5698d98174603c6fa2b42391471c03d\n',1,1,'ZTE Corporation'),(570618,161,161,'2016-08-12 21:18:07','2016-08-12 21:18:07','    Move other-requirements.txt to bindep.txt\n    \n    The default filename for documenting binary dependencies has been\n    changed from \"other-requirements.txt\" to \"bindep.txt\" with the release\n    of bindep 2.1.0. While the previous name is still supported, it will\n    be deprecated.\n    \n    Move the file around to follow this change.\n    \n    Note that this change is self-testing, the OpenStack CI infrastructure\n    will use a \"bindep.txt\" file to setup nodes for testing.\n    \n    For more information about bindep, see also:\n    http://docs.openstack.org/infra/manual/drivers.html#package-requirements\n    http://docs.openstack.org/infra/bindep/\n    \n    As well as this announcement:\n    http://lists.openstack.org/pipermail/openstack-dev/2016-August/101590.html\n    \n    Change-Id: I000a4e708006263acc6d9731a6677a6e62e285b6\n',17,17,'SUSE'),(570620,8705,8346,'2016-08-13 16:54:38','2016-08-14 00:43:47','    Fix typo in the file\n    \n    Change-Id: I6539e9b9fb7918e387e8ae802be7b4efbcb07f4d\n',1,1,'GohighSec'),(570621,5254,5254,'2016-08-09 15:42:20','2016-08-05 14:22:28','    add reminder how to run debug func tests\n    \n    added comments on how to run in_process and specific\n    test cases\n    \n    Change-Id: I485755996b15753323d30de09914d35e262fcedc\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',9,1,'Red Hat'),(570623,5323,5323,'2016-08-10 09:30:43','2016-08-10 09:29:44','    Added a test for delayed reap.\n    \n    The test schedules a 3-second delayed account reaping.\n    The test checks that no reaping after an immediate reap, and that full reaping\n    occurs 3 seconds later.\n    \n    Change-Id: I0ab954ed3c59d808f32d84dc53fd512fd0a651be\n',62,13,'IBM'),(570625,2470,2470,'2016-08-12 05:51:57','2016-08-12 05:46:33','    Wait for a non-empty chunk in WSGIContext._app_call\n    \n    We\'re functioning as a WSGI server here, so this bit from PEP-3333 seems\n    to apply:\n    \n    > The start_response callable must not actually transmit the response\n    > headers. Instead, it must store them for the server or gateway to\n    > transmit only after the first iteration of the application return\n    > value that yields a non-empty bytestrin ... . In other words, response\n    > headers must not be sent until there is actual body data available, or\n    > until the application\'s returned iterable is exhausted.\n    \n    Plus, it mirrors what swob.Request.call_application does.\n    \n    Change-Id: I1e8501f8ce91ea912780db64fee1c56bef809a98\n',8,11,'SwiftStack'),(570627,2470,2470,'2016-08-16 14:08:10','2016-04-19 09:41:50','    Drop X-Auth-Token from all versioned_writes subrequests\n    \n    It is not necessary for versioned_writes to function (all of these\n    were pre-authed requests anyway), and transaction ID should be used to\n    trace requests instead.\n    \n    Change-Id: If55c1586aa38f9a3bc9e1d00768ca00201af94cd\n',1,6,'SwiftStack'),(570629,5599,5599,'2016-08-16 18:02:58','2016-08-15 18:26:00','    Don\'t run probe tests if resetswift failed\n    \n    Probe test is cleaning up the swift environment for each test in setUp\n    method. However, probe tests will run even if we cannot use the resetswift\n    script for some reasons (e.g. not permitted, the script not found) and\n    probably the probe tests will fail after a long time passed for the\n    execution.\n    \n    To prevent such an unfortunate situation and also to find the reason\n    easily, this patch adds the exit code check for \"resetswift\" and if it\n    failed, the test will raise AssertionError with the stdout and stderr to\n    make it easy to find the reason.\n    \n    Closes-Bug: #1613494\n    \n    Change-Id: Id80d56ab6b71402ead4fe22c120064d78c1e74ac\n',5,0,'NTT'),(570631,4094,4094,'2016-08-17 17:20:21','2016-08-17 17:20:21','    Add rm to tox whitelist_externals\n    \n    Avoids a warning when running tox -e api-ref\n    \n    Change-Id: Ib02849075e6424f1db84499fd7500d7bb76dde67\n',1,0,'HPE'),(570633,591,4093,'2016-08-10 23:56:15','2015-10-22 10:19:49','    Change schedule priority of daemon/server in config\n    \n    The goal is to modify schedule priority and I/O scheduling class and\n    priority of daemon/server via configuration.\n    Setting is optional, default keeps current behaviour.\n    \n    Use case:\n    Prioritize object-server to object-auditor, because all user\'s requests\n    needed to be served in peak hours and audit could wait.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    DocImpact\n    Change-Id: I1018a18f4706daabdb84574ffd9a58d831e68396\n',816,4,'Seznam.cz'),(570635,1475,1475,'2016-07-26 19:58:38','2016-07-26 19:42:46','    monkey_patch_mimetools() now does nothing on py3\n    \n    The mimetools module has been removed from Python 3: modify\n    monkey_patch_mimetools() to do nothing on Python 3.\n    \n    Skip test_monkey_patch_mimetools() on Python 3.\n    \n    Change-Id: I50f01ec159efedbb4df759ddd1e13928ac28fba6\n',16,4,'eNovance'),(570637,5650,5650,'2016-08-18 09:31:57','2016-07-26 15:20:52','    Add test for POST to DLO manifest file\n    \n    In the past, a POST to a DLO manifest file when object_post_as_copy\n    was true resulted in the manifest file contents being replaced\n    by the concatenation of the DLO segments.  This no longer\n    happens, but tests for this case are missing.\n    \n    This patch adds a functional test to assert that the manifest\n    file is preserved in a POST request.\n    \n    Change-Id: I90546014a7dcc7266f0d0e0ff6339688b7954b96\n    Related-bug: #1487791\n    Related-bug: #1514317\n',35,0,'IBM'),(570639,3302,3302,'2016-07-15 13:32:31','2016-07-15 15:02:00','    Use more specific asserts in test/unit/proxy tests\n    \n    I changed asserts with more specific assert methods.\n    e.g.: from assertTrue(sth == None) to assertIsNone(*) or\n    assertTrue(isinstance(inst, type)) to assertIsInstace(inst, type)\n    or assertTrue(not sth) to assertFalse(sth).\n    \n    The code gets more readable, and a better description will be shown on fail.\n    \n    Change-Id: If6aad8681aab7c9a41d65a4f449d8abbe3e64616\n',218,223,'Ericsson'),(570641,8263,8263,'2016-08-05 19:48:24','2016-08-04 13:05:32','    Make log information format\n    \n    Change-Id: I4a7699ce17c136490327776c0a3c3be450526814\n',7,6,'EasyStack'),(570643,4094,4094,'2016-08-16 16:35:53','2016-08-16 16:21:59','    Improve doc for using container-sync with large objects\n    \n    Clarify that synced segment container names must be the same\n    when syncing large objects.\n    \n    Also add multipart-menifest query string option to API ref\n    for object GETs.\n    \n    Change-Id: Ib2d2a1e6c1e5eff215fc75c2b49e7d6758b17b7e\n    Partial-Bug: #1613681\n    Closes-Bug: #1613316\n',19,5,'HPE'),(570645,4093,4093,'2016-08-19 07:39:49','2016-08-18 16:14:36','    Documantation enhancements of nice/ionice feature\n    \n    Based on comments from patch #238799.\n    \n    Change-Id: I9455cf6dc7fd12fee62439ff3c5f3255287ab1be\n',379,29,'Seznam.cz'),(570647,8263,8263,'2016-08-18 13:28:50','2016-08-11 20:44:37','    Reset AccountReaper stats in __init__\n    \n    Make the AccountReaper __init__ method reset its stats variables.\n    This saves the unit test having to initialise the stats variables.\n    Also add more asserts to some AccountReaper test cases.\n    \n    Change-Id: Iea112962d89ebfa3450f43b2a28ac8e8ed8b07b0\n',33,7,'EasyStack'),(570649,1475,1475,'2016-08-22 10:44:17','2016-08-22 10:41:59','    py3: tox.ini: use substituation to py35 commands\n    \n    Use tox substitution to avoid duplicating testenv:py34 commands in\n    testenv:py35, to not have to maintain the whitelist of Python 3 tests\n    in two different places.\n    \n    Write also the list of tests in a newline to be able to more easily\n    add new unit tests.\n    \n    Change-Id: I6e7f238f1c5d3fc9b6560918dcbb93e9dd8ec084\n',3,3,'eNovance'),(570650,4094,5599,'2016-08-18 14:08:56','2016-08-15 17:52:58','    Follow up delayed reap probe test\n    \n    This is a follow up patch for https://review.openstack.org/#/c/321041\n    \n    This patch includes following items:\n    \n    - Move test_sync to below _verify_account_reaped to be the actual tests\n      as a bunch\n    - Change the test name fron \"test_sync\" to \"test_reap\" to clarify the\n      purpose\n    - Fix a typo from \"Object\" to \"Container\" for an error message\n    \n    Change-Id: I51bc01113056e2eb99f731d38e9f1c7a6c5c96be\n',8,7,'NTT'),(570652,4094,4094,'2016-08-05 14:28:22','2016-08-05 14:28:22','    Tighten up direct client unit tests\n    \n    Make the tests for direct_get_container and direct_get_account\n    verify all combinations of request parameters.\n    \n    Change-Id: I3b929ca83b37c32927b9bf619f445d698b9bdab9\n    Related-Change: I846fc70ff3abdb1674152a8d9e0521c709f254c4\n',76,45,'HPE'),(570654,4088,4088,'2016-08-16 15:52:20','2016-08-11 00:53:13','    Ignore auditor status files to prevent replicator reports errors\n    \n    Ignore `auditor_status_*.json` files during the collecting jobs\n    and replicator won\'t use these wrong paths to find objects that\n    causes an exception to increase failure count in replicator report.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Mark Kirkwood <mark.kirkwood@catalyst.net.nz>\n    \n    Change-Id: Ib15a0987288d9ee32432c1998aefe638ca3b223b\n    Closes-Bug: #1583305\n',42,4,'SwiftStack'),(570656,4075,7680,'2016-08-22 12:46:23','2016-08-22 19:27:35','    Fix typos and grammer in builder.py\n    \n    Change-Id: Ib87f4df8f741809840e92db9bacf2af847a5f77f\n    Closes-Bug: #1600403\n',16,15,'Intel'),(570658,588,588,'2016-08-19 16:44:07','2016-08-19 14:25:06','    Get ready for os-api-ref sphinx theme change\n    \n    Change-Id: Ib4aa4a26814273efafa3453237d18acf8cc966cb\n',30,5,'HPE'),(570660,4094,5599,'2016-08-17 12:52:25','2016-04-11 20:51:00','    Add Pros/Cons docs for global cluster consideration\n    \n    This comes from discussion in Bristol Hackathon (Feb 2016).\n    Currently Swift has a couple of choices (Global Cluster and Container\n    Sync) to sync the stored data into geographically distributed locations.\n    \n    This patch adds the summary of the discussion comparing between\n    Global Cluster and Container Sync to enable operators to know which\n    functionality fits their own use case.\n    \n    And, to be fairness with container-sync, this patch moves global\n    cluster docs into overview_global_cluster.rst from admin_guide.rst.\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    \n    Change-Id: I624eb519503ae71dbc82245c33dab6e8637d0f8b\n',193,127,'NTT'),(570662,8263,8263,'2016-08-24 10:10:12','2016-08-23 14:26:47','    Improve readability in the obj server\'s unit tests\n    \n    This change improves the readability of the object-server\'s unit\n    tests by breaking down some long assertTrue statements into smaller\n    and much easier to read and more relevant assert statements.\n    \n    For example:\n        assertTrue(a in resp.headers and\n                   b in resp.headers and\n                   c not in resp.headers)\n    \n    Is equal to:\n        assertIn(a, resp.headers)\n        assertIn(b, resp.headers)\n        assertNotIn(c, resp.headers)\n    \n    Change-Id: Iba746ecfb1a1dc541856b7a4c9d2f00d08e4ad51\n',34,34,'EasyStack'),(570664,8263,8263,'2016-08-25 15:37:42','2016-08-25 15:37:42','    Fix ValueError information in obj/expirer\n    \n    I fix error information in raise ValueError(...)\n    For example:\n        if a>=b:\n            # It should be under below and not \'a must be less than or equal to b\'\n            raise ValueError(\'a must be less than b\')\n    \n    Change-Id: I3d12b79470d122b2114f9ee486b15d381f290f95\n',1,1,'EasyStack'),(570665,2470,2470,'2016-08-15 21:04:29','2015-08-19 12:17:47','    Add \"history\" mode to versioned_writes middleware\n    \n    This change introduces the concept of a \"versioning mode\" for\n    versioned_writes. The following modes are supported:\n    \n     * stack\n    \n        When deleting, check whether any previous versions exist in the\n        versions container. If none is found, the object is deleted. If the\n        most-recent version in the versions container is not a delete\n        marker, it is copied into the versioned container (overwriting the\n        current version if one exists) and then deleted from the versions\n        container. This preserves the previous behavior.\n    \n        If the most-recent version in the versions container is a delete\n        marker and a current version exists in the versioned container, the\n        current version is deleted. If the most-recent version in the\n        versions container is a delete marker and no current version exists\n        in the versioned container, we copy the next-most-recent version\n        from the versions container into the versioned container (assuming\n        it exists and is not a delete marker) and delete both the\n        most-recent version (i.e., the delete marker) and the just-copied\n        next-most-recent version from the versions container.\n    \n        With this mode, DELETEs to versioned containers \"undo\" operations\n        on containers. Previously this was limited to undoing PUTs, but now\n        it will also undo DELETEs performed while in \"history\" mode.\n    \n     * history\n    \n        When deleting, check whether a current version exists in the\n        versioned container. If one is found, it is copied to the versions\n        container. Then an empty \"delete marker\" object is also put into the\n        versions container; this records when the object was deleted.\n        Finally, the original current version is deleted from the versioned\n        container. As a result, subsequent GETs or HEADs will return a 404,\n        and container listings for the versioned container do not include\n        the object.\n    \n        With this mode, DELETEs to versioned containers behave like DELETEs\n        to other containers, but with a history of what has happened.\n    \n    Clients may specify (via a new X-Versions-Mode header) which mode a\n    container should use. By default, the existing \"stack\" mode is used.\n    \n    Upgrade consideration:\n    ======================\n    \n    Clients should not use the \"history\" mode until all proxies in the\n    cluster have been upgraded. Attempting to use the \"history\" mode during\n    a rolling upgrade may result in some requests being served by proxies\n    running old code (which necessarily uses the \"stack\" mode), leading to\n    data loss.\n    \n    Change-Id: I555dc17fefd0aa9ade681aa156da24e018ebe74b\n',934,144,'SwiftStack'),(570667,5599,5599,'2016-07-24 21:49:57','2016-01-15 03:53:01','    Fix EC ring validation at ring reload\n    \n    Swift EC has a strong constraint about the ring must have a number of\n    replicas which fits ec_k + ec_m. That is validated when servers waking\n    up. However, Swift has more chance to load such an invalid ring when\n    a request comming, calling some node iteration like get_nodes,\n    get_part_nodes or so, and no ring validation is there.\n    \n    This patch moves ring validation from policy validate_ring into the ring\n    instance as validation_hook that will run at ring reload. Since this patch,\n    ring instance will allow to use the old ring if the reload is not fourced.\n    \n    Note that the exception if invalid ring found was changed from\n    RingValidationError to RingLoadError because RingValidationError is a\n    child of RingBuilderError but the ring reload is obviously outside of\n    \"builder\".\n    \n    Closes-Bug: #1534572\n    \n    Change-Id: I6428fbfb04e0c79679b917d5e57bd2a34f2a0875\n',170,44,'NTT'),(570669,7589,7589,'2016-08-29 14:32:10','2016-08-29 14:31:27','    Remove unnecessary tearDown\n    \n    This is to remove unnecessary tearDown to keep code clean.\n    \n    Change-Id: Ie70e40d6b55f379b0cc9bc372a35705462cade8b\n',0,3,'ZTE Corporation'),(570670,4075,8263,'2016-08-29 17:20:48','2016-08-29 20:21:44','    Clarify test case in common/ring/test_builder\n    \n    They use a bare assertRaises(ValueError, ring.RingBuilder, *,*,*), but\n    it\'s not clear which one raises which ValueError(), so I extend them to\n    validate the error strings as well.\n    \n    Change-Id: I63280a9fc47ff678fe143e635046a0b402fd4506\n',12,6,'EasyStack'),(570672,3302,3302,'2016-08-03 12:19:40','2016-07-15 14:35:54','    Use more specific asserts in test/unit/cli tests\n    \n    I changed asserts with more specific assert methods.\n    e.g.: from assertTrue(sth == None) to assertIsNone(*) or\n    assertTrue(isinstance(inst, type)) to assertIsInstace(inst, type)\n    or assertTrue(not sth) to assertFalse(sth).\n    \n    The code gets more readable, and a better description will be shown on fail.\n    \n    Change-Id: I39305808ad2349dc11a42261b41dbb347ac0618a\n',111,112,'Ericsson'),(570674,8207,8207,'2016-08-30 15:08:49','2016-08-30 15:08:49','    Remove white space between print and ()\n    \n    There is a white space between print and ()\n    in /tempauth.py, This patch fix it\n    \n    Change-Id: Id3493bdef12223aa3a2bffc200db8710f5949101\n',2,2,'ZTE Corporation'),(570675,4075,4075,'2016-08-25 11:01:19','2016-08-25 11:00:49','    add test for expirer processes == process\n    \n    This is a follow up from a change that improved the error message.\n    \n    Related-Change: I3d12b79470d122b2114f9ee486b15d381f290f95\n    \n    Change-Id: I093801f3516a60b298c13e2aa026c11c68a63792\n',17,0,'Rackspace'),(570677,5254,832,'2016-08-26 11:44:44','2016-08-19 16:17:31','    Authorise versioned write PUTs before copy\n    \n    Currently a versioned write PUT uses a pre-authed request to move\n    it into the versioned container before checking whether the\n    user is authorised. This can lead to some interesting behaviour\n    whereby a user can select a versioned object path that it does not\n    have access to, request a put on that versioned object, and this\n    request will execute the copy part of the request before it fails\n    due to lack of permissions.\n    \n    This patch changes the behaviour to be the same as versioned DELETE\n    where the request is authorised before anything is moved.\n    \n    Change-Id: Ia8b92251718d10b1eb44a456f28d3d2569a30003\n    Closes-Bug: #1562175\n',68,9,'Rackspace'),(570680,5659,5659,'2016-09-01 00:27:02','2016-09-01 00:11:53','    go: move REPCONN and REPLICATE call from object server to replicator\n    \n    Move REPCONN call to replicator webserver. After this change replication\n    will become self-contained and won\'t need object server.\n    \n    I have also moved REPLICATE call to Replicator for backward compatibility with\n    python based replication.\n    \n    Change-Id: Iaaf39fe28cf9102e337ef82403b44fc416cdfa1b\n',413,264,'Rackspace'),(570681,5681,5681,'2016-08-30 14:28:08','2016-08-29 17:27:50','    Close the iterators in string_along.\n    \n    Make sure to close the underlying iterator in string_along. What is\n    currently happening when using the InternalClient is that \"Client\n    disconnected\" warnings are generated and resources are tied up until\n    GC runs.\n    \n    Change-Id: If1f6c0c756aee95f53f99371439533a97d347eab\n',25,2,'SwiftStack'),(570683,8263,8263,'2016-08-04 19:24:44','2016-08-03 17:11:25','    Add unit case\n    \n    \"op\" has three judgments in ReplicatorRpc.dispatch, rsync_then_merge,complete_rsync\n    and other. But it only has two times judgments,including rsync_then_merge and other\n    in test_REPLICATE_works, so I add complete_rsync in test_account and test_container\n    \n    Change-Id: I8277b556062dd6b30bf85dedd636d56517f10d8d\n',52,2,'EasyStack'),(570685,4075,8263,'2016-08-30 16:16:32','2016-08-26 14:04:46','    Add test to validate the error strings in test_expirer\n    \n    Improve test_get_process_values_* methods in obj/test_expirer in the\n    form assertRaises(ValueError, x.get_process_values,{}/vals), to use\n    the assertRaises context form.  This improves understandability by\n    validateing the error strings in addition to the ValueError.\n    \n    Related-Change: I3d12b79470d122b2114f9ee486b15d381f290f95\n    \n    Change-Id: I1c66b8894cba8328d19cf99491a8ad18ded71078\n',23,6,'EasyStack'),(570687,8463,8463,'2016-09-01 02:25:29','2016-08-26 14:08:08','    Correct swift reraising of exception\n    \n    When an exception was caught and rethrown, it should call \'raise\'\n    without any arguments because it shows the place where an exception\n    occured initially instead of place where the exception re-raised.\n    \n    Change-Id: I783a2a65f3e38a23ba49b6ae5a2f56a5fdaac2fc\n',2,4,'ZTE Corporation'),(570689,1111,1111,'2016-09-01 12:02:21','2016-09-01 11:42:09','    Make versioned_writes docstring more precise\n    \n    Add a note to the docstring that it is required to add a config section\n    to the proxy-server.conf and an entry to the pipeline to support history\n    mode.\n    \n    Closes-Bug: 1619261\n    Change-Id: I888485ab4ece6f47db081a4d58c1aab24ce72a8a\n',11,4,'Red Hat'),(570691,2470,2470,'2016-08-25 17:39:00','2016-08-05 18:05:45','    Tighten header checks for object PUT/POST paths\n    \n    Change-Id: If2cd059719fe5af1e73ecde5306e9f68d590831f\n',204,67,'SwiftStack'),(570693,5661,5661,'2016-09-01 04:33:50','2016-08-30 17:02:21','    Silence \"Client disconnected\" warnings on reads.\n    \n    When a client fully reads the content and closes the iterator, the\n    Client disconnected warning is still generated, as there is no logic\n    to check whether the GeneratorExit exception was raised after the\n    client received all of the data. This can be observed when doing\n    large object reads or using an InternalClient and reading exactly\n    Content-Length bytes from the returned app_iter body.\n    \n    The patch amends the behavior to hoist how many bytes client read from\n    a given part and only raise an exception if there are more parts left\n    or a part was not fully read.\n    \n    Lastly, the GeneratorExit exception is no longer swallowed and is\n    re-raised in the handling code.\n    \n    Change-Id: I879149897fdb25aae977b7f17e580610b188ce04\n',59,8,'SwiftStack'),(570695,5654,5654,'2016-09-01 21:26:05','2016-09-01 21:24:52','    Remove meaningless lines in reconciler unit test\n    \n    There are two lines in which lists are sorted in test_reconciler.py\n    However, the values in the lists will be same, then the two lines are\n    meaningless.\n    This patch removes the two lines from test_reconciler.py\n    \n    Change-Id: I7d72a7a4e9a27d87cd78c96f79d1b340b2ad23de\n',0,2,'Nippon Telegraph and Telephone Corporation'),(570697,8263,8263,'2016-08-18 09:27:32','2016-08-17 19:27:13','    Remove unnecessary variable\n    \n    It defines self.node information in setUp(),  it is unnecessary to\n    define node in test_direct_delete_account. Because although self.node\n    includes replication_ip and replication_port, direct_delete_account\n    doesn\'t use both and uses ip,port and device. Therefore, I think self.node\n    can instead of node.\n    \n    Change-Id: I6df7081280d2b540f984e4e688620931f5d4ac88\n',2,4,'EasyStack'),(570699,5654,5654,'2016-09-02 11:01:55','2016-09-01 14:59:56','    Fix api reference of object GET request with Range parameter\n    \n    In RFC 7233, response body size of range requests with parameter\n    \'bytes=N-M\' is (M - N + 1). And response of object GET request with\n    range parameter in current Swift implementation is according to the\n    RFC.  However, in current api reference explains that response body\n    size of object GET request with \'Range: bytes=10-15\' is five\n    ( != 15 - 10 + 1).\n    This patch fixes the api reference explanation.\n    \n    Change-Id: I8371864f8e5adb42c1e56b7ea26c556ea1252728\n',2,2,'Nippon Telegraph and Telephone Corporation'),(570701,1111,1111,'2016-09-02 06:13:08','2016-07-28 08:32:17','    Deprecate swift-temp-url\n    \n    python-swiftclient includes an improved and tested method to generate\n    tempurls. The command syntax is essentially the same, therefore we can\n    deprecate this one by importing that method.\n    \n    python-swiftclient is not added as a requirement; if the import fails\n    due to a missing swiftclient module it will just raise a deprecation\n    warning.\n    \n    Closes-Bug: #1607523\n    Closes-Bug: #1607519\n    \n    Change-Id: Ifa8bf636f20f82db4845b02d1b58699edaa39356\n',10,55,'Red Hat'),(577325,42,42,'2016-09-02 23:50:32','2016-09-02 23:50:00','    go: Parse the TempAuth config\n    \n    This is needed because we have a test cluster behind a proxy that\n    terminates SSL. May come useful to someone who uses TempAuth in\n    general.\n    \n    Change-Id: I3feac186c3fc8d2c804e490745969e0613ad2382\n',58,14,'Red Hat'),(577326,4094,5941,'2016-08-18 11:17:11','2016-07-21 15:41:58','    py3: Fixes encoding and type error\n    \n    Fixes encoding bytes to base64.\n    Fixes unorderedtype int() and str()\n    for python3.\n    Fixes encoding issues.\n    \n    Change-Id: I6e7aaf21e080078d4b36562e41129804d71df2fc\n',17,14,'HP'),(577328,5599,5599,'2016-08-31 23:01:05','2016-08-31 23:01:05','    Avoid warnings for versioned_writes docs\n    \n    This includes a couple of fixes as follows:\n    - Add one more \"-\" for mode example titles to adjust the title length\n      (it seems needed to use verbatim expression)\n    - Remove unnecessary back slash\n    \n    Change-Id: If41bba040ea31f2354642b2ec32bc92ece4f0971\n',5,5,'NTT'),(577330,2470,2470,'2016-09-01 15:10:04','2016-04-26 09:15:29','    Make get_info requests useful with recheck_*_existence == 0\n    \n    Before, when recheck_account_existence or recheck_container_existence\n    was set to zero, get_info requests for accounts or containers wouldn\'t\n    populate the env cache for the current request, so it wouldn\'t return\n    the data *it just got*.\n    \n    Now, we\'ll still populate the env cache and memcache, as a cache time of\n    zero means \"keep it indefinitely\". See the memcache docs at\n    https://github.com/memcached/memcached/blob/1.4.25/doc/protocol.txt#L163\n    \n    Change-Id: Ia648263073bc88e35216cafb76821b7ce02c1d03\n    Closes-Bug: 1224734\n',113,16,'SwiftStack'),(577332,1111,4094,'2016-09-06 09:08:32','2016-06-02 16:09:18','    Add test for copy using a Range header\n    \n    Since COPY allows a copy of a ranged GET, add some more test\n    coverage for that in both unit and functional tests.\n    \n    Drive-by fix to use better test assertion methods.\n    \n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n    \n    Change-Id: I5cb202386df0862f953f7388107c4d3466e2e46c\n',124,7,'HPE'),(577334,5599,5599,'2016-08-04 23:42:21','2016-08-04 23:34:40','    Remove unnecessary open call and related vars in unit tests\n    \n    Since the methods touching exisiting file is mocked, we don\'t have to\n    open the file. (if it is needed, we should close at first anyway)\n    \n    And cleanup unecessary vars/imports that is used for making the file\n    path.\n    \n    This patch is a followup on:\n    https://review.openstack.org/#/c/350471/\n    \n    Change-Id: I8fbc0b5b9a01782b6da5a7dd674f52d4b566ca5c\n',2,27,'NTT'),(577336,8263,8263,'2016-09-06 11:55:41','2016-09-06 11:55:41','    Add test_valid_api_version in the test_constraints\n    \n    There is a valid_api_version function in the constraints,but it has no\n    tests in the test_constraints. Therefore, I add test_valid_api_version.\n    \n    Change-Id: Ic8dbe9c00f762513ec9a4ffc0b77e4e5d3e5d47b\n',10,0,'EasyStack'),(577338,7680,7680,'2016-09-06 20:02:33','2016-09-06 20:02:33','    Fixed Typo in proxy/controller/obj.py\n    \n    Change-Id: I2d7217c618371dce2dfa8ed273dd5e10cbeabe3f\n',2,2,'Intel'),(577339,591,591,'2016-09-04 14:58:27','2016-08-13 17:54:24','    Added missing manpages for all cli tools\n    \n    Change-Id: Ief3cf510d426a4eeefc8bb8d12f6fa9c8343f55b\n    Closes-Bug: #1607005\n    Closes-Bug: #1607007\n    Closes-Bug: #1607010\n    Closes-Bug: #1607012\n    Closes-Bug: #1607014\n    Closes-Bug: #1607016\n    Closes-Bug: #1607019\n    Closes-Bug: #1607021\n    Closes-Bug: #1607023\n    Closes-Bug: #1599923\n',541,0,'Seznam.cz'),(577341,7680,7680,'2016-09-07 15:13:43','2016-08-02 23:16:43','    Add regions in ring-builder.py\n    \n    swift-ring-builder CLI usage does not specify about regions.\n    This patch adds a description about it. It also adds\n    a brief description of the flags (report parameter).\n    \n    Change-Id: If51a15c0904857abf62636b90ac0c7ed63300871\n    Closes-Bug: #1583551\n',6,3,'Intel'),(577343,5254,5254,'2016-09-07 13:32:06','2016-09-07 13:32:06','    add missing partition directory to example\n    \n    Change-Id: I2e806432d7d49e8fa940598cc6be680a362dec8b\n',2,2,'Red Hat'),(577345,5681,5681,'2016-09-07 14:00:57','2016-09-06 17:26:40','    Fix error handling in proxy/controllers/base.py.\n    \n    There are a few issues going on in the\n    controllers/base.py:_get_response_parts_iter(). One is that the\n    \"raise\" statement that attempts to re-raise the GeneratorExit, may\n    re-raise ValueError if that was the last exception caught.\n    \n    Secondly, the range may not actually be set in the backend_headers\n    (need to investigate further, as that could actually be faulty tests,\n    since learn_size_from_content_range should always set it). The patch\n    changes the Range construction to throw a ValueError if None is passed\n    in that case.\n    \n    Lastly, the range may be only half-defined, e.g. bytes=0-. In that\n    case, the check of how many bytes are expected vs how many bytes have\n    been sent does not make sense.\n    \n    Change-Id: Ida5adf3d33c736240b2c4bae5510b5289f03dee2\n',8,3,'SwiftStack'),(577347,8263,8263,'2016-09-07 14:10:50','2016-07-29 12:12:55','    simple log information\n    \n    When it has the same log information, we can use a function to simple\n    it, then it also improve code readability.\n    \n    Change-Id: I5bb901099dcc832fc0651b34707901849abb0c34\n',2,5,'EasyStack'),(578605,5650,5650,'2016-08-21 00:09:09','2016-08-17 00:54:09','    Allow DLO manifest to be updated when using post-as-copy\n    \n    Currently when using fast-post, the manifest is updated with the given\n    \'x-object-manifest\' header on a POST.  If no such header is supplied,\n    then the manifest will change to a regular object.\n    This is not currently true when using post-as-copy.\n    \n    This patch changes the DLO POST using post-as-copy behavior to match\n    that of using fast-post.  It was also documented that\n    \'x-object-manifest\' must be provided on a POST to a manifest file.\n    \n    Change-Id: Ie1143ab1a2c8f8c21e258a36badbff5d947769d4\n    Closes-bug: 1612991\n',141,13,'IBM'),(578607,229,8232,'2016-09-08 14:54:25','2016-08-09 20:34:55','    Add man page for swift.conf\n    \n    Added man page for swift.conf\n    \n    Change-Id: I88235ed414dfc34cb46f2fea014f1e721962885a\n    Closes-Bug: 1607027\n',213,0,'Intel'),(578608,1475,1475,'2016-09-05 12:20:53','2016-08-22 10:44:43','    py3: Port test_splice to Python 3\n    \n    * add NamedTemporaryFile() wrapper\n    * use byte strings for binary data in tests\n    * tox.ini: run test_splice on Python 3.4 and Python 3.5\n    \n    Change-Id: I042d739fbf29433733bf0c2154749bc90b210416\n',28,13,'eNovance'),(579306,4094,4094,'2016-09-07 17:54:36','2016-09-07 17:54:36','    Add troubleshooting tips to keystoneauth docs\n    \n    Documents two common mistakes that are made when\n    deploying Swift with Keystone auth.\n    \n    Change-Id: Id81af09d1d21b5c8a3871bf0e20fe6c1448d0ad9\n',57,0,'HPE'),(580319,4075,4075,'2016-09-08 23:04:19','2016-09-08 15:57:37','    Apply go fmt to tempauth\n    \n    Change-Id: I3952124173b33eb1589a5d00643512da5211ff18\n',2,2,'Rackspace'),(580320,8263,8263,'2016-09-09 16:41:22','2016-09-09 16:41:22','    delete TODO in test_manager\n    \n    After test_shutdown,every method has its test case. Therefore, it is\n    not necessary to add more tests, then I remove TODO.\n    \n    Change-Id: I23c1344bb18a83b154f890be0baa12799db045f8\n',0,1,'EasyStack'),(580322,2470,2470,'2016-08-31 14:10:27','2016-08-31 14:10:27','    Include correct version in install-guide\n    \n    Change-Id: I8f9de7a824aa327d566c821ec05f97d0bc8931e9\n',3,2,'SwiftStack'),(580324,1111,1111,'2016-09-01 09:47:14','2016-08-31 12:49:07','    More Test[Account|Container]Controller test updates\n    \n    Added another test that tries to replicate using an unknown sync method,\n    with and without an existing DB file.\n    \n    Change-Id: I09a86615f012e4341268ea30cbc06099528f896b\n',53,2,'Red Hat'),(580326,5623,5623,'2016-08-24 14:56:00','2015-03-05 18:18:25','    Make object creation more atomic in Linux\n    \n    Linux 3.11 introduced O_TMPFILE as a flag to open() sys call. This would\n    enable users to get a fd to an unnamed temporary file. As it\'s unnamed,\n    it does not require the caller to devise unique names. It is also not\n    accessible through any path. Hence, file creation is race-free.\n    \n    This file is initially unreachable. It is then populated with data(write),\n    metadata(fsetxattr) and fsync\'d before being atomically linked into the\n    filesystem in a fully formed state using linkat() sys call. Only after a\n    successful linkat() will the object file will be available for reference.\n    \n    Caveats\n    * Unlike os.rename(), linkat() cannot overwrite destination path if it\n      already exists. If path exists, we unlink and try again.\n    * XFS support for O_TMPFILE was only added in Linux 3.15.\n    * If client disconnects during object upload, although there is no\n      incomplete/stale file on disk, the object directory would persist\n      and is not cleaned up immediately.\n    \n    Change-Id: I8402439fab3aba5d7af449b5e465f89332f606ec\n    Signed-off-by: Prashanth Pai <ppai@redhat.com>\n',478,19,'Red Hat'),(580328,8263,8263,'2016-09-11 10:33:52','2016-09-09 11:13:15','    Add test_pop in the test_header_key_dict\n    \n    There is a pop() function in the header_key_dict, but it has no\n    test_pop in the test_header_key_dict. Therefore, I add it.\n    \n    Change-Id: I97bf9729fae3f044bcc69014549137f45ecbe91b\n',11,2,'EasyStack'),(580330,4075,4075,'2016-09-13 15:15:13','2016-09-13 15:10:04','    fix string formatting in manager\n    \n    Change-Id: I0d5c351735bdb6249dd9ec3e0c8b7ebe709feea6\n',1,1,'Rackspace'),(581523,4094,4094,'2016-09-14 13:32:00','2016-07-28 18:41:08','    Make container sync copy SLO manifests\n    \n    Currently the container sync daemon fails to copy\n    an SLO manifest, and the error will stall progress\n    of the sync process on that container. There are\n    several reasons why the sync of an SLO manifest\n    may fail:\n    \n    1. The GET of the manifest from the source\n       container returns an X-Static-Large-Object header\n       that is not allowed to be included with a PUT\n       to the destination container.\n    \n    2. The format of the manifest object that is read\n       from the source is not in the syntax required\n       for a SLO manifest PUT.\n    \n    3. Assuming 2 were fixed, the PUT of the manifest\n       includes an ETag header which will not match the\n       md5 of the manifest generated by the receiving\n       proxy\'s SLO middleware.\n    \n    4. If the manifest is being synced to a different\n       account and/or cluster, then the SLO segments may\n       not have been synced and so the validation of the\n       PUT manifest will fail.\n    \n    This patch addresses all of these obstacles by\n    enabling the destination container-sync middleware to\n    cause the SLO middleware to be bypassed by setting a\n    swift.slo_override flag in the request environ. This\n    flag is only set for request that have been validated\n    as originating from a container sync peer.\n    \n    This is justifed by noting that a SLO manifest PUT from\n    a container sync peer can be assumed to have valid syntax\n    because it was already been validated when written to\n    the source container.\n    \n    Furthermore, we must allow SLO manifests to be synced\n    without requiring the semantic of their content to be\n    re-validated because we have no way to enforce or check\n    that segments have been synced prior to the manifest, nor\n    to check that the semantic of the manifest is still valid\n    at the source.\n    \n    This does mean that GETs to synced SLO manifests may fail\n    if segments have not been synced. This is however\n    consistent with the expectation for synced DLO manifests\n    and indeed for the source SLO manifest if segments have\n    been deleted since it was written.\n    \n    Co-Authored-By: Oshrit Feder <oshritf@il.ibm.com>\n    Change-Id: I8d503419b7996721a671ed6b2795224775a7d8c6\n    Closes-Bug: #1605597\n',239,43,'HPE'),(581525,2470,2470,'2016-07-23 00:16:33','2016-07-01 13:38:20','    Make load_crypto_meta more py3-friendly\n    \n    Change-Id: I1f2551630e7162f3b4efc8bf1f1a4d415da9d9a3\n',7,6,'SwiftStack'),(581527,1020,1020,'2016-09-14 10:10:20','2016-08-12 15:52:55','    Corrections for the API specifications in api-ref\n    \n    Fixes a number of technical issues with the api-ref section\n    including:\n    \n    - Added missing headers\n    - The header descriptions were made specific to whether they\n      are used in requests or responses and the verb in question\n      (example: Content-Length in object HEAD is the object size,\n      not the response body length).\n    - Added references to API features such as bulk delete.\n    - Many typographical fixes (e.g., spaces in the middle\n      of header names)\n    - Restored xml and json account/container listing\n      examples.\n    \n    The following areas were not updated and it is proposed\n    to defer them to a subsequent update. This is because\n    I don\'t have time or their merit is debatable:\n    \n    - ACLs (as used in a Keystone context) are not\n      described.\n    - Account create/delete is not described.\n    - I left List Endpoints as-is.\n    \n    Change-Id: I315b4e550b7d10880fbc00fce9311127ba609c2d\n',575,392,'HP'),(581529,6309,6309,'2016-09-15 14:33:32','2016-09-15 14:31:55','    Update link reference\n    \n    This patch update the outdated link reference inside the doc.\n    \n    Change-Id: I9c5aabe869226489f361ff637e9dec731bbc3d7d\n',3,3,'Fujitsu'),(582383,4094,4094,'2016-09-16 11:40:14','2015-10-05 17:40:06','    Enable object server to return non-durable data\n    \n    This patch improves EC GET response handling:\n    \n    - The proxy no longer requires all object servers to have a\n      durable file for the fragment archive that they return in\n      response to a GET. The proxy will now be satisfied if just\n      one object server has a durable file at the same timestamp\n      as fragments from other object servers.\n    \n      This means that the proxy can now successfully GET an\n      object that had missing durable files when it was PUT.\n    \n    - The proxy will now ensure that it has a quorum of *unique*\n      fragment indexes from object servers before considering a\n      GET to be successful.\n    \n    - The proxy is now able to fetch multiple fragment archives\n      having different indexes from the same node. This enables\n      the proxy to successfully GET an object that has some\n      fragments that have landed on the same node, for example\n      after a rebalance.\n    \n    This new behavior is facilitated by an exchange of new\n    headers on a GET request and response between the proxy and\n    object servers.\n    \n    An object server now includes with a GET (or HEAD) response:\n    \n    - X-Backend-Fragments: the value of this describes all\n      fragment archive indexes that the server has for the\n      object by encoding a map of the form: timestamp -> <list\n      of fragment indexes>\n    \n    - X-Backend-Durable-Timestamp: the value of this is the\n      internal form of the timestamp of the newest durable file\n      that was found, if any.\n    \n    - X-Backend-Data-Timestamp: the value of this is the\n      internal form of the timestamp of the data file that was\n      used to construct the diskfile.\n    \n    A proxy server now includes with a GET request:\n    \n    - X-Backend-Fragment-Preferences: the value of this\n      describes the proxy\'s current preference with respect to\n      those fragments that it would have object servers\n      return. It encodes a list of timestamp, and for each\n      timestamp a list of fragment indexes that the proxy does\n      NOT require (because it already has them).\n    \n      The presence of a X-Backend-Fragment-Preferences header\n      (even one with an empty list as its value) will cause the\n      object server to search for the most appropriate fragment\n      to return, disregarding the existence or not of any\n      durable file. The object server assumes that the proxy\n      knows best.\n    \n    Closes-Bug: 1469094\n    Closes-Bug: 1484598\n    \n    Change-Id: I2310981fd1c4622ff5d1a739cbcc59637ffe3fc3\n    Co-Authored-By: Paul Luse <paul.e.luse@intel.com>\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n',2420,284,'HP'),(583186,8919,8919,'2016-09-16 09:20:34','2016-09-02 09:52:17','    Updating Bandit config file\n    \n    This commit updates the Swift Bandit file to the new style\n    introduced in Bandit 1.0.  In response to the struggle with\n    getting a Bandit config file working and kept up to date we\n    introduced a simplified version in Bandit 1.0.\n    \n    This commit updates Swift\'s bandit.yaml to use the new version.\n    \n    Change-Id: Ida5dd08f4ea72a377346f2159caeb2f3741d4980\n',153,145,'IBM'),(583188,4094,4094,'2016-09-19 09:18:19','2016-09-08 16:41:26','    api-ref: Move repeated paragraph to an include file\n    \n    Move repeated test re metadata header syntax to an include\n    file and make it be rendered as a note.\n    \n    Also make already included text about metadata header value\n    encoding be a note.\n    \n    Change-Id: I4795836587492954ad24dd5baaa5d668746d6040\n',18,32,'HPE'),(583189,2470,2470,'2016-09-16 14:44:37','2016-09-16 13:31:35','    Turn on F812 check\n    \n       F812 list comprehension redefines <variable> from line ...\n    \n    While the current violations were benign, this sort of code can easily\n    lead to subtle bugs. Seems worth checking, especially given how cheap it\n    is to bring existing code in line with it.\n    \n    Change-Id: Ibdcf9f93b85a1f1411198001df6bdbfa8f92d114\n',9,11,'SwiftStack'),(583191,229,229,'2016-09-16 13:12:51','2016-09-16 13:12:51','    remove comment saying we ignore H233. we actually check it\n    \n    Change-Id: Ia78fbb32aa6f45aa6578734dc43f3262e717bab8\n',0,1,'SwiftStack'),(583193,4075,4075,'2016-09-14 10:12:38','2016-09-14 10:12:38','    DRY out probe.common\n    \n    Specifically to facilitate the reuse of the retry check server\n    function to fill in the creds for the test2 account which is required\n    for probetests after the related change.\n    \n    Change-Id: I9729faa4c8c8d6d65a481bc2ea3f0566d511034c\n    Related-Change: I8d503419b7996721a671ed6b2795224775a7d8c6\n',44,39,'Rackspace'),(583195,2470,2470,'2016-09-12 15:02:43','2016-09-12 15:02:38','    Bring \"egregious range request\" comment in line with reality\n    \n    With MAX_RANGES pulled out as a constant, developers are likely to\n    just trust the comment rather than go verify the value.\n    \n    Change-Id: I47fbd4790492b272d53ee07fe5bc87170ce2c72b\n    Releated-Change: I4dcedcaae6c3deada06a0223479e611094d57234\n',1,1,'SwiftStack'),(583197,4094,4094,'2016-09-19 09:46:06','2016-09-06 16:24:13','    api-ref: clean up account listing examples\n    \n    Move the account listing sample responses to follow the sample\n    requests, and to precede the request/response parameter definitions to\n    be consistent with other parts of the doc.\n    \n    Related-Change: I315b4e550b7d10880fbc00fce9311127ba609c2d\n    \n    Change-Id: Ia20acacd238db4a423b8cd89af1658222b4c5828\n',17,39,'HPE'),(583199,2470,2470,'2016-09-19 15:47:20','2016-09-16 17:21:00','    Clean up api-ref examples\n    \n    If we\'re going to talk about replacing an object, we should use the\n    same object name as the previous example.\n    \n    Including a non-zero content-length on PUT but not providing a body\n    will timeout.\n    \n    Not including the \'-\' in \'-H\' will make curl complain:\n    \n       Rebuilt URL to: H/\n       * Could not resolve host: H\n       * Closing connection 1\n    \n    201 Created responses have content-length of zero, not 116.\n    \n    Change-Id: Ifd878559ee4036e4893221c7968f53021f38e236\n',7,7,'SwiftStack'),(584484,5596,5596,'2016-09-06 04:14:28','2016-09-02 20:47:09','    go: fix replicator policy bugs / big refactor\n    \n    The replicator was pretty broken with multiple poliices.\n    \n    I thought the best fix was to restructure the replicator to have a\n    ReplicationDevice that holds all information per (device, policy).\n    \n    This version is harder to mess up, more testable, and points at the\n    possibility of implementing a different ReplicationDevice for other\n    policies later if they want to plug into the replicator.\n    \n    Change-Id: If0a24a5cdf3b9423cb37cd521cf22960e6f38e23\n',1765,1331,'Rackspace'),(584486,591,591,'2016-09-19 15:31:46','2016-09-17 15:42:52','    Fixed cut and pasted paragraph from commit message in manpage\n    \n    Change-Id: Iab839a917e407ce8119f0c6162751f11136cbf5b\n',3,3,'Seznam.cz'),(584488,4094,4094,'2016-09-20 14:30:27','2016-09-06 16:36:36','    api-ref: fix some header definitions\n    \n    Clarify Content-Type header definition for listings.\n    \n    Distinguish between request and response definitions for\n    X-Account-Meta-Temp-URL-Key* headers.\n    \n    Insert X-Container-Meta-Quota-* headers missing from some\n    request/response definitions.\n    \n    Improve X-Container-Meta-Access-Control-Expose-Headers\n    parameter formatting.\n    \n    Distinguish between request and response definitions for\n    X-Container-Meta-Temp-URL-Key* headers.\n    \n    Co-Authored-By: Christian Schwede <cschwede@redhat.com>\n    Change-Id: I8fc7610395973b520aa9ddd72c94e1eb75f602cd\n    Related-Change: I315b4e550b7d10880fbc00fce9311127ba609c2d\n',91,42,'HPE'),(584490,4075,4075,'2016-09-21 00:28:39','2016-09-21 00:28:39','    Fix unstable json.dumps ordering in obj-server test\n    \n    test_GET_HEAD_with_fragment_preferences seemed to fail on ocassion on\n    my machine; the test seemed to be assuming the order of dictionary\n    keys in json output sent in headers; the fix was convert back to a\n    dictionary when making the assertion on the context of the json.\n    \n    Change-Id: I1ea1b734c2a9fb12b8f59262bb1229421803e48e\n    Closes-Bug: #1625956\n',5,4,'Rackspace'),(584491,2470,2470,'2016-09-16 17:51:56','2016-08-05 16:19:30','    Include object sysmeta in POST responses\n    \n    This is *only* sysmeta, to ensure we neither change the semantics of the\n    response (which could happen if we included allowed_headers) nor reveal\n    previously-written metadata to write-only clients (which could happen if\n    we ever get updateable object metadata and sent back user meta).\n    \n    We could conceivably send back transient sysmeta, though it seems\n    better to wait for a use-case that demands it.\n    \n    Change-Id: I04fe0b36b85e546b5379bed12089ffd1bce01fcf\n    Co-Authored-By: Thiago da Silva <thiago@redhat.com>\n',14,2,'SwiftStack'),(585959,4075,4075,'2016-09-21 17:33:30','2016-09-21 17:33:30','    Fix ChunkWriteError when running unittests\n    \n    I don\'t think this is a real bug - just that the mocked iter wasn\'t\n    closing it subiters like the real iter does.\n    \n    Change-Id: I44c8159f9eea8737bc86b6c7eb59a512e57e86c1\n',8,4,'Rackspace'),(585960,2470,2470,'2016-09-21 16:42:27','2016-09-20 13:54:55','    Use separate headers for versioned_writes\' stack and history modes\n    \n    Now, instead of saying\n    \n       X-Versions-Location: <container>\n       X-Versions-Mode: history\n    \n    clients should just say\n    \n       X-History-Location: <container>\n    \n    Since we\'ve never had a release featuring a user-settable\n    X-Versions-Mode header, support may be dropped and that is now ignored.\n    \n    Change-Id: Icfd0f481d4e40dd5375c737190aea7ee8dbc3bf9\n',275,287,'SwiftStack'),(585962,4075,4086,'2016-09-21 14:09:53','2016-07-25 20:10:44','    Delete old tombstones\n    \n    - Call invalidate_hash in auditor for reclaimable tombstones\n    - assert changed auditor behavior with a unit test\n    - driveby test: assert get_hashes behavior with a unit test\n    \n    Co-Authored-By: Pete Zaitcev <zaitcev@redhat.com>\n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    Closes-Bug: #1301728\n    Change-Id: I3e99dc702d55a7424c6482969e03cb4afac854a4\n',222,13,'Intel'),(585964,4094,4094,'2016-09-22 17:04:07','2016-09-22 16:56:36','    Cleanup tests for auditor invalidating hashes\n    \n    Cleans up some auditor tests added in the Related-Change.\n    \n    Make auditor NOT call invalidate_hash for a reclaimable\n    tombstone in a zero bytes file process, so that\n    invalidate_hash is only called once per reclaimable\n    tombstone per auditor cycle.\n    \n    Previously each execution of \'swift-init object-auditor once\'\n    would result in two identical entries being appended to\n    hashes.invalid for each reclaimable tombstone. With this change\n    that unnecessary duplication is removed.\n    \n    Related-Change: I3e99dc702d55a7424c6482969e03cb4afac854a4\n    Change-Id: I5dfaa8d74c07ca8a494c29159c1a2bed39499613\n',78,50,'HPE'),(585966,229,229,'2016-09-23 13:43:01','2016-09-22 17:09:08','    authors/changelog updates for 2.10.0\n    \n    Added reno releasenotes file.\n    \n    Change-Id: Ia14875b992aabaf452242b74e9358cfd884adbcc\n',137,0,'SwiftStack'),(587061,8263,8263,'2016-09-23 18:07:28','2016-09-23 18:07:28','    Add test_PUT/DELETE_bad_timestamp in obj/test_server\n    \n    It has valid_timestamp() to check timestamps in /POST/PUT/DELETE methods.\n    It has test_POST_bad_timestamps in Post, but it has no test_PUT/DELETE_bad_timestamps\n    int PUT/DELETE. Therefore,I add them\n    \n    Change-Id: Ib531f3b7819c1c8dc69a7b51d990581bf1e24dab\n',14,0,'EasyStack'),(587063,5599,5599,'2016-09-25 19:45:38','2016-08-26 00:15:45','    Add functional tests for new versioned_write mode\n    \n    This patch is follow up for [1] and [2] to add new functional\n    tests for versioned_writes middlware \'history\' mode.\n    (i.e. using X-History-Location header to a container).\n    \n    The new test class, TestObjectHistoryModeVersioning, will use obvious\n    setting the mode via new X-History-Location header, since the change [2],\n    the setting X-Versions-Mode header added since [1] for incomming request has\n    been deprecated. Hence, since [2], the syntax for stack mode is back to\n    be same with older Swift than [1] so that the only thing we need now is\n    just adding a test suite for the new X-History-location.\n    \n    It means the API has been changing like:\n    ---------------\n    For stack mode:\n    ---------------\n    Older than [1]:\n    X-Versions-Location\n    \n    [1]~[2]:\n    X-Vesions-Location (and X-Versions-Mode: \'stack\' for obvious)\n    \n    Newer than [2]:\n    X-Vesions-Location\n    \n    -----------------\n    For history mode:\n    -----------------\n    Older than [1]:\n    (Not supported)\n    \n    [1]~[2]:\n    X-Vesions-Location and X-Versions-Mode: \'history\'\n    \n    Newer than [2]:\n    X-History-Location\n    \n    Note that this functional tests work on newer swift than [2].\n    \n    And then, this patch also sets allow_versioned_writes=True\n    for in-process testing (the container server allow_versions\n    option was already set, so this is just enabling in the middleware\n    too). That means that in-process functional tests (such as run by\n    the tox envs func-in-process-*) because history mode requires the\n    middleware allow_versioned_writes option to be explicity set to True.\n    \n    1: https://review.openstack.org/#/c/214922/\n    2: https://review.openstack.org/#/c/373537/\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    \n    Related-Change: I555dc17fefd0aa9ade681aa156da24e018ebe74b\n    Related-Change: Icfd0f481d4e40dd5375c737190aea7ee8dbc3bf9\n    Change-Id: Ifebc1c3ce558b1df9e576a58a4100f2219dfc7e7\n',204,8,'NTT'),(587065,6309,6309,'2016-09-27 16:13:05','2016-09-27 16:13:05','    Fix typo in docstring\n    \n    This patch replace typo \"contrain\" by \"constrain\".\n    \n    Change-Id: If91550c4d55f4d072be59470b7f893d56ebd30ca\n',1,1,'Fujitsu'),(587066,8207,8207,'2016-09-27 17:14:13','2016-09-27 17:14:13','    Fix a typo in proxy-server.conf-sample\n    \n    TrivialFix\n    \n    Change-Id: If650e25979a9488c93fe93621c905003946c27e5\n',1,1,'ZTE Corporation'),(587068,7392,7392,'2016-09-28 15:55:25','2016-09-28 15:53:08','    Fix typo in docstring\n    \n    This patch replaces type \"tuble\" to \"tuple\".\n    \n    Change-Id: I0a54f10df0f48fab9553e6438735e42ae1bb5b3b\n',1,1,'Fujitsu'),(587070,6309,6309,'2016-09-27 11:52:41','2016-09-27 11:49:35','    Update link reference in Swift document\n    \n    The reference link for REST API [1] is out of date. We should change\n    it to the new one [2].\n    \n    [1]:http://developer.openstack.org/api-ref-objectstorage-v1.html\n    [2]:http://developer.openstack.org/api-ref/object-storage/\n    \n    Change-Id: Ib3e5a78ec2df0591f862671272f51ace5ac65ca7\n',1,1,'Fujitsu'),(588213,68,68,'2016-09-28 18:31:26','2016-09-28 18:31:26','    Update .gitreview for stable/newton\n    \n    Change-Id: I31a57e04be1738a0217b50f26562e866e59f402c\n',1,0,'Red Hat'),(588214,869,869,'2016-08-18 15:56:06','2016-08-08 17:57:49','    Support multi-range GETs for static large objects.\n    \n    Bonus consistency: 416 responses now always have a body. Before, if\n    you had \"swob.HTTPRequestedRangeNotSatisfiable()\", you\'d get a body,\n    but if you had \"swob.Response(..., conditional_response=True)\", then\n    you\'d get a length-0 response body. Now you always get a response\n    body. It\'s just the default <html><h1>..., but at it\'s always there.\n    \n    Bonus efficiency: do a little caching of sub-SLO manifests to avoid\n    needless re-fetches. This kicks in when there are multiple references\n    to the same sub-SLO in a given manifest. The caching only holds 20\n    sub-SLOs so that a malicious user can\'t build a giant SLO tree and use\n    it to run the proxy out of memory (we\'re already holding up to 10\n    manifests in memory at a time since a SLO can include another SLO to a\n    depth of 10; this doesn\'t make the situation too much worse).\n    \n    Change-Id: I24716e3271cf3370642e3755447e717fd7d9957c\n',357,89,'SwiftStack'),(588216,6258,6258,'2016-08-31 14:41:30','2016-08-31 14:37:11','    Config logABug feature for Swift api-ref\n    \n    Currently, Swift api-ref is not configured with logABug feature.\n    When users click \"Report bug\" button, it leads to \"openstack-manuals\"\n    which is default.\n    \n    Change-Id: I3b6fb410000637ff03d99110d440de88a5adc30c\n',8,0,'Fujitsu'),(588218,8775,8775,'2016-09-22 07:32:38','2016-09-12 15:49:38','    Fix using filter() to meet python2,3\n    \n    As mentioned in link[1], if we need filter on python3,\n    Raplace filter(lambda obj: test(obj), data) with:\n    [obj for obj in data if test(obj)].\n    \n    [1] https://wiki.openstack.org/wiki/Python3\n    \n    Change-Id: Ia1ea2ec89e4beb957a4cb358b0d0cef970f23e0a\n',7,7,'Fujitsu'),(588220,7470,7470,'2016-09-29 10:10:57','2016-09-29 10:09:14','    Remove redundant \'the\'\n    \n    Change-Id: I9f6a11d714e5e9f3c0c6609465225923495aa99a\n',3,4,'Fujitsu'),(589564,4086,4086,'2016-09-27 21:16:58','2016-07-25 20:10:44','    Update diskfile docstring for get_ondisk_files\n    \n    The return value for diskfile.BaseDiskFileManager.get_ondisk_files is\n    a bit more rich than the current doc string describes; try to fill in\n    some gaps.\n    \n    Co-Author: Alistair Coles <alistair.coles@hpe.com>\n    \n    Change-Id: Ief10644825ead124e58f3da5693bbdc1c6dc31ed\n',7,0,'Intel'),(589566,4094,4094,'2016-09-21 15:48:11','2016-09-19 16:06:18','    Add more comment to authtoken sample options\n    \n    Prior to the Mitaka release the install guides showed\n    services (including Swift) being in a default Keystone\n    domain which existed by default and has id=default. This\n    domain id is reflected in the proxy-server.conf-sample\n    authtoken options and also shown in man page and auth docs.\n    \n    The Mitaka install guide shows a domain with *name* default\n    being created, and having a random UUID assigned, in which\n    services are created. This has caused confusion (see\n    discussion on linked bug report).\n    \n    This patch does not change the sample options but does\n    add to the comments in order to emphasize that a user\n    may need to alter the options to match their Keystone\n    configuration.\n    \n    Change-Id: I17bfcdbd983402eeb561bb704b8b1f1e27547c7d\n    Partial-Bug: #1604674\n',22,2,'HPE'),(589568,5941,5941,'2016-09-07 09:04:30','2016-07-28 12:10:12','    Py3: Fixes eventlet ImportError: No module named urllib2\n    \n    Python3:\n    from eventlet.green.urllib import request\n    Python2:\n    from eventlet.green import urllib2\n    \n    Change-Id: Ib38865e0b6a8f076b8a54de4fae221d49f315c91\n',30,5,'HP'),(589570,8629,8629,'2016-09-28 19:02:09','2016-09-28 10:58:30','    Use six.moves.urllib.parse instead of urllib\n    \n    Six urllib parse contains py3\'s urllib.parse and py2\'s urllib.\n    Replace urllib with six.moves.urllib.parse to keep compatibility.\n    \n    Change-Id: Ie67987e4ffb981c2ee70360f7fa9b3fe873c2a96\n    Closes-bug: 1280105\n',11,11,'EasyStack'),(589572,8263,8263,'2016-09-30 16:43:54','2016-09-30 11:11:20','    fix word spelling mistake\n    \n    Change-Id: Ia7b03e52b8d6a334fc2b67c94912effe0e659941\n',4,4,'EasyStack'),(589574,5599,5599,'2016-09-28 21:07:07','2016-09-26 05:37:08','    Improve functional tests and test client\n    \n    This patch includes a couple of small functional test improvement.\n    \n    A. Change swift_test_client.File.sync_metadata to follow Swift object\n    metadata semantics:\n    \n    swift_test_client.File.sync_metadata is designed to post object user\n    metadata to an object. However, prior to this patch, the\n    swift_test_client.File instance keeps the existing object metadata as\n    its member attribute and if sync_metadata is called, it sends both\n    existing metadata and incomming metadata from caller. It looks to result\n    in the odd state as if Swift keeps the existing metadata when POST\n    object requested.\n    \n    To tell the correct Swift object metadata semantics, when POST object\n    requested, the existing metadata in the stored object should be gone\n    even if no metadata is overwritten.\n    \n    i.e.\n    if POST object with \'X-Object-Meta-Key: Val\' to a stored object with\n    \'X-Object-Meta-foo: bar\', it will result in an object with\n    \'X-Object-Meta-Key\' (note that X-Object-Meta-Foo will be deleted)\n    \n    The prior behavior sometimes make us confused in the reviw [1] so that,\n    this patch fixes it to send only incomming metadata if it\'s set.\n    \n    B. Check the response status code more strictly for ObjectVersioning case\n    \n    This patch fixes test_versioning_check_acl on both TestObjectVersioning and\n    TestObjectVersioningHistoryMode to assert the response status code\n    explisitly instead of asserting just \"ResponseError\". (e.g. 403 when trying\n    to delete object from other account)\n    \n    1: https://review.openstack.org/#/c/360933/1/test/functional/tests.py@4142\n    \n    Change-Id: Ia3e5b40f17dc0f881b695aa4be39c98b91e2bb06\n',12,8,'NTT'),(589576,4075,4075,'2016-09-30 12:16:58','2016-09-30 12:16:58','    Remove unneeded line from ring.utils.dispersion_report\n    \n    This line is render inert by the condition right above it.\n    \n    The behavior/correctness is already well vetted by\n    ring.test_utils:TestUtils.test_dispersion_report\n    \n    Change-Id: I7d7a193c52d1005cecd9c70953d55e2b9755a64d\n',0,1,'Rackspace'),(589577,8775,8775,'2016-09-12 15:02:40','2016-09-12 15:01:29','    Use ConfigParser instead of SafeConfigParser\n    \n    SafeConfigParser supports interpolation on top of ConfigParser in\n    Python 2, and SafeConfigParser is deprecated in Python 3.2 and log\n    warning like \" DeprecationWarning: The SafeConfigParser class has\n    been renamed to ConfigParser in Python 3.2. This alias will be removed\n    in future versions. Use ConfigParser directly instead.\" So we can use\n    ConfigParser if we don\'t need interpolation.\n    \n    Change-Id: I7e399b3cb90ded909e0d777a4d10c44f1e9299da\n    Closes-Bug: #1618666\n',1,1,'Fujitsu'),(592249,2470,4088,'2016-08-31 17:18:23','2016-08-11 00:53:13','    Ignore auditor status files to prevent replicator reports errors\n    \n    Ignore `auditor_status_*.json` files during the collecting jobs\n    and replicator won\'t use these wrong paths to find objects that\n    causes an exception to increase failure count in replicator report.\n    \n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Mark Kirkwood <mark.kirkwood@catalyst.net.nz>\n    \n    Change-Id: Ib15a0987288d9ee32432c1998aefe638ca3b223b\n    Closes-Bug: #1583305\n    (cherry picked from commit 65b1820407ea40bd7d65a5356a58a689befe3cb5)\n',42,4,'SwiftStack'),(592250,2470,2470,'2016-08-31 11:16:45','2016-05-11 19:54:47','    Stop complaining about auditor_status files\n    \n    Following fd86d5a, the object-auditor would leave status files so it\n    could resume where it left off if restarted. However, this would also\n    cause the object-reconstructor to print warnings like:\n    \n      Unexpected entity in data dir: u\'/srv/node4/sdb8/objects/auditor_status_ZBF.json\'\n    \n    ...which isn\'t actually terribly useful or actionable. The auditor will\n    clean it up (eventually); the operator doesn\'t have to do anything.\n    \n    Now, the reconstructor will specifically ignore those status files.\n    \n    Partial-Bug: 1583305\n    Change-Id: I2f3d0bd2f1e242db6eb263c7755f1363d1430048\n    (cherry picked from commit ad16e2c77bb61bdf51a7d3b2c258daf69bfc74da)\n',40,2,'SwiftStack'),(592252,2470,2470,'2016-10-03 14:27:47','2016-09-19 17:37:47','    Fix when we set state in Spliterator\n    \n    Also clean up a comment and some exception text\n    \n    Change-Id: I1e7755cc0468f9a3ba96a0dd24868f09a10c3df0\n    Related-Change: I24716e3271cf3370642e3755447e717fd7d9957c\n',40,5,'SwiftStack'),(592254,8775,8775,'2016-10-03 13:29:25','2016-10-03 13:28:48','    Fix typo: remove redundant \'that\'\n    \n    Change-Id: I9ed35d866ffb9faa41556c5c00f3b490d35412ab\n',1,1,'Fujitsu'),(592256,8775,8775,'2016-10-04 10:07:10','2016-10-04 10:06:23','    Fix a typo in documentation\n    \n    remove redundant \'this\'\n    \n    Change-Id: I8860190d882b255a3d416de685f930d2b2c0ad17\n',1,1,'Fujitsu'),(592258,4094,4094,'2016-09-30 10:19:47','2016-09-29 19:22:36','    Fix failing cross-policy-versioning functional test\n    \n    Since [1] the functional tests for cross-policy\n    object versioning fails with an error. These tests are\n    skipped in all CI test jobs because none of them have\n    more than one policy enabled. However, when running\n    tests against a system with multiple policies the tests\n    will not skip and the error is raised.\n    \n    [1] Related-Change: Ifebc1c3ce558b1df9e576a58a4100f2219dfc7e7\n    \n    Related-Bug: #1629234\n    \n    Change-Id: I48028928bc996252a31cbf3abfd2b5e67a74dc95\n',2,1,'HPE'),(592260,2838,2838,'2016-09-30 22:21:03','2016-09-29 20:48:21','    Revises \'url\' to \'URL\' and \'json\' to \'JSON\'\n    \n    Change-Id: I44743fbb9bcbce3a50ed6770264ba0f4b17803d7\n',8,8,'Fujitsu'),(592262,5155,5155,'2016-07-11 21:51:49','2015-08-17 15:15:19','    Add functional test for access control (container ACL) with Keystone\n    \n    This patch adds test cases for requests to containers and objects using\n    various combinations of users/projects, roles in order to check container\n    ACL and referrer behavior.\n    \n    Co-Authored-By: Keisuke Yamamoto <keisuk.yamamoto@jp.fujitsu.com>\n    Change-Id: I435655bc56e5088ba50a96a879a45c7e264e0d8d\n',1915,2,'Fujitsu'),(592264,5155,5155,'2016-07-11 21:59:37','2015-08-14 06:49:18','    Add functional test for access control (RBAC INFO) with Keystone\n    \n    This patch adds test cases for info requests to accounts, containers\n    and objects using various combinations of users/projects, roles and/or\n    service tokens.\n    \n    Change-Id: Iece57b03a73b3cdf9762573678755f361e9b803e\n',92,0,'Fujitsu'),(592266,42,42,'2016-10-03 21:08:15','2016-10-03 21:08:15','    Add a configurable URL base to staticweb\n    \n    This came to light because someone ran Tempest against a standard\n    installation of RDO, which helpfuly terminates SSL for Swift in\n    a pre-configured load-balancer. In such a case, staticweb has no\n    way to know what scheme to use and guesses wrong, causing Tempest\n    to fail.\n    \n    Related upstream bug:\n     https://bugs.launchpad.net/mos/+bug/1537071\n    \n    Change-Id: Ie15cf2aff4f7e6bcf68b67ae733c77bb9353587a\n    Closes-Bug: 1572011\n',92,10,'Red Hat'),(592268,9120,9120,'2016-10-06 11:22:26','2016-10-06 11:06:49','    Update pyeclib dependency to 1.3.1\n    \n    Updated swift requirements.txt to change PyECLib version\n    so that it fixes memory leak issue.\n    \n    Change-Id: Ifc069989b96188fd7abe0d8edc6b30266783ad79\n    Partial-Bug: #1629410\n',1,1,'AT&T'),(592270,1422,8263,'2016-10-03 15:10:53','2016-09-29 20:24:23','    add assert error information\n    \n    There are the same error resp.status_int in different operators of\n    one function, then I can\'t point out which one returns this status_int.\n    Therefore, I assert error information.\n    \n    Change-Id: I58bcba97a9f92e43e0f8ef26b801b69a6906af41\n',66,48,'EasyStack'),(594559,8988,8988,'2016-09-17 21:05:17','2016-09-17 20:48:00','    updated output for swift stat\n    \n    Change-Id: Iff30acb88124e6116803bb79d32d1fc8cbb2d0ce\n    Closes-Bug: #1622138\n',0,3,'independent'),(594561,229,229,'2016-09-30 15:45:02','2016-09-03 10:18:32','    Update test-requirements.txt\n    \n    The testing requirements should not cause extra packaging\n    work for deployers (since these aren\'t required to deploy).\n    This patch brings it in line with the latest global requirements,\n    except for python-swiftclient itself (which I kept with no version\n    specifier). By being in line with global requirements, this is a\n    more accurate list with respect to how things are actually tested\n    in the gate.\n    \n    Change-Id: Iddc92d9bb135144d38c3e5aec2e95df5787e9b5b\n',13,13,'SwiftStack'),(594563,6258,6258,'2016-10-06 16:50:17','2016-09-07 14:02:10','    [api-ref] Remove temporary block in conf.py\n    \n    The os-api-ref 1.0.0 is out. We can remove the support to older version now.\n    Reference:\n    https://github.com/openstack/senlin/commit/6d41feb58dd836d426c9b6f025846dbbf7295097\n    \n    Change-Id: I0b28cd3f6b5c393d63b9ab2b4dcd3b7b3c20f9b4\n',9,27,'Fujitsu'),(594565,8263,8263,'2016-10-12 13:14:39','2016-08-16 19:17:34','    Simplify container_updater test code\n    \n    This patch simplifies the container_updater unit test code by\n    refactoring the creation of the continer_updater into a helper method.\n    This method by default will use a default configuration. However\n    this configuration can be changed by passing in a dictionary of\n    configuration elements to update, for example:\n    \n        self._get_container_updater({\'mount_check\': \'true\'})\n    \n    Change-Id: Ide211d559bf9381c520a04cd90d278d9b2beae50\n',20,59,'EasyStack'),(594567,4094,4094,'2016-10-10 18:11:02','2016-08-09 16:09:38','    EC - eliminate .durable files\n    \n    Instead of using a separate .durable file to indicate\n    the durable status of a .data file, rename the .data\n    to include a durable marker in the filename. This saves\n    one inode for every EC fragment archive.\n    \n    An EC policy PUT will, as before, first rename a temp\n    file to:\n    \n       <timestamp>#<frag_index>.data\n    \n    but now, when the object is committed, that file will be\n    renamed:\n    \n       <timestamp>#<frag_index>#d.data\n    \n    with the \'#d\' suffix marking the data file as durable.\n    \n    Diskfile suffix hashing returns the same result when the\n    new durable-data filename or the legacy durable file is\n    found in an object directory. A fragment archive that has\n    been created on an upgraded object server will therefore\n    appear to be in the same state, as far as the consistency\n    engine is concerned, as the same fragment archive created\n    on an older object server.\n    \n    Since legacy .durable files will still exist in deployed\n    clusters, many of the unit tests scenarios have been\n    duplicated for both new durable-data filenames and legacy\n    durable files.\n    \n    Change-Id: I6f1f62d47be0b0ac7919888c77480a636f11f607\n',1728,979,'HPE'),(594569,1111,1111,'2016-10-12 07:13:43','2016-10-07 12:17:08','    Throttle update_auditor_status calls\n    \n    If there are quite a few nearly empty partitions per disk you might see\n    some write load even if your cluster is unused. The auditor will update\n    the status file after every partition, and this might happen multiple\n    times within a second if there is not much data stored yet.\n    \n    This patch throttles updates, and will only write out an updated status\n    if the file was last updated more than a minute ago.\n    \n    Closes-Bug: 1631352\n    Change-Id: Ib61ec9cd945e6b2d28756f6ca47801674a7e6060\n',56,5,'Red Hat'),(595682,591,591,'2016-10-11 22:13:06','2016-08-18 09:48:45','    Apply bash error handling consistently in all bash scripts\n    \n    Change-Id: I36dcff9cc2593bcfb6aebbe84b59d95c711eb3e4\n',16,18,'Seznam.cz'),(595684,5232,5232,'2016-10-13 18:09:30','2016-10-13 18:05:05','    SAIO install bash scripts for a novice install\n    \n    Added SAIO bash scripts as an option under developer tools. They are\n    well commented and simple to understand for a novice developer.\n    \n    Change-Id: Id1b2babe420f4d10e564256fac5a54b60659c5e5\n    Co-Authored-By: Paul Dardeau <paul.dardeau@intel.com>\n',2,0,'Intel'),(595686,4094,4094,'2016-10-13 17:15:10','2016-10-12 20:00:13','    Prevent ssync writing bad fragment data to diskfile\n    \n    Previously, if a reconstructor sync type job failed to provide\n    sufficient bytes from a reconstructed fragment body iterator to match\n    the content-length that the ssync sender had already sent to the ssync\n    receiver, the sender would still proceed to send the next\n    subrequest. The ssync receiver might then write the start of the next\n    subrequest to the partially complete diskfile for the previous\n    subrequest (including writing subrequest headers to that diskfile)\n    until it has received content-length bytes.\n    \n    Since a reconstructor ssync job does not send an ETag header (it\n    cannot because it does not know the ETag of a reconstructed fragment\n    until it has been sent) then the receiving object server does not\n    detect the \"bad\" data written to the fragment diskfile, and worse,\n    will label it with an ETag that matches the md5 sum of the bad\n    data. The bad fragment file will therefore appear good to the auditor.\n    \n    There is no easy way for the ssync sender to communicate a lack of\n    source data to the receiver other than by disconnecting the\n    session. So this patch adds a check in the ssync sender that the sent\n    byte count is equal to the sent Content-Length header value for each\n    subrequest, and disconnect if a mismatch is detected.\n    \n    The disconnect prevents the receiver finalizing the bad diskfile, but\n    also prevents subsequent fragments in the ssync job being sync\'d until\n    the next cycle.\n    \n    Closes-Bug: #1631144\n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    \n    Change-Id: I54068906efdb9cd58fcdc6eae7c2163ea92afb9d\n',385,36,'HPE'),(596355,229,4088,'2016-10-13 13:20:42','2016-10-12 18:02:16','    Make Content-Disposition support `inline; filename=...` format.\n    \n    A client can process a object contents immediately when it has knowledge,\n    if it doesn\'t, it stores the content to local with the filename that\n    assigned in `Content-Disposition`.\n    \n    According to https://tools.ietf.org/html/rfc2183, `filename` can be use\n    whatever `inline` or `attachment` (disposition-type) in the disposition\n    string.\n    \n    Change-Id: Iba94aedfad06c1dc8bd7be5eb3c73b33fb8d5198\n',31,7,'SwiftStack'),(597160,4094,4094,'2016-10-17 10:44:13','2016-10-12 20:00:13','    Prevent ssync writing bad fragment data to diskfile\n    \n    Previously, if a reconstructor sync type job failed to provide\n    sufficient bytes from a reconstructed fragment body iterator to match\n    the content-length that the ssync sender had already sent to the ssync\n    receiver, the sender would still proceed to send the next\n    subrequest. The ssync receiver might then write the start of the next\n    subrequest to the partially complete diskfile for the previous\n    subrequest (including writing subrequest headers to that diskfile)\n    until it has received content-length bytes.\n    \n    Since a reconstructor ssync job does not send an ETag header (it\n    cannot because it does not know the ETag of a reconstructed fragment\n    until it has been sent) then the receiving object server does not\n    detect the \"bad\" data written to the fragment diskfile, and worse,\n    will label it with an ETag that matches the md5 sum of the bad\n    data. The bad fragment file will therefore appear good to the auditor.\n    \n    There is no easy way for the ssync sender to communicate a lack of\n    source data to the receiver other than by disconnecting the\n    session. So this patch adds a check in the ssync sender that the sent\n    byte count is equal to the sent Content-Length header value for each\n    subrequest, and disconnect if a mismatch is detected.\n    \n    The disconnect prevents the receiver finalizing the bad diskfile, but\n    also prevents subsequent fragments in the ssync job being sync\'d until\n    the next cycle.\n    \n    This is a cherry pick of commit 3218f8b.\n    \n    Closes-Bug: #1631144\n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    \n    Change-Id: I54068906efdb9cd58fcdc6eae7c2163ea92afb9d\n',385,36,'HPE'),(597161,4094,4094,'2016-10-17 11:55:15','2016-10-12 20:00:13','    Prevent ssync writing bad fragment data to diskfile\n    \n    Previously, if a reconstructor sync type job failed to provide\n    sufficient bytes from a reconstructed fragment body iterator to match\n    the content-length that the ssync sender had already sent to the ssync\n    receiver, the sender would still proceed to send the next\n    subrequest. The ssync receiver might then write the start of the next\n    subrequest to the partially complete diskfile for the previous\n    subrequest (including writing subrequest headers to that diskfile)\n    until it has received content-length bytes.\n    \n    Since a reconstructor ssync job does not send an ETag header (it\n    cannot because it does not know the ETag of a reconstructed fragment\n    until it has been sent) then the receiving object server does not\n    detect the \"bad\" data written to the fragment diskfile, and worse,\n    will label it with an ETag that matches the md5 sum of the bad\n    data. The bad fragment file will therefore appear good to the auditor.\n    \n    There is no easy way for the ssync sender to communicate a lack of\n    source data to the receiver other than by disconnecting the\n    session. So this patch adds a check in the ssync sender that the sent\n    byte count is equal to the sent Content-Length header value for each\n    subrequest, and disconnect if a mismatch is detected.\n    \n    The disconnect prevents the receiver finalizing the bad diskfile, but\n    also prevents subsequent fragments in the ssync job being sync\'d until\n    the next cycle.\n    \n    N.B.\n    Though this is a backport patch to 2.7.0 release, there is the\n    difference from the original commit\n    3218f8b064e462d901466b04a4813e15ec96da85 on the master branch which is\n    the number of eventlet trampoline sleeps to make before asserting the\n    written log in test/unit/obj/test_ssync.py. That is because in 2.7.0\n    there is an extra eventlet coro for writing chunks into the real\n    diskfile, which was subsequently removed with commit\n    4c11833a9cbff499725365e535e217f3eae3c442 during the 2.7.0-2.8.0\n    development cycle.\n    \n    Closes-Bug: #1631144\n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n    \n    Change-Id: I54068906efdb9cd58fcdc6eae7c2163ea92afb9d\n',395,36,'HPE'),(598255,591,591,'2016-10-19 20:17:00','2016-10-19 20:17:00','    Fixed rysnc -> rsync typo\n    \n    Change-Id: I671b4206072c6e22f4ae38033502336ec32e86ad\n',6,6,'Seznam.cz'),(598256,1111,1111,'2016-10-13 08:19:20','2016-10-07 12:17:08','    Throttle update_auditor_status calls\n    \n    If there are quite a few nearly empty partitions per disk you might see\n    some write load even if your cluster is unused. The auditor will update\n    the status file after every partition, and this might happen multiple\n    times within a second if there is not much data stored yet.\n    \n    This patch throttles updates, and will only write out an updated status\n    if the file was last updated more than a minute ago.\n    \n    Cherry-picked from master/77f5b201248c0684d87289540d3f94873f5c5e38.\n    \n    Closes-Bug: 1631352\n    Change-Id: Ib61ec9cd945e6b2d28756f6ca47801674a7e6060\n',56,5,'Red Hat'),(599185,8629,8629,'2016-10-23 12:13:57','2016-10-04 14:55:27','    Add links for more detailed overview in overview_architecture\n    \n    Change-Id: Ie1f171d0945e3f1f4daa61bc66786c01e68e9a0a\n',7,5,'EasyStack'),(599582,42,591,'2016-10-19 17:16:42','2016-10-17 19:46:57','    Set owner of drive-audit recon cache to swift user\n    \n    Fixies this problem:\n    * swift-drive-audit needs to be run by root, because only root have\n      \"umount\" permission\n    * swift-object servers typically runs as user swift\n    * if swift-drive-audit is run by root, /var/cache/swift/drive.recon is\n      owned by root, with 0o600\n    * recon middleware (inside swift-object-server) can\'t read this cache\n      file: swift-object: Error reading recon cache file\n    \n    This patch adds \"user\" option to drive-audit config file. Recon cache\n    is chowned to this user.\n    \n    Change-Id: Ibf20543ee690b7c5a37fabd1540fd5c0c7b638c9\n',32,2,'Seznam.cz'),(599943,2470,2470,'2016-10-28 13:07:27','2016-10-28 13:07:27','    Refactor SLO If-Match / HEAD tests\n    \n    Previously, we didn\'t make any assertions about the backend requests\n    but rather just verified the user-visible behavior.\n    \n    Change-Id: Iddd4b705ee9b724a4a8a88c6fbaff36cca9612cf\n',238,85,'SwiftStack'),(600819,5383,42,'2016-10-26 12:42:05','2016-10-03 21:08:15','    Add a configurable URL base to staticweb\n    \n    This came to light because someone ran Tempest against a standard\n    installation of RDO, which helpfuly terminates SSL for Swift in\n    a pre-configured load-balancer. In such a case, staticweb has no\n    way to know what scheme to use and guesses wrong, causing Tempest\n    to fail.\n    \n    Related upstream bug:\n     https://bugs.launchpad.net/mos/+bug/1537071\n    \n    Change-Id: Ie15cf2aff4f7e6bcf68b67ae733c77bb9353587a\n    Closes-Bug: 1572011\n    (cherry picked from commit f62df7b80c083862c11cbef678f75cc09bb89e8f)\n',92,10,'Red Hat'),(600821,4075,9222,'2016-10-31 12:34:41','2016-10-30 12:07:29','    Suppress unexpected file warnings for rsync temp files\n    \n    Do not log unexpected file warning for rsync temp files when the parsing\n    of the timespamp fails.  If the file passes a regex test suppress the\n    logger waring, but still return it as an unexpected file from\n    get_ondisk_files.\n    \n    Closes-Bug: 1616504\n    \n    Change-Id: I5a5d6e24710e4880776b32edcbc07021acf77676\n',18,2,'independent'),(600823,4075,4094,'2016-11-01 13:11:02','2016-10-17 20:38:52','    Make ECDiskFileReader check fragment metadata\n    \n    This patch makes the ECDiskFileReader check the validity of EC\n    fragment metadata as it reads chunks from disk and quarantine a\n    diskfile with bad metadata. This in turn means that both the object\n    auditor and a proxy GET request will cause bad EC fragments to be\n    quarantined.\n    \n    This change is motivated by bug 1631144 which may result in corrupt EC\n    fragments being written to disk but appear valid to the object auditor\n    md5 hash and content-length checks.\n    \n    NotImplemented:\n    \n     * perform metadata check when a read starts on any frag_size\n       boundary, not just at zero\n    \n    Related-Bug: #1631144\n    Closes-Bug: #1633647\n    \n    Change-Id: Ifa6a7f8aaca94c7d39f4aeb9d4fa3f59c4f6ee13\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n',661,168,'HPE'),(600824,9223,9223,'2016-10-30 20:02:39','2016-10-17 03:37:35','    Mirror X-Trans-Id to X-Openstack-Request-Id\n    \n    Many other OpenStack services use a `[X-]OpenStack-Request-Id` header\n    to return a unique identifier for the request.  Swift will now return\n    `X-Trans-Id` as well as `X-Openstack-Request-Id`.\n    \n    Change-Id: I56cd4738808b99c0a08463f83c100be51a62db05\n    Closes-Bug: #1572786\n',60,30,'independent'),(601953,4094,4094,'2016-11-03 11:48:58','2016-10-17 20:38:52','    Make ECDiskFileReader check fragment metadata\n    \n    This patch makes the ECDiskFileReader check the validity of EC\n    fragment metadata as it reads chunks from disk and quarantine a\n    diskfile with bad metadata. This in turn means that both the object\n    auditor and a proxy GET request will cause bad EC fragments to be\n    quarantined.\n    \n    This change is motivated by bug 1631144 which may result in corrupt EC\n    fragments being written to disk but appear valid to the object auditor\n    md5 hash and content-length checks.\n    \n    NotImplemented:\n    \n     * perform metadata check when a read starts on any frag_size\n       boundary, not just at zero\n    \n    Related-Bug: #1631144\n    Closes-Bug: #1633647\n    \n    This is a backport of commit 2a75091c58948fb664016c0e91e72acd313e4610\n    \n    Change-Id: Ifa6a7f8aaca94c7d39f4aeb9d4fa3f59c4f6ee13\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n',659,176,'HPE'),(601954,1422,8263,'2016-10-03 15:10:32','2016-08-10 20:21:34','    Add unit test content\n    \n    It lacks of some checks in unit test case. Therefore, I add them and\n    make it completion.\n    \n    Change-Id: Id0d20158ae753d245a541fca5ac4fafeecc9790a\n',63,5,'EasyStack'),(601956,3302,3302,'2016-11-02 18:13:22','2016-07-15 14:11:09','    Use more specific asserts in test/probe tests\n    \n    I changed asserts with more specific assert methods.\n    \n    e.g.: from assertTrue(sth == None) to assertIsNone(*) or\n    assertTrue(isinstance(inst, type)) to assertIsInstace(inst, type) or\n    assertTrue(not sth) to assertFalse(sth).\n    \n    The code gets more readable, and a better description will be shown on fail.\n    \n    Change-Id: I3768faa568e3964e726ecc48ac8cb133cb088284\n',45,45,'Ericsson'),(601958,2470,4075,'2016-11-02 17:29:22','2016-09-20 23:44:32','    Make NullLogger more logger like\n    \n    eventlet.wsgi.server is adaptive to dealing with the named log\n    argument being either a file like or a log like [1], but message\n    handling is a more direct pass through if it\'s a log like.\n    \n    Since all we want to do is make eventlet\'s logging it a noop - it\'s\n    easy to provide either interface!\n    \n    1. https://github.com/eventlet/eventlet/blob/4d2cdc/eventlet/wsgi.py#L246\n    \n    Change-Id: I2d792176c96931eafb3f140e6653ba8b31eda429\n',21,0,'Rackspace'),(601960,4094,4094,'2016-11-03 15:19:25','2016-11-03 15:19:25','    Fix KeyError when auditor finds an expired object\n    \n    Since the related change [1] the auditor checks deleted objects in\n    case their tombstone is ready to be reclaimed. However, the auditor\n    mistakes an expired object for a deleted object because\n    DiskFileExpired is a subclass of DiskFileDeleted. This causes a\n    KeyError to be raised and logged because the expired object has no\n    tombstone info in the ondisk_info data structure.\n    \n    This patch makes the auditor catch and ignore DiskFileExpired\n    exceptions before handling DiskFileDeleted exceptions.\n    \n    [1] Related-Change: I3e99dc702d55a7424c6482969e03cb4afac854a4\n    \n    Change-Id: I9872b6997d09dcfd8a868c4b91b9379407283b8e\n    Closes-Bug: #1638016\n',30,2,'HPE'),(601961,441,441,'2016-11-02 08:38:33','2016-11-02 08:38:33','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: I5c07d4a2d42cc50c0ef322074f3ac4ef116dd1a3\n',205,76,NULL),(601962,4094,4094,'2016-11-03 12:02:40','2016-10-17 20:38:52','    Make ECDiskFileReader check fragment metadata\n    \n    This patch makes the ECDiskFileReader check the validity of EC\n    fragment metadata as it reads chunks from disk and quarantine a\n    diskfile with bad metadata. This in turn means that both the object\n    auditor and a proxy GET request will cause bad EC fragments to be\n    quarantined.\n    \n    This change is motivated by bug 1631144 which may result in corrupt EC\n    fragments being written to disk but appear valid to the object auditor\n    md5 hash and content-length checks.\n    \n    NotImplemented:\n    \n     * perform metadata check when a read starts on any frag_size\n       boundary, not just at zero\n    \n    Related-Bug: #1631144\n    Closes-Bug: #1633647\n    \n    This is a backport of commit 2a75091c58948fb664016c0e91e72acd313e4610\n    \n    Change-Id: Ifa6a7f8aaca94c7d39f4aeb9d4fa3f59c4f6ee13\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Kota Tsuyuzaki <tsuyuzaki.kota@lab.ntt.co.jp>\n',688,183,'HPE'),(602658,4075,4075,'2016-11-04 17:29:04','2016-09-16 11:58:46','    Add probetest for response with duplicate frags\n    \n    When an SSYNC connection fails after shipping a fragment, but before\n    cleaning itself up - it can lead to multiple replicas of the same\n    fragment index serviceable in the node_iter at the same time.  Or\n    perhaps more likely if a partner nodes win a race to rebuild waiting\n    on a handoff.  In this case, the proxy need not fail to service a GET\n    just because of extra information.  A similar guard was added to the\n    reconstructor in a related change [1].\n    \n    This underlying bug is acctually fixed by the related change [2], this\n    probetest is just encoding the failure to help with future maintenance.\n    \n    1. Related-Change: I91f3d4af52cbc66c9f7ce00726f247b5462e66f9\n    2. Related-Change: I2310981fd1c4622ff5d1a739cbcc59637ffe3fc3\n    \n    Closes-Bug: 1624176\n    \n    Change-Id: I06fc381a25613585dd18916d50e7ca2c68d406b6\n',121,1,'Rackspace'),(602660,2470,2470,'2016-10-29 18:33:48','2016-10-29 18:29:48','    Ignore Range values like \"bytes=--0\"\n    \n    This is consistent with what we already do for other\n    semantically-invalid values like \"bytes=--1\". Previously, we would\n    return a 416 Requested Range Not Satisfiable response like we do for the\n    semantically-valid-but-not-really-meaningful \"bytes=-0\"\n    \n    Change-Id: I932b42406c9a5ee7eaa6978a655e61022a957415\n',6,2,'SwiftStack'),(603190,5254,5254,'2016-10-18 15:33:02','2016-10-18 15:33:02','    update urls to newton\n    \n    Change-Id: I9eb8c004e100b16de906d340b54e154cf21ddaab\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',11,11,'Red Hat'),(603192,4075,4075,'2016-11-04 20:00:00','2016-10-11 13:23:11','    Fix signal handling for daemons with InternalClient\n    \n    The intentional use of \"bare except\" handling in catch_errors and some\n    daemons to prevent propagation on unexpected errors that do not\n    inherit from Exception (like eventlet.Timeout) or even BaseException\n    (like old-style classes) has the side effect of spuriously \"handling\"\n    *expected* errors like when a signal handler raises SystemExit.\n    \n    The signal handler installed in our Daemon is intended to ensure first\n    that the entire process group and any forked processes (like rsync\'s)\n    receive the SIGTERM signal and also that the process itself\n    terminates.\n    \n    The use of sys.exit was not a concious grandiose plans for graceful\n    shutdown (like the running[0] = False trick that wsgi server parent\n    process do) - the desired behavior for SIGTERM is to stop - hard.\n    \n    This change ensures the original goals and intentions of our signal\n    handler are fulfilled without the undesirable side effect that can\n    cause our daemons to confusingly log an expected message to stop as an\n    unexpected error, and start ignoring additional SIGTERM messages;\n    forcing our kind operators to resort to brutal process murder.\n    \n    Closes-Bug: #1489209\n    Change-Id: I9d2886611f6db2498cd6a8f81a58f2a611f40905\n',181,114,'Rackspace'),(603194,4094,4094,'2016-11-03 16:54:09','2016-09-26 17:25:09','    EC: reconstruct using non-durable fragments\n    \n    Previously the reconstructor would only reconstruct a missing fragment\n    when a set of ec_ndata other fragments was available, *all* of which\n    were durable. Since change [1] it has been possible to retrieve\n    non-durable fragments from object servers. This patch changes the\n    reconstructor to take advantage of [1] and use non-durable fragments.\n    \n    A new probe test is added to test scenarios with a mix of failed and\n    non-durable nodes. The existing probe tests in\n    test_reconstructor_rebuild.py and test_reconstructor_durable.py were\n    broken. These were intended to simulate cases where combinations of\n    nodes were either failed or had non-durable fragments, but the test\n    scenarios defined were not actually created - every test scenario\n    broke only one node instead of the intent of breaking multiple\n    nodes. The existing tests have been refactored to re-use most of their\n    setup and assertion code, and merged with the new test into a single\n    class in test_reconstructor_rebuild.py.\n    \n    test_reconstructor_durable.py is removed.\n    \n    [1] Related-Change: I2310981fd1c4622ff5d1a739cbcc59637ffe3fc3\n    \n    Change-Id: Ic0cdbc7cee657cea0330c2eb1edabe8eb52c0567\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Closes-Bug: #1624088\n',231,274,'HPE'),(604133,5596,5596,'2016-10-10 16:51:14','2016-10-10 16:50:22','    go: logging work\n    \n    Support log_udp_host and log_udp_port config options.\n    Add a -v flag to send all logs to the console (if -d is absent)\n    Rename SysLogLike interface to LowLevelLogger\n    \n    Change-Id: I8bfd7843c7b3b2ab7a986ebef50cd351ae1168ed\n',73,33,'Rackspace'),(604134,2470,2470,'2016-11-08 12:32:18','2016-11-08 12:32:18','    Stop shadowing built-in iter\n    \n    Change-Id: I0e3fcddfef6968353e4c0aa6871a2e7a22598459\n',3,3,'SwiftStack'),(604135,4075,4075,'2016-11-07 18:19:20','2016-11-07 18:06:44','    Fix ZeroDivisionError in reconstructor.stats_line\n    \n    Despite a check to prevent zero values in the denominator python\n    integer division could result in ZeroDivisionError in the compute_eta\n    helper function.  Make sure we always have a non-zero value even if it\n    is small.\n    \n    NotImplemented:\n    \n     * stats calculation is still not great, see lp bug #1488608\n    \n    Closes-Bug: #1549110\n    Change-Id: I54f2081c92c2a0b8f02c31e82f44f4250043d837\n',28,1,'Rackspace'),(606805,4075,4075,'2016-11-01 10:41:17','2016-10-26 17:38:51','    Better error messages in go/probe\n    \n    The go/probe tests requrie that you have an object-1.ring.gz to allow\n    the daemons to load because they stub LoadPolicies with a fake.\n    \n    Change-Id: I7a12c0291b443f626b0abf259e7e4b95ee9c9151\n',11,3,'Rackspace'),(606807,6350,229,'2016-11-10 21:34:14','2016-10-03 17:18:22','    adding reno sphinx tree\n    \n    This should give the necessary tooling to set up the right\n    links in the right places so Swift has release notes listed\n    alongside other projects.\n    \n    Change-Id: I4e5f1ce1fcfbb2943036c821a24a0b4a3a2d9fc8\n',370,0,'SwiftStack'),(606809,2470,5941,'2016-11-08 12:22:12','2016-07-28 13:31:47','    Py3: Fixes header key dict\n    \n    Decode header to latin1 on python3\n    encode header to utf-8 on python2.\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    \n    Change-Id: I10f205a05bb3a566e52a597d9315b3a8b8c14664\n',40,1,'HP'),(606811,4094,9222,'2016-11-11 11:47:19','2016-10-30 12:07:29','    Include debug message for rsync tempfiles\n    \n    The warning message for rsync tempfiles was removed in the related\n    change.  However, because our regex match might result in a false\n    positive maybe it\'s still useful to log a debug message.  Instead of\n    silently ignoring rsync tempfiles, when running in debug we note the\n    file and how we classified it - but still no warning will occur.\n    \n    I also consolidate our use of the regex for rsync tempfiles into the\n    diskfile module and move the negative test for the warning logger\n    message a little next to the positive test.\n    \n    Change-Id: Idb2a1a76aa275c9c2e9bad8aceea913b8f5b1c71\n    Related-Change: I5a5d6e24710e4880776b32edcbc07021acf77676\n',28,19,'independent'),(606813,4094,7680,'2016-11-11 16:31:02','2016-10-25 21:13:55','    Add OPTIONS in manpages\n    \n    swift-account-info, swift-container-info, swift-object-info\n    and swift-get-node do not contain any information about the available\n    options. This patch adds OPTIONS in these manpages.\n    \n    Change-Id: I832c621460ee6bf19adac8e0aadeab32be4b8da0\n',69,8,'Intel'),(606815,4094,4094,'2016-11-11 16:34:15','2016-11-11 16:34:15','    Show file parameters as mandatory in swift-*-info man pages\n    \n    Changes the file parameters on command line to use the convention of\n    <file> for a mandatory option rather than [file] which suggests an\n    optional flag. Also drop to lower case as is convention in other man\n    pages.\n    \n    Change-Id: Icfb4b4786343eb493a73b092cad1fdadc935d066\n',3,3,'HPE'),(606817,2470,5254,'2016-11-11 10:46:17','2016-05-16 15:57:47','    remove double checks on account/container info\n    \n    Continuing the clean up in account and container\n    info, removed duplicated validation from account_info\n    and container_info methods, since the same validations\n    were recently added to get_account_info and get_container_info.\n    \n    Change-Id: I1ad745fe809367d22649c83f38c4de7a74cac44e\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',6,11,'Red Hat'),(606819,5650,5650,'2016-11-15 13:15:59','2016-11-15 13:15:59','    Document X-Openstack-Request-Id in all responses\n    \n    Swift returns `X-Openstack-Request-Id` for container and\n    object requests as well as account.  A couple api-ref docs are\n    missing this value in the response examples.\n    \n    Change-Id: Ifcd67a620e04be5e92b43c7749ee4acb50bb171d\n',31,0,'IBM'),(606820,5654,5654,'2016-11-01 11:50:12','2016-10-20 14:01:14','    Remove duplicated \'User-Agent\' header from object-updater\'s requests\n    \n    When Object-Server saves async-update in pickle files,\n    \'User-Agent: object-server %(pid)\' (the key is title style) is included\n    in the pickles. However, Object-Updater will add\n    \'user-agent: object-updater %(pid)\' (the key is lower case style) to the\n    pickled headers and use it to make http connection. According to RFC\n    7230, each header field consists of a case-insensitive field name,\n    therefore either of \'User-Agent\' and \'user-agent\' should not be included\n    in the headers.\n    \n    This patch removes old \'User-Agent\' header from object-updater\'s\n    requests.\n    \n    Change-Id: Ia624558395584457c718b311fe80e1a8406e22ad\n    Closes-Bug:#1635114\n',4,3,'Nippon Telegraph and Telephone Corporation'),(606822,9249,9249,'2016-11-17 02:07:24','2016-11-17 02:06:25','    Fix typos in test_container.py\n    \n    TrivialFix\n    \n    Change-Id: I6d3422a88b6fd6d2a495d17ff75d292ac96cc251\n',2,2,'independent'),(606823,2470,2470,'2016-11-15 14:12:02','2016-11-15 14:12:02','    Fix up X-Trans-Id-Extra docs\n    \n    Previously, they would render as \"X -Trans-Id-Extra\"\n    \n    Change-Id: Ibaf9b365467a2c91a0f03baed4d7bc36b0fa9967\n',3,3,'SwiftStack'),(606825,2470,2470,'2016-11-16 12:39:12','2016-11-15 14:35:42','    Add X-Openstack-Request-Id to Access-Control-Expose-Headers\n    \n    Change-Id: Ib95a693042f0b3cf204033eb5957660cb3573dcf\n    Related-Change: I56cd4738808b99c0a08463f83c100be51a62db05\n',18,16,'SwiftStack'),(606827,2470,2470,'2016-11-16 12:12:06','2016-10-29 22:00:01','    SLO: Concurrently HEAD segments\n    \n    Before creating a static large object, we must verify that all of the\n    referenced segments exist. Previously, this was done sequentially; due\n    to latency between proxy and object nodes, clients must be careful to\n    either keep their segment count low or use very long (minute+) timeouts.\n    We mitigate this somewhat by enforcing a hard limit on segment count,\n    but even then, HEADing a thousand segments (the default limit) with an\n    average latency of (say) 100ms will require more than a minute and a\n    half.\n    \n    Further, the nested-SLO approach requires multiple requests from the\n    client -- as a result, Swift3 is in the position of enforcing a lower\n    limit than S3\'s 10,000 (which will break some clients) or requiring that\n    clients have timeouts on the order of 15-20 minutes (!).\n    \n    Now, we\'ll perform the segment HEADs in parallel, with a concurrency\n    factor set by the operator. This is very similar to (and builds upon)\n    the parallel-bulk-delete work. By default, two HEAD requests will be\n    allowed at a time.\n    \n    As a side-effect, we\'ll also only ever HEAD a path once per manifest.\n    Previously, if a manifest alternated between two paths repeatedly (for\n    instance, because the user wanted to splice together various ranges from\n    two sub-SLOs), then each entry in the manifest would trigger a fresh\n    HEAD request.\n    \n    Upgrade Consideration\n    =====================\n    If operators would like to preserve the prior (single-threaded) SLO\n    creation behavior, they must add the following line to their\n    [filter:slo] proxy config section:\n    \n       concurrency = 1\n    \n    This may be done prior to upgrading Swift.\n    \n    UpgradeImpact\n    Closes-Bug: #1637133\n    Related-Change: I128374d74a4cef7a479b221fd15eec785cc4694a\n    Change-Id: I567949567ecdbd94fa06d1dd5d3cdab0d97207b6\n',126,101,'SwiftStack'),(606829,229,229,'2016-11-17 19:48:52','2016-11-09 12:37:43','    2.11.0 release notes\n    \n    I have reordered the Contributors section of the AUTHORS\n    file to simply be ordered by the first character in the\n    author name.\n    \n    Change-Id: I824022e582cadc361484b20c411840f46c4c5b50\n',392,265,'SwiftStack'),(606830,2470,2470,'2016-11-17 15:32:47','2016-11-17 13:02:06','    Avoid infinite loop while placing parts\n    \n    Previously, we could over-assign how many parts should be in a tier.\n    This would cause the local `parts` variable to go negative, which meant\n    that our `while parts` loop would never terminate.\n    \n    Change-Id: Id7e7889742ca37cf1a9c0d55fba78d967e90e8d0\n    Closes-Bug: 1642538\n',31,9,'SwiftStack'),(606832,5599,5599,'2016-11-18 01:53:34','2016-11-18 01:50:11','    Don\'t overwrite built-in \'id\'\n    \n    This is a follow up for https://review.openstack.org/#/c/399237\n    \n    \'id\' is assigned as a builtin function so that we should not use \'id\'\n    for the local variable name.\n    \n    Change-Id: Ic27460d49e68f6cd50bda1d5b3810e01ccb07a37\n',6,4,'NTT'),(606834,8101,8101,'2016-11-17 17:48:24','2016-11-16 22:16:53','    Correctly send 412 Precondition Failed in copy middleware\n    \n    Previously in copy middleware, if a user entered an invalid destination\n    path with an invalid `container/object` path the server would return\n    a 500 Internal Server Error. However, the correct response should be\n    a 412 Precondition Failed. This patch updates copy so that it catches\n    the 412 Precondition Failed exception and returns it to the client.\n    \n    Closes-Bug: #1641980\n    \n    Change-Id: Ic4677ae033d05b8730c6ad1041bd9c07268e11a9\n',42,56,'IBM'),(606836,1111,591,'2016-10-31 07:26:22','2015-11-01 19:32:19','    Respect server type for --md5 check in swift-recon\n    \n    MD5 sum compare of server ring ignores server_type parameter\n    now. This could be confusing and this should only test\n    specified server_type, same as --replication, --validate-servers,\n    etc.\n    \n    Change-Id: I9095309c24f42aec1330757c88e7b242b2a6a865\n',67,10,'Seznam.cz'),(606838,591,591,'2016-11-19 23:24:30','2016-11-19 23:24:30','    Removed \"in-process-\" from func env tox name\n    \n    This shorten shebang in infra, because we are hitting 128 bytes limit.\n    \n    Change-Id: I02477d81b836df71780942189d37d616944c4dce\n',2,2,'Seznam.cz'),(606839,2470,4094,'2016-11-03 11:51:47','2016-11-03 15:19:25','    Fix KeyError when auditor finds an expired object\n    \n    Since the related change [1] the auditor checks deleted objects in\n    case their tombstone is ready to be reclaimed. However, the auditor\n    mistakes an expired object for a deleted object because\n    DiskFileExpired is a subclass of DiskFileDeleted. This causes a\n    KeyError to be raised and logged because the expired object has no\n    tombstone info in the ondisk_info data structure.\n    \n    This patch makes the auditor catch and ignore DiskFileExpired\n    exceptions before handling DiskFileDeleted exceptions.\n    \n    [1] Related-Change: I3e99dc702d55a7424c6482969e03cb4afac854a4\n    \n    Change-Id: I9872b6997d09dcfd8a868c4b91b9379407283b8e\n    Closes-Bug: #1638016\n    (cherry picked from commit a4d77d918d99dfa8a1e7f1b0561769a17ba64932)\n',30,2,'HPE'),(606840,591,591,'2016-11-19 23:50:32','2016-11-19 23:24:30','    Removed \"in-process-\" from func env tox name\n    \n    This shorten shebang in infra, because we are hitting 128 bytes limit.\n    \n    Change-Id: I02477d81b836df71780942189d37d616944c4dce\n    (cherry picked from commit 5d7a3a4)\n',2,2,'Seznam.cz'),(606841,591,4075,'2016-11-18 12:23:15','2016-10-11 13:23:11','    Fix signal handling for daemons with InternalClient\n    \n    The intentional use of \"bare except\" handling in catch_errors and some\n    daemons to prevent propagation on unexpected errors that do not\n    inherit from Exception (like eventlet.Timeout) or even BaseException\n    (like old-style classes) has the side effect of spuriously \"handling\"\n    *expected* errors like when a signal handler raises SystemExit.\n    \n    The signal handler installed in our Daemon is intended to ensure first\n    that the entire process group and any forked processes (like rsync\'s)\n    receive the SIGTERM signal and also that the process itself\n    terminates.\n    \n    The use of sys.exit was not a concious grandiose plans for graceful\n    shutdown (like the running[0] = False trick that wsgi server parent\n    process do) - the desired behavior for SIGTERM is to stop - hard.\n    \n    This change ensures the original goals and intentions of our signal\n    handler are fulfilled without the undesirable side effect that can\n    cause our daemons to confusingly log an expected message to stop as an\n    unexpected error, and start ignoring additional SIGTERM messages;\n    forcing our kind operators to resort to brutal process murder.\n    \n    Closes-Bug: #1489209\n    Change-Id: I9d2886611f6db2498cd6a8f81a58f2a611f40905\n    (cherry picked from commit c2ce92a)\n',181,114,'Rackspace'),(606843,591,591,'2016-11-18 12:20:47','2016-10-17 19:46:57','    Set owner of drive-audit recon cache to swift user\n    \n    Fixies this problem:\n    * swift-drive-audit needs to be run by root, because only root have\n      \"umount\" permission\n    * swift-object servers typically runs as user swift\n    * if swift-drive-audit is run by root, /var/cache/swift/drive.recon is\n      owned by root, with 0o600\n    * recon middleware (inside swift-object-server) can\'t read this cache\n      file: swift-object: Error reading recon cache file\n    \n    This patch adds \"user\" option to drive-audit config file. Recon cache\n    is chowned to this user.\n    (cherry picked from commit 9847796)\n    \n    Change-Id: Ibf20543ee690b7c5a37fabd1540fd5c0c7b638c9\n',32,2,'Seznam.cz'),(606845,2470,2470,'2016-11-18 10:05:13','2016-11-17 13:02:06','    Avoid infinite loop while placing parts\n    \n    Previously, we could over-assign how many parts should be in a tier.\n    This would cause the local `parts` variable to go negative, which meant\n    that our `while parts` loop would never terminate.\n    \n    Change-Id: Id7e7889742ca37cf1a9c0d55fba78d967e90e8d0\n    Closes-Bug: 1642538\n    (cherry picked from commit 2e7a7347fc58676fbaabce3d87a15866796d32e4)\n',31,9,'SwiftStack'),(610998,591,591,'2016-11-20 20:50:02','2016-11-19 23:24:30','    Removed \"in-process-\" from func env tox name and added bindep.txt\n    \n    This shorten shebang in infra, because we are hitting 128 bytes limit.\n    Added bindep.txt, which is needed for infra\n    \n    Change-Id: I02477d81b836df71780942189d37d616944c4dce\n    (cherry picked from commit 5d7a3a4 and aab2cee)\n',18,1,'Seznam.cz'),(610999,4094,5254,'2016-11-21 12:16:17','2016-11-17 17:17:00','    breaking down tests.py into smaller pieces\n    \n    tests.py is currently at ~5500 lines of code, it\'s\n    time to break it down into smaller files.\n    \n    I started with an easy middleware set of tests\n    (i.e., versioned writes, ~600 lines of code ) so I can get\n    some feedback. There are more complicated tests that cover\n    multiple middlewares for example, it is not so clear where\n    those should go.\n    \n    Change-Id: I2aa6c18ee5b68d0aae73cc6add8cac6fbf7f33da\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',796,762,'Red Hat'),(611000,591,591,'2016-11-21 22:13:11','2016-11-21 22:13:11','    Added comment for \"user\" option in drive-audit config\n    \n    Change-Id: I24362826bee85ac3304e9b63504c9465da673014\n',2,0,'Seznam.cz'),(611002,2470,2470,'2016-11-21 14:39:50','2016-07-25 15:06:23','    Reduce backend requests for SLO If-Match / HEAD requests\n    \n    ... by storing SLO Etag and size in sysmeta.\n    \n    Previously, we had to GET the manifest for every HEAD or conditional\n    request to an SLO. Worse, since SLO PUTs require that we HEAD every\n    segment, we\'d GET all included sub-SLO manifests. This was necessary so\n    we could recompute the large object\'s Etag and content-length.\n    \n    Since we already know both of those during PUT, we\'ll now store it in\n    object sysmeta. This allows us to:\n    \n     * satisfy HEAD requests based purely off of the manifest\'s HEAD\n       response, and\n     * perform the If-(None-)Match comparison on the object server, without\n       any additional subrequests.\n    \n    Note that the large object content-length can\'t just be parsed from\n    content-type -- with fast-POST enabled, the content-type coming out of\n    the object-server won\'t necessarily include swift_bytes.\n    \n    Also note that we must still fall back to GETting the manifest if the\n    sysmeta headers were not found. Otherwise, we\'d break existing large\n    objects.\n    \n    Change-Id: Ia6ad32354105515560b005cea750aa64a88c96f9\n',208,85,'SwiftStack'),(611005,832,4094,'2016-11-23 15:07:29','2016-11-21 14:56:09','    go: Update README.md to clarify policies allowed\n    \n    Change-Id: I74a0b3f01d41db23bbe988e93488c175d76d0b52\n',2,1,'HPE'),(611006,9247,1020,'2016-11-08 14:17:24','2016-09-21 15:23:03','    Document access control lists (ACLs)\n    \n    Documents the syntax and meaning of container ACLs. Account ACLs\n    were already pretty well documented. However the account\n    ACL text was moved as part of this change.\n    \n    TempAuth and keystoneauth have diffent ACLs. However, I decided\n    to describe both in one section/table because there are many\n    \"examples\" of ACLs in other documents, and it\'s better that\n    someone coming here from those sources become aware that the\n    specific ACL might not apply to them. In addition, the\n    referrer and .rlistings is common to both.\n    \n    Some changes were also made to the api-ref document. The doc\n    and api-ref documents are published as seperate documents, so\n    the cross references from the api-ref section will not work\n    until this patch merges and the documents are rebuilt.\n    \n    Change-Id: Icd2d6c278050c263b833ae76545c041f54fae68d\n',400,84,'HP'),(611008,9247,9247,'2016-11-23 12:00:19','2016-11-23 12:00:19','    Add note that tempauth is not intended for production\n    \n    Change-Id: I77862c9f4a71e438ba4f3988b2a9803c674c3e03\n',6,1,'HPE'),(611009,5254,1172,'2016-11-22 21:06:24','2016-11-09 14:02:23','    Handle deleted files with if-none-match\n    \n    When an object is deleted, we retrieve its metadata on the next PUT\n    requests, which make if-none-match requests fail while the object\n    shouldn\'t be here. It seems we\'re only interested in the timestamp of\n    the deleted object, so get that but forget the metadata.\n    \n    Change-Id: I4a4a8be9b631598ca1cd52c53885c68c3fbdfc4a\n    Closes-Bug: #1640448\n',14,1,'Rackspace'),(611011,229,229,'2016-10-19 09:18:52','2016-08-11 11:07:24','    use the new upper constraints infra features\n    \n    Change-Id: I7c60be623b4340ee34ae1aa520f17b303348811d\n',1,10,'SwiftStack'),(611013,4094,9351,'2016-11-25 11:40:48','2016-11-23 16:41:11','    Fixed regression in consolidate_hashes\n    \n    Occurs when a new file is stored to new suffix to not empty partition.\n    Then suffix is added to an invalidations file but not into hashes\n    pickle file. When a replication of this partition runs, replication of\n    suffix is completed on first and each 10th run of replicator. Rsync\n    runs on each new suffix because destination does not return hash of\n    new suffix although suffix content is in the same state.\n    This bug was introduced in 2.7.0\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    Change-Id: Ie2700f6e6171f2ecfa7d07b0f18b79e90cbf1c8a\n    Closes-Bug: #1634967\n',122,33,'Seznam.cz'),(611015,4094,4094,'2016-11-24 11:46:19','2016-11-24 11:46:19','    Drop \"--allow-insecure netifaces\" from tox pip install\n    \n    Follow up to [1]. The --allow-insecure switch is no longer\n    required for netifaces.\n    \n    [1] Related-Change: I7c60be623b4340ee34ae1aa520f17b303348811d\n    \n    Change-Id: If893cdeff68ae5b279ea7055c078b0c1247ae7f2\n',1,1,'HPE'),(611017,5254,5254,'2016-11-22 21:51:21','2016-11-22 21:48:14','    breaking up functional/tests.py a bit further\n    \n    This patch removes the slo, dlo and tempurl tests from tests.py\n    As before, this patch does not refactor any code it\'s only a copy\n    and paste to make it easy to review\n    \n    Change-Id: I0b49d4f8bc7dd204d06258f4910cfc9a5ba4bdcb\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',2009,1910,'Red Hat'),(611019,8955,8955,'2016-11-29 09:07:46','2016-11-08 14:17:31','    add byteorder information and logic to ring files\n    \n    On-disk, serialized ring files are byteorder dependent, which makes then\n    unportable between different endian architectures. Add a field to the\n    ring dictionary in the file indicating the byteorder used to generate\n    the file, and then byteswap if necessary when deserializing the file.\n    \n    This patch only allows newly created ring files to be byteoder\n    agnostic. Previously generated ring files will still fail on different\n    endian architectures, and will need to be regenerated with this patch.\n    \n    Change-Id: I23b5e0a8082b30ca257aeb1fab03ab74e6f0b2d4\n    Closes-Bug: #1639980\n',120,46,'Oracle'),(611021,5232,5232,'2016-11-04 14:17:32','2016-11-04 14:14:18','    Multi Swift - Multiple Swift clusters on same h/w\n    \n    Bash scripts to spin up multiple Swift clusters sharing the same\n    hardware and OS. Please refer to the  README of the repo for more\n    context\n    \n    Change-Id: I4473088baf3c72baa03d6905a1ca6a65a740a4f4\n',1,0,'Intel'),(611023,300,300,'2016-11-25 16:36:49','2016-11-25 09:54:59','    Show team and repo badges on README\n    \n    This patch adds the team\'s and repository\'s badges to the README file.\n    The motivation behind this is to communicate the project status and\n    features at first glance.\n    \n    For more information about this effort, please read this email thread:\n    \n    http://lists.openstack.org/pipermail/openstack-dev/2016-October/105562.html\n    \n    To see an example of how this would look like check:\n    \n    https://gist.github.com/185b807657793d710f29d87ea7ec3e56\n    \n    Change-Id: I78815177dba9d765587d9a0aee4e0f76e14a043e\n',9,0,'Red Hat'),(611025,1111,1111,'2016-07-17 14:31:37','2016-07-17 14:31:06','    Add missing recon metrics to admin_guide\n    \n    Change-Id: Ibd484e088c915269a46f5fffe3ce627a80b3418e\n',4,0,'Red Hat'),(613425,4094,4094,'2016-12-01 10:32:19','2016-12-01 10:30:03','    Add missing expirer recon metric to admin_guide\n    \n    Add expirer/object to recon metrics, which reports such as:\n    \n    $ curl -s http://localhost:6010/recon/expirer/object\n    {\"object_expiration_pass\": 0.19765901565551758, \"expired_last_pass\": 1}\n    \n    Change-Id: Ia9a171c09efebe5ad56c9de2952a8f29188c4970\n',1,0,'HPE'),(613427,2470,5637,'2016-10-31 17:07:17','2016-09-30 02:08:25','    Ensure update of the container by object-updater\n    \n    Object-updater regards 404 from container-server as success.\n    This causes wrong giving up and generates object which never appears\n    at container, for example when all container replicas are placed in\n    handoff devices at the moment.\n    \n    This patch makes object-updater try updating until it gets 201s from\n    all container servers, and ensures the update.\n    \n    Change-Id: Ic5d55ff368cec62ab2eb9fd883801ba4ab043dd4\n    Closes-Bug: #1328735\n',71,6,'NTT'),(613429,4086,4086,'2016-11-16 10:11:30','2016-06-20 15:56:15','    remove empty db hash and suffix directories\n    \n    If a db gets quarantined we may fail to cleanup an empty suffix dir or\n    a hash dir.\n    \n    Change-Id: I721fa5fe9a7ae22eead8d5141f93e116847ca058\n    Closes-Bug: #1583719\n',158,0,'Intel'),(613431,1111,9351,'2016-12-02 08:40:39','2016-11-25 09:26:27','    Fix non-deterministic suffix updates in hashes.pkl\n    \n    Right now the do_listdir option was set on every 10th replication run.\n    Due to the randomness of the job listing this might update a given\n    partition much less often than expected, for example with 1000\n    partitions per replicator only every ~70th run.\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Christian Schwede <cschwede@redhat.com>\n    Related-Bug: #1634967\n    Closes-Bug: 1644807\n    Change-Id: Ib5c9dd17e40150450ec57a728ae8652fbc730af6\n',64,7,'Seznam.cz'),(613433,4075,4075,'2016-11-30 16:55:05','2016-11-29 17:53:42','    Remove ring md5 integration check from recon unittests\n    \n    The actual value computed by md5 isn\'t that important; even in recon\n    it\'s only used as an opaque identifier that assumed to be consistent\n    across nodes for the same file.\n    \n    However the way these tests were written with hard coded md5 values\n    makes them brittle to changes in the RingData format and susceptible\n    to the burden of needless unrelated test maintenance churn.\n    \n    e.g.\n    \n    Related-Change: I23b5e0a8082b30ca257aeb1fab03ab74e6f0b2d4\n    \n    Change-Id: I9623752c3cd2361f57864f3e938e1baf5e9292d7\n',154,95,'Rackspace'),(613435,832,832,'2016-12-01 14:17:02','2016-12-01 09:46:53','    Quarantine malformed database schema SQLite errors\n    \n    Currently if an sqlite3.DatabaseError is thrown when caused by\n    a corrupted database schema, it get logged and the database is isn\'t\n    quarantined.\n    \n    This patch adds the malformed database schema case to the list of\n    SQLite errors in possibly_quarantine that will trigger the db to be\n    quarantined.\n    \n    Also it improved the possibly_quarantined unit test to test all existing\n    exceptions, and catches exceptions based on the real world except we use\n    in code.\n    \n    Closes-Bug: #1646247\n    \n    Change-Id: Id9452c88f8394a2a910c34c69361442543aa206d\n',45,20,'Rackspace'),(613437,229,4075,'2016-12-02 16:10:29','2016-12-02 15:07:17','    Add Status Code tests for Container GET\n    \n    I think a real easy list of status maps checks is missing for the\n    container unittests.  At least I hope I didn\'t miss it?  This one uses\n    all some pretty decent modern infrastructure so it should be easy to\n    expand.\n    \n    Change-Id: I0929dad87214569cfd5ee3896840a92cc10c621f\n',34,0,'Rackspace'),(614372,5654,5654,'2016-12-01 19:52:08','2016-12-01 19:51:05','    Remove redundant codes from unit test of object updater\n    \n    In unit test of object updater, there are some redundant codes.\n    This patch removes the redundant codes.\n    \n    Change-Id: I03a5047fa5bd8fd71aee07ba897c08bbfe7ac782\n',2,4,'Nippon Telegraph and Telephone Corporation'),(614374,4094,4094,'2016-11-24 11:38:10','2016-11-24 11:38:10','    Add pip and virtualenv upgrade to development guidelines\n    \n    Change [1] requires pip >= 7.0.1. In general, test\n    environments will need to have pip and virtualenv in line\n    with global requirements. Add a reference to the global\n    requirements rather than specifying versions that will\n    inevitably become stale.\n    \n    Also adds inline literal markup to all occurences of \"tox\"\n    for consistency.\n    \n    [1] Related-Change: I7c60be623b4340ee34ae1aa520f17b303348811d\n    \n    Change-Id: I7730f22c594a3521973cb9ff264a7d50f2b86a1a\n    Depends-On: I45eee626713438af5fc676f2b5f636d7ec23f7be\n',20,12,'HPE'),(614376,2470,2470,'2016-11-30 10:52:08','2016-10-29 17:21:41','    Let users know entity size in 416 responses\n    \n    If a user sends a Range header with no satisfiable ranges, we send back\n    a 416 Requested Range Not Satisfiable response. Previously however,\n    there would be no indication of the size of the object they were\n    requesting, so they wouldn\'t know how to craft a satisfiable range. We\n    *do* send a Content-Length, but it is (correctly) the length of the\n    error message.\n    \n    The RFC [1] has an answer for this:\n    \n    >  A server generating a 416 (Range Not Satisfiable) response to a\n    >  byte-range request SHOULD send a Content-Range header field with an\n    >  unsatisfied-range value, as in the following example:\n    >\n    >    Content-Range: bytes */1234\n    >\n    >  The complete-length in a 416 response indicates the current length of\n    >  the selected representation.\n    \n    Now, we\'ll send a Content-Range header for all 416 responses, including\n    those coming from the object server as well as those generated on a\n    proxy because of the Range mangling required to support EC policies.\n    \n    [1] RFC 7233, section 4.2, although similar language was used in RFC\n    2616, sections 10.4.17 and 14.16\n    \n    Change-Id: I80c7390fc6f84a10a212b0641bb07a64dfccbd45\n',41,3,'SwiftStack'),(615363,5254,5254,'2016-12-06 13:02:23','2016-12-06 13:00:07','    add object_post_as_copy to saio.\n    \n    adding the option to the saio configuration file\n    to make it easier to test fast post.\n    \n    Change-Id: I22b0e60c7d73580e3db6fcd48e6dfc79fab6032a\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',1,0,'Red Hat'),(615364,441,441,'2016-11-22 07:50:26','2016-11-22 07:50:26','    Imported Translations from Zanata\n    \n    For more information about this automatic import see:\n    https://wiki.openstack.org/wiki/Translations/Infrastructure\n    \n    Change-Id: If8f2ed2120bad76f095b03a8732de960ffda1012\n',29,4,NULL),(615365,591,9351,'2016-12-02 13:43:01','2016-11-25 09:26:27','    Fix non-deterministic suffix updates in hashes.pkl\n    \n    Right now the do_listdir option was set on every 10th replication run.\n    Due to the randomness of the job listing this might update a given\n    partition much less often than expected, for example with 1000\n    partitions per replicator only every ~70th run.\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Christian Schwede <cschwede@redhat.com>\n    Related-Bug: #1634967\n    Closes-Bug: 1644807\n    Change-Id: Ib5c9dd17e40150450ec57a728ae8652fbc730af6\n',64,7,'Seznam.cz'),(615367,4094,9351,'2016-11-25 12:33:36','2016-11-23 16:41:11','    Fixed regression in consolidate_hashes\n    \n    Occurs when a new file is stored to new suffix to not empty partition.\n    Then suffix is added to an invalidations file but not into hashes\n    pickle file. When a replication of this partition runs, replication of\n    suffix is completed on first and each 10th run of replicator. Rsync\n    runs on each new suffix because destination does not return hash of\n    new suffix although suffix content is in the same state.\n    This bug was introduced in 2.7.0\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    Change-Id: Ie2700f6e6171f2ecfa7d07b0f18b79e90cbf1c8a\n    Closes-Bug: #1634967\n    (cherry picked from commit 8ac432fff3e01a07f4bff918bb9cc38d93532b43)\n',122,33,'Seznam.cz'),(615369,832,9351,'2016-12-06 00:31:58','2016-11-25 09:26:27','    Fix non-deterministic suffix updates in hashes.pkl\n    \n    Right now the do_listdir option was set on every 10th replication run.\n    Due to the randomness of the job listing this might update a given\n    partition much less often than expected, for example with 1000\n    partitions per replicator only every ~70th run.\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n    Co-Authored-By: Christian Schwede <cschwede@redhat.com>\n    Related-Bug: #1634967\n    Closes-Bug: 1644807\n    Change-Id: Ib5c9dd17e40150450ec57a728ae8652fbc730af6\n',64,6,'Seznam.cz'),(615370,4094,9351,'2016-11-25 12:41:10','2016-11-23 16:41:11','    Fixed regression in consolidate_hashes\n    \n    Occurs when a new file is stored to new suffix to not empty partition.\n    Then suffix is added to an invalidations file but not into hashes\n    pickle file. When a replication of this partition runs, replication of\n    suffix is completed on first and each 10th run of replicator. Rsync\n    runs on each new suffix because destination does not return hash of\n    new suffix although suffix content is in the same state.\n    This bug was introduced in 2.7.0\n    \n    Co-Authored-By: Alistair Coles <alistair.coles@hpe.com>\n    Change-Id: Ie2700f6e6171f2ecfa7d07b0f18b79e90cbf1c8a\n    Closes-Bug: #1634967\n    (cherry picked from commit 8ac432fff3e01a07f4bff918bb9cc38d93532b43)\n',154,7,'Seznam.cz'),(615372,2715,2470,'2016-11-24 12:04:41','2016-11-17 13:02:06','    Avoid infinite loop while placing parts\n    \n    Previously, we could over-assign how many parts should be in a tier.\n    This would cause the local `parts` variable to go negative, which meant\n    that our `while parts` loop would never terminate.\n    \n    Change-Id: Id7e7889742ca37cf1a9c0d55fba78d967e90e8d0\n    Closes-Bug: 1642538\n    (cherry picked from commit 2e7a7347fc58676fbaabce3d87a15866796d32e4)\n',31,9,'SwiftStack'),(616344,2470,2470,'2016-07-14 10:51:02','2016-07-13 11:31:39','    Call out transient sysmeta in swift-object-info\n    \n    This is similar to the separate output sections for sysmeta and user\n    meta.\n    \n    Change-Id: Icc1fd86b2f7dcc085fee8ee94ec331290b530521\n',53,4,'SwiftStack'),(616346,6260,6260,'2016-12-08 15:45:24','2016-12-08 15:44:48','    Use assertGreater(len(x), 0) instead of assertTrue(len(x) > 0)\n    \n    assertGreater provides a nicer error message if it fails.\n    \n    Change-Id: I5b045042b5991280a5b6a12ccde09fa733a19e26\n',7,7,'Fujitsu'),(616348,4094,4094,'2016-12-08 16:55:41','2016-12-08 16:55:41','    line wrap overview_expiring_objects.rst\n    \n    ...and make it easier to read.\n    \n    Change-Id: I54fee09e019d657e8040b9f5b4d69c6c814abd56\n',47,18,'HPE'),(616350,5254,5254,'2016-12-06 20:52:18','2016-11-22 21:33:49','    adding unit tests for if-none-match fix\n    \n    This patch just adds some unit tests for the patch 395582\n    \n    Change-Id: I78cda3f9a64b162926dc0d2b3bb8e68095bea71a\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',65,4,'Red Hat'),(616352,4075,4075,'2016-12-01 07:32:24','2016-12-01 07:30:40','    Fixups for ghost listing fix\n    \n    I think the probetest can be a little more pathological and I\'m worried\n    about logging the response of each individual request at error when we\n    currently only log the entire failure at debug.\n    \n    I have lots of async pendings sometimes.\n    \n    Related-Change: Ic5d55ff368cec62ab2eb9fd883801ba4ab043dd4\n    Change-Id: I1c070b2b07d31552f36b647731b0b3ebed31871f\n',4,1,'Rackspace'),(617039,8751,8751,'2016-12-09 14:59:40','2016-10-17 02:13:29','    Added conditional headers to HEAD request documentation\n    \n    Currently, conditional headers, e.g. If-Match, If-Modified-Since, etc.,\n    are listed for the GET objects API call, but not in the HEAD objects\n    call in the api-ref documentation.  This patch adds the missing headers\n    to the HEAD documentation.\n    \n    Change-Id: Idd1c248cc27415d148a1b9a5eb2e95f25b8c4da0\n    Closes-Bug: #1630212\n',18,3,'AT&T'),(617660,229,229,'2016-12-12 09:37:33','2016-11-21 14:52:41','    2.7.1 changelog updates\n    \n    Change-Id: I540eb2fff8a9f67815fda26263350ecaa217f217\n',27,0,'SwiftStack'),(617661,229,229,'2016-12-12 09:58:21','2016-11-21 11:06:27','    2.10.1 authors/changelog updates\n    \n    Change-Id: I69508f4b55c822aa507c77d5b0bba7852464d3de\n',76,1,'SwiftStack'),(617662,5654,5654,'2016-12-02 19:11:54','2016-12-01 19:58:08','    Rename ObjectUpdater variables in unit test to appropriate names\n    \n    There are ObjectUpdater variables named \'cu\' in unit test.\n    Since the variables seems to have ContainerUpdater objects, the names\n    lessen readability of the unit test codes.\n    \n    This patch changes the varibale names to \'ou\' for readability.\n    \n    Change-Id: Iabdd7d8e7f0648b10000eabce2ee2e3cf385d43e\n',34,34,'Nippon Telegraph and Telephone Corporation'),(617664,4094,9247,'2016-12-12 18:14:17','2016-11-08 15:31:33','    Add python3-dev to bindep and use py27for some envs\n    \n    Installed my workstation with Ubuntu Xenial and then hit a few\n    snags running tox.\n    \n    python3-dev is needed to build the python3 envs. Did not actually\n    test python3-devel (rpm) as I don\'t have such a system.\n    \n    While python2.7 is the default, tox (on Xenial) itself uses\n    python3.5, hence 3.5 becomes the basepython and a number\n    of envs don\'t work.\n    \n    Driveby, removed warning about /bin/echo in py3pep8\n    \n    Change-Id: Ie880246dd757570b8e444da0e643f3c50093bdc5\n',6,0,'HPE'),(617666,6260,6260,'2016-12-12 16:23:09','2016-12-12 15:18:52','    Replace \'assertTrue(a not in b)\' with \'assertNotIn(a, b)\'\n    \n    trivialfix\n    \n    Change-Id: I416831c8ad92f8445bc8d9560040a5ebf5c90702\n',104,104,'Fujitsu'),(617668,5682,5682,'2016-12-12 12:17:12','2016-01-29 13:29:31','    tempurls with a prefix-based scope\n    \n    The middleware now allows the usage of signatures with a prefix-based\n    scope. A prefix-based signature grants access to all objects which share\n    the same prefix. This avoids the creation of a large amount of signatures,\n    when a whole container or pseudofolder is shared.\n    \n    Please see spec: https://review.openstack.org/#/c/199607/\n    \n    Change-Id: I03b68eb74dae6196b5e63e711ef642ff7d2cfdc9\n',321,102,'Deutsches Klimarechenzentrum GmbH'),(617670,832,5941,'2016-12-12 22:19:39','2016-07-27 12:16:26','    Py3: Make test_manager py3 compatable\n    \n    Fixes: NameError: name \'file\' is not defined\n    file() is removed in python3.x using open()\n     will solve it.\n    Fixes: AttributeError: \'generator\' object has no\n    attribute \'next\'\n    Python3 it is __next__()\n    \n    Change-Id: Ib2cbdfbbedb86f6e01239d2ee991677727b0548b\n',9,4,'HP'),(617672,2470,2470,'2016-12-12 23:14:32','2016-08-30 13:17:26','    SLO: Make etag and size_bytes fully optional\n    \n    Previously, we still required that clients send \"etag\" and \"size_bytes\"\n    keys in their segment definitions. This was done as a way to guard\n    against typos leading to an accidental lack of verification.\n    \n    However, typos should already be caught when we check for extra keys. As\n    a result, the only truly required key is \"path\".\n    \n    Change-Id: Ie1d8691115f8c68b5a3f3b59317cdab59f9a3fca\n',86,41,'SwiftStack'),(618673,229,229,'2016-12-14 12:50:51','2016-12-08 10:12:27','    Swift 2.12.0 authors/changelog updates\n    \n    Change-Id: I7f6613a7e964d9d867bf61e20a2afcf673cc1d45\n',126,2,'SwiftStack'),(619893,2470,9222,'2016-12-15 19:49:57','2016-11-03 17:01:35','    Raise ValueError if a config section does not exist\n    \n    Instead of printing the error message and\n    calling sys.exit() when a section not exists\n    or reading the file failed rais an Exception\n    from readconfig. Depending on the Value or IO-Error,\n    the caller can decide if he wants to exit or continue.\n    If an Exception reaches the wsgi utilities\n    it bubbles all the way up.\n    \n    Change-Id: Ieb444f8c34e37f49bea21c3caf1c6c2d7bee5fb4\n    Closes-Bug: 1578321\n',46,16,'independent'),(620660,1697,1697,'2016-12-20 07:30:43','2016-09-02 15:00:00','    Move bandit to pep8\n    \n    The bandit gate is passing, let\'s make it voting.\n    \n    Since bandit is a security linter, add it to the linter target - called\n    pep8 - and run it there. This will save the CI systems spawning an extra\n    test machine for this.\n    \n    Needed-By: I90e5401ee8e46a2a153adb62d0f99a8a88a686b8\n    Change-Id: I75eeefa2441466da60b9b206769a2e64e9c1e7a9\n',1,0,'SUSE'),(620661,2470,4094,'2016-12-20 10:45:59','2016-07-25 13:50:24','    Make tempurl functional tests clean up account keys\n    \n    Addresses a TODO in test/functional/test_account.py where\n    an account metadata test was having to clean up tempurl keys\n    in the account metadata that were left by another test in\n    a different module. This cleanup is necessary because tests\n    in test_account.py fail if there is any pre-existing\n    account metadata.\n    \n    This patch:\n    \n    * makes the tempurl tests clean up their keys from account\n      metadata.\n    \n    * makes the test_account.py:TestAccount class remove any\n      pre-existing metadata before attempting any tests and\n      replacing that metadata when all the tests in that class\n      have completed. This is more robust than the existing code\n      which only removes any tempurl keys that might be in the\n      account - now you could have x-account-meta-foo = bar in\n      the test account and test_account.py will still pass.\n    \n    * consolidates some common setup code currently repeated for\n      many of the functional test classes into into a BaseEnv class.\n    \n    Change-Id: I874a9e23dfcdd1caa934945b46089f11b9f6de65\n',162,200,'HPE'),(620663,4094,4094,'2016-12-14 12:22:25','2016-12-14 12:22:25','    Remove duplicate setup code from test_tempurl.py\n    \n    TestTempURLPrefix.setUp() almost duplicates the superclass\n    setUp method, except it set \"expires\" as an instance variable.\n    The duplicated setUp code can be removed by simply having the\n    super class setUp set the \"expires\" instance variable.\n    \n    Change-Id: Icf7604460e475523e156daa8c578765336820c8e\n',2,18,'HPE'),(621546,5599,5599,'2016-12-12 21:26:54','2016-10-30 22:24:18','    Fix stats calculation in object-reconstructor\n    \n    This patch fixes the object-reconstructor to calculate device_count\n    as the total number of local devices in all policies. Previously\n    Swift counts it for each policy but reconstruction_device_count\n    which means the number of devices actually swift needs to reconstruct\n    is counted as sum of ones for all polices.\n    \n    With this patch, Swift will gather all local devices for all policies\n    at first, and then, collect parts for each devices as well as current.\n    To do so, we can see the statuses for remaining job/disks percentage via\n    stats_line output.\n    \n    To enable this change, this patch also touchs the object replicator\n    to get a DiskFileManager via the DiskFileRouter class so that\n    DiskFileManager instances are policy specific. Currently the same\n    replication policy DiskFileManager class is always used, but this\n    change future proofs the replicator for possible other DiskFileManager\n    implementations.\n    \n    The change also gives the ObjectReplicator a _df_router variable,\n    making it consistent with the ObjectReconstructor, and allowing a\n    common way for ssync.Sender to access DiskFileManager instances via\n    it\'s daemon\'s _df_router instance.\n    \n    Also, remove the use of FakeReplicator from the ssync test suite. It\n    was not necessary and risked masking divergence between ssync and the\n    replicator and reconstructor daemon implementations.\n    \n    Co-Author: Alistair Coles <alistair.coles@hpe.com>\n    \n    Closes-Bug: #1488608\n    Change-Id: Ic7a4c932b59158d21a5fb4de9ed3ed57f249d068\n',152,144,'NTT'),(622424,8812,8775,'2016-12-25 12:43:27','2016-09-23 15:52:59','    Replace six iteration methods with standard ones\n    \n    1.As mentioned in [1], we should avoid using six.iterXXX\n    to achieve iterators. We can use dict.XXX instead, as it will\n    return iterators in PY3 as well.\n    \n    2.In py2, the performance about list should be negligible,\n    see the link [2].\n    \n    [1] https://wiki.openstack.org/wiki/Python3\n    [2] http://lists.openstack.org/pipermail/openstack-dev/2015-June/066391.html\n    \n    Change-Id: I35b6c00d6ce7c6dd535932c97c071ae4d5f503e3\n',1,4,'Fujitsu'),(623453,9485,9485,'2017-01-04 17:23:46','2017-01-04 16:21:06','    Allow Hacking H401, H403 check\n    \n    Currently swift ignores a lot of the Hacking style guide. This patch\n    enables the H401 and H403 checks and fixes any violations. With this\n    we can get a little closer to following the OpenStack style guidelines.\n    \n    Change-Id: I5109a052f2ceb2e6a9a174cded62f4231156d39b\n',9,8,'IBM'),(623454,4075,4075,'2017-01-04 12:54:14','2017-01-03 16:10:42','    Fix flaky expirer probe test\n    \n    This does not address the underlying lp bug #1652323 with ssync that\n    makes ssync inconsistent with expired objects.\n    \n    Change-Id: Ia12dc27a12418637587c57ff4f5744d00c661691\n    Related-Bug: #1652323\n    Closes-Bug: #1653836\n',3,0,'Rackspace'),(624337,229,229,'2017-01-05 10:24:09','2017-01-05 10:24:09','    added a quote\n    \n    Change-Id: I69f92aa9af160e4db2d5eb1e92545fc8ae050538\n',3,0,'SwiftStack'),(624338,9247,9247,'2017-01-04 15:07:12','2017-01-04 14:43:47','    Donagh McCabe has been reassigned to different project.\n    \n    Change-Id: I8a55b2a2b0dc55c865a361783f516a04b06f6bfa\n',2,3,'HPE'),(625385,6260,6260,'2016-12-22 10:49:56','2016-12-22 10:49:56','    Removes unnecessary utf-8 encoding\n    \n    The following file(s) added utf-8 encoding but never used. So we can\n    remove them at all.\n    \n    test/functional/test_access_control.py\n    test/unit/common/middleware/crypto/test_keymaster.py\n    test/unit/obj/test_diskfile.py\n    \n    Change-Id: I00adc968872ebe9f9c0619a4e393e048c7c1a91e\n',0,4,'Fujitsu'),(626339,9515,9515,'2016-12-14 07:15:48','2016-12-14 06:25:54','    Update the tag for Swift tox test\n    \n    Change default py3x to py35 in tox.ini to support python3.5,\n    and fix the error when run tox test for Swfit.\n    \n    Closes-Bug: #1649773\n    \n    Change-Id: I8e26183ffe270518503da8b5aa394e99ae4cd8c6\n',1,1,'Linaro'),(626341,4094,4094,'2016-11-25 12:21:36','2016-11-16 18:18:44','    Add test for object updater user-agent header\n    \n    Adds a test to test_updater.py in follow-up to [1].\n    \n    [1] Related-Change: Ia624558395584457c718b311fe80e1a8406e22ad\n    \n    Change-Id: I4f943b2626972d096ad3aeed647c8166b3bdd934\n',72,39,'HPE'),(626343,8715,8715,'2016-09-27 15:01:41','2016-07-24 01:10:36','    For any part, only one replica can move in a rebalance\n    \n    With a min_part_hours of zero, it\'s possible to move more than one\n    replicas of the same part in a single rebalance.\n    \n    This change in behavior only effects min_part_hour zero rings, which\n    are understood to be uncommon in production mostly because of this\n    very specific and strange behavior of min_part_hour zero rings.\n    \n    With this change, no matter how small your min_part_hours it will\n    always require at least N rebalances to move N part-replicas of the\n    same part.\n    \n    To supplement the existing persisted _last_part_moves structure to\n    enforce min_part_hours, this change adds a _part_moved_bitmap that\n    exists only during the life of the rebalance, to track when rebalance\n    moves a part in order to prevent another replicas of the same part\n    from being moved in the same rebalance.\n    \n    Add authors: Clay Gerrard, clay.gerrard@gmail.com\n                 Christian Schwede, cschwede@redhat.com\n    \n    Closes-bug: #1586167\n    \n    Change-Id: Ia1629abd5ce6e1b3acc2e94f818ed8223eed993a\n',63,13,'IBM'),(626345,4094,5599,'2017-01-12 18:03:10','2014-12-15 20:45:41','    Support last modified on listing containers\n    \n    For now, last modified timestamp is supported only on\n    object listing. (i.e. GET container)\n    \n    For example:\n    \n    GET container with json format results in like as:\n    \n    [{\"hash\": \"d41d8cd98f00b204e9800998ecf8427e\", \"last_modified\":\n    \"2015-06-10T04:58:23.460230\", \"bytes\": 0, \"name\": \"object\",\n    \"content_type\": \"application/octet-stream\"}]\n    \n    However, container listing (i.e. GET account) shows just a dict\n    consists of (\"name\", \"bytes\", \"name\") for each container.\n    \n    For example:\n    \n    GET accounts with json format result in like as:\n    \n    [{\"count\": 0, \"bytes\": 0, \"name\": \"container\"}]\n    \n    This patch is for supporting last_modified key in the container\n    listing results as well as object listing like as:\n    \n    [{\"count\": 0, \"bytes\": 0, \"name\": \"container\", \"last_modified\":\n    \"2015-06-10T04:58:23.460230\"}]\n    \n    This patch is changing just output for listing. The original\n    timestamp to show the last modified is already in container table\n    of account.db as a \"put_timestamp\" column.\n    \n    Note that this patch *DOESN\'T* change the put_timestamp semantics.\n    i.e. the last_modified timestamp will be changed only at both PUT\n    container and POST container.\n    (PUT object doesn\'t affect the timestamp)\n    \n    Note that the tuple format of returning value from\n    swift.account.backend.AccountBroker.list_containers is now\n    (name, object_count, bytes_used, put_timestamp, 0)\n    \n    * put_timestamp is added *\n    \n    Original discussion was in working session at Vancouver Summit.\n    Etherpads are around here:\n    \n    https://etherpad.openstack.org/p/liberty-swift-contributors-meetup\n    https://etherpad.openstack.org/p/liberty-container-listing-update\n    \n    DocImpact\n    \n    Change-Id: Iba0503916f1481a20c59ae9136436f40183e4c5b\n',136,51,'NTT'),(626347,4094,4094,'2017-01-12 18:09:06','2017-01-12 18:04:40','    Trivial follow up to addition of last modified in container listings\n    \n    Trivial fixes in follow up to [1]\n    \n    - give container unique timestamps in listing test\n    - remove accidental line duplication\n    - add missing last modified time assertion\n    \n    [1] Related-Change: Iba0503916f1481a20c59ae9136436f40183e4c5b\n    \n    Change-Id: Ia1e9f292c62197f1f19e86936c8d05e6cff131be\n',9,8,'HPE'),(626349,5599,5599,'2017-01-12 17:44:10','2017-01-12 17:44:10','    Make timestamp setting to be consistent in test loop\n    \n    This is a kind of the follow-up patch\n    https://review.openstack.org/#/c/419579\n    \n    And I\'d address one more my mistake with this patch, that is\n    inconsistent timestamp setting between\n    test_GET_limit_marker_json and test_GET_limit_marker_xml\n    \n    Change-Id: Ia2e0c62c6146c0d79c7de2de82fe13ec4dd98165\n',3,2,'NTT'),(626351,4075,869,'2017-01-13 01:13:29','2017-01-12 13:42:57','    Fix download resumption for new SLOs.\n    \n    SLOs created after commit 2d25fe6ad3573b2a06b6b3e5e66493d7b0c55693\n    have an explicit X-Object-Sysmeta-SLO-Size attribute. Fetching one of\n    those with a range like \"bytes=100-\" would crash and cause a 500. This\n    commit fixes the crash.\n    \n    Closes-Bug: #1656147\n    \n    Change-Id: I174ed98b4f01a5943af12177d6f8c3586f049778\n',40,1,'SwiftStack'),(627075,5254,5254,'2017-01-13 10:51:34','2017-01-13 10:27:11','    add swift_source to PUT request part of COPY\n    \n    Change-Id: I1287c02e26f6c52831d3ffbe7b07f2c1f73a8b3c\n    Signed-off-by: Thiago da Silva <thiago@redhat.com>\n',5,1,'Red Hat'),(627076,4075,4094,'2017-01-12 19:08:50','2017-01-12 15:44:45','    Test current reclaim_age handling\n    \n    This is just tests to demonstrate the current behavior - and provide\n    context of behavioral differences/consistency in the related change.\n    \n    See the related change for context.\n    \n    The related change slightly modifies the outcome of the\n    reclaim/REPLICATE test.\n    \n    The related change has no effect on the config handling.\n    \n    The related change greatly simplfies the reclaim_age option\n    cleanup_ondisk_files plumbing tests.\n    \n    Related-Change-Id: I2b9189941ac29f6e3be69f76ff1c416315270916\n    Co-Author: Clay Gerrard <clay.gerrard@gmail.com>\n    \n    Change-Id: I5b5f90bb898a335e6336f043710a05a44e3b810f\n',206,0,'HPE'),(627078,4094,4094,'2017-01-13 15:06:56','2017-01-13 14:44:04','    Fix object server tests to include content-type headers\n    \n    In [1] it was necessary to override the monkey patching\n    of mimetools so that mimetools would apply a default\n    Content-Type=text/plain header when missing from object server\n    requests. Otherwise some tests fail due to Content-Type=None.\n    \n    This patch fixes the fragile tests by adding a Content-Type header,\n    and thus removes the need to override the mimetool monkey patching.\n    This is closer to the real world in which mimetools is patched in\n    the object server and PUT requests should have a Content-Type.\n    \n    Drive-by fix some typos and apply config assertions to all policies.\n    \n    [1] Related-Change: I5b5f90bb898a335e6336f043710a05a44e3b810f\n    \n    Change-Id: I4c5bca42f753be4165cb731b8e3957eb4cdd28d5\n',24,19,'HPE'),(627699,2470,2470,'2017-01-11 21:04:25','2017-01-11 18:20:08','    Tighten the move-one-replica test\n    \n    We only need one additional rebalance to get something well-balanced\n    and well-dispersed.\n    \n    Drive-by to break a little earlier in the builder after we move a part.\n    \n    Change-Id: I78b86292c98be5e247a694b9db71d9267e1a0a22\n',13,13,'SwiftStack'),(627701,7470,7470,'2017-01-16 15:16:37','2017-01-16 15:16:37','    Removed redundant \'is\'\n    \n    Change-Id: I7442f2056d7dbbd83d514eb21564697af99e2068\n',2,2,'Fujitsu'),(627703,4075,4075,'2017-01-13 16:24:33','2016-12-01 06:17:20','    Cleanup tests from empty suffix quarantined db fix\n    \n    Remove some cruft and cleanup tests from related change.\n    \n    Related-Change: I721fa5fe9a7ae22eead8d5141f93e116847ca058\n    Change-Id: Id3addaca9057569a535e4df1c4209a0ddad84d20\n',70,161,'Rackspace'),(627705,161,161,'2017-01-16 11:22:08','2017-01-16 11:22:08','    Remove broken links\n    \n    The Install Guides for Kilo and older are not published anymore, all\n    these links give a 404. Remove the links for these outdated versions.\n    \n    Change-Id: I73e96b0ca4840d83c4f3561b4ffb08510d61c8d7\n',0,21,'SUSE'),(627707,4075,4086,'2017-01-13 03:10:47','2016-07-25 20:10:44','    Move documented reclaim_age option to correct location\n    \n    The reclaim_age is a DiskFile option, it doesn\'t make sense for two\n    different object services or nodes to use different values.\n    \n    I also driveby cleanup the reclaim_age plumbing from get_hashes to\n    cleanup_ondisk_files since it\'s a method on the Manager and has access\n    to the configured reclaim_age.  This fixes a bug where finalize_put\n    wouldn\'t use the [DEFAULT]/object-server configured reclaim_age - which\n    is normally benign but leads to weird behavior on DELETE requests with\n    really small reclaim_age.\n    \n    There\'s a couple of places in the replicator and reconstructor that\n    reach into their manager to borrow the reclaim_age when emptying out\n    the aborted PUTs that failed to cleanup their files in tmp - but that\n    timeout doesn\'t really need to be coupled with reclaim_age and that\n    method could have just as reasonably been implemented on the Manager.\n    \n    UpgradeImpact: Previously the reclaim_age was documented to be\n    configurable in various object-* services config sections, but that did\n    not work correctly unless you also configured the option for the\n    object-server because of REPLICATE request rehash cleanup.  All object\n    services must use the same reclaim_age.  If you require a non-default\n    reclaim age it should be set in the [DEFAULT] section.  If there are\n    different non-default values, the greater should be used for all object\n    services and configured only in the [DEFAULT] section.\n    \n    If you specify a reclaim_age value in any object related config you\n    should move it to *only* the [DEFAULT] section before you upgrade.  If\n    you configure a reclaim_age less that your consistency window you are\n    likely to be eaten by a Grue.\n    \n    Closes-Bug: #1626296\n    \n    Change-Id: I2b9189941ac29f6e3be69f76ff1c416315270916\n    Co-Authored-By: Clay Gerrard <clay.gerrard@gmail.com>\n',81,88,'Intel'),(627709,5599,5599,'2017-01-16 06:12:23','2017-01-16 01:31:05','    Fix unnecessary for-loop and mis docs\n    \n    This is follow-up for https://review.openstack.org/#/c/419107\n    to address:\n    \n    - Remove unnecessary for-loop block that breaks the end of the loop\n      always\n    - Correct mis document says \"two more times\" but actually does only \"one\n      more time\"\n    \n    Change-Id: I3d76275afc6448709a4b3588259e085bce7fa21d\n',14,14,'NTT'),(627711,4086,4086,'2016-12-23 01:40:54','2016-10-26 20:57:51','    Confirm receipt of SLO PUT with etag\n    \n    With a multipart-manifest PUT request, if client sends the md5 of the\n    segments\' etags, a 422 Unprocessable Entity response is returned. This\n    patch fixes that and confirms the etag\n    \n    Change-Id: I4598a2a3f16ca8727bb07bbb6d8efcfcae777796\n    Closes-Bug: #1213200\n    Co-Authored-By: Tim Burke <tim@swiftstack.com>\n',127,19,'Intel');
/*!40000 ALTER TABLE `scmlog` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-09-03 18:13:33
